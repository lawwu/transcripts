
[00:00:00.000 --> 00:00:15.000]   .
[00:00:15.000 --> 00:00:16.000]   Hello, everyone.
[00:00:16.000 --> 00:00:19.000]   Thank you so much for being here, for sticking around for this talk.
[00:00:19.000 --> 00:00:23.000]   I'm going to be talking about optimizing influence for voice models in production.
[00:00:23.000 --> 00:00:30.000]   I'm going to be talking mostly about the runtime component, but also just a little bit on the infrastructure side.
[00:00:30.000 --> 00:00:32.000]   Just a quick introduction.
[00:00:32.000 --> 00:00:33.000]   I'm Philip from Base10.
[00:00:33.000 --> 00:00:36.000]   Base10 is a model influence platform.
[00:00:36.000 --> 00:00:41.000]   We run production workloads for a wide variety of AI-native startups and enterprises.
[00:00:41.000 --> 00:00:43.000]   I'm based here in SF.
[00:00:43.000 --> 00:00:44.000]   I actually just moved here.
[00:00:44.000 --> 00:00:45.000]   It's really awesome.
[00:00:45.000 --> 00:00:50.000]   My favorite part about being in SF is much better sports teams than I had in Chicago.
[00:00:50.000 --> 00:00:57.000]   And one of my favorite voice models is Orpheus TTS, which we're going to be talking about a whole bunch today.
[00:00:57.000 --> 00:01:00.000]   Quick agenda.
[00:01:00.000 --> 00:01:02.000]   So we're going to talk about TTS model architecture.
[00:01:02.000 --> 00:01:07.000]   Like, what is a text-to-speech model actually when you look on the config in Hugging Face?
[00:01:07.000 --> 00:01:10.000]   What sort of performance metrics are we looking at?
[00:01:10.000 --> 00:01:13.000]   What sort of optimization techniques can we do to make the model better?
[00:01:13.000 --> 00:01:16.000]   How do we measure whether or not we succeeded?
[00:01:16.000 --> 00:01:29.000]   And then finally, what can we do on the infrastructure and client code to not shoot ourselves in the foot after doing a ton of runtime work and then just adding all that latency back by not doing our client code correctly?
[00:01:29.000 --> 00:01:31.000]   So, architecture.
[00:01:31.000 --> 00:01:36.000]   This is one of the things I've been learning this year, which has been pretty great to realize.
[00:01:36.000 --> 00:01:39.000]   It's made life a lot simpler at the runtime level.
[00:01:39.000 --> 00:01:40.000]   Now, this is wrong.
[00:01:40.000 --> 00:01:46.000]   Like, the thing up here that I'm going to say is that, like, everything is an LLM.
[00:01:46.000 --> 00:01:48.000]   That is wrong, but it's useful.
[00:01:48.000 --> 00:01:50.000]   There's kind of like two types of models.
[00:01:50.000 --> 00:01:55.000]   There's auto-aggressive transformers models that are LLM or very LLM-adjacent.
[00:01:55.000 --> 00:01:56.000]   You see this in embeddings.
[00:01:56.000 --> 00:01:59.000]   You see this in transcription with stuff like whisper.
[00:01:59.000 --> 00:02:01.000]   TTS is another example.
[00:02:01.000 --> 00:02:07.000]   You also have the more like diffuser image type models, which is like a very different optimization problem.
[00:02:07.000 --> 00:02:21.000]   But something that's cool is because TTS models are so architecturally similar to LLMs or in many cases derived directly from LLMs, we can access the rich ecosystem of LLM tooling and use it to make TTS models better.
[00:02:22.000 --> 00:02:27.000]   So, the TTS model that we're going to be using and as an example all day is Orpheus TTS.
[00:02:27.000 --> 00:02:29.000]   We're using it for two reasons.
[00:02:29.000 --> 00:02:30.000]   Okay, three reasons.
[00:02:30.000 --> 00:02:33.000]   The two reasons are because it's open source and it's really good.
[00:02:33.000 --> 00:02:37.000]   And also, I think Elias and Amu and everyone at Canopy Labs is really awesome.
[00:02:37.000 --> 00:02:41.000]   So, that's the third reason we're talking about their model.
[00:02:41.000 --> 00:02:45.000]   But it's a Llama 3.2 3B backbone.
[00:02:45.000 --> 00:02:51.000]   So, like, if you look at this is the literal like config from hugging face copy and pasted onto the screen.
[00:02:51.000 --> 00:02:54.000]   It's a Llama for causal LM architecture.
[00:02:54.000 --> 00:02:59.000]   And so, because of that we can do like all of our normal Llama stuff to this model and make it faster.
[00:02:59.000 --> 00:03:01.000]   They did a couple things.
[00:03:01.000 --> 00:03:03.000]   I mean, they did a bunch of things to make it work.
[00:03:03.000 --> 00:03:05.000]   But a couple things that are relevant here.
[00:03:05.000 --> 00:03:10.000]   There is a larger vocab size because you need all the speech specific tokens like laugh and stuff.
[00:03:10.000 --> 00:03:14.000]   And then they also extended the context links with rope scaling.
[00:03:14.000 --> 00:03:17.000]   So, we've got to make sure everything we do supports that.
[00:03:17.000 --> 00:03:19.000]   So, performance metrics.
[00:03:19.000 --> 00:03:21.000]   Like, what do we want to actually do here?
[00:03:21.000 --> 00:03:25.000]   We think about LLM metrics a little bit here.
[00:03:25.000 --> 00:03:28.000]   We just look at them a little bit differently.
[00:03:28.000 --> 00:03:31.000]   So, in LLMs you talk about time to first token.
[00:03:31.000 --> 00:03:35.000]   Now we're talking about time to first byte or sometimes even time to first sentence.
[00:03:35.000 --> 00:03:41.000]   We need a little bit more of a useful output from the model before we really start feeling good about our response time.
[00:03:41.000 --> 00:03:46.000]   We do think about tokens per second, although we're going to think about it differently, which I'll explain later.
[00:03:46.000 --> 00:03:51.000]   And we mostly think about throughput, which is, you know, how many requests are we able to serve at a given time.
[00:03:51.000 --> 00:03:59.000]   So, on that, you know, goals perspective, if you ask me, like, hey, Philip, how do you want to optimize Llama in general?
[00:03:59.000 --> 00:04:01.000]   I'll say, well, we want a lot of TPS.
[00:04:01.000 --> 00:04:02.000]   We want 100.
[00:04:02.000 --> 00:04:03.000]   We want 500 TPS.
[00:04:03.000 --> 00:04:05.000]   We want 1,000 tokens per second.
[00:04:05.000 --> 00:04:07.000]   We want as many tokens per second as we can get.
[00:04:07.000 --> 00:04:10.000]   With voice models, you actually don't necessarily need that.
[00:04:10.000 --> 00:04:16.000]   In many cases, you only want as many tokens per second as you need for a real-time stream.
[00:04:16.000 --> 00:04:22.000]   For Orpheus, that's like 83 tokens per second, which for like a 3 billion per LLM is nothing.
[00:04:22.000 --> 00:04:32.000]   But what we actually want to do instead is we want to, once we hit that mark, start optimizing for time to first byte so that our latency is really good
[00:04:32.000 --> 00:04:37.000]   and start optimizing for concurrency so that we can get more connections and spend less on GPUs.
[00:04:39.000 --> 00:04:48.000]   So, our goal in general, if all of these very nice and definitely not AI-generated people, all the different, like, voices that our model is capable of creating,
[00:04:48.000 --> 00:04:55.000]   these are all the voice agents that we're running, how can we make all of these people fit on one or even less than one GPU?
[00:04:55.000 --> 00:04:57.000]   That's the goal.
[00:04:57.000 --> 00:04:58.000]   So, how do we do it?
[00:04:58.000 --> 00:05:00.000]   So, how do we do it?
[00:05:00.000 --> 00:05:01.000]   Bunch of ways.
[00:05:01.000 --> 00:05:03.000]   So, first off, it's an LLM.
[00:05:03.000 --> 00:05:12.000]   If you are running an LLM with like VLLM, for example, you can generally, in many cases, get better performance with TensorRT LLM.
[00:05:12.000 --> 00:05:15.000]   TensorRT is something that we've been using at Base10 a lot.
[00:05:15.000 --> 00:05:21.000]   I like to joke that I'm the unofficial marketing department for TensorRT LLM because of how much I talk about it.
[00:05:21.000 --> 00:05:22.000]   But it really is fast.
[00:05:22.000 --> 00:05:27.000]   It can be a little bit complicated from a developer experience perspective to get up and running with it.
[00:05:27.000 --> 00:05:30.000]   But once you are up and running, it works really well.
[00:05:30.000 --> 00:05:33.000]   We can also just like quantize the model.
[00:05:33.000 --> 00:05:36.000]   Even though it's small, you can always make it faster by making it smaller.
[00:05:36.000 --> 00:05:41.000]   With Hopper architecture, we quantize this model to FP8 pretty successfully.
[00:05:41.000 --> 00:05:46.000]   I know usually quantizing really small models like this can lead to performance degradation.
[00:05:46.000 --> 00:05:51.000]   But for this model, it's working pretty well in FP8, even when we quantize the KV cache.
[00:05:51.000 --> 00:05:57.000]   And then a lot of the other runtime stuff is actually more like audio specific than it is LLM specific.
[00:05:57.000 --> 00:06:03.000]   So one of the big challenges that we don't have with LLMs, which are just parsing nice convenient bits of text back and forth,
[00:06:03.000 --> 00:06:07.000]   is you have your audio, you have your audio codec, you have your decoding, all that kind of stuff.
[00:06:07.000 --> 00:06:14.000]   So we use snack, which I was very disappointed to learn is not an actual tasty snack, but an audio decoder.
[00:06:14.000 --> 00:06:16.000]   And we actually use torch compile.
[00:06:16.000 --> 00:06:25.000]   And torch compile, you might be used to running on, you know, a model, compiling your model weights to make your runtime faster.
[00:06:25.000 --> 00:06:35.000]   We're actually using the same kind of system with torch compile and with PyTorch inference mode on the audio decoder and running that on the GPU.
[00:06:35.000 --> 00:06:43.000]   We make sure that all the token batching, token level batching works well throughout the entire pipeline and support multiple streaming protocols.
[00:06:43.000 --> 00:06:47.000]   Yeah, so these are the engine settings that you would need.
[00:06:47.000 --> 00:07:03.000]   You've got the, you know, quantization type of FP8KV, the FP8Context FMHA in order to, you know, support the, support the hopper architecture and the quantization there.
[00:07:03.000 --> 00:07:09.000]   And here's a quick code sample of, I got a little ahead of my slides, I guess.
[00:07:09.000 --> 00:07:12.000]   Here's a little quick code sample of the audio decoding.
[00:07:12.000 --> 00:07:16.000]   So, we are basically, you know, batching.
[00:07:16.000 --> 00:07:22.000]   Usually, we would talk about continuous batching when we're talking about LLM optimization.
[00:07:22.000 --> 00:07:24.000]   We want to package all those tokens together.
[00:07:24.000 --> 00:07:26.000]   In this case, we are doing dynamic batching.
[00:07:26.000 --> 00:07:33.000]   So, we're trying to pack as much into a batch as we can, but every 15 milliseconds, we're going to shoot it out.
[00:07:33.000 --> 00:07:35.000]   You've got that timeout set up here.
[00:07:35.000 --> 00:07:41.000]   If you want to trade off for a little bit of latency for more throughput, you can make that batch bigger.
[00:07:41.000 --> 00:07:47.000]   So, yeah, we don't have token level continuous batching yet here, but we do have dynamic batching, which is going to get you pretty close.
[00:07:47.000 --> 00:07:59.000]   And because of this, actually, something that I was surprised about when we profiled this is that our TTS implementation with Orpheus is actually, in many cases, CPU bound.
[00:07:59.000 --> 00:08:01.000]   Which is kind of where you want to be.
[00:08:01.000 --> 00:08:05.000]   You can throw more CPUs at a resource pretty efficiently.
[00:08:05.000 --> 00:08:13.000]   Even though the next token prediction and the audio decoding are both on the GPU, both of those loops hit the CPU at different points.
[00:08:13.000 --> 00:08:18.000]   And that can actually be the bottleneck in the number of simultaneous streams that we're able to create.
[00:08:18.000 --> 00:08:21.000]   So, how'd we do?
[00:08:21.000 --> 00:08:26.000]   Like, I just showed you a lot of code and talked through it really quickly without really getting into depth.
[00:08:26.000 --> 00:08:28.000]   That could all just be smoke and mirrors.
[00:08:28.000 --> 00:08:31.000]   Let's see if it's actually any faster.
[00:08:31.000 --> 00:08:43.000]   So, again, the number one thing is going to be simultaneous streams because you want to be able to be very cost efficient and use fewer GPU resources to serve a, you know, larger stream,
[00:08:43.000 --> 00:08:44.000]   large amount of traffic.
[00:08:44.000 --> 00:08:51.000]   And in this case, a base implementation, I don't necessarily want to, like, call anyone out because there's a lot of really good ways to run this model.
[00:08:51.000 --> 00:08:54.000]   You can get really good performance with VLLM.
[00:08:54.000 --> 00:08:57.000]   But this is just kind of like the off the shelf.
[00:08:57.000 --> 00:09:01.000]   Just take it, run it completely standard implementation.
[00:09:01.000 --> 00:09:11.000]   So, with variable traffic, we're able to support 16 simultaneous streams and with constant traffic, 24 simultaneous streams on an H100 MIG.
[00:09:11.000 --> 00:09:13.000]   So, this is actually half an H100 GPU.
[00:09:13.000 --> 00:09:23.000]   It's a skew that we do a lot because it's really good for these small models where you want the hopper performance, the hopper architecture, uplift, and tensor RT LLM, the FP8 support.
[00:09:23.000 --> 00:09:29.000]   But you don't want to pay for, like, an entire 80 gigabyte GPU for just a 3 billion parameter model.
[00:09:29.000 --> 00:09:34.000]   So, you know, we're seeing much better concurrency.
[00:09:34.000 --> 00:09:42.000]   So, if you kind of, like, price that out with, like, our list prices and stuff, you can get, you know, a few cents per hour of conversation,
[00:09:42.000 --> 00:09:52.000]   which is going to be, you know, substantially better than if you're -- if you have the volume for it, it's going to be substantially better than paying for a sort of, like, per token type API.
[00:09:52.000 --> 00:09:57.000]   But, okay, sure, maybe it's cheap at scale, but is it fast?
[00:09:57.000 --> 00:09:58.000]   Yes, it's fast.
[00:09:58.000 --> 00:10:11.000]   So, with the, you know, with the TRT implementation on the MIGs and on the H100s, we can actually get all the way down to 150 millisecond time to first bytes in, like, real-world testing that we've done.
[00:10:11.000 --> 00:10:16.000]   Now, that -- we'll talk in a minute, like, that doesn't mean your whole pipeline is that fast.
[00:10:16.000 --> 00:10:27.000]   That's just, like, one part of the pipeline, but it's important because, you know, you definitely don't want to be spending a lot of time waiting around for that first token.
[00:10:27.000 --> 00:10:39.000]   So, to kind of transition into that discussion of, like, what can go wrong here, like, you have this graph and you have this, you know, nice config that I had up here.
[00:10:39.000 --> 00:10:46.000]   And you're, like, all right, cool, I'm going to take this, I'm going to put it in production, and I'm going to see the results that he put up on screen.
[00:10:46.000 --> 00:10:47.000]   And it's going to work great.
[00:10:47.000 --> 00:10:49.000]   And the answer is no, it's not.
[00:10:49.000 --> 00:10:50.000]   It's a little bit harder than that.
[00:10:50.000 --> 00:10:59.000]   So, the thing is, like, non-run-time factors when we get -- especially with these small models and with these multimodal systems --
[00:10:59.000 --> 00:11:03.000]   can actually be, like, way more important than your runtime.
[00:11:03.000 --> 00:11:06.000]   And that's your infrastructure and your client code.
[00:11:06.000 --> 00:11:16.000]   Because, you know, I showed here -- all right, maybe I got it, you know, I cut the runtime in half from the base implementation.
[00:11:16.000 --> 00:11:18.000]   I saved a couple hundred milliseconds.
[00:11:18.000 --> 00:11:26.000]   Very easy to add those couple hundred milliseconds back and well beyond that by, you know, sending my query to New York instead of California.
[00:11:26.000 --> 00:11:32.000]   Or by having to establish a session every time I, you know, run my client code.
[00:11:32.000 --> 00:11:36.000]   So, a few, like, pitfalls to avoid.
[00:11:36.000 --> 00:11:46.000]   Number one, like, if you go in, you know, our model library or something, and we're just trying to get you started very quickly with this kind of inference sample,
[00:11:46.000 --> 00:11:55.000]   it's basically going to be, hey, use requests, make a stream, stream it to your local computer, and start, you know, playing it on FFMPG or something.
[00:11:55.000 --> 00:12:01.000]   The issue is that here, like, the requests are going to be sent sequentially, and you need to create a new session every time.
[00:12:01.000 --> 00:12:02.000]   That takes time.
[00:12:02.000 --> 00:12:09.000]   So, if you're using this in production, you want a code sample -- by the way, this is all up on our GitHub --
[00:12:09.000 --> 00:12:17.000]   you'll want a code sample that looks a lot more like a benchmarking script, where you're using a multiprocess pool.
[00:12:17.000 --> 00:12:25.000]   You're sharing the session between all of these different requests, and you're actually sending traffic with the concurrency
[00:12:25.000 --> 00:12:31.000]   that allows you to, you know, saturate this benchmark with, you know, the multiple concurrent requests.
[00:12:31.000 --> 00:12:40.000]   Finally, both of these code samples, they do sit on top of HTTP and HTTP streaming.
[00:12:40.000 --> 00:12:45.000]   In many cases, if you're implementing voice pipelines, you're going to use something like LiveKit or PipeCat or something,
[00:12:45.000 --> 00:12:48.000]   and you're also potentially going to be using a different protocol.
[00:12:48.000 --> 00:12:53.000]   You're going to be using something like WebSockets or GRPC, which we do have support for.
[00:12:53.000 --> 00:13:02.000]   And finally, I wanted to leave you on the thought that these, you know, these models are only one part of a voice agent pipeline.
[00:13:02.000 --> 00:13:10.000]   So, like, we can spend a lot more than 15 minutes actually talking about, like, the very detailed implementation mechanics
[00:13:10.000 --> 00:13:16.000]   of making your voice model faster, of, you know, we haven't even touched on stuff like fine-tuning the model,
[00:13:16.000 --> 00:13:24.000]   you know, custom voices, zero-shot voice cloning, being able to, you know, remove static and popping at the end of messages.
[00:13:24.000 --> 00:13:30.000]   There's a lot of work to do just on the voice part, but it really only is one-third of the problem.
[00:13:30.000 --> 00:13:34.000]   When I think about voice agents, I think about three parts: listening, thinking, talking.
[00:13:34.000 --> 00:13:42.000]   And the most important thing here is, again, while you can have great runtimes, the infrastructure to connect these three together
[00:13:42.000 --> 00:13:51.000]   is really what's going to determine your latency. Being able to go from one model to have the next one running in the same data center
[00:13:51.000 --> 00:13:57.000]   with, you know, minimal, like, minimal network overhead in between the two.
[00:13:57.000 --> 00:14:03.000]   Even things as simple as not having to go off and do a hairpin at the DNS level and come back.
[00:14:03.000 --> 00:14:09.000]   If that saves you 10 milliseconds on every step and your voice pipeline has this and, you know, a chunking algorithm,
[00:14:09.000 --> 00:14:18.000]   it's got an interruption model, and so you end up having four or five steps, well, they're just hairpinning alone is costing you 40 or 50 milliseconds.
[00:14:18.000 --> 00:14:22.000]   And that can be 10% of your SLA for a voice model.
[00:14:22.000 --> 00:14:30.000]   So, yeah, that's my main point here is that as much fun as it is to talk about the runtime stuff and as much work as we do there,
[00:14:30.000 --> 00:14:36.000]   the infrastructure and the client implementation is equally important, if not more so.
[00:14:36.000 --> 00:14:39.000]   Anyway, thank -- so, yeah, that's the review.
[00:14:39.000 --> 00:14:41.000]   Thank you all for coming through.
[00:14:41.000 --> 00:14:46.000]   I have -- we're doing an event next week at Fogo de Chao, which is going to be pretty fun.
[00:14:46.000 --> 00:14:53.000]   I'm going to be talking in more detail about building some systems with open source models, and there's also going to be a lot of steak.
[00:14:53.000 --> 00:14:58.000]   So, definitely come on through if you're interested, and I'm on Twitter.
[00:14:58.000 --> 00:14:59.000]   I'm on LinkedIn.
[00:14:59.000 --> 00:15:00.000]   So, it's base 10.
[00:15:00.000 --> 00:15:03.000]   Hit me up if you have any questions about this or anything else model performance.
[00:15:03.000 --> 00:15:06.000]   Thank you so much, and I'll let you go eight seconds early.
[00:15:06.000 --> 00:15:07.000]   Thank you.
[00:15:07.000 --> 00:15:07.000]   Thank you.
[00:15:07.000 --> 00:15:08.000]   Thank you.
[00:15:08.000 --> 00:15:09.000]   Thank you.
[00:15:09.000 --> 00:15:12.720]   I'll see you next time.

