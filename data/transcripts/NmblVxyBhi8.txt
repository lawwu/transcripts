
[00:00:00.000 --> 00:00:07.000]   .
[00:00:07.000 --> 00:00:08.000]   Hi, everyone.
[00:00:08.000 --> 00:00:09.000]   Thanks for coming.
[00:00:09.000 --> 00:00:12.000]   This is my talk, Agents at Scale Using Lane Graph.
[00:00:12.000 --> 00:00:15.000]   And today, I'd like to focus on thinking about scale
[00:00:15.000 --> 00:00:16.000]   in two different ways.
[00:00:16.000 --> 00:00:19.000]   The first kind of scale, I think, we're all familiar with.
[00:00:19.000 --> 00:00:22.000]   You know, as engineers, product builders,
[00:00:22.000 --> 00:00:24.000]   there's a sense of scale in which we want to make sure
[00:00:24.000 --> 00:00:27.000]   our services, our apps, are able to process tons of data,
[00:00:27.000 --> 00:00:29.000]   and it's performant.
[00:00:29.000 --> 00:00:32.000]   The second kind of scale, I think, is a little bit more subtle.
[00:00:32.000 --> 00:00:36.000]   And what I'd like to focus a lot on in this presentation is,
[00:00:36.000 --> 00:00:41.000]   how can we scale the amount of the level of agentic adoption
[00:00:41.000 --> 00:00:44.000]   within our organizations and kind of make sure that everyone
[00:00:44.000 --> 00:00:46.000]   can generate the best ideas?
[00:00:46.000 --> 00:00:48.000]   So without further ado, let's get started.
[00:00:48.000 --> 00:00:53.000]   I'd like to start by showcasing LinkedIn's first-ever production agent.
[00:00:53.000 --> 00:00:56.000]   We built an agent called LinkedIn Hiring Assistant,
[00:00:56.000 --> 00:01:00.000]   and it's an agent that's specifically designed to help recruiters automate
[00:01:00.000 --> 00:01:03.000]   various parts of their process,
[00:01:03.000 --> 00:01:05.000]   and really to let them spend more time
[00:01:05.000 --> 00:01:08.000]   having meaningful conversations with candidates.
[00:01:08.000 --> 00:01:09.000]   So I'm going to play a video.
[00:01:09.000 --> 00:01:11.000]   It's going to go quite fast,
[00:01:11.000 --> 00:01:17.000]   but I promise I'll break it down step-by-step right after it finishes playing.
[00:01:17.000 --> 00:01:22.000]   The key thing here that I'd like to point out is precisely what we just saw.
[00:01:22.000 --> 00:01:23.000]   Again, I know it was fast.
[00:01:23.000 --> 00:01:27.000]   Precisely what we just saw where the agent does something in the background
[00:01:27.000 --> 00:01:30.000]   and after some period of time lets the recruiter know,
[00:01:30.000 --> 00:01:35.000]   lets the user know that it's finished processing and can return some data.
[00:01:35.000 --> 00:01:39.000]   So like I said before, let's go through this step-by-step.
[00:01:39.000 --> 00:01:42.000]   So what's highlighted here in the box is the recruiter starts off the process
[00:01:42.000 --> 00:01:45.000]   by describing the kind of job that they'd like to fill.
[00:01:45.000 --> 00:01:48.000]   In this case, they're looking for an experienced growth marketer,
[00:01:48.000 --> 00:01:51.000]   and they've attached, you know, various documents that kind of describe more
[00:01:51.000 --> 00:01:54.000]   about what the position they're actually trying to fill.
[00:01:54.000 --> 00:02:01.000]   Next, the agent will automatically generate different qualifications based off
[00:02:01.000 --> 00:02:04.000]   of what the kind of recruiter user initially inputted,
[00:02:04.000 --> 00:02:07.000]   but also based on the supplementary documents they provided.
[00:02:07.000 --> 00:02:12.000]   Next, the agent will take its time, let the recruiter know that,
[00:02:12.000 --> 00:02:16.000]   hey, I'm going to be working on this, and I'll come back to you after some period of time
[00:02:16.000 --> 00:02:20.000]   until finally the recruiter gets notified that there are different candidates
[00:02:20.000 --> 00:02:23.000]   that they can review, and finally if they click on that,
[00:02:23.000 --> 00:02:28.000]   they'll be taken to a detailed list view page where they can review the candidates
[00:02:28.000 --> 00:02:30.000]   that the agent has sourced.
[00:02:30.000 --> 00:02:35.000]   And so this really is, I think, if we look at kind of the different topics
[00:02:35.000 --> 00:02:37.000]   that have been discussed and interrupt so far,
[00:02:37.000 --> 00:02:40.000]   this is really kind of following the ambient agent pattern
[00:02:40.000 --> 00:02:44.000]   that different speakers and companies have adopted.
[00:02:44.000 --> 00:02:49.000]   So under the hood, what this looks like is a pretty traditional supervisor
[00:02:49.000 --> 00:02:52.000]   multi-agent architecture where there's a supervisor agent
[00:02:52.000 --> 00:02:57.000]   that coordinates between different sub-agents, and each sub-agent is allowed to interact
[00:02:57.000 --> 00:03:01.000]   with existing LinkedIn services, systems, via tool calling.
[00:03:01.000 --> 00:03:06.000]   As I'll share a bit more in this presentation, it's not just tool calling,
[00:03:06.000 --> 00:03:11.000]   we have something called skills, but like I said, I'll get to that when we get to that.
[00:03:11.000 --> 00:03:14.000]   So this is the overall plan for this talk here.
[00:03:14.000 --> 00:03:18.000]   First, I'd like to talk about how LinkedIn really standardized on using Python.
[00:03:18.000 --> 00:03:23.000]   Traditionally, we used Java to build all of our apps, but we decided with Gen.AI,
[00:03:23.000 --> 00:03:26.000]   we would take the bold move to just build everything in Python.
[00:03:26.000 --> 00:03:31.000]   Next, at the library level, I'll talk about how we did a bunch of research
[00:03:31.000 --> 00:03:35.000]   and vetted and finally incorporated different open source libraries
[00:03:35.000 --> 00:03:38.000]   and really built standard utils on top of the ones that we really liked.
[00:03:38.000 --> 00:03:41.000]   For example, LangChain and LangGraph.
[00:03:41.000 --> 00:03:45.000]   Next, if we zoom out a bit, I'll talk about how we built an app framework
[00:03:45.000 --> 00:03:50.000]   to make it really easy for teams to bank production-ready Python services.
[00:03:50.000 --> 00:03:53.000]   And I think we've been pretty successful so far.
[00:03:53.000 --> 00:03:59.000]   Over 20 teams used this framework, and I think this is honestly probably a lower estimate at this point.
[00:03:59.000 --> 00:04:04.000]   Over 30 services have been created to support Gen.AI product experiences on LinkedIn.
[00:04:04.000 --> 00:04:08.000]   And finally, if we kind of zoom out at an entire architecture level,
[00:04:08.000 --> 00:04:12.000]   at a system level, we invested into new distributed architecture
[00:04:12.000 --> 00:04:16.000]   to specifically support agentic modes of communication.
[00:04:16.000 --> 00:04:21.000]   So, let's start from the ground up, and I'll talk about why we chose Python.
[00:04:21.000 --> 00:04:25.000]   So, at a 10,000-foot view, these are the languages that we use here at LinkedIn.
[00:04:25.000 --> 00:04:31.000]   Up until, I would say, late 2022, Python was really --
[00:04:31.000 --> 00:04:35.000]   and I like to call it Python here -- Python we use mostly just for internal tooling,
[00:04:35.000 --> 00:04:39.000]   different internal productivity tools, but also big data applications,
[00:04:39.000 --> 00:04:42.000]   your kind of PySpark, offline jobs.
[00:04:42.000 --> 00:04:48.000]   But really, Java was used to build a vast, overwhelming majority of our business logic.
[00:04:48.000 --> 00:04:54.000]   And so, come late 2022, which was really LinkedIn's first foray into Gen.AI,
[00:04:54.000 --> 00:04:59.000]   we saw that, hey, we're already using Java for non-Gender.AI use cases.
[00:04:59.000 --> 00:05:01.000]   Let's just use Java for Gen.AI also.
[00:05:01.000 --> 00:05:03.000]   And some of you might be wincing.
[00:05:03.000 --> 00:05:05.000]   I can already anticipate that.
[00:05:05.000 --> 00:05:09.000]   So, at that time, we built some really basic apps.
[00:05:09.000 --> 00:05:13.000]   They are just, you know, simple prompts with basic prompt engineering,
[00:05:13.000 --> 00:05:17.000]   little to no rag, no conversational memory to speak of.
[00:05:17.000 --> 00:05:22.000]   And this was okay, and probably you've probably predicted this part,
[00:05:22.000 --> 00:05:24.000]   but it was okay until it really wasn't.
[00:05:24.000 --> 00:05:31.000]   What we saw was a lot of teams, they wanted to experiment with Python.
[00:05:31.000 --> 00:05:34.000]   They wanted to use Python for prompt engineering for the evaluations,
[00:05:34.000 --> 00:05:37.000]   but because of our stack, they were forced to build in Java
[00:05:37.000 --> 00:05:40.000]   and use that to build their services.
[00:05:40.000 --> 00:05:45.000]   So, not only was that a problem, the more fundamental problem that we faced
[00:05:45.000 --> 00:05:49.000]   was how do you experiment with the open source libraries,
[00:05:49.000 --> 00:05:53.000]   the open source community, if your stack is fundamentally non-Python.
[00:05:53.000 --> 00:05:56.000]   And as soon as there is that kind of language gap,
[00:05:56.000 --> 00:05:59.000]   then it becomes really difficult for teams, honestly,
[00:05:59.000 --> 00:06:04.000]   to innovate and iterate with the latest and greatest techniques.
[00:06:04.000 --> 00:06:07.000]   It seemed like, you know, every month, every week,
[00:06:07.000 --> 00:06:10.000]   there would be a new model being released, a new library,
[00:06:10.000 --> 00:06:13.000]   a new prompt engineering technique, a new protocol.
[00:06:13.000 --> 00:06:16.000]   And I'm sure all of you are acutely aware of this problem,
[00:06:16.000 --> 00:06:20.000]   that it's just, frankly, pretty hard to keep track
[00:06:20.000 --> 00:06:22.000]   of all the developments that's happening in the industry.
[00:06:22.000 --> 00:06:25.000]   It seems like there's something new being developed all the time.
[00:06:25.000 --> 00:06:29.000]   So, we took a step back, and we made a couple of key observations.
[00:06:29.000 --> 00:06:33.000]   First, you know, there's undeniable interest across the company,
[00:06:33.000 --> 00:06:38.000]   from teams all across different verticals that they want to use generative AI.
[00:06:38.000 --> 00:06:45.000]   We noticed that for generative AI, specifically, this Java/Python setup really wasn't working out.
[00:06:45.000 --> 00:06:51.000]   And finally, you know, we have to use -- we realized we had to use Python no matter what.
[00:06:51.000 --> 00:06:55.000]   Because at the end of the day, you know, we have to be on top of the latest industry trends,
[00:06:55.000 --> 00:07:02.000]   and make sure that we can, you know, make sure we're bringing those benefits into our stack internally.
[00:07:02.000 --> 00:07:05.000]   And so, we said, hey, let's make a bold bet.
[00:07:05.000 --> 00:07:08.000]   Let's use Python for the business logic, the engineering, the evals,
[00:07:08.000 --> 00:07:12.000]   and pretty much everything else that you would need to build a functional production application.
[00:07:12.000 --> 00:07:18.000]   And I would say we even took the next step further, which is, let's build a framework and make it the default.
[00:07:18.000 --> 00:07:25.000]   And specifically, make a framework so that teams don't have to guess about what's the right way to do things.
[00:07:25.000 --> 00:07:29.000]   Instead, they can use this framework and take out some of the guesswork for them.
[00:07:29.000 --> 00:07:31.000]   So, let me talk about exactly that.
[00:07:31.000 --> 00:07:35.000]   What was the service framework that we ended up building?
[00:07:35.000 --> 00:07:42.000]   At a high level, we used Python gRPC, and we used LinkedIn and Lingraph to model the core business logic.
[00:07:42.000 --> 00:07:48.000]   This isn't a talk about gRPC, so I won't go too much into detail why we chose gRPC.
[00:07:48.000 --> 00:07:52.000]   But at a high level, I listed just some of the features here that we really appreciated.
[00:07:52.000 --> 00:07:56.000]   Namely, its built-in streaming support was really awesome.
[00:07:56.000 --> 00:07:58.000]   Binary serialization is a big performance boost.
[00:07:58.000 --> 00:08:04.000]   As well as just the native cross-language features, which, if you recall the couple slides earlier,
[00:08:04.000 --> 00:08:06.000]   we use a ton of languages.
[00:08:06.000 --> 00:08:09.000]   So, having cross-language support was critical.
[00:08:09.000 --> 00:08:15.000]   So, here I've built a sample React agent using our application framework.
[00:08:15.000 --> 00:08:21.000]   So, as we see here, there's standard utilities for tool calling, highlighted in kind of the yellow there.
[00:08:21.000 --> 00:08:26.000]   Standard utilities for large language model inference using our internal inferencing stack.
[00:08:26.000 --> 00:08:30.000]   Standard utilities for conversational memory and checkpointing.
[00:08:30.000 --> 00:08:36.000]   And the key thing that I'd like to note here is that we use LinkedIn and Lingraph to tie all this stuff together.
[00:08:36.000 --> 00:08:41.000]   And really, LinkedIn and Lingraph form the core of each of our general VI apps.
[00:08:41.000 --> 00:08:47.000]   So, then, this leads to the question of the hour is, you know, why did we end up choosing LinkedIn and Lingraph
[00:08:47.000 --> 00:08:53.000]   over the sea of other kind of different alternatives to build and model our applications?
[00:08:53.000 --> 00:08:58.000]   The first thing that I'd like to say is that it's just plainly really easy to use, and I'm sure everyone in this room would agree here,
[00:08:58.000 --> 00:09:04.000]   that even what we saw was that Java engineers were able to pick it up really easily.
[00:09:04.000 --> 00:09:10.000]   Like, if you look at the syntax, you can pretty easily identify what's happening in the kind of this most basic construct here.
[00:09:10.000 --> 00:09:20.000]   And furthermore, through various community integrations, just like the community FICE implementation or the React agent pre-built from the Lingraph official repo,
[00:09:20.000 --> 00:09:24.000]   we were able to build non-trivial apps in days down from weeks.
[00:09:24.000 --> 00:09:31.000]   Which is, if you think about the number of teams that work on Generative VI across the company, this is, you know, weeks, months of time being saved across the board.
[00:09:31.000 --> 00:09:38.000]   And the second thing that we really appreciated, and I think we've heard similar themes from different speakers today,
[00:09:38.000 --> 00:09:43.000]   and that is the LingChain package and Lingraph package have really sensible interfaces.
[00:09:43.000 --> 00:09:48.000]   And so, we were able to model our internal infrastructure using these interfaces.
[00:09:48.000 --> 00:09:57.000]   For example, if we look at this chat model interface here, LinkedIn uses Azure OpenAI, but also uses on-premise large language models as well.
[00:09:57.000 --> 00:10:03.000]   So, teams, if they want to switch between model providers, they can do so with a couple lines of code, and that's that.
[00:10:03.000 --> 00:10:07.000]   So, if we zoom out, recall this diagram here.
[00:10:07.000 --> 00:10:10.000]   Essentially, what I've described is it allows us to build one of these boxes.
[00:10:10.000 --> 00:10:14.000]   But then, you might ask, how did we actually tie all these agents together?
[00:10:14.000 --> 00:10:24.000]   And so, the two problems that we identified, specifically with agentic setups, was that, one, agents can take a lot of time to process data.
[00:10:24.000 --> 00:10:31.000]   This leads into the whole ambient agent idea, where, how can we model long-running asynchronous flows within our infrastructural stack?
[00:10:31.000 --> 00:10:34.000]   And second is, agents can execute in parallel.
[00:10:34.000 --> 00:10:39.000]   And furthermore, the outputs of one agent might depend on the outputs of another agent.
[00:10:39.000 --> 00:10:42.000]   So, how can we make sure that things are done in the right order?
[00:10:42.000 --> 00:10:52.000]   This leads me into the penultimate section of my talk here, which is the new infrastructure that we built, and I'll call it, called our agent platform.
[00:10:52.000 --> 00:11:00.000]   So, the first part of our solution was, to model long-running asynchronous flows, we model this as precisely a messaging problem.
[00:11:00.000 --> 00:11:09.000]   And the reason why we chose messaging is because LinkedIn already has a really robust messaging service that serves countless members every day.
[00:11:09.000 --> 00:11:17.000]   And so, we extended this to also include agentic forms of communication, namely agent-to-agent messaging, but also user-to-agent messaging as well.
[00:11:17.000 --> 00:11:27.000]   We even built some nice things so that there's like a nearline flow where if messages get failed, they'll be automatically picked up and retried via a queuing system.
[00:11:27.000 --> 00:11:39.000]   So, then, that covers how agents can talk to each other, they can send messages to one another, but this doesn't cover how agents can actually make sure that tasks are done in the right order.
[00:11:39.000 --> 00:11:46.000]   So, the second part of this solution that we developed was to specifically build memory catered for agents.
[00:11:46.000 --> 00:12:00.000]   And so, our agentic memory, you'll probably see, I think you've seen themes of this from people outside the booths as well, is that there's kind of different forms of memory that the agent should be able to access.
[00:12:00.000 --> 00:12:03.000]   For us, it's memory is both scoped and layered.
[00:12:03.000 --> 00:12:11.000]   So, there's working memory, long-term memory, collective memory, and these each provide different functions that the agent can utilize to do the things that it needs to do.
[00:12:11.000 --> 00:12:15.000]   So, for example, for a new interaction, you'll probably just fill out working memory.
[00:12:15.000 --> 00:12:26.000]   But over time, as the agent has more interactions with a particular user or something like that, then more memory will be populated to long-term memory over time.
[00:12:26.000 --> 00:12:30.000]   So, now we've covered the arrows and the boxes.
[00:12:30.000 --> 00:12:32.000]   So, how do agents actually do things?
[00:12:32.000 --> 00:12:40.000]   Well, this kind of leads to what I was talking about before, where we've developed this notion of skills, which is like function calling in a lot of senses.
[00:12:40.000 --> 00:12:43.000]   But it deviates us from this notion in a couple of different ways.
[00:12:43.000 --> 00:12:48.000]   The first thing is that function calling is usually, you know, local to your box.
[00:12:48.000 --> 00:12:50.000]   But here, skills can really be anything.
[00:12:50.000 --> 00:12:55.000]   It can be RPC calls, database queries, prompts, and more importantly, other agents.
[00:12:55.000 --> 00:12:59.000]   And the second thing that I'd like to emphasize here is the how.
[00:12:59.000 --> 00:13:08.000]   Specifically, we let agents invoke skills synchronously, but also asynchronously, which we consider the different themes that we've talked about.
[00:13:08.000 --> 00:13:11.000]   The asynchronicity part is absolutely critical.
[00:13:11.000 --> 00:13:19.000]   And I'd like to think that we did a good job with the design here, because overall, this setup is pretty similar to MCP well before it was actually around.
[00:13:19.000 --> 00:13:25.000]   So, and finally, we took this skill concept and made it centralized.
[00:13:25.000 --> 00:13:41.000]   And so, we provided, we implemented a registry, so team services could expose skills and register them in a central place, so that then if an agent wants to access skills developed by another team, they can do so and discover these skills via this central registry.
[00:13:41.000 --> 00:13:44.000]   Let me walk you all through what a sample flow might look like.
[00:13:44.000 --> 00:13:50.000]   So, in this case, the supervisor agent tells the sourcing agent that I need help searching for a mid-level engineer.
[00:13:50.000 --> 00:13:53.000]   The sourcing agent will contact the skill registry.
[00:13:53.000 --> 00:13:58.000]   The skill registry will respond with a skill that it thinks is a good fit for the task.
[00:13:58.000 --> 00:14:03.000]   And then finally, the sourcing agent will execute this skill.
[00:14:03.000 --> 00:14:07.000]   And like I said before, this links to the core components that we've built, too.
[00:14:07.000 --> 00:14:11.000]   So, again, the emphasis being to make it really easy for agents to develop.
[00:14:11.000 --> 00:14:23.000]   And lastly, I could spend an entire hour on this topic, but we also build custom observability because agentic ways of execution require particular observability solutions.
[00:14:23.000 --> 00:14:27.000]   So, to wrap up here, I'd like to cover two things.
[00:14:27.000 --> 00:14:33.000]   First is I think a key emphasis that we've discovered over these past couple of years is to really invest in productivity.
[00:14:33.000 --> 00:14:40.000]   This space is moving incredibly fast, and if you want to make sure that you're kind of following the best practices,
[00:14:40.000 --> 00:14:46.000]   but also available to adapt to different conditions or changes in the product, you need to make sure that it's really easy for developers to build.
[00:14:46.000 --> 00:14:53.000]   And so, you can do this by standardizing patterns, making sure it's as easy for any developer to contribute as possible.
[00:14:53.000 --> 00:14:57.000]   And the second thing I'd like to emphasize is, at the end of the day, we're still building production software.
[00:14:57.000 --> 00:15:04.000]   You should still consider the usual things, availability, reliability, but also, again, observability is paramount.
[00:15:04.000 --> 00:15:06.000]   You can't fix what you can't observe.
[00:15:06.000 --> 00:15:11.000]   And really, to do this, you need robust evaluations with the things that people have talked about already.
[00:15:11.000 --> 00:15:14.000]   You should account for non-deterministic workload.
[00:15:14.000 --> 00:15:16.000]   So, that's all, and thank you.
[00:15:16.000 --> 00:15:17.000]   Thank you.
[00:15:17.000 --> 00:15:18.000]   Thank you.
[00:15:18.000 --> 00:15:19.000]   Thank you.
[00:15:19.000 --> 00:15:20.000]   Thank you.
[00:15:20.000 --> 00:15:20.000]   Thank you.
[00:15:20.000 --> 00:15:49.980]   Thank you.

