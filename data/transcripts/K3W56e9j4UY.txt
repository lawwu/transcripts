
[00:00:00.000 --> 00:00:07.660]   And what was the first programming language, if I may ask it this way, that you fell in
[00:00:07.660 --> 00:00:09.740]   love with?
[00:00:09.740 --> 00:00:12.460]   I think I'll call it 60.
[00:00:12.460 --> 00:00:19.600]   And after that, I remember Snowball.
[00:00:19.600 --> 00:00:21.640]   I remember Fortran.
[00:00:21.640 --> 00:00:22.980]   Didn't fall in love with that.
[00:00:22.980 --> 00:00:24.720]   I remember Pascal.
[00:00:24.720 --> 00:00:26.220]   Didn't fall in love with that.
[00:00:26.220 --> 00:00:29.560]   It all got in the way of me.
[00:00:29.560 --> 00:00:33.760]   And then I discovered Assembler, and that was much more fun.
[00:00:33.760 --> 00:00:38.120]   And from there, I went to microcode.
[00:00:38.120 --> 00:00:44.360]   So you were drawn to the... you found the low-level stuff beautiful.
[00:00:44.360 --> 00:00:51.280]   I went through a lot of languages, and then I spent significant time in Assembler and
[00:00:51.280 --> 00:00:52.900]   microcode.
[00:00:52.900 --> 00:00:55.480]   That was sort of the first really profitable things.
[00:00:55.480 --> 00:00:58.920]   I paid for my master's, actually.
[00:00:58.920 --> 00:01:02.880]   And then I discovered Simula, which was absolutely great.
[00:01:02.880 --> 00:01:03.880]   Simula?
[00:01:03.880 --> 00:01:11.360]   Simula was the extension of Algor60, done primarily for simulation.
[00:01:11.360 --> 00:01:17.600]   But basically, they invented object-oriented programming at inheritance and runtime polymorphism
[00:01:17.600 --> 00:01:21.280]   when they were... while they were doing it.
[00:01:21.280 --> 00:01:29.560]   And that was the language that taught me that you could have the sort of the problems of
[00:01:29.560 --> 00:01:36.720]   a program grow with size of the program rather than with the square of the size of the program.
[00:01:36.720 --> 00:01:40.960]   That is, you can actually modularize very nicely.
[00:01:40.960 --> 00:01:43.960]   And that was a surprise to me.
[00:01:43.960 --> 00:01:51.900]   It was also a surprise to me that a stricter type system than Pascal's was helpful, whereas
[00:01:51.900 --> 00:01:56.360]   Pascal's type system got in my way all the time.
[00:01:56.360 --> 00:02:03.280]   So you need a strong type system to organize your code well, but it has to be extensible
[00:02:03.280 --> 00:02:04.280]   and flexible.
[00:02:04.280 --> 00:02:06.960]   Let's get into the details a little bit.
[00:02:06.960 --> 00:02:10.460]   If you remember, what kind of type system did Pascal have?
[00:02:10.460 --> 00:02:14.960]   What type system, typing system did Algor60 have?
[00:02:14.960 --> 00:02:22.360]   Basically, Pascal was sort of the simplest language that Niklaus Wirt could define that
[00:02:22.360 --> 00:02:26.640]   served the needs of Niklaus Wirt at the time.
[00:02:26.640 --> 00:02:31.940]   And it has a sort of a highly moral tone to it.
[00:02:31.940 --> 00:02:35.160]   That is, if you can say it in Pascal, it's good.
[00:02:35.160 --> 00:02:38.240]   And if you can't, it's not so good.
[00:02:38.240 --> 00:02:46.260]   And this simula allowed you basically to build your own type system.
[00:02:46.260 --> 00:02:54.040]   So instead of trying to fit yourself into Niklaus Wirt's world, Christian Nygaard's
[00:02:54.040 --> 00:02:59.100]   language and Ole Johan Dahl's language allowed you to build your own.
[00:02:59.100 --> 00:03:07.800]   So it's sort of close to the original idea of you build a domain-specific language as
[00:03:07.800 --> 00:03:14.920]   a matter of fact, what you build is a set of types and relations among types that allows
[00:03:14.920 --> 00:03:18.920]   you to express something that's suitable for an application.
[00:03:18.920 --> 00:03:24.960]   So when you say types, the stuff you're saying has echoes of object-oriented programming.
[00:03:24.960 --> 00:03:27.400]   Yes, they invented it.
[00:03:27.400 --> 00:03:35.840]   Every language that uses the word class for type is a descendant of simula.
[00:03:35.840 --> 00:03:38.400]   We are indirectly.
[00:03:38.400 --> 00:03:44.880]   Christian Nygaard and Ole Johan Dahl were mathematicians and they didn't think in terms
[00:03:44.880 --> 00:03:51.780]   of types, but they understood sets and classes of elements.
[00:03:51.780 --> 00:03:54.880]   And so they called their types classes.
[00:03:54.880 --> 00:04:01.880]   And basically in C++, as in simula, classes are user-defined type.
[00:04:01.880 --> 00:04:08.400]   So can you try the impossible task and give a brief history of programming languages from
[00:04:08.400 --> 00:04:09.520]   your perspective?
[00:04:09.520 --> 00:04:17.160]   So we started with Algol 60, Simula, Pascal, but that's just the 60s and 70s.
[00:04:17.160 --> 00:04:19.840]   I can try.
[00:04:19.840 --> 00:04:27.520]   The most sort of interesting and major improvement of programming languages was Fortran, the
[00:04:27.520 --> 00:04:29.200]   first Fortran.
[00:04:29.200 --> 00:04:34.840]   Because before that, all code was written for a specific machine and each specific machine
[00:04:34.840 --> 00:04:43.400]   had a language, a simply language or macro assembler or some extension of that idea.
[00:04:43.400 --> 00:04:50.760]   But you are writing for a specific machine in the language of that machine.
[00:04:50.760 --> 00:05:00.560]   And Bacchus and his team at IBM built a language that would allow you to write what you really
[00:05:00.560 --> 00:05:01.560]   wanted.
[00:05:01.560 --> 00:05:06.600]   That is, you could write it in a language that was natural for people.
[00:05:06.600 --> 00:05:10.920]   Now these people happened to be engineers and physicists, so the language that came
[00:05:10.920 --> 00:05:13.920]   out was somewhat unusual for the rest of the world.
[00:05:13.920 --> 00:05:18.240]   But basically they said formula translation because they wanted to have the mathematical
[00:05:18.240 --> 00:05:21.980]   formulas translated into the machine.
[00:05:21.980 --> 00:05:29.940]   And as a side effect, they got portability because now they are writing in the terms
[00:05:29.940 --> 00:05:34.060]   that the humans used and the way humans thought.
[00:05:34.060 --> 00:05:39.620]   And then they had a program that translated it into the machines needs.
[00:05:39.620 --> 00:05:42.560]   And that was new and that was great.
[00:05:42.560 --> 00:05:49.360]   And it's something to remember, we want to raise the language to the human level, but
[00:05:49.360 --> 00:05:52.520]   we don't want to lose the efficiency.
[00:05:52.520 --> 00:05:55.700]   So that's- And that was the first step towards the human.
[00:05:55.700 --> 00:05:58.040]   That was the first step.
[00:05:58.040 --> 00:06:01.560]   And of course, they were very particular kind of humans.
[00:06:01.560 --> 00:06:07.060]   Business people were different, so they got Cobol instead and et cetera, et cetera.
[00:06:07.060 --> 00:06:08.560]   And Simula came out.
[00:06:08.560 --> 00:06:11.620]   No, let's not go to Simula yet.
[00:06:11.620 --> 00:06:14.080]   Let's go to Algor.
[00:06:14.080 --> 00:06:22.680]   Fortran didn't have at the time the notions of- not a precise notion of type, not a precise
[00:06:22.680 --> 00:06:32.640]   notion of scope, not a set of translation phases that was what we have today.
[00:06:32.640 --> 00:06:35.080]   Lexical, syntax, semantics.
[00:06:35.080 --> 00:06:41.480]   It was sort of a bit of a model in the early days, but hey, they had just done the biggest
[00:06:41.480 --> 00:06:44.360]   breakthrough in the history of programming, right?
[00:06:44.360 --> 00:06:49.680]   So you can't criticize them for not having gotten all the technical details right.
[00:06:49.680 --> 00:06:50.680]   So we got Algor.
[00:06:50.680 --> 00:06:53.200]   That was very pretty.
[00:06:53.200 --> 00:07:00.760]   And most people in commerce and science considered it useless because it was not flexible enough
[00:07:00.760 --> 00:07:06.080]   and it wasn't efficient enough and et cetera, et cetera.
[00:07:06.080 --> 00:07:10.240]   But that was a breakthrough from a technical point of view.
[00:07:10.240 --> 00:07:17.840]   Then Simula came along to make that idea more flexible and you could define your own types.
[00:07:17.840 --> 00:07:22.160]   And that's where I got very interested.
[00:07:22.160 --> 00:07:27.240]   Preston Nugent, who's the main idea man behind Simula.
[00:07:27.240 --> 00:07:28.240]   That was late '60s.
[00:07:28.240 --> 00:07:29.240]   This was late '60s.
[00:07:29.240 --> 00:07:34.080]   Well, I was a visiting professor in Aarhus.
[00:07:34.080 --> 00:07:43.960]   And so I learned object-oriented programming by sitting around and well, in theory, discussing
[00:07:43.960 --> 00:07:46.200]   with Preston Nugent.
[00:07:46.200 --> 00:07:53.080]   But Preston, once you get started and in full flow, it's very hard to get a word in edgeways.
[00:07:53.080 --> 00:07:54.080]   You're just listening.
[00:07:54.080 --> 00:07:56.040]   So it was great.
[00:07:56.040 --> 00:07:57.540]   I learned it from there.
[00:07:57.540 --> 00:08:02.720]   Not to romanticize the notion, but it seems like a big leap to think about object-oriented
[00:08:02.720 --> 00:08:05.400]   programming.
[00:08:05.400 --> 00:08:08.160]   It's really a leap of abstraction.
[00:08:08.160 --> 00:08:09.360]   Yes.
[00:08:09.360 --> 00:08:18.320]   And was that as big and beautiful of a leap as it seems from now in retrospect or was
[00:08:18.320 --> 00:08:21.480]   it an obvious one at the time?
[00:08:21.480 --> 00:08:24.760]   It was not obvious.
[00:08:24.760 --> 00:08:27.920]   And many people have tried to do something like that.
[00:08:27.920 --> 00:08:33.440]   And most people didn't come up with something as wonderful as Simula.
[00:08:33.440 --> 00:08:39.640]   Lots of people got their PhDs and made their careers out of forgetting about Simula or
[00:08:39.640 --> 00:08:41.760]   never knowing it.
[00:08:41.760 --> 00:08:46.820]   For me, the key idea was basically I could get my own types.
[00:08:46.820 --> 00:08:54.000]   And that's the idea that goes further into C++, where I can get better types and more
[00:08:54.000 --> 00:08:56.460]   flexible types and more efficient types.
[00:08:56.460 --> 00:08:58.720]   But it's still the fundamental idea.
[00:08:58.720 --> 00:09:03.640]   When I want to write a program, I want to write it with my types that is appropriate
[00:09:03.640 --> 00:09:12.600]   to my problem and under the constraints that I'm under with hardware, software, environment,
[00:09:12.600 --> 00:09:13.600]   etc.
[00:09:13.600 --> 00:09:16.280]   And that's the key idea.
[00:09:16.280 --> 00:09:23.480]   People picked up on the class hierarchies and the virtual functions and the inheritance.
[00:09:23.480 --> 00:09:27.360]   And that was only part of it.
[00:09:27.360 --> 00:09:33.360]   It was an interesting and major part and still a major part in a lot of graphic stuff.
[00:09:33.360 --> 00:09:36.960]   But it was not the most fundamental.
[00:09:36.960 --> 00:09:42.320]   It was when you wanted to relate one type to another, you don't want them all to be
[00:09:42.320 --> 00:09:43.880]   independent.
[00:09:43.880 --> 00:09:53.480]   The classical example is that you don't actually want to write a city simulation with vehicles
[00:09:53.480 --> 00:09:59.480]   where you say, well, if it's a bicycle, write the code for turning a bicycle to the left.
[00:09:59.480 --> 00:10:02.840]   If it's a normal car, turn right the normal car way.
[00:10:02.840 --> 00:10:06.880]   If it's a fire engine, turn right the fire engine way.
[00:10:06.880 --> 00:10:12.280]   You get these big case statements and bunches of if statements and such.
[00:10:12.280 --> 00:10:20.920]   Instead, you tell the base class that that's the vehicle and say turn left the way you
[00:10:20.920 --> 00:10:23.320]   want to.
[00:10:23.320 --> 00:10:25.960]   And this is actually a real example.
[00:10:25.960 --> 00:10:36.960]   They used it to simulate and optimize the emergency services for somewhere in Norway
[00:10:36.960 --> 00:10:38.920]   back in the 60s.
[00:10:38.920 --> 00:10:46.240]   So this was one of the early examples for why you needed inheritance and you needed
[00:10:46.240 --> 00:10:55.120]   a runtime polymorphism because you wanted to handle this set of vehicles in a manageable
[00:10:55.120 --> 00:10:57.240]   way.
[00:10:57.240 --> 00:11:02.040]   You can't just rewrite your code each time a new kind of vehicle comes along.
[00:11:02.040 --> 00:11:05.600]   Yeah, that's a beautiful, powerful idea.
[00:11:05.600 --> 00:11:10.680]   And of course, it stretches through your work, C++, as we'll talk about.
[00:11:10.680 --> 00:11:14.840]   But I think you've structured it nicely.
[00:11:14.840 --> 00:11:19.240]   What other breakthroughs came along in the history of programming languages?
[00:11:19.240 --> 00:11:22.240]   If we were to tell the history in that way?
[00:11:22.240 --> 00:11:27.800]   Obviously, I'm better at telling the part of the history that is the path I'm on as
[00:11:27.800 --> 00:11:29.760]   opposed to all the paths.
[00:11:29.760 --> 00:11:35.560]   Yeah, you skipped the hippie John McCarthy in Lisp, one of my favorite languages.
[00:11:35.560 --> 00:11:39.920]   But Lisp is not one of my favorite languages.
[00:11:39.920 --> 00:11:41.560]   It's obviously important.
[00:11:41.560 --> 00:11:43.160]   It's obviously interesting.
[00:11:43.160 --> 00:11:48.640]   Lots of people write code in it, and then they rewrite it into C or C++ when they want
[00:11:48.640 --> 00:11:50.840]   to go to production.
[00:11:50.840 --> 00:12:03.200]   It's in the world I'm at, which are constrained by performance, reliability issues, deployability,
[00:12:03.200 --> 00:12:06.120]   cost of hardware.
[00:12:06.120 --> 00:12:09.760]   I don't like things to be too dynamic.
[00:12:09.760 --> 00:12:16.400]   It is really hard to write a piece of code that's perfectly flexible, that you can also
[00:12:16.400 --> 00:12:24.240]   deploy on a small computer, and that you can also put in, say, a telephone switch in Bogota.
[00:12:24.240 --> 00:12:29.080]   What's the chance if you get an error and you find yourself in the debugger, that the
[00:12:29.080 --> 00:12:35.200]   telephone switch in Bogota on late Sunday night has a programmer around?
[00:12:35.200 --> 00:12:37.040]   The chance is zero.
[00:12:37.040 --> 00:12:44.600]   And so a lot of things I think most about can't afford that flexibility.
[00:12:44.600 --> 00:12:54.240]   I'm quite aware that maybe 70, 80% of all code are not under the kind of constraints
[00:12:54.240 --> 00:12:56.280]   I'm interested in.
[00:12:56.280 --> 00:13:02.960]   But somebody has to do the job I'm doing, because you have to get from these high-level
[00:13:02.960 --> 00:13:06.280]   flexible languages to the hardware.
[00:13:06.280 --> 00:13:12.400]   The stuff that lasts for 10, 20, 30 years is robust, operates under very constrained
[00:13:12.400 --> 00:13:13.400]   conditions.
[00:13:13.400 --> 00:13:14.400]   Yes, absolutely.
[00:13:14.400 --> 00:13:15.400]   That's right.
[00:13:15.400 --> 00:13:17.440]   And it's fascinating and beautiful in its own way.
[00:13:17.440 --> 00:13:22.960]   It's C++ is one of my favorite languages, and so is Lisp.
[00:13:22.960 --> 00:13:30.720]   So I can embody it too, for different reasons, as a programmer.
[00:13:30.720 --> 00:13:37.400]   I understand why Lisp is popular, and I can see the beauty of the ideas, and similarly
[00:13:37.400 --> 00:13:40.120]   with Smalltalk.
[00:13:40.120 --> 00:13:48.500]   It's just not as relevant in my world.
[00:13:48.500 --> 00:13:53.440]   And by the way, I distinguish between those and the functional languages where I go to
[00:13:53.440 --> 00:13:57.760]   things like ML and Haskell.
[00:13:57.760 --> 00:14:03.480]   Different kind of languages, they have a different kind of beauty, and they're very interesting.
[00:14:03.480 --> 00:14:11.400]   And I actually try to learn from all the languages I encounter to see what is there that would
[00:14:11.400 --> 00:14:20.480]   make working on the kind of problems I'm interested in, with the kind of constraints that I'm
[00:14:20.480 --> 00:14:24.500]   interested in, what can actually be done better?
[00:14:24.500 --> 00:14:27.000]   Because we can surely do better than we do today.
[00:14:27.000 --> 00:14:27.500]   [END]
[00:14:27.500 --> 00:14:28.500]   1
[00:14:28.500 --> 00:14:37.020]   [BLANK_AUDIO]
[00:14:37.020 --> 00:14:47.020]   [BLANK_AUDIO]

