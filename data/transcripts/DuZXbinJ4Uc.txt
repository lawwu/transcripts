
[00:00:00.040 --> 00:00:14.380]   MAKUILA MAKUILA:
[00:00:14.380 --> 00:00:15.960]   So my name is Kevin, and I'm going
[00:00:15.960 --> 00:00:18.760]   to be talking about how embeddings are stunting
[00:00:18.760 --> 00:00:20.360]   AI agents.
[00:00:20.360 --> 00:00:22.040]   So I'm going to let you in on some secrets
[00:00:22.040 --> 00:00:25.040]   about how we build the product and exactly what
[00:00:25.040 --> 00:00:27.680]   we're doing behind the scenes to improve your code gen
[00:00:27.680 --> 00:00:29.240]   experience.
[00:00:29.240 --> 00:00:32.020]   So at Kodium, we are building AI developer tools,
[00:00:32.020 --> 00:00:34.220]   and we're starting with an IDE plug-in.
[00:00:34.220 --> 00:00:37.980]   And as mentioned before, we've been downloaded over a million
[00:00:37.980 --> 00:00:39.260]   and a half times.
[00:00:39.260 --> 00:00:40.760]   We're one of the top-rated extensions
[00:00:40.760 --> 00:00:42.180]   across the different marketplaces.
[00:00:42.180 --> 00:00:46.220]   And to reiterate, we offer free, unlimited autocomplete,
[00:00:46.220 --> 00:00:49.140]   chat, and search across 70 different languages
[00:00:49.140 --> 00:00:50.540]   and 40 different IDEs.
[00:00:50.540 --> 00:00:54.360]   So we plug into all the popular IDEs.
[00:00:54.360 --> 00:00:56.500]   We are the highest-rated developer tool,
[00:00:56.500 --> 00:00:59.200]   as voted by developers in the most recent Stack Over
[00:00:59.200 --> 00:01:00.200]   Flow Survey.
[00:01:00.200 --> 00:01:02.420]   And you'll note that this is even higher than tools
[00:01:02.420 --> 00:01:05.920]   like ChatGPT and GitHub Copilot.
[00:01:05.920 --> 00:01:08.920]   And importantly, we are trusted by Fortune 500s
[00:01:08.920 --> 00:01:10.720]   to deliver high-quality code that actually
[00:01:10.720 --> 00:01:12.380]   makes it into production.
[00:01:12.380 --> 00:01:14.820]   And we do this with top-grade security, licensing,
[00:01:14.820 --> 00:01:17.520]   attribution for some of the largest enterprises
[00:01:17.520 --> 00:01:18.380]   on the planet.
[00:01:18.380 --> 00:01:20.800]   Our goal at Kodium is to empower every developer
[00:01:20.800 --> 00:01:25.920]   to have superpowers both inside of the IDE and beyond.
[00:01:25.920 --> 00:01:28.920]   And today I'm going to let you in on some secrets about how we've
[00:01:28.920 --> 00:01:32.640]   been able to build a tool like this, and why users choose us over
[00:01:32.640 --> 00:01:34.900]   the other AI tools on the market.
[00:01:34.900 --> 00:01:38.640]   And the short answer is context awareness.
[00:01:38.640 --> 00:01:42.980]   So here's a quick overview about what context looks like today.
[00:01:42.980 --> 00:01:44.980]   We're all familiar, since we're at an AI conference,
[00:01:44.980 --> 00:01:47.360]   with the basics of retrieval augmented generation.
[00:01:47.360 --> 00:01:53.360]   The idea being that a user puts in a query, you accumulate context from a variety of different
[00:01:53.360 --> 00:01:58.080]   sources, you throw it into your LLM, and then you get a response, whether that be a code
[00:01:58.080 --> 00:02:01.360]   generation or a chat message.
[00:02:01.360 --> 00:02:06.080]   Here's a concrete example about how retrieval can be used in code generation.
[00:02:06.080 --> 00:02:09.480]   So let's say we want to build a contact form in React.
[00:02:09.480 --> 00:02:13.440]   Now you could go to chat GPT, you could ask it to generate a contact form, but in reality,
[00:02:13.440 --> 00:02:15.960]   on a moderately large code base, this is really not going to work.
[00:02:15.960 --> 00:02:19.400]   It's not going to give you things that are personalized to you.
[00:02:19.400 --> 00:02:21.780]   And this is really where context retrieval comes in.
[00:02:21.780 --> 00:02:26.260]   We need to build a contact form that is in line with our design system components.
[00:02:26.260 --> 00:02:33.900]   Let's say you already have buttons and inputs, it has to be able to pattern match with local
[00:02:33.900 --> 00:02:36.600]   instances of other forms inside of your code base.
[00:02:36.600 --> 00:02:39.760]   It has to ingest your style guide, for example, if you're using Tailwind, you have to be able
[00:02:39.760 --> 00:02:44.580]   to detect and make the form look and feel like every other thing on your site.
[00:02:44.580 --> 00:02:49.440]   And then, of course, there's documentation both locally and externally for packages and
[00:02:49.440 --> 00:02:51.020]   other dependencies.
[00:02:51.020 --> 00:02:55.660]   So the question becomes, how do you collect and rank these items so that our code generation
[00:02:55.660 --> 00:02:59.360]   can be both fast and accurate for your use case?
[00:02:59.360 --> 00:03:03.660]   So to dive into a couple of different methods about how people are tackling this today, there's
[00:03:03.660 --> 00:03:05.200]   really three main pillars.
[00:03:05.200 --> 00:03:07.260]   The first one is long context.
[00:03:07.260 --> 00:03:12.500]   So this is the idea that if you expand your prompt window in your LLM, it can read more input
[00:03:12.500 --> 00:03:16.800]   and therefore be a bit more personal to what you're trying to generate.
[00:03:16.800 --> 00:03:18.740]   This is very ergonomically easy to use, right?
[00:03:18.740 --> 00:03:20.800]   You just shove more items into your prompt.
[00:03:20.800 --> 00:03:25.800]   But this comes at the cost of latency and financial cost.
[00:03:25.800 --> 00:03:28.800]   So one of the most recent examples was Gemini.
[00:03:28.800 --> 00:03:33.540]   Gemini actually takes 36 seconds to ingest 325k tokens.
[00:03:33.540 --> 00:03:40.500]   To put this into perspective, moderately sized or even small repo is easily over 1 million tokens,
[00:03:40.500 --> 00:03:43.200]   and that accounts to about 100k lines of code.
[00:03:43.200 --> 00:03:46.800]   So in this instance, most enterprises have over a billion tokens of code.
[00:03:46.800 --> 00:03:50.500]   It's simply not feasible to be throwing everything into a long context model.
[00:03:50.500 --> 00:03:52.500]   The second method is fine tuning.
[00:03:52.500 --> 00:04:01.200]   So for those that are familiar, fine tuning is the idea of actually tweaking the weights of your model to reflect the distribution of the data that your consumer expects.
[00:04:01.200 --> 00:04:03.200]   And so this requires continuous updates.
[00:04:03.200 --> 00:04:05.200]   It's rather expensive computationally.
[00:04:05.200 --> 00:04:07.200]   You have to have one model per customer.
[00:04:07.200 --> 00:04:10.200]   And it's honestly prohibitively expensive for most applications.
[00:04:10.200 --> 00:04:12.200]   And finally, we have embeddings.
[00:04:12.200 --> 00:04:16.200]   And for all of you, hopefully you're familiar, this is a relatively proven technology today.
[00:04:16.200 --> 00:04:19.200]   It's pretty inexpensive to compute and store.
[00:04:19.200 --> 00:04:25.200]   But the difficulty that we're about to dive into is that it is hard to reason over multiple items.
[00:04:25.200 --> 00:04:30.200]   It also has a low dimensional space, and I'll talk about that shortly.
[00:04:30.200 --> 00:04:36.200]   So to dive deeper into embeddings, the whole concept is that you take your objects, you throw it through an embedding model,
[00:04:36.200 --> 00:04:42.200]   and then you end up with some sort of vector, some sort of array of numerical values, and this is in a fixed dimension.
[00:04:42.200 --> 00:04:47.200]   And so by mapping and chunking code, we can map it to an embedding.
[00:04:47.200 --> 00:04:53.200]   And that allows us to quickly search over our functions, our documents, whatever you decide to chunk by.
[00:04:53.200 --> 00:04:57.200]   And this is what embedding search is called.
[00:04:57.200 --> 00:05:00.200]   Embedding search, like I said, is not a new concept.
[00:05:00.200 --> 00:05:02.200]   There is a bunch of models that I've tried to optimize.
[00:05:02.200 --> 00:05:07.200]   And in this example, we're looking at one of the kind of North Star eval benchmarks.
[00:05:07.200 --> 00:05:09.200]   It's become increasingly popular.
[00:05:09.200 --> 00:05:16.200]   And the question becomes, how do we fit millions of lines of code into an LLM model so that we can actually generate useful results?
[00:05:16.200 --> 00:05:22.200]   And so it's evident through the years that we're actually hitting a ceiling on what is possible using these traditional vector embeddings.
[00:05:22.200 --> 00:05:28.200]   And over time, even the biggest models are approximating to around the same level of performance.
[00:05:28.200 --> 00:05:31.200]   As you can see, everything's kind of within plus or minus five.
[00:05:31.200 --> 00:05:38.200]   And at Codium, we kind of believe that this is because fundamentally, we cannot distill the dimension space of all possible questions,
[00:05:38.200 --> 00:05:45.200]   all possible English queries, down into the embedding dimension space that our vectors are going to occupy.
[00:05:45.200 --> 00:05:51.200]   And so at Codium, we've thought very critically about what retrieval matters to us.
[00:05:51.200 --> 00:05:53.200]   Are we measuring the right things?
[00:05:53.200 --> 00:06:00.200]   And does semantic distance between these vectors really equate to things like function relevance in the concrete example that I showed earlier?
[00:06:00.200 --> 00:06:09.200]   And so what we landed on is that benchmarks like the one that I showed you before heavily skew towards this idea of needle in a haystack.
[00:06:09.200 --> 00:06:16.200]   It's the idea that you can sift through a corpus of text and find some instance of something that is relevant to you.
[00:06:16.200 --> 00:06:18.200]   Note, it is only one single needle.
[00:06:18.200 --> 00:06:21.200]   So in reality, code search requires multiple different needles, right?
[00:06:21.200 --> 00:06:22.200]   We showed that slide earlier.
[00:06:22.200 --> 00:06:27.200]   When you're building a contact form, you need all these different things in order to actually have a good generation.
[00:06:27.200 --> 00:06:29.200]   And these benchmarks really don't touch that.
[00:06:29.200 --> 00:06:31.200]   And so we decided to use a different metric.
[00:06:31.200 --> 00:06:33.200]   And it's called Recall 50.
[00:06:33.200 --> 00:06:40.200]   The idea and its definition is that it's what fraction of your ground truth is in the top 50 items retrieved.
[00:06:40.200 --> 00:06:45.200]   So the idea being now we have multiple documents and we're now looking at the top 50 documents that we retrieved.
[00:06:45.200 --> 00:06:48.200]   How many of those are part of our ground truth set?
[00:06:48.200 --> 00:06:56.200]   So this is really helpful for understanding multi-document context, especially again for those large, large code bases.
[00:06:56.200 --> 00:06:59.200]   And now we actually have to build a data set around this.
[00:06:59.200 --> 00:07:02.200]   And so this is where we did a little bit of magic.
[00:07:02.200 --> 00:07:06.200]   We wanted to make the eval as close as possible to our end user distribution.
[00:07:06.200 --> 00:07:08.200]   So we had to compile our own data set.
[00:07:08.200 --> 00:07:13.200]   So what we did, this is a PR that I put out a few months ago, we looked at PRs like this.
[00:07:13.200 --> 00:07:15.200]   It's broken down into commits.
[00:07:15.200 --> 00:07:20.200]   Those commits we can extract and actually match them with the modified files, right?
[00:07:20.200 --> 00:07:26.200]   So now we have this mapping from something in English to a list of files that are relevant to that change.
[00:07:26.200 --> 00:07:29.200]   And you can imagine we can hash this in many different ways.
[00:07:29.200 --> 00:07:37.200]   But ultimately the point I'm trying to make is we are creating a eval set that mimics our production usage of something like a code gen product.
[00:07:39.200 --> 00:07:47.200]   And so this message serves as the backing for this new type of eval where now we can run at scale this idea of product-led benchmarks.
[00:07:47.200 --> 00:07:55.200]   It gets us closer to the ground truth of what our users are actually experiencing and what retrieval tweaks and retrieval actually mean to the end product.
[00:07:57.200 --> 00:08:05.200]   And so we threw some of the currently publicly available models at this notion of retrieval, this idea of using commit messages.
[00:08:05.200 --> 00:08:08.200]   And we found that there is reduced performance.
[00:08:08.200 --> 00:08:17.200]   They're unable to reason over specifically code, but then also specifically this kind of real-world notion of English and commits, right?
[00:08:17.200 --> 00:08:21.200]   And so at Codium, we've been able to actually break through the ceiling.
[00:08:21.200 --> 00:08:23.200]   This is something that we've worked very hard at.
[00:08:23.200 --> 00:08:29.200]   We have to redefine exactly how we are approaching retrieval in order to be kind of in our class of our own,
[00:08:29.200 --> 00:08:34.200]   so that when you are typing in your ID, when you're chatting with our assistant, when you're generating autocompletes,
[00:08:34.200 --> 00:08:39.200]   we're retrieving the most relevant things that are for your intents.
[00:08:39.200 --> 00:08:44.200]   So now the question becomes, how do we actually get this kind of best-in-class retrieval?
[00:08:44.200 --> 00:08:49.200]   And so I'm here to give you the very short and sweet answer, which is we throw more compute at it, right?
[00:08:49.200 --> 00:08:56.200]   But of course, that can't come with absurd, absurd cost, right? Financial cost.
[00:08:56.200 --> 00:08:59.200]   So how do we do this actually in production?
[00:08:59.200 --> 00:09:02.200]   How do we actually do this without recurring an unreasonable cost?
[00:09:02.200 --> 00:09:06.200]   And so this goes back to a little bit of Codium secret sauce, right?
[00:09:06.200 --> 00:09:07.200]   We are vertically integrated.
[00:09:07.200 --> 00:09:10.200]   And what this means is that we train our own models.
[00:09:10.200 --> 00:09:12.200]   So number one, we train our own models.
[00:09:12.200 --> 00:09:14.200]   This means that these are custom to our own workflows.
[00:09:14.200 --> 00:09:17.200]   So when you're using our product, you're touching Codium's models.
[00:09:17.200 --> 00:09:20.200]   Number two, we build our own custom infrastructure.
[00:09:20.200 --> 00:09:26.200]   This is actually a very important point and actually connects to the whole ExaFunction to Codium Pivot that we discussed earlier.
[00:09:26.200 --> 00:09:28.200]   ExaFunction was an ML infrastructure company.
[00:09:28.200 --> 00:09:33.200]   And so what we've been able to do is build our own custom infrastructure down to the metal.
[00:09:33.200 --> 00:09:41.200]   This means that our speed and efficiency is unmatched by any other competitor on the market so that we can serve more completions at a cheaper cost.
[00:09:41.200 --> 00:09:44.200]   And finally, we are product driven, not research driven.
[00:09:44.200 --> 00:09:49.200]   Now, what this means is we look at things like actual end user results.
[00:09:49.200 --> 00:09:52.200]   When we actually ship a feature, we're looking at real world usage.
[00:09:52.200 --> 00:09:57.200]   And we're always thinking about how does this impact the end user experience, not just some local benchmark tweaking.
[00:09:57.200 --> 00:10:04.200]   And so we could spend all day talking about, you know, kind of why Codium has done this and yada yada, but that's a talk for a different time.
[00:10:04.200 --> 00:10:07.200]   So I'm going to talk about something that I find very cool.
[00:10:07.200 --> 00:10:14.200]   And this is the reason why we've taken this vertical integration approach and been able to turn it into something that we call mQuery.
[00:10:14.200 --> 00:10:21.200]   So mQuery is this way of taking your query, so similar to that idea of taking your retrieval query.
[00:10:21.200 --> 00:10:25.200]   You have your code base, and let's just say you have n different items.
[00:10:25.200 --> 00:10:33.200]   And because we own our own infrastructure and train our own models, we're now making parallel calls to an LLM to actually reason over each one of those items.
[00:10:33.200 --> 00:10:35.200]   We're not looking at vectors.
[00:10:35.200 --> 00:10:37.200]   We're not looking at small dimension space.
[00:10:37.200 --> 00:10:47.200]   We're literally taking models and running them on each one of those items so that you can ensure, you can imagine, you know, you run ChatGPT and tell it to say yes or no on an item, for example.
[00:10:47.200 --> 00:10:51.200]   That is going to give you the highest quality, highest dimension space of reasoning.
[00:10:51.200 --> 00:11:02.200]   This leads into very, very high confidence ranking that we can then take into account things like your active files, your neighboring directories, your most recent commits.
[00:11:02.200 --> 00:11:05.200]   You know, what is the ticket that you're working on currently?
[00:11:05.200 --> 00:11:18.200]   And we can compile all this to give you, you know, the top end documents that are relevant for your generation so that we can start streaming in higher quality generations, higher quality chat messages, things of that nature.
[00:11:18.200 --> 00:11:22.200]   And the reason behind this is, again, it's that vertical integration.
[00:11:22.200 --> 00:11:27.200]   It's that idea that our computation is 1/100 of the cost of the competitors.
[00:11:27.200 --> 00:11:28.200]   We are not using APIs.
[00:11:28.200 --> 00:11:35.200]   And as a result, our customers and our users actually get 100x the amount of compute that they would on another product.
[00:11:35.200 --> 00:11:37.200]   And so we're willing to do that.
[00:11:37.200 --> 00:11:43.200]   We're willing to spend more compute per user because it leads to a better experience.
[00:11:43.200 --> 00:11:46.200]   And so, like I mentioned earlier, I lead our product engineering team.
[00:11:46.200 --> 00:11:49.200]   So we always want to anchor ourselves around these three different things.
[00:11:49.200 --> 00:11:52.200]   One, that we have to build a performant product.
[00:11:52.200 --> 00:11:53.200]   It has to be really fast.
[00:11:53.200 --> 00:11:56.200]   For those of you who have used the product, you can probably attest to this.
[00:11:56.200 --> 00:12:06.200]   MQuery runs thousands of LLMs in parallel so that the user can start streaming in code within seconds, not minutes, not hours, seconds, and oftentimes milliseconds.
[00:12:06.200 --> 00:12:08.200]   It has to be powerful, right?
[00:12:08.200 --> 00:12:14.200]   None of this matters if the actual quality and the actual generations that you're building are wrong, right?
[00:12:14.200 --> 00:12:16.200]   And finally, it has to be easy to use.
[00:12:16.200 --> 00:12:20.200]   We're building an end user product for people today that's in the IDE.
[00:12:20.200 --> 00:12:22.200]   Tomorrow, it might not be in the IDE.
[00:12:22.200 --> 00:12:30.200]   How do we actually build something that is intuitive to understand that people can grapple with and see exactly what my model is thinking?
[00:12:30.200 --> 00:12:36.200]   And so, because we have the benefit of distribution, we were able to roll this out to a small percentage of our users.
[00:12:36.200 --> 00:12:40.200]   And by small percentage, we're dealing in the order of, you know, a million plus downloads.
[00:12:40.200 --> 00:12:42.200]   This actually reached the surprising number of people.
[00:12:42.200 --> 00:12:51.200]   And what we've been able to see is that we were able to successfully reason over these thousands of files in people's mono repos, in people's remote repos,
[00:12:51.200 --> 00:12:53.200]   and select what was relevant, right?
[00:12:53.200 --> 00:12:59.200]   We can very accurately deem which files are relevant for the generation that you're trying to have.
[00:12:59.200 --> 00:13:04.200]   And the result, as you can see, this is a real-time GIF, is both fast and accurate.
[00:13:04.200 --> 00:13:06.200]   So I'm asking for usage of an alert dialog.
[00:13:06.200 --> 00:13:07.200]   It's going through.
[00:13:07.200 --> 00:13:09.200]   And I think I've panned down here.
[00:13:09.200 --> 00:13:13.200]   This is kind of a shad CN component that I've modified internally.
[00:13:13.200 --> 00:13:19.200]   We're pulling in, basically, the source code of what is relevant for our generation.
[00:13:19.200 --> 00:13:23.200]   And ultimately, the results of this experiment were that users were happy.
[00:13:23.200 --> 00:13:26.200]   They were thumbs-- they had more thumbs up on chat messages.
[00:13:26.200 --> 00:13:27.200]   They were accepting more generations.
[00:13:27.200 --> 00:13:32.200]   And we were able to see that, ultimately, we were writing more code for the user, which is the ultimate goal.
[00:13:32.200 --> 00:13:36.200]   It's that idea of how much value are we providing to our end users.
[00:13:36.200 --> 00:13:40.200]   And so we built this context engine, right?
[00:13:40.200 --> 00:13:41.200]   This idea of mQuery.
[00:13:41.200 --> 00:13:47.200]   This idea of ingesting context and deciding what is relevant to your query to give you coding superpowers.
[00:13:47.200 --> 00:13:50.200]   And so our users will generate today-- they're generating autocompletes.
[00:13:50.200 --> 00:13:52.200]   They're generating chats, search messages.
[00:13:52.200 --> 00:13:55.200]   But in the future, they're going to generate documentation.
[00:13:55.200 --> 00:13:59.200]   They're going to generate commit messages, code reviews, code scanning.
[00:13:59.200 --> 00:14:05.200]   They're going to take Figma artboards and convert them into UIs that were built by your own components.
[00:14:05.200 --> 00:14:07.200]   The possibilities are endless.
[00:14:07.200 --> 00:14:12.200]   But what it starts with is this bedrock, this very hard problem of retrieval.
[00:14:12.200 --> 00:14:18.200]   And it brings us to, again, one of the reasons why Codium is approaching this problem a little bit differently.
[00:14:18.200 --> 00:14:22.200]   Our iteration cycle starts with product-driven data and eval.
[00:14:22.200 --> 00:14:24.200]   So we're starting with the end problem.
[00:14:24.200 --> 00:14:26.200]   We're building a product for millions of people.
[00:14:26.200 --> 00:14:28.200]   How do we start with what they're asking for?
[00:14:28.200 --> 00:14:34.200]   And how do we build a data set and eval system locally so that we can iterate on the metrics that matter?
[00:14:34.200 --> 00:14:39.200]   Secondly, because we're vertically integrated, we're taking that massive amount of compute,
[00:14:39.200 --> 00:14:41.200]   and we're going to throw it at our users.
[00:14:41.200 --> 00:14:44.200]   You know, paying or not paying, we're going to throw it at our users
[00:14:44.200 --> 00:14:47.200]   so that they can get the best product experience and the highest quality results.
[00:14:47.200 --> 00:14:53.200]   And then finally, we're actually going to be able to push this out to our users in real time, overnight,
[00:14:53.200 --> 00:14:56.200]   and be able to get a pulse check on how this is going.
[00:14:56.200 --> 00:14:58.200]   You know, this is what we did for mQuery.
[00:14:58.200 --> 00:15:02.200]   And when we evaluate in production, we can say, you know, thumbs up, thumbs down,
[00:15:02.200 --> 00:15:06.200]   and then hit the drawing board again, back to that same cycle.
[00:15:06.200 --> 00:15:07.200]   Repetition.
[00:15:07.200 --> 00:15:11.200]   And so you can start seeing how these pieces of compounding technology come together.
[00:15:11.200 --> 00:15:12.200]   Right?
[00:15:12.200 --> 00:15:13.200]   We've alluded to some of them today.
[00:15:13.200 --> 00:15:17.200]   Modeling, infrastructure, being able to retrieve.
[00:15:17.200 --> 00:15:23.200]   But then it also includes things like AST parsing, indexing massive amounts of repos,
[00:15:23.200 --> 00:15:27.200]   knowledge graphs, parsing documentation, looking at websites online.
[00:15:27.200 --> 00:15:29.200]   The list can go on and on and on.
[00:15:29.200 --> 00:15:35.200]   But we're confident that we're solving these problems one piece at a time using that same iteration cycle,
[00:15:35.200 --> 00:15:40.200]   that same idea that we're going to take the distribution and knowledge that we have,
[00:15:40.200 --> 00:15:45.200]   and that additional compute that we're willing to afford each user to solve each one of these puzzle pieces.
[00:15:45.200 --> 00:15:51.200]   And I want to leave you with a parallel analogy.
[00:15:51.200 --> 00:15:55.200]   So in my past life, I had experienced the autonomous driving industry.
[00:15:55.200 --> 00:16:03.200]   So to bring over a metaphor from that industry, in 2015, TechCrunch boldly predicted that that was going to be the year of the self-driving vehicle.
[00:16:03.200 --> 00:16:10.200]   It was largely, you know, now we're in 2024, so we can look back in hindsight, largely untrue, right?
[00:16:10.200 --> 00:16:12.200]   We were doing things like sensor fusion.
[00:16:12.200 --> 00:16:14.200]   We were decreasing our polling rates.
[00:16:14.200 --> 00:16:16.200]   We were running off-board models.
[00:16:16.200 --> 00:16:21.200]   All this in the effort of making heuristics that would compensate for the lack of compute that was available
[00:16:21.200 --> 00:16:26.200]   because consumer graphics cards were not as popular or not as powerful as they are today.
[00:16:26.200 --> 00:16:30.200]   Fast forward today, we're seeing 100x the amount of compute available to a vehicle.
[00:16:30.200 --> 00:16:33.200]   You can take a Waymo around San Francisco, which I encourage you to do.
[00:16:33.200 --> 00:16:34.200]   It's a wonderful experience.
[00:16:34.200 --> 00:16:39.200]   But that means that we're actually able to throw larger models at these problems, right?
[00:16:39.200 --> 00:16:41.200]   More sensors, higher frequency.
[00:16:41.200 --> 00:16:48.200]   And now, 2024, TechCrunch has released another article that said, will 2024 finally be the year of the self-driving vehicle?
[00:16:48.200 --> 00:16:55.200]   And we can now look at this pattern and say driving performance was substantially better by throwing larger models,
[00:16:55.200 --> 00:16:58.200]   being able to handle more and more data.
[00:16:58.200 --> 00:17:03.200]   And so, at Codium, we believe that this embedding-based retrieval is the heuristic.
[00:17:03.200 --> 00:17:12.200]   We should be planning for AI-first products, throwing large models at these problems so that AI is a first-class citizen.
[00:17:12.200 --> 00:17:13.200]   We're planning for the future.
[00:17:13.200 --> 00:17:16.200]   And finally, we also believe that ideas are cheap.
[00:17:16.200 --> 00:17:26.200]   You know, I could sit up here and tell you all these different ideas about how, you know, we're going to transform coding and the way that the theory behind possible solutions.
[00:17:26.200 --> 00:17:33.200]   But what we believe at Codium is that actually shipping, actually showcasing this technology through a product, is the best way to go.
[00:17:33.200 --> 00:17:37.200]   And so, if you agree with these beliefs, you can come join our team.
[00:17:37.200 --> 00:17:39.200]   We're based in San Francisco.
[00:17:39.200 --> 00:17:41.200]   And you can download our extension.
[00:17:41.200 --> 00:17:42.200]   It's free.
[00:17:42.200 --> 00:17:45.200]   I'm not, obviously, what's it called?
[00:17:45.200 --> 00:17:47.200]   I'm not advertising the core product nearly as much.
[00:17:47.200 --> 00:17:48.200]   We're kind of talking about the technology.
[00:17:48.200 --> 00:17:52.200]   But you can experience this technology firsthand today by downloading our extension.
[00:17:52.200 --> 00:17:58.200]   It's available on all the different plugins, VS Code, JetBrains, Vim, Emacs.
[00:17:58.200 --> 00:18:05.200]   And you can see how this infrastructure and the way that we've approached product development has shaped the experience for you as a user.
[00:18:05.200 --> 00:18:08.200]   And then, of course, you can reach out to me on Twitter.
[00:18:08.200 --> 00:18:09.200]   I put my handle up there.
[00:18:09.200 --> 00:18:11.200]   I'll be kind of floating around outside.
[00:18:11.200 --> 00:18:14.200]   So if you have other questions or are interested in what I had to say.
[00:18:14.200 --> 00:18:16.200]   But I hope that you learned something today.
[00:18:16.200 --> 00:18:21.200]   I hope that, you know, you use Codium, you try it out, and see what the magic can do for yourself.
[00:18:21.200 --> 00:18:22.200]   Thank you.
[00:18:22.200 --> 00:18:23.200]   I'll see you next time.
[00:18:23.200 --> 00:18:24.200]   I'll see you next time.
[00:18:24.200 --> 00:18:24.200]   Bye.
[00:18:24.200 --> 00:18:25.200]   Bye.
[00:18:25.200 --> 00:18:25.200]   Bye.
[00:18:25.200 --> 00:18:26.200]   Bye.
[00:18:26.200 --> 00:18:27.200]   Bye.
[00:18:27.200 --> 00:18:27.200]   Bye.
[00:18:27.200 --> 00:18:28.200]   Bye.
[00:18:28.200 --> 00:18:29.200]   Bye.
[00:18:29.200 --> 00:18:30.200]   Bye.
[00:18:30.200 --> 00:18:31.200]   Bye.
[00:18:31.200 --> 00:18:32.200]   Bye.
[00:18:32.200 --> 00:18:33.200]   Bye.
[00:18:33.200 --> 00:18:33.200]   Bye.
[00:18:33.200 --> 00:18:33.200]   Bye.
[00:18:33.200 --> 00:18:34.200]   Bye.
[00:18:34.200 --> 00:18:35.200]   Bye.
[00:18:35.200 --> 00:18:36.200]   Bye.
[00:18:36.200 --> 00:18:41.160]   We'll see you next time.

