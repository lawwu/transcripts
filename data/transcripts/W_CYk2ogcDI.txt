
[00:00:00.000 --> 00:00:22.480]   Thanks for coming. Thanks for having me here. I'm Tang Yuma. I was the CEO and co-founder of 4H-AI.
[00:00:22.480 --> 00:00:28.440]   We just recently got acquired by MongoDB. I'm also teaching at Stanford as well. So this is
[00:00:28.440 --> 00:00:33.780]   about RAG, which is the main focus of 4H-AI, the startup who is focusing on how to make
[00:00:33.780 --> 00:00:39.820]   retrieval better. But I will just generally talk about RAG, and we'll touch on some of
[00:00:39.820 --> 00:00:45.000]   the products we make as well very quickly. So I guess why we are doing RAG or anything
[00:00:45.000 --> 00:00:49.100]   like that, right? So I guess the main reason is that large language model are these days
[00:00:49.100 --> 00:00:54.400]   agents, which are using large language models as well. If they're out of the box, they cannot
[00:00:54.400 --> 00:00:59.740]   just have priority information from any of the companies, right? Because if they know
[00:00:59.740 --> 00:01:06.660]   anything about what MongoDB, for example, internally has, then the data was leaked. So that means
[00:01:06.660 --> 00:01:12.740]   that if you want to apply any of this to enterprise, then you need to ingest a lot of data from the
[00:01:12.740 --> 00:01:20.080]   property information. So, and I'm going to discuss, you know, why, which kind of technologies to enable
[00:01:20.080 --> 00:01:30.080]   us to ingest the data. I guess there are a few options: RAG, fine-tuning, and long contacts, which are always to ingest data and now focus on RAG for the rest of the talk.
[00:01:30.080 --> 00:01:36.740]   So I guess, you know, for this audience, probably most people knows these technologies, and they are all very simple on a high level.
[00:01:36.740 --> 00:01:47.420]   So for long contacts, it's just the most simple. You just dump all your documents onto a large language model's contacts, and maybe it's like 1 million tokens, maybe it's 1 billion tokens.
[00:01:47.420 --> 00:01:59.420]   And then you have a query, and you just get a response. Fine-tuning is like your first fine-tune a large English model. You update the parameters, and then you say, "I'm not going to look at the documents anymore."
[00:01:59.420 --> 00:02:12.420]   When the query comes, I just use the updated parameters to generate response. And RAG is also pretty simple. So basically, what happens is that, on the fly, you use the query to retrieve some subset of the documents.
[00:02:12.420 --> 00:02:22.420]   You use the retrieval or search method, and then you get some relevant documents. You give this small set of relevant documents to the large language model, and then you generate response based on those contacts.
[00:02:22.420 --> 00:02:34.420]   So this is my one slide, kind of like a summary of how I think about the differences between these technologies. You know, some of these are inspired by some of the research at Stanford.
[00:02:34.420 --> 00:02:43.420]   When we kind of started to build Voyage, you know, we kind of like believe in RAG, and one of the reasons is that we don't believe that fine-tuning can work.
[00:02:43.420 --> 00:02:49.420]   And long contacts, I think, I also don't really believe that it can be cost-efficient in the long run.
[00:02:49.420 --> 00:03:01.420]   So basically, I think the way that I think about this is that I try to make an analogy to how humans are learning from or using the additional property information.
[00:03:01.420 --> 00:03:07.420]   So in some sense, long contacts, it's kind of like you scheme an entire library to answer any single question, right?
[00:03:07.420 --> 00:03:13.420]   Every time you answer a question, you need to go through the entire library, which has like probably one billion tokens.
[00:03:13.420 --> 00:03:22.420]   And fine-tuning is kind of like you read this library in advance, you must memorize them, you try to internalize them in your brain, in your neurons, in your synapses,
[00:03:22.420 --> 00:03:27.420]   and you update your brain, basically rewire your brain so that you really know all of those deeply.
[00:03:27.420 --> 00:03:39.420]   The challenge there is that, you know, it's very difficult and somewhat unnecessary because, you know, you cannot really memorize all the books in the world and memorizing a subset of them.
[00:03:39.420 --> 00:03:44.420]   Sometimes it's kind of like, you know, which subset you want to memorize is kind of tricky as well.
[00:03:44.420 --> 00:03:54.420]   So and another thing is that it makes, you know, forgetting the knowledge also tricky because you don't know which part of the knowledge you should forget and how to clearly forget all of them.
[00:03:54.420 --> 00:04:06.420]   And also this makes the access, the data governance also kind of tricky because, you know, maybe there are so many libraries, so many books in the library and not everyone can access everything and how to organize those.
[00:04:06.420 --> 00:04:16.420]   And on the other hand, reg is very, very simple and modularized as I've shown, so and very reliable and, you know, and also kind of fast and cheap.
[00:04:16.420 --> 00:04:21.420]   So and it's kind of like similar to how humans actually are using the libraries, right?
[00:04:21.420 --> 00:04:26.420]   You achieve the most relevant, you know, book chapters or books or book chapters and then answer the question.
[00:04:26.420 --> 00:04:29.420]   It's kind of a hierarchical way to store information, right?
[00:04:29.420 --> 00:04:35.420]   You don't really put all of the information in your brain, you put them in a library and then use them when you need it.
[00:04:35.420 --> 00:04:41.420]   So that's why I believe in reg and this is how you implement the retrieval part.
[00:04:41.420 --> 00:04:44.420]   So basically there is a breakdown of two components.
[00:04:44.420 --> 00:04:46.420]   Actually, there are three, you know, if you are advanced.
[00:04:46.420 --> 00:05:00.420]   So these embedding models which vectorize the documents and query into vectors and the vectors are representations of the content or the meanings of the documents and queries.
[00:05:00.420 --> 00:05:06.420]   And then you use a vector database to store the data and also search within the k-nearest neighbor search in the vector space.
[00:05:06.420 --> 00:05:10.420]   And then you get the relevant documents and then you can use large-generation model to generate answers.
[00:05:10.420 --> 00:05:17.420]   So we have seen significant improvements over the retrieval accuracy in the last two years.
[00:05:17.420 --> 00:05:22.420]   when we started Voyage, you know, I think OpenAI v3 was not yet launched.
[00:05:22.420 --> 00:05:25.420]   I think OpenAI v3 was launched 1.5 years ago.
[00:05:25.420 --> 00:05:30.420]   And in the last 1.5 years, you know, Voyage, you know, has made significant progress.
[00:05:30.420 --> 00:05:32.420]   You know, Cohere also made some progress.
[00:05:32.420 --> 00:05:37.420]   So we can see that a new model has much better accuracy and with lower cost.
[00:05:37.420 --> 00:05:40.420]   And generally we have much better scaling law, right?
[00:05:40.420 --> 00:05:43.420]   So the same number of parameters, the quality becomes better.
[00:05:43.420 --> 00:05:48.420]   Or the same quality, the parameters become smaller and it becomes cheaper.
[00:05:48.420 --> 00:05:56.420]   And all of these are through kind of like, you know, optimizing the research stack, the tuning stack, you know, as much as possible.
[00:05:56.420 --> 00:06:03.420]   You know, all the way from like data curation, data selection, architecture, loss functions, you know, evaluation, so on and so forth.
[00:06:03.420 --> 00:06:13.420]   And we still, you know, believe that there's a big headroom here because, you know, right now you can see that in this plot, you know, we are averaging over about 100 data sets and accuracy is about 80%.
[00:06:13.420 --> 00:06:19.420]   So that means that you still have like probably 20% of the improvement on headroom.
[00:06:19.420 --> 00:06:24.420]   But that said, you know, just to be clear, it's not like for every data set, you only have 80% accuracy.
[00:06:24.420 --> 00:06:28.420]   For probably half of the data sets, the accuracy is probably 90% or even 95%.
[00:06:28.420 --> 00:06:32.420]   And for some of the other ones, it's kind of 60, sometimes 20, sometimes 30.
[00:06:32.420 --> 00:06:34.420]   So that's why your average is 80%.
[00:06:34.420 --> 00:06:42.420]   So basically I'm saying like for some of the tasks that are common, I think you can get already very high accuracy in the retrieval step.
[00:06:42.420 --> 00:06:53.420]   And another thing that Voyage and other companies has offered is this so-called matrix learning and also quantization of wire training.
[00:06:53.420 --> 00:06:58.420]   So basically these are two approaches to reduce the storage cost for the vectors.
[00:06:58.420 --> 00:07:09.420]   So basically matrix learning means that you make sure that even you have like a high dimensional embedding, right, you can use a subset of the coordinates.
[00:07:09.420 --> 00:07:21.420]   It's usually the first, let's say suppose you have a 2048 dimensional vectors and the first 256 dimensional sub vector is still a reasonable embedding.
[00:07:21.420 --> 00:07:29.420]   The accuracy wouldn't be as high as 2048, but it will be almost the same, maybe with a 1% or 2% loss.
[00:07:29.420 --> 00:07:32.420]   And quantization is kind of in a similar vein.
[00:07:32.420 --> 00:07:37.420]   So where you are, even you lower your precision of the vectors, you still get pretty high performance.
[00:07:37.420 --> 00:07:41.420]   And you can see the trade off on the right of the figure here.
[00:07:41.420 --> 00:07:47.420]   So basically you can save, you know, 100x, you know, at least 10x without losing much.
[00:07:47.420 --> 00:07:52.420]   If you save 100x in the storage cost, then you start to lose probably 5 to 10%.
[00:07:52.420 --> 00:07:58.420]   But Voyage, you know, is doing a great job here because, you know, you can save 100x but still doing better than OpenEye.
[00:07:58.420 --> 00:08:01.420]   That's just because the parental front here is different.
[00:08:01.420 --> 00:08:10.420]   So, and you can actually see better trade off, you know, for domain specific models, which I'm going to discuss in a moment.
[00:08:10.420 --> 00:08:17.420]   I have nine minutes here, so I will probably just quickly go through some of the techniques that you can use.
[00:08:17.420 --> 00:08:22.420]   So basically the next question is how do you do better reg, you know, besides using better embedding models.
[00:08:22.420 --> 00:08:25.420]   Using better embedding models is probably one of the simplest way.
[00:08:25.420 --> 00:08:27.420]   So I'm just going to go through it quickly.
[00:08:27.420 --> 00:08:30.420]   So one of them is to use hybrid search and re-rankers.
[00:08:30.420 --> 00:08:35.420]   You can use, you know, lexical search and other kind of search and then combine them with a re-ranker.
[00:08:35.420 --> 00:08:38.420]   And Voyage provides a re-ranker as well.
[00:08:38.420 --> 00:08:45.420]   And another one is you can enhance the queries and documents by the so-called query decomposition and document enrichment.
[00:08:45.420 --> 00:08:47.420]   So this is probably the most common one.
[00:08:47.420 --> 00:08:48.420]   Maybe there's one minute on it.
[00:08:48.420 --> 00:08:49.420]   So it's actually very simple.
[00:08:49.420 --> 00:08:56.420]   You just say, if you have a query reg, then you try to improve the query by making it longer using a large language model.
[00:08:56.420 --> 00:09:04.420]   You can also decompose the longer query into small sub-queries so that you can have, like, a few different queries and search for different subset of documents.
[00:09:04.420 --> 00:09:09.420]   And you can also enrich the document by adding additional matter information in it.
[00:09:09.420 --> 00:09:13.420]   You can add titles, you know, hiders, you know, categories, author, states.
[00:09:13.420 --> 00:09:17.420]   Sometimes you trunk the document so that in the trunk you don't even have this information anymore.
[00:09:17.420 --> 00:09:20.420]   So that's why you have to add the global information into each of the trunks.
[00:09:20.420 --> 00:09:24.420]   And some of this global information can be added by large language models.
[00:09:24.420 --> 00:09:28.420]   Anthropik wrote a blog post which does achieve pretty good results.
[00:09:28.420 --> 00:09:39.420]   So basically they use large language models to generate additional contacts that you can add to the trunks so that you can make the trunks, you know, more informative and then it's easier to search through them.
[00:09:39.420 --> 00:09:47.420]   So another one is you can use domain-specific embeddings where you customize embeddings for certain kind of domains.
[00:09:47.420 --> 00:09:51.420]   You know, in MongoDB or Voyage, we customize it for code, for example.
[00:09:51.420 --> 00:10:00.420]   And you can see that, you know, you get much better performance and also it's a better trade-off in terms of the storage cost and accuracy.
[00:10:00.420 --> 00:10:05.420]   So basically you don't lose as much if you compress the vectors even further.
[00:10:05.420 --> 00:10:11.420]   So here we lose probably 5% by compressing for like about 100x.
[00:10:11.420 --> 00:10:14.420]   But before we lose probably 10% or 15%.
[00:10:14.420 --> 00:10:16.420]   Fine-tuning is another one.
[00:10:16.420 --> 00:10:18.420]   You can fine-tuning embedding models with your own data.
[00:10:18.420 --> 00:10:23.420]   And you can also use other, sometimes I call them tricks on top of the embeddings, right?
[00:10:23.420 --> 00:10:29.420]   So these are different type of ways to retrieve using additional information like graph, you know, iterative retrieving.
[00:10:29.420 --> 00:10:38.420]   So on and so forth, they're all based on embeddings, but you can use the embeddings in many different ways as an additional layer.
[00:10:38.420 --> 00:10:48.420]   So I guess I'll use the next probably five minutes to discuss some of my vision for how reg will go in the future.
[00:10:48.420 --> 00:10:54.420]   I do believe that reg will be there forever because this is, as I argued in the first set of slides,
[00:10:54.420 --> 00:11:00.420]   this is kind of like very similar to how humans are using additional large amount of data.
[00:11:00.420 --> 00:11:08.420]   You retrieve, you hierarchically select some subset and then you use those to answer the questions or take some actions.
[00:11:08.420 --> 00:11:13.420]   And this is very efficient because you only use a small subset of the data.
[00:11:13.420 --> 00:11:28.420]   And as a, regarding how reg will evolve from a technical point of view, I'd like to draw some analogy from how the AI generally is evolving.
[00:11:28.420 --> 00:11:34.420]   So I think I was reflecting on when I was teaching at Stanford, you know, starting to teach at Stanford about seven years ago.
[00:11:34.420 --> 00:11:37.420]   I started to teach with Chris Ray on this machine learning course.
[00:11:37.420 --> 00:11:43.420]   And one of the slides literally have these seven steps on how do we build ML systems in enterprises.
[00:11:43.420 --> 00:11:47.420]   So this actually, this slide is still in the lecture notes.
[00:11:47.420 --> 00:11:52.420]   We still teach them, but just with more kind of like asterisks around it.
[00:11:52.420 --> 00:11:58.420]   So you can see like you, you need to go through, you know, many steps, you know, tracking data, you know,
[00:11:58.420 --> 00:12:02.420]   define your loss functions, you know, build models and iterate and repeat.
[00:12:02.420 --> 00:12:07.420]   And then for the large language model world, it's kind of like this, where you don't need to do any of this.
[00:12:07.420 --> 00:12:14.420]   You just take a large language model out of the box and just, you know, you can deploy it in enterprise in most of the cases.
[00:12:14.420 --> 00:12:18.420]   Of course, it's not going to be perfect, but this is already better than in the old days.
[00:12:18.420 --> 00:12:21.420]   You do all of these steps in the enterprise using all the enterprise data.
[00:12:21.420 --> 00:12:24.420]   Just out of the box, you are doing already very, very well.
[00:12:24.420 --> 00:12:31.420]   Of course, you still have this issue that you cannot, out of the box, large language model cannot access property information.
[00:12:31.420 --> 00:12:34.420]   Then you can use reg for it.
[00:12:34.420 --> 00:12:44.420]   So, but I think the point here is that before all of these steps have to be done by the kind of like the users or the enterprise or the customers in some sense.
[00:12:44.420 --> 00:12:54.420]   And now you, largely speaking, just can take off the shelf components and connect them and build your AI applications very fast without going through these training steps.
[00:12:54.420 --> 00:12:56.420]   The trainings still have to be done, right?
[00:12:56.420 --> 00:13:07.420]   All of these steps still are done, but they are done by OpenAI, Anthropik or Voyage, MongoDB, the providers of the models, but not the users, the end users.
[00:13:07.420 --> 00:13:13.420]   So, and I think for reg, I would say probably the same kind of evolution which would happen.
[00:13:13.420 --> 00:13:24.420]   So, right now what happens is that we have the several different layers where you have the computing infrastructure layer about the GPUs, you know, or some of the KNs on the CPUs.
[00:13:24.420 --> 00:13:29.420]   And there's also a model layer where you have the embedding models, the revampers, the large language models.
[00:13:29.420 --> 00:13:37.420]   And then on top of all of this, people use a lot of like, I call it tricks to make reg accuracy much better, right?
[00:13:37.420 --> 00:13:50.420]   You can use all kinds of parsing strategies, you can use all kinds of trunking strategies, you know, you can do some recursive search, you can do some contextual trunks, graph regs, so on and so forth.
[00:13:50.420 --> 00:13:59.420]   Right, that's what happens right now, and it's kind of necessary, these tricks are somewhat necessary because the embeddings and revampers and large language models, none of them are perfect yet.
[00:13:59.420 --> 00:14:07.420]   Right, so, and, but I do believe that in the future, I think this model layer will grow, and the tricks will be smaller.
[00:14:07.420 --> 00:14:15.420]   So, it's going to be fewer and fewer tricks, and the models can capture many of the performance gained by the tricks.
[00:14:15.420 --> 00:14:18.420]   I think we have seen this in the large language model space as well, right?
[00:14:18.420 --> 00:14:25.420]   So, like, two years ago, I think you need to do a lot of things on top of the GPT-3 to make your application work.
[00:14:25.420 --> 00:14:31.420]   And now, even out of the box, you can get the same performance as before with all of the tricks.
[00:14:31.420 --> 00:14:42.420]   Of course, you still probably need some kind of tricks because some information are not, some information the embedding models and revampers don't have just, right?
[00:14:42.420 --> 00:14:49.420]   So, the general purpose models or off-the-shelf models don't have certain information, and then you can incorporate those into your tricks.
[00:14:49.420 --> 00:14:57.420]   For example, one thing that is that, you know, the definition of the similarity matrix could be something that you should customize in your prompt.
[00:14:57.420 --> 00:15:04.420]   And in this one, you know, I think there are several things that we are developing towards this vision, right?
[00:15:04.420 --> 00:15:06.420]   So, one of them is multi-model embedding.
[00:15:06.420 --> 00:15:11.420]   This is to dramatically simplify the workflow so that you don't have to do many things, right?
[00:15:11.420 --> 00:15:16.420]   So, these days, the multi-model embedding provided by Voyage can just take in screenshots, right?
[00:15:16.420 --> 00:15:25.420]   Before you take a PDF, you have to do the data extraction to turn them into image and text and then probably do some embeddings for the image and embedding for the text separately.
[00:15:25.420 --> 00:15:35.420]   And parsing this PDF is actually complex, you know, and for videos, you have to turn them into transcripts and then use the text embedding, so on and so forth.
[00:15:35.420 --> 00:15:39.420]   Right now, we have the multi-model embedding, which just takes in screenshots.
[00:15:39.420 --> 00:15:46.420]   You can deal with PDF, you know, PPT, PowerPoint, you know, any of the other kind of slide stack in the same way.
[00:15:46.420 --> 00:15:49.420]   Just take a screenshot and then use the multi-model embedding.
[00:15:49.420 --> 00:15:57.420]   We don't have the -- we can even do the same thing for video, not necessarily the perfect way, but, like, you just take screenshots of the frames, you know, consecutive frames,
[00:15:57.420 --> 00:16:05.420]   and you give it to the multi-model embedding, and you can turn them into vectors, and you can search over those documents or videos or slide stack.
[00:16:05.420 --> 00:16:11.420]   And these are some performance metrics that we have evaluated.
[00:16:11.420 --> 00:16:15.420]   You know, we have tried kind of like -- oh, by the way, another one application is tables, right?
[00:16:15.420 --> 00:16:17.420]   Now you can just take a screenshot of the tables.
[00:16:17.420 --> 00:16:21.420]   You don't have to think too much about what is the header, what is the row, so on and so forth.
[00:16:21.420 --> 00:16:27.420]   And we have done evaluations on many of these document screenshots, you know, table figures, and also text only.
[00:16:27.420 --> 00:16:30.420]   And you can see that it's improving across the board.
[00:16:30.420 --> 00:16:39.420]   So the final one I would like to mention, which is something that we're going to launch soon is that this context wire and auto-trunking embedding.
[00:16:39.420 --> 00:16:45.420]   So right now what happens is that when you have a long document, you do have to trunk the data.
[00:16:45.420 --> 00:16:50.420]   One of the reasons is that the context length of the embeddings is limited.
[00:16:50.420 --> 00:16:54.420]   And if you have, like, 100K tokens, you do have to trunk it into three or four trunks.
[00:16:54.420 --> 00:17:00.420]   You know, even though Voyage AI has the -- probably -- I think we have the longest context window.
[00:17:00.420 --> 00:17:01.420]   It's still like 32K.
[00:17:01.420 --> 00:17:03.420]   So that's one reason to trunk.
[00:17:03.420 --> 00:17:12.420]   And another reason to trunk is that sometimes the long document, even if you don't trunk, suppose you can have a way to put all of them in a context window.
[00:17:12.420 --> 00:17:15.420]   Still, when you retrieve, you're going to retrieve on a document level.
[00:17:15.420 --> 00:17:17.420]   Then you retrieve a very, very long document.
[00:17:17.420 --> 00:17:20.420]   And then you should give this long document to a large language model.
[00:17:20.420 --> 00:17:21.420]   It's going to be very, very expensive, right?
[00:17:21.420 --> 00:17:30.420]   If you give 100K tokens to a large language model, every time you answer any question, if you do some cost analysis, you'll find that that core is very, very expensive.
[00:17:30.420 --> 00:17:36.420]   So that's why you do have to work on a smaller unit so that you can cut the cost and be also more focused, right?
[00:17:36.420 --> 00:17:41.420]   So sometimes you give a long document to a large language model, it misses some of the context in the middle.
[00:17:41.420 --> 00:17:45.420]   And you have to use the retrieval to focus on a paragraph, a page, so on and so forth.
[00:17:45.420 --> 00:17:48.420]   So that's what happens right now with the trunking.
[00:17:48.420 --> 00:17:50.420]   But all of these are done by the users.
[00:17:50.420 --> 00:17:53.420]   And our vision is that we're going to do this for you.
[00:17:53.420 --> 00:17:58.420]   And also we're going to get all the meta information from other trunks.
[00:17:58.420 --> 00:18:05.420]   So basically, in a nutshell, the interface will be that you give us a long document and we're going to trunk it for you.
[00:18:05.420 --> 00:18:10.420]   And then also we return the trunks and also the vectors for each of the trunk.
[00:18:10.420 --> 00:18:17.420]   And each of these vectors is not only representing that trunk, but also representing some of the global meta information from other trunks.
[00:18:17.420 --> 00:18:27.420]   So it has all the details of the corresponding trunk and also has some kind of like cross-grid information from other trunks so that you can get the best of the both worlds.
[00:18:27.420 --> 00:18:30.420]   And that's what I'm going to launch soon.
[00:18:30.420 --> 00:18:38.420]   And another one is that we're going to have some fine-tune API at some point to make you so that you can fine-tune with your own data.
[00:18:38.420 --> 00:18:40.420]   So I guess it's exactly time.
[00:18:40.420 --> 00:18:41.420]   Thanks very much.
[00:18:41.420 --> 00:18:42.420]   Thanks very much.
[00:18:42.420 --> 00:18:43.420]   Thanks very much.
[00:18:43.420 --> 00:18:43.420]   Thanks very much.
[00:18:43.420 --> 00:18:45.480]   you
[00:18:45.480 --> 00:18:47.480]   We'll see you next time.

