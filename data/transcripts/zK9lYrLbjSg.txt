
[00:00:00.000 --> 00:00:02.000]   -
[00:00:02.000 --> 00:00:17.600]   - Okay, hi everyone.
[00:00:17.600 --> 00:00:18.760]   Welcome, welcome.
[00:00:18.760 --> 00:00:21.720]   So welcome to our workshop,
[00:00:21.720 --> 00:00:25.120]   AI engineering with the Google Gemini 2.0 family.
[00:00:25.120 --> 00:00:26.640]   So as it is a workshop,
[00:00:26.640 --> 00:00:28.480]   we are going to keep it super hands-on,
[00:00:28.480 --> 00:00:31.280]   so please keep all computer open.
[00:00:31.280 --> 00:00:33.640]   You don't need any Google account,
[00:00:33.640 --> 00:00:34.640]   like Google Cloud account.
[00:00:34.640 --> 00:00:36.000]   You can use your personal Gmail.
[00:00:36.000 --> 00:00:38.160]   It will be completely free for you to use.
[00:00:38.160 --> 00:00:39.720]   So that's the point.
[00:00:39.720 --> 00:00:40.880]   Before we get started,
[00:00:40.880 --> 00:00:42.920]   can you maybe help me understand
[00:00:42.920 --> 00:00:46.680]   how many of you has used Google Gemini before?
[00:00:46.680 --> 00:00:49.480]   Oh wow, that's cool.
[00:00:49.480 --> 00:00:50.400]   That's a lot of hands.
[00:00:50.400 --> 00:00:53.240]   More than the last time I gave a talk like this.
[00:00:53.240 --> 00:00:55.320]   So what we are going to do,
[00:00:55.320 --> 00:00:57.880]   we have like three slides, so don't worry, not too much.
[00:00:57.880 --> 00:01:00.120]   But we are going to focus on Gemini 2.5.
[00:01:00.120 --> 00:01:02.680]   So there's a Gemini 2.5 Pro model
[00:01:02.680 --> 00:01:04.560]   and a Gemini 2.5 Flash model.
[00:01:04.560 --> 00:01:05.880]   We are going to use the Flash model
[00:01:05.880 --> 00:01:09.040]   as it's available for free tier via API access.
[00:01:09.040 --> 00:01:11.360]   So we are going to do coding.
[00:01:11.360 --> 00:01:14.680]   And both models are multimodal by default,
[00:01:14.680 --> 00:01:17.960]   meaning they can understand text, images, audio, videos,
[00:01:17.960 --> 00:01:20.240]   documents, and can generate text.
[00:01:20.240 --> 00:01:22.960]   We also have Gemini models which can generate images,
[00:01:22.960 --> 00:01:24.520]   which we are also going to use.
[00:01:24.520 --> 00:01:27.760]   And we have now Gemini models which can generate audio.
[00:01:27.760 --> 00:01:31.800]   So you can create speech from text.
[00:01:31.800 --> 00:01:34.640]   If you are curious where you can find those nice model cards
[00:01:34.640 --> 00:01:37.760]   with all of the feature, the model context, the output tokens,
[00:01:37.760 --> 00:01:40.640]   it's on the Gemini docs.
[00:01:40.640 --> 00:01:43.680]   As mentioned, we have two new text to speech models
[00:01:43.680 --> 00:01:47.320]   since Google I/O last week, not a week before.
[00:01:47.320 --> 00:01:48.280]   Those are really cool.
[00:01:48.280 --> 00:01:50.280]   You will try and see them later.
[00:01:50.280 --> 00:01:52.120]   And now for the important details.
[00:01:52.120 --> 00:01:53.560]   So I created a Slack channel.
[00:01:53.560 --> 00:01:55.320]   If you are on the AI engineering Slack channel,
[00:01:55.320 --> 00:01:57.160]   you should be able to find it.
[00:01:57.160 --> 00:01:58.960]   Feel free to use it during the workshop.
[00:01:58.960 --> 00:01:59.880]   You can ask questions.
[00:01:59.880 --> 00:02:02.840]   I try to regularly check to answer them.
[00:02:02.840 --> 00:02:04.800]   Or even afterwards, if you have questions,
[00:02:04.800 --> 00:02:07.120]   complete the workshop at home or next week.
[00:02:07.120 --> 00:02:10.000]   I will take a look and make sure that you get all of the answers.
[00:02:10.000 --> 00:02:12.000]   And then we have one QR code.
[00:02:12.000 --> 00:02:12.840]   It's AI Studio.
[00:02:12.840 --> 00:02:16.720]   You can also just enter in your browser AI.dev or AI.studio,
[00:02:16.720 --> 00:02:19.000]   which will bring you to AI Studio.
[00:02:19.000 --> 00:02:21.480]   And the other link is-- so there's a GitHub repository
[00:02:21.480 --> 00:02:23.400]   with the workshop we are going to do.
[00:02:23.400 --> 00:02:27.440]   The workshop, I can now switch directly to it.
[00:02:27.440 --> 00:02:33.460]   So let's hope if the Wi-Fi gives us some freedom.
[00:02:33.460 --> 00:02:34.840]   So the good part about the workshop
[00:02:34.840 --> 00:02:37.160]   is that we have Google Colabs.
[00:02:37.160 --> 00:02:40.400]   So there's not a lot of downloading happening.
[00:02:40.400 --> 00:02:42.880]   And it will all run in the Colab environment
[00:02:42.880 --> 00:02:45.140]   if you have a Google account.
[00:02:45.140 --> 00:02:47.920]   And the other thing is what we need to do is an AI Studio
[00:02:47.920 --> 00:02:49.280]   to generate an AI key.
[00:02:49.280 --> 00:02:51.780]   So the GitHub repository is now loaded.
[00:02:51.780 --> 00:02:53.820]   In the GitHub repository, we have notebooks.
[00:02:53.820 --> 00:02:55.280]   Can you use the slice piece?
[00:02:55.280 --> 00:02:56.000]   Yeah, of course.
[00:02:56.000 --> 00:02:57.200]   Sorry.
[00:02:57.200 --> 00:03:01.220]   So in the GitHub repository, we have a notebooks folder,
[00:03:01.220 --> 00:03:05.900]   which includes all of our four workshops, plus a zero one,
[00:03:05.900 --> 00:03:08.420]   which is basically some minor instructions
[00:03:08.420 --> 00:03:11.060]   how to set up AI Studio, how to get an API key,
[00:03:11.060 --> 00:03:13.020]   and how to send your first request.
[00:03:13.020 --> 00:03:14.660]   And then we have one--
[00:03:14.660 --> 00:03:17.680]   the beginning section will be all about text generation,
[00:03:17.680 --> 00:03:20.840]   getting started, getting familiar a bit with the SDK.
[00:03:20.840 --> 00:03:23.000]   The second part will be all about multimodality.
[00:03:23.000 --> 00:03:26.120]   How can Gemini understand images, video, audios?
[00:03:26.120 --> 00:03:28.860]   How can we generate images or audio?
[00:03:28.860 --> 00:03:31.580]   And then the third section will be about function calling,
[00:03:31.580 --> 00:03:33.300]   structured outputs, the native tools.
[00:03:33.300 --> 00:03:35.260]   How can I integrate Google search into it?
[00:03:35.260 --> 00:03:37.820]   And then I guess with all of the hype currently going on,
[00:03:37.820 --> 00:03:40.940]   we look at how you can integrate MCP servers together
[00:03:40.940 --> 00:03:44.140]   with Gemini, using it as a model to call the different tools.
[00:03:44.140 --> 00:03:48.440]   Also very nice, so there's a solutions folder.
[00:03:48.440 --> 00:03:53.100]   The solutions folder includes the same notebooks, but with the solutions.
[00:03:53.100 --> 00:04:00.020]   So all of the notebooks include to-do text and also some code snippets and some comments.
[00:04:00.020 --> 00:04:05.480]   So there's a mix between working code snippets, code snippets which has some pointers, and
[00:04:05.480 --> 00:04:09.160]   straight up exercises with to-dos for you to do.
[00:04:09.160 --> 00:04:16.340]   So I will work with you through the existing snippets, and then everyone can work on the exercises,
[00:04:16.340 --> 00:04:21.340]   the ideas that we try to maybe use 30 minutes per different section.
[00:04:21.340 --> 00:04:25.900]   If you, for example, are already very familiar with how what I can do with text generation,
[00:04:25.900 --> 00:04:31.120]   and I would rather like look at the multi-modalities parts or at the function calling parts.
[00:04:31.120 --> 00:04:33.080]   Feel free to like directly jump into the section.
[00:04:33.080 --> 00:04:37.200]   And in general, we want to keep it very open, very dynamic.
[00:04:37.200 --> 00:04:42.780]   If you have questions related to the content, maybe unrelated, please keep them coming, ask
[00:04:42.780 --> 00:04:44.220]   them in Slack, raise your hands.
[00:04:44.220 --> 00:04:48.480]   I'm not sure, maybe we have some microphones here as well so we can like give it to you to
[00:04:48.480 --> 00:04:50.740]   make it super interactive.
[00:04:50.740 --> 00:04:52.600]   So I guess let's get started.
[00:04:52.600 --> 00:04:57.220]   So if you go to the notebooks, there's also a Colab button you can click, which opens the
[00:04:57.220 --> 00:04:59.060]   notebook directly in Google Colab.
[00:04:59.060 --> 00:05:02.320]   And if you prefer like a local Jupyter environment, you can try to clone the repository.
[00:05:02.320 --> 00:05:05.040]   I'm not sure if it works for the Wi-Fi or not.
[00:05:05.040 --> 00:05:07.320]   I guess Colab will be the easiest.
[00:05:07.320 --> 00:05:13.540]   And as mentioned before, the only requirement you basically have is a working Google account.
[00:05:13.540 --> 00:05:19.620]   Can be your corporate one, can be your private one, can be one you create in the next five minutes.
[00:05:19.620 --> 00:05:24.040]   Again, the first step is what we need to do is basically go to AI Studio.
[00:05:24.040 --> 00:05:30.840]   For the ones who are not familiar with AI Studio, AI Studio is our developer platform to quickly
[00:05:30.840 --> 00:05:36.620]   test the models, to experiment with the models, and also keep it very similar to the development
[00:05:36.620 --> 00:05:38.240]   code you will be using.
[00:05:38.240 --> 00:05:42.660]   So if I try to run a request, like maybe let's ask something.
[00:05:42.660 --> 00:05:47.120]   What's the AI Engineering Summit?
[00:05:47.120 --> 00:05:51.420]   I can, on the right side, for example, enable native tools connected with Google Search.
[00:05:51.420 --> 00:05:53.120]   I have our Flash preview model.
[00:05:53.120 --> 00:05:59.240]   I can run the request, and we'll see how fast the model is thinking.
[00:05:59.240 --> 00:06:05.660]   And the nice part here is I can also directly get the SDK code from our request as soon as
[00:06:05.660 --> 00:06:06.660]   it's ready.
[00:06:06.660 --> 00:06:10.720]   So if you are experimenting in AI Studio and you want to convert it into a Python script
[00:06:10.720 --> 00:06:15.660]   or want to play around with it, extend it, that's all possible.
[00:06:15.660 --> 00:06:21.220]   So the AI Engineering Summit refers to several events focusing on artificial intelligence and
[00:06:21.220 --> 00:06:22.740]   engineering.
[00:06:22.740 --> 00:06:23.740]   That's great.
[00:06:23.740 --> 00:06:27.660]   And that also matches the one from New York, which was done this February.
[00:06:27.660 --> 00:06:28.660]   Cool.
[00:06:28.660 --> 00:06:33.380]   So what you need to do to get your API key at the top, right, is -- I can also make that
[00:06:33.380 --> 00:06:34.380]   bigger.
[00:06:34.380 --> 00:06:35.380]   Maybe it's easier.
[00:06:35.380 --> 00:06:38.520]   So we have a get API key at the top.
[00:06:38.520 --> 00:06:39.520]   You go to it.
[00:06:39.520 --> 00:06:42.700]   I'm sorry for it's German, for being it's German.
[00:06:42.700 --> 00:06:47.840]   But on the top right corner, there should be a create API key, a blue button.
[00:06:47.840 --> 00:06:55.300]   And in there, you should -- it should open some -- I can click it -- should open some modal,
[00:06:55.300 --> 00:06:58.600]   where you can either select your Google Cloud project.
[00:06:58.600 --> 00:07:01.460]   If there's none, you should be able to create one.
[00:07:01.460 --> 00:07:02.460]   If -- yep?
[00:07:02.460 --> 00:07:05.020]   Can you switch to my project?
[00:07:05.020 --> 00:07:06.020]   Yep.
[00:07:06.020 --> 00:07:09.020]   Of course.
[00:07:09.020 --> 00:07:10.020]   Um.
[00:07:10.020 --> 00:07:11.020]   Appearance.
[00:07:11.020 --> 00:07:12.020]   Wait.
[00:07:12.020 --> 00:07:13.020]   Okay.
[00:07:13.020 --> 00:07:14.020]   Good idea?
[00:07:14.020 --> 00:07:15.020]   Okay.
[00:07:15.020 --> 00:07:25.020]   Once you select your Google Cloud project or create one, you should be able to create one
[00:07:25.020 --> 00:07:30.020]   and once it is created, you should have it available as a popup.
[00:07:30.020 --> 00:07:31.560]   If not, you can scroll down a bit.
[00:07:31.560 --> 00:07:33.240]   There are your API keys.
[00:07:33.240 --> 00:07:39.320]   And then the second step would be to go into Colab and to go on the left side in the navigation.
[00:07:39.320 --> 00:07:43.680]   So I can also -- let me quickly change that to light mode as well.
[00:07:43.680 --> 00:07:54.780]   But anyways, left side, there's a key, which is called Secrets, and then you enter a name,
[00:07:54.780 --> 00:07:58.600]   which is Gemini API key, and then the value of your API key.
[00:07:58.600 --> 00:08:04.480]   All of what I walked through is also part of the zero-zero setup and authentication notebook.
[00:08:04.480 --> 00:08:06.260]   So if it was too fast, you can, like, look up.
[00:08:06.260 --> 00:08:09.080]   There should be a screenshot of it, where I clicked, and where to edit.
[00:08:09.080 --> 00:08:15.240]   If you are running locally, you need to expose the API key as environment variable with the
[00:08:15.240 --> 00:08:16.420]   same name.
[00:08:16.420 --> 00:08:19.940]   Should be also part of our notebook.
[00:08:19.940 --> 00:08:25.020]   So in the first cell, so basically what we try here is we check whether we are in Google
[00:08:25.020 --> 00:08:26.020]   Colab.
[00:08:26.020 --> 00:08:27.160]   If we are in Colab -- yep?
[00:08:27.160 --> 00:08:28.160]   Yeah.
[00:08:28.160 --> 00:08:34.540]   No, don't worry, like, we go through at one, and then you have enough time to, like,
[00:08:34.540 --> 00:08:36.320]   five to ten minutes to set it up yourself.
[00:08:36.320 --> 00:08:37.320]   Okay?
[00:08:37.320 --> 00:08:38.320]   Quickly that we --
[00:08:38.320 --> 00:08:39.320]   Can we use the font?
[00:08:39.320 --> 00:08:40.320]   Yep.
[00:08:40.320 --> 00:08:42.320]   Is there any PowerPoint presentation?
[00:08:42.320 --> 00:08:43.320]   No.
[00:08:43.320 --> 00:08:44.320]   No PowerPoint.
[00:08:44.320 --> 00:08:45.320]   Code only.
[00:08:45.320 --> 00:08:49.860]   So we go through the API key setup in a minute.
[00:08:49.860 --> 00:08:53.040]   You have plenty of time to do it yourself, and if you have questions, I'm very happy to
[00:08:53.040 --> 00:08:55.600]   come to your place and help you get it created.
[00:08:55.600 --> 00:08:57.540]   Just to complete the setup.
[00:08:57.540 --> 00:09:01.880]   So once you have created your API key, made it available to Colab, or made it available
[00:09:01.880 --> 00:09:05.840]   in your environment, best is to open the first notebook.
[00:09:05.840 --> 00:09:12.960]   It has a super small code snippet in it, which uses your API key and generates -- uses Gemini
[00:09:12.960 --> 00:09:15.660]   2.0 Flash to generate a first string.
[00:09:15.660 --> 00:09:19.780]   So our goal, next five to ten minutes, is trying to get this working.
[00:09:19.780 --> 00:09:21.540]   Okay?
[00:09:21.540 --> 00:09:25.520]   And again, going back, so we have those QQR codes.
[00:09:25.520 --> 00:09:26.920]   One is for AI Studio.
[00:09:26.920 --> 00:09:29.300]   It's the left one.
[00:09:29.300 --> 00:09:31.460]   The other one is for the GitHub repository.
[00:09:31.460 --> 00:09:37.340]   You can also go to AI Studio -- AI.dev to enter AI Studio or go through Google Search.
[00:09:37.340 --> 00:09:40.180]   And you can find the GitHub repository on my GitHub account.
[00:09:40.180 --> 00:09:41.720]   It's like Gemini.
[00:09:41.720 --> 00:09:52.560]   It's like Gemini.2.5.aiEngineering.Workshop, and I will, in the meantime, change the appearance.
[00:09:52.560 --> 00:09:53.560]   Yeah.
[00:09:53.560 --> 00:09:54.560]   Sorry.
[00:09:54.560 --> 00:09:55.560]   Sorry.
[00:09:55.560 --> 00:10:05.100]   So there are in the GitHub repository if you go to the Notebook section.
[00:10:05.100 --> 00:10:09.940]   And each of the Notebooks at the top, there's a button, which opens Colab directly with the
[00:10:09.940 --> 00:10:10.940]   Notebook.
[00:10:10.940 --> 00:10:11.940]   And then, you can do it.
[00:10:11.940 --> 00:10:12.940]   Okay.
[00:10:12.940 --> 00:10:13.940]   Thank you.
[00:10:13.940 --> 00:10:14.940]   Okay.
[00:10:14.940 --> 00:10:15.940]   Okay.
[00:10:15.940 --> 00:10:16.940]   Okay.
[00:10:16.940 --> 00:10:17.940]   Quick check.
[00:10:17.940 --> 00:10:19.940]   Are we ready?
[00:10:19.940 --> 00:10:20.940]   Yeah.
[00:10:20.940 --> 00:10:21.940]   Any no's?
[00:10:21.940 --> 00:10:22.940]   Okay.
[00:10:22.940 --> 00:10:23.940]   Cool.
[00:10:23.940 --> 00:10:33.320]   So the first section will be all about the defaults, basically.
[00:10:33.320 --> 00:10:36.760]   LLM started with being text only.
[00:10:36.760 --> 00:10:37.760]   We generated text.
[00:10:37.760 --> 00:10:44.120]   So the first section basically covers all of how can I generate text?
[00:10:44.120 --> 00:10:48.340]   How can I generate text and have a streaming response?
[00:10:48.340 --> 00:10:50.620]   How can I account my tokens?
[00:10:50.620 --> 00:10:54.000]   It's like always important, right, to understand how many tokens did I use?
[00:10:54.000 --> 00:10:55.620]   How much will it cost?
[00:10:55.620 --> 00:11:00.360]   And there are like a few exercises for you to try out different models, try out different
[00:11:00.360 --> 00:11:01.360]   prompts.
[00:11:01.360 --> 00:11:07.120]   It will also go a bit into detail on how the SDK works in terms of like which inputs you can
[00:11:07.120 --> 00:11:08.120]   provide.
[00:11:08.120 --> 00:11:13.860]   So in the Google AI SDK, we have this concept of a client.
[00:11:13.860 --> 00:11:15.660]   And client has the models abstraction.
[00:11:15.660 --> 00:11:21.160]   The model's abstraction has the method generate content or generate stream content.
[00:11:21.160 --> 00:11:23.420]   And I can also make it maybe a bit bigger.
[00:11:23.420 --> 00:11:26.720]   And each of the, or it has parameter for the model.
[00:11:26.720 --> 00:11:31.820]   And the model ID is basically the Gemini model we want to use, which is defined at the top.
[00:11:31.820 --> 00:11:36.060]   So all of those cells use the same concept.
[00:11:36.060 --> 00:11:38.900]   So all of the workshop section have the same.
[00:11:38.900 --> 00:11:43.360]   If you think, okay, 2.5 flash is not the right model for you, you can change it to a different
[00:11:43.360 --> 00:11:44.360]   model ID.
[00:11:44.360 --> 00:11:49.120]   If you have like a paid account and want to use the pro version, you can also change it.
[00:11:49.120 --> 00:11:58.880]   And content is basically our way to provide data or conversations, chats, and messages to Gemini.
[00:11:58.880 --> 00:12:06.120]   So the first test basically is if we ask it to generate free names for a coffee shop that
[00:12:06.120 --> 00:12:12.880]   emphasizes sustainability and we use the client models, generate content, we have our model ID,
[00:12:12.880 --> 00:12:17.920]   prompt, and then we get our response from Gemini.
[00:12:17.920 --> 00:12:25.680]   And if you have already set up everything, you can try prompting a few things, ask it to explain
[00:12:25.680 --> 00:12:32.240]   some terms or maybe like just change the model ID, and then we continue with counting tokens.
[00:12:32.240 --> 00:12:36.880]   So there are exercises in there which don't have any code snippets.
[00:12:36.880 --> 00:12:40.000]   The solutions part of the workshop has the code.
[00:12:40.000 --> 00:12:46.960]   So if you are getting stuck or if you want to look it up what I added, feel free to take a look there.
[00:12:46.960 --> 00:12:49.600]   But definitely try it first yourself.
[00:12:49.600 --> 00:12:53.520]   If you want to get familiar with the SDK, there are plenty of other snippets.
[00:12:53.520 --> 00:12:59.600]   So exercises basically just to make sure that you understand the concepts and can practice it.
[00:13:00.240 --> 00:13:03.280]   And there are other cells which are partially done.
[00:13:03.280 --> 00:13:08.960]   So for example, the one we have here, which has some code comments and also some to-do calls.
[00:13:08.960 --> 00:13:13.440]   Here the idea is really to force you not to learn new APIs.
[00:13:13.440 --> 00:13:23.280]   So next to the generate content method, there's also a count token API, which we can use to count our tokens.
[00:13:23.280 --> 00:13:28.800]   So similar to our generate method, we provide our model ID and then our prompt here.
[00:13:28.800 --> 00:13:36.880]   And basically what the API does is now it counts only the tokens for our prompt since we haven't generated something.
[00:13:36.880 --> 00:13:41.040]   So we can run it and we get an input tokens of 11.
[00:13:41.040 --> 00:13:59.040]   So the Gemini tokenizer basically converted those 2, 4, 6, 8, 9 words plus a full stop to 11 tokens, which is then an estimate of roughly 0.00002 dollars.
[00:14:00.480 --> 00:14:03.600]   The count tokens API doesn't expose the pricing.
[00:14:03.600 --> 00:14:10.160]   So basically what I did here is like looked up the 2.5 flash pricing and calculated it.
[00:14:10.160 --> 00:14:19.440]   Similar to only counting the input tokens, we oftentimes also want to count the output tokens to understand, okay,
[00:14:21.440 --> 00:14:22.480]   how much does it cost?
[00:14:22.480 --> 00:14:29.520]   So in the next example, we basically generate content and each response has a very nice method,
[00:14:29.520 --> 00:14:36.000]   which is called like an abstraction, which is called a text, which allows us to actually easily access the generation,
[00:14:36.000 --> 00:14:39.520]   but also has a usage meta data object.
[00:14:39.520 --> 00:14:44.720]   And the usage measure data object includes all of our consumed tokens and generated tokens.
[00:14:44.720 --> 00:14:45.920]   So we have input tokens.
[00:14:45.920 --> 00:14:47.840]   We have thought tokens.
[00:14:47.840 --> 00:14:51.040]   So Gemini 2.5 is a thinking model.
[00:14:51.040 --> 00:14:57.440]   So before generating your response, it first generates thinking tokens, basically an abstraction
[00:14:57.440 --> 00:15:02.480]   where it uses more compute to have like more room to generate a good answer for you.
[00:15:02.480 --> 00:15:07.040]   And then also the candidate tokens, which are the response tokens at the end.
[00:15:07.040 --> 00:15:13.120]   And that's how we can calculate the total cost of a request where we use the input token price
[00:15:13.120 --> 00:15:15.840]   and then our candidates tokens and of our tokens.
[00:15:15.840 --> 00:15:21.520]   And for this case, it would be less than like 0.2 cents.
[00:15:21.520 --> 00:15:22.320]   Yeah.
[00:15:22.320 --> 00:15:25.040]   Is 2.5 flash also a thinking?
[00:15:25.040 --> 00:15:25.440]   Yeah.
[00:15:25.440 --> 00:15:26.560]   Okay.
[00:15:26.560 --> 00:15:27.600]   Yep.
[00:15:27.600 --> 00:15:29.760]   I just see different multipliers.
[00:15:29.760 --> 00:15:30.480]   Yeah.
[00:15:30.480 --> 00:15:33.200]   Is there a different price for thoughts token in your estimate?
[00:15:33.200 --> 00:15:34.320]   No.
[00:15:34.320 --> 00:15:38.320]   So input and output tokens are calculated different.
[00:15:38.320 --> 00:15:40.880]   Yes.
[00:15:40.880 --> 00:15:44.160]   So we have prompt tokens as basically the input tokens of your prompt.
[00:15:44.160 --> 00:15:45.680]   And then we have the candidate tokens.
[00:15:45.680 --> 00:15:48.720]   Which is your response and the thought tokens.
[00:15:48.720 --> 00:15:51.520]   And those basically have the same pricing.
[00:15:51.520 --> 00:15:55.440]   And the output tokens are much more expensive than the input tokens.
[00:15:55.440 --> 00:15:57.520]   Because that's where the computation mostly happens.
[00:15:57.520 --> 00:15:59.120]   And the input is just one encoding.
[00:15:59.120 --> 00:16:04.320]   So that's why you always see like the big difference in input pricing versus output pricing.
[00:16:04.320 --> 00:16:07.200]   More.
[00:16:07.200 --> 00:16:08.720]   Yeah.
[00:16:08.720 --> 00:16:14.480]   So for Gemini 2.0 flash, which is our most cost-effective and cheapest model,
[00:16:14.480 --> 00:16:16.880]   the input price for one million is 10 cents.
[00:16:16.880 --> 00:16:20.320]   And the output price is 40 cents.
[00:16:20.320 --> 00:16:23.360]   So you mean like why we got a 639 thought product.
[00:16:23.360 --> 00:16:39.120]   So that's sadly not like directly visible to us.
[00:16:39.120 --> 00:16:41.440]   So we can like look up thought summaries.
[00:16:41.440 --> 00:16:45.440]   But basically the model generates first of all like a lot of like reasoning.
[00:16:45.440 --> 00:16:49.680]   Of course, in our case, like we ask it to generate a haiku.
[00:16:49.680 --> 00:16:53.520]   Might be not like the most, sorry, most difficult prompt.
[00:16:53.520 --> 00:16:59.360]   You can control the thought tokens with something called thinking budget, where you can limit how many
[00:16:59.360 --> 00:17:02.160]   tokens the model has to think or to reason.
[00:17:02.160 --> 00:17:07.280]   So you have some sort of a cost control, but it's basically done dynamically based on your prompt.
[00:17:07.280 --> 00:17:08.240]   Okay.
[00:17:08.240 --> 00:17:08.400]   Yeah.
[00:17:08.400 --> 00:17:09.120]   There's also a question.
[00:17:09.840 --> 00:17:10.240]   Yeah.
[00:17:10.240 --> 00:17:12.640]   I was just curious about the price for the output token.
[00:17:12.640 --> 00:17:17.120]   I was just looking at the documentation that says 350 for thinking.
[00:17:17.120 --> 00:17:28.160]   Yes, so I can let me open the docs and maybe make it easier.
[00:17:28.160 --> 00:17:32.560]   So Gemini 2.5 flash is a hybrid model.
[00:17:32.560 --> 00:17:37.600]   So you can use it with thinking and without thinking and without thinking.
[00:17:37.600 --> 00:17:40.720]   Basically the computation is much more cost effective.
[00:17:40.720 --> 00:17:46.240]   As you might know, like the transformers is all based on intention, which isn't like
[00:17:46.240 --> 00:17:50.160]   and by an x-like kind of calculation.
[00:17:50.160 --> 00:17:54.000]   So it gets bigger and bigger, which means it gets more and more and more compute intenses.
[00:17:54.000 --> 00:17:59.120]   And without thinking, it's for us much easier or inefficient to run.
[00:17:59.120 --> 00:18:09.280]   So if you set thinking to zero or like thinking budget to zero, you will have zero thought tokens,
[00:18:09.280 --> 00:18:10.960]   but you have like your candidate tokens.
[00:18:10.960 --> 00:18:15.040]   And those candidate tokens will then be charged with 0.60 cents.
[00:18:15.760 --> 00:18:20.560]   But once you once you use thinking, meaning a thinking budget greater zero,
[00:18:20.560 --> 00:18:26.400]   you will pay the price for the thinking tokens and for the output tokens.
[00:18:26.400 --> 00:18:28.560]   And that's where the 3.5 dollars.
[00:18:28.560 --> 00:18:39.360]   Yes, I will open the documentation so we'll see it in one second.
[00:18:41.120 --> 00:18:43.520]   And how do you turn thinking on or off?
[00:18:43.520 --> 00:18:45.680]   Do you have to control it with the budget or is there a flag?
[00:18:45.680 --> 00:18:48.160]   I saw you have some kind of cost available on the general content.
[00:18:48.160 --> 00:18:53.360]   Yeah, so in any case, if you have like any questions, the Gemini docs are a great way
[00:18:53.360 --> 00:18:57.360]   to like find the answers or like just ask Google or Gemini directly.
[00:18:57.360 --> 00:19:01.840]   And on the model capabilities, we have the thinking section and they are like the thinking budgets.
[00:19:01.840 --> 00:19:05.760]   And if you want to disable thinking, you basically set the thinking budget to zero.
[00:19:06.880 --> 00:19:07.680]   You can control it.
[00:19:07.680 --> 00:19:11.600]   It could be an integer between like zero and 24,000.
[00:19:11.600 --> 00:19:14.800]   And then setting thinking budget to zero disables thinking.
[00:19:14.800 --> 00:19:16.960]   So that's your way to disable thinking.
[00:19:16.960 --> 00:19:21.200]   Is the thinking budget like a number of reasoning traces to do?
[00:19:21.200 --> 00:19:22.560]   So if I say 4?
[00:19:22.560 --> 00:19:24.640]   No, it's tokens.
[00:19:24.640 --> 00:19:27.360]   So yeah, so we have, yeah.
[00:19:27.360 --> 00:19:32.160]   So we have seen in our example here, we had 600, a bit more than 600 thought tokens.
[00:19:32.160 --> 00:19:38.640]   So if we would set our thinking budget to 512, it would be a maximum of 512 thinking token.
[00:19:38.640 --> 00:19:44.160]   Put it off, but how does it know how many using traces to do or is that not controlled?
[00:19:44.160 --> 00:19:49.440]   Does it spin out other using traces or defines?
[00:19:49.440 --> 00:19:50.160]   No.
[00:19:50.160 --> 00:19:52.720]   Okay.
[00:19:52.720 --> 00:19:55.760]   I see that's just the intermediate number of tokens for the chain cloud.
[00:19:55.760 --> 00:19:57.120]   I guess.
[00:19:57.120 --> 00:19:58.400]   Oh.
[00:19:58.400 --> 00:19:59.120]   Okay.
[00:19:59.120 --> 00:20:02.080]   Continuing with our notebook.
[00:20:02.080 --> 00:20:05.360]   So and please continue yourself.
[00:20:05.360 --> 00:20:10.240]   Like I'm like, you can do it with your own tempo or even like do it faster, slower,
[00:20:10.240 --> 00:20:12.800]   just to make sure that we are all like the same page.
[00:20:12.800 --> 00:20:17.600]   And I guess like the most interesting part about like streaming and like LLMs in general,
[00:20:17.600 --> 00:20:23.040]   we all have seen it with JetGPT, is that waiting for the whole response is a very bad user experience,
[00:20:23.040 --> 00:20:23.360]   right?
[00:20:23.360 --> 00:20:26.720]   Like who wants to wait like 60 seconds, two minutes for a response?
[00:20:26.720 --> 00:20:30.480]   So that's why everyone now kind of uses streaming.
[00:20:30.480 --> 00:20:34.000]   And with the Gemini and the Gemini SDK, it's like super easy.
[00:20:34.000 --> 00:20:38.560]   So instead of having just generate content, we have generate content stream,
[00:20:38.560 --> 00:20:45.600]   same input parameters, except that we now get an iterator back from our call, which we can loop
[00:20:45.600 --> 00:20:53.840]   over and we can like print our junk or like stream it back to our user using an HTTP service.
[00:20:57.840 --> 00:21:09.520]   And then similar to other models, Gemini is a chat model, right?
[00:21:09.520 --> 00:21:15.520]   And maybe you are familiar with the OpenAI SDK, where you have the concept of messages, where you have like
[00:21:15.520 --> 00:21:22.560]   a different like inputs per user turn, assistant turn, user turn, and it makes it very, I would say,
[00:21:22.560 --> 00:21:25.600]   it's still complex to manage yourself because you need to keep track of it.
[00:21:25.600 --> 00:21:32.480]   To make it easier, we added something which is called a chats API, which basically does all of
[00:21:32.480 --> 00:21:39.120]   the state management on the client, but as part of the SDK. So you can create a chat with your
[00:21:39.120 --> 00:21:47.280]   model, and then you can basically send messages into our chat session. And the user, like in this case,
[00:21:47.280 --> 00:21:56.560]   it's like we are planning for a trip, we send a message, we get back the response, but also our chat session
[00:21:56.560 --> 00:22:03.840]   includes the user prompt and the assistant message. So instead of needing to create this object of user
[00:22:03.840 --> 00:22:11.920]   terms and model terms, we can directly continue with like sending our next message, asking
[00:22:13.600 --> 00:22:22.800]   for some good food recommendations. And since we are in like a conversational setting, the model knows
[00:22:22.800 --> 00:22:30.240]   that we are, or like it mentioned for us to go to different European cities. And based on like the
[00:22:30.240 --> 00:22:37.760]   next request, it uses like the whole like conversation as history to get our response. I can like also quickly
[00:22:39.360 --> 00:22:45.040]   print the response here, and
[00:22:45.040 --> 00:22:55.920]   get some different examples. And then if you, of course, if you need to store it to a database or in
[00:22:55.920 --> 00:23:04.000]   general, we have a nice get history method available, which allows you to basically retrieve the complete
[00:23:04.000 --> 00:23:08.720]   current state and you can like store it or update it or whatever you want to do. Yeah?
[00:23:08.720 --> 00:23:21.200]   That's only a client abstraction. So the backend receives the same request if you would send it like as a single request
[00:23:21.200 --> 00:23:27.600]   with an array. It's only a client abstraction to make it easier for developers people to quickly build.
[00:23:32.800 --> 00:23:41.840]   And then similar to OpenAI or to other models, you can like give the model some kind of system instruction to
[00:23:41.840 --> 00:23:48.640]   have it behave differently, respond in a different language, make sure it respects like policies or guideline you provide.
[00:23:48.640 --> 00:23:56.400]   This can be done through generations configs. So we have another argument now in our model call
[00:23:57.120 --> 00:24:06.160]   next to the model ID and the content. We have a config that we can provide our systems instructions. And similar to the systems instruction, we can provide other
[00:24:06.160 --> 00:24:13.840]   generation configurations. So temperatures can be used to make the generation more creative or more deterministic.
[00:24:13.840 --> 00:24:25.120]   So if you, for example, build a retrieve log manager generation where you want a model really mostly trying to use what you provide as a context, there you would normally set the temperature tool or very low value.
[00:24:25.120 --> 00:24:30.320]   If you, if you work on some content writing marketing, you would set the temperature to a very high value.
[00:24:30.320 --> 00:24:38.160]   We can control the max output tokens to make sure that we are not exceeding some budget, some length and top P and top K are also ways to
[00:24:38.320 --> 00:24:48.080]   make our generation more diverse.
[00:24:48.080 --> 00:24:58.240]   So here we have the similar in the config, we have the thinking config and in the thinking concept, you can basically set the thinking budget or also include the thoughts in your request.
[00:24:59.440 --> 00:25:18.720]   Okay. And then I think what's very more unique about what we can do with Gemini is that we have direct, direct support for files. So in this case, I download adventures of Tom Sawyer, a book completely store it in a file,
[00:25:18.720 --> 00:25:25.920]   and use the files API to upload the file to a Google Cloud Storage bucket.
[00:25:25.920 --> 00:25:41.680]   That's free for you. So like if you don't want to use your own corporate bucket or whatever bucket with each AI studio account, basically there's your personal bucket, which stores the file for, I think one day, but you can control the time to live.
[00:25:41.680 --> 00:26:04.880]   And instead of needing to provide the whole file with your request, which can be very intensive, you can upload it and then instead just provide the reference to the file and what the Gemini API does behind the scenes, basically it downloads the file on the back end and makes it available inside your prompt.
[00:26:04.880 --> 00:26:28.880]   And similarly here we can, we uploaded our book. We passed it into our contents list here. So we don't know, not longer have like a single prompt. We have now an array with our file and we ask it to summarize the book and it was also done while I'm talking and then we can also see, okay, the token usage now we had for, was 100,000 tokens.
[00:26:28.880 --> 00:26:44.880]   So much bigger than what we tested before and using the file API makes it very easy also to work with, with PDFs, which we'll see in like the next chapter and then as an exercise for you is to combine a bit all of the things.
[00:26:44.880 --> 00:26:51.880]   So how can I use a book to use the chat to chat with our model to help me better understand it? Yep.
[00:26:51.880 --> 00:27:14.880]   So what you do is basically you upload the file from your client to the cloud into a bucket. And when you send a request part of your, I mean, I can like show it, part of your request would be only the reference to where the file is stored.
[00:27:14.880 --> 00:27:31.880]   And what the Gemini API does behind the scenes is it loads the file into where the request runs and then puts it into the context. So you can use now this file pointer for all requests and you don't need to send it every time.
[00:27:31.880 --> 00:27:42.880]   And here we also have like the URI. So that's basically where our file is stored or can be accessed as well. Yep.
[00:27:42.880 --> 00:27:55.880]   How do you deal with that, is that, is that, that file, is that hidden through the security? So is it only available to the chat agent reference to itself or?
[00:27:55.880 --> 00:28:06.880]   It's only available to your user. So when you send a request, you send an API key and this API key is basically used to get the file. So nobody else can access the file.
[00:28:06.880 --> 00:28:27.880]   So if you would use the PDF, which has like more than a million tokens, basically what would happen?
[00:28:27.880 --> 00:28:36.880]   You would receive an error most likely with like saying that the file is like too big in terms of like a context.
[00:28:36.880 --> 00:28:42.880]   What you can do is basically you can use the, the file, the file to count the tokens.
[00:28:42.880 --> 00:28:56.880]   So we have the file now here and we can client models, count tokens.
[00:28:56.880 --> 00:29:03.880]   You would need to junk it then. So if it, the file doesn't fit, it doesn't fit. And you would need to like think about, okay, can I junk it?
[00:29:03.880 --> 00:29:09.880]   Can I summarize it? Can I maybe do use other techniques to first extract the important information?
[00:29:09.880 --> 00:29:18.880]   And once I have, um, context, which is, um, smaller than the maximum context of my model, you can provide it again.
[00:29:18.880 --> 00:29:19.880]   Yeah.
[00:29:19.880 --> 00:29:20.880]   Yeah.
[00:29:20.880 --> 00:29:22.880]   It doesn't have like no.
[00:29:22.880 --> 00:29:23.880]   No.
[00:29:23.880 --> 00:29:24.880]   No.
[00:29:24.880 --> 00:29:25.880]   No.
[00:29:25.880 --> 00:29:29.880]   Do you have any files, files upload?
[00:29:29.880 --> 00:29:32.880]   No, no.
[00:29:32.880 --> 00:29:35.880]   So it's like, but it will be deleted.
[00:29:35.880 --> 00:29:40.880]   So don't expect the file you upload now to be there an hour or a day.
[00:29:40.880 --> 00:29:52.880]   Um, but you can like use the same concept with, uh, vertex and your own bucket where you have like more control over it where you can say, okay, maybe I'd want to upload it using a different API call or already have it available.
[00:29:52.880 --> 00:29:53.880]   That also works.
[00:29:53.880 --> 00:29:54.880]   Okay.
[00:29:54.880 --> 00:29:58.880]   So there's an entry point to saying use this in the Google storage bucket.
[00:29:58.880 --> 00:30:00.880]   With vertex AI.
[00:30:00.880 --> 00:30:01.880]   Yes.
[00:30:01.880 --> 00:30:02.880]   Yes.
[00:30:02.880 --> 00:30:05.880]   It's roughly the same, but you need to set up the client differently.
[00:30:05.880 --> 00:30:06.880]   Yeah.
[00:30:06.880 --> 00:30:07.880]   Okay.
[00:30:07.880 --> 00:30:08.880]   Yeah.
[00:30:08.880 --> 00:30:09.880]   Yeah.
[00:30:09.880 --> 00:30:10.880]   Good question.
[00:30:10.880 --> 00:30:21.880]   So, I mean, we can maybe directly jump into like the, the, the PDF section.
[00:30:21.880 --> 00:30:26.880]   So, um, continue with section one or jump to section two or three directly.
[00:30:26.880 --> 00:30:37.880]   What I will do is like in the section two, which is all about multimodality, meaning we will cover a visual understanding, audio understanding, videos and document processing.
[00:30:37.880 --> 00:30:45.880]   And that's where I will like jump to, um, and part of the, um, okay.
[00:30:45.880 --> 00:30:46.880]   Being connected.
[00:30:46.880 --> 00:30:50.880]   Part of the, uh, working with PDFs basically.
[00:30:50.880 --> 00:30:53.880]   So similar to what we have seen a minute ago, we have a PDF.
[00:30:53.880 --> 00:30:56.880]   In this case, it's basically an invoice from a supermarket.
[00:30:56.880 --> 00:31:04.880]   Um, I upload it and I asked the model like, what's the, the, the total amount, uh, we can run it.
[00:31:04.880 --> 00:31:05.880]   And what happens behind the scenes?
[00:31:05.880 --> 00:31:06.880]   I can show.
[00:31:06.880 --> 00:31:07.880]   Oh, it's not here.
[00:31:07.880 --> 00:31:09.880]   Wait one second.
[00:31:09.880 --> 00:31:10.880]   Okay.
[00:31:10.880 --> 00:31:11.880]   We don't have the file here.
[00:31:11.880 --> 00:31:12.880]   I uploaded it quickly.
[00:31:12.880 --> 00:31:24.880]   But what happens, um, behind the scenes is we run OCR on your, on your PDF and provide the PDF as image.
[00:31:24.880 --> 00:31:26.880]   Um, so you don't need to do it manually.
[00:31:26.880 --> 00:31:29.880]   So there's no like, Hey, it's a PDF.
[00:31:29.880 --> 00:31:32.880]   Let's convert it to an image and then run OCR.
[00:31:32.880 --> 00:31:35.880]   And then I provide the image and, uh, OCR.
[00:31:35.880 --> 00:31:36.880]   That's not needed.
[00:31:36.880 --> 00:31:38.880]   Um, we are doing it for you.
[00:31:38.880 --> 00:31:39.880]   Okay.
[00:31:39.880 --> 00:31:39.880]   Yeah.
[00:31:39.880 --> 00:31:40.880]   Yeah.
[00:31:40.880 --> 00:31:41.880]   Yeah.
[00:31:41.880 --> 00:31:42.880]   Yeah.
[00:31:42.880 --> 00:31:43.880]   Yeah.
[00:31:43.880 --> 00:31:44.880]   Yeah.
[00:31:44.880 --> 00:31:45.880]   Yeah.
[00:31:45.880 --> 00:31:46.880]   Yeah.
[00:31:46.880 --> 00:31:47.880]   Yeah.
[00:31:47.880 --> 00:31:48.880]   Yeah.
[00:31:48.880 --> 00:31:49.880]   Yeah.
[00:31:49.880 --> 00:31:50.880]   Yeah.
[00:31:50.880 --> 00:31:51.880]   Yeah.
[00:31:51.880 --> 00:31:52.880]   Yeah.
[00:31:52.880 --> 00:31:53.880]   Yeah.
[00:31:53.880 --> 00:31:54.880]   Yeah.
[00:31:54.880 --> 00:31:55.880]   Yeah.
[00:31:55.880 --> 00:31:56.880]   Yeah.
[00:31:56.880 --> 00:31:57.880]   Yeah.
[00:31:57.880 --> 00:31:58.880]   Yeah.
[00:31:58.880 --> 00:31:59.880]   Yeah.
[00:31:59.880 --> 00:32:00.880]   Yeah.
[00:32:00.880 --> 00:32:01.880]   Yeah.
[00:32:01.880 --> 00:32:06.880]   So OCR's or like the image understanding is not perfect yet, right?
[00:32:06.880 --> 00:32:14.880]   If we reach a point where the model understands it like in the same way as without the text, then I guess there's no point.
[00:32:14.880 --> 00:32:23.880]   But like based on like what we have seen and also what the industry does is you receive better results when you provide the OCR plus the image.
[00:32:23.880 --> 00:32:26.880]   Um, yeah, that's, that's basically it.
[00:32:26.880 --> 00:32:27.880]   Yeah.
[00:32:27.880 --> 00:32:29.880]   Maybe you kind of missed that.
[00:32:29.880 --> 00:32:34.880]   So the PDF itself, do you actually look at it as an image?
[00:32:34.880 --> 00:32:36.880]   So if there's tables and diagrams?
[00:32:36.880 --> 00:32:37.880]   Yeah.
[00:32:37.880 --> 00:32:39.880]   And you extracted an image space?
[00:32:39.880 --> 00:32:44.880]   Or you just take, there's also sometimes text hiding in the PDF or cut and paste?
[00:32:44.880 --> 00:32:54.880]   No, I think, I mean, I don't know exactly, but I think it's just basic OCR, nothing special, no magic, and then a screenshot of the PDF.
[00:32:54.880 --> 00:32:55.880]   Yeah.
[00:32:55.880 --> 00:32:56.880]   Yeah.
[00:32:56.880 --> 00:32:57.880]   So it's both.
[00:32:57.880 --> 00:32:58.880]   Okay.
[00:32:58.880 --> 00:32:59.880]   You can try again.
[00:32:59.880 --> 00:33:00.880]   We have now the PDF available.
[00:33:00.880 --> 00:33:07.880]   And in case, um, the workshop has multiple sections with files, which are being part of the repository.
[00:33:07.880 --> 00:33:19.880]   So if you run into like a similar issue, especially for the image understanding part or the audio understanding part, uh, and you use Colab, you might need to download the files manually and then upload it.
[00:33:19.880 --> 00:33:31.880]   But in our case, so we have now our invoice, I think we can like quickly show it.
[00:33:31.880 --> 00:33:45.880]   So I was shopping in Germany, we have a supermarket called Rewe and I basically bought some butter, um, some bread, like some sweet potatoes and, uh, we prompted it and asked, okay, what's the total amount?
[00:33:45.880 --> 00:33:48.880]   We can see here a total amount is like 2020.
[00:33:48.880 --> 00:33:51.880]   Now let's see if we got it correctly and we got it correctly.
[00:33:51.880 --> 00:33:58.880]   And it also correctly extracted it in German, even if I prompted it in English, which I think is like pretty cool.
[00:33:58.880 --> 00:33:59.880]   Okay.
[00:33:59.880 --> 00:34:03.880]   Let's start with the image understanding part.
[00:34:03.880 --> 00:34:04.880]   Can I ask just one quick question?
[00:34:04.880 --> 00:34:05.880]   Yeah, please.
[00:34:05.880 --> 00:34:06.880]   Sorry about the thinking budget.
[00:34:06.880 --> 00:34:07.880]   Yeah.
[00:34:07.880 --> 00:34:14.880]   So it's not just admitting the thinking process that you see, it's actually changing and changing.
[00:34:14.880 --> 00:34:16.880]   I'm not exactly sure what happens.
[00:34:16.880 --> 00:34:25.880]   I only know that by defining the thinking budget, you can limit how many, how many tokens will be used or generated as a maximum.
[00:34:25.880 --> 00:34:30.880]   And very similar to what open AI has with like low medium high effort.
[00:34:30.880 --> 00:34:32.880]   We have a bit more granular controlled.
[00:34:32.880 --> 00:34:44.880]   So we could technically do the same and say like low would be like a thousand token thinking medium would be maybe like 12,000 token thinking and high would be 24,000 token thinking.
[00:34:44.880 --> 00:34:49.880]   Uh, and it would then use like at a maximum those tokens to before generating your response.
[00:34:49.880 --> 00:35:01.880]   But what exactly happens, I can tell you.
[00:35:01.880 --> 00:35:02.880]   Yeah.
[00:35:02.880 --> 00:35:12.880]   So without thinking what we have seen, especially on more like math type of question where the model benefits from like the reasoning, uh, the performance is a bit worse.
[00:35:12.880 --> 00:35:20.880]   But for like general everyday use, especially image understanding or like OCR, you can like easily run it without it.
[00:35:20.880 --> 00:35:23.880]   The truth, it would be, you need to try.
[00:35:23.880 --> 00:35:27.880]   And I think the real benefit here is that you have those granular controls.
[00:35:27.880 --> 00:35:36.880]   So you can run evaluation of thinking budget zero, 1000, 2000, 4000, and see how it impacts your evaluation.
[00:35:36.880 --> 00:35:38.880]   And then you can like calculate for yourself.
[00:35:38.880 --> 00:35:39.880]   Okay.
[00:35:39.880 --> 00:35:42.880]   How much am I able or like, what's my, my maximum cost of it?
[00:35:42.880 --> 00:35:45.880]   And like, what's the, the accuracy I need to reach.
[00:35:45.880 --> 00:35:47.880]   Okay.
[00:35:47.880 --> 00:35:50.880]   More questions or should we continue?
[00:35:50.880 --> 00:35:51.880]   There's a question.
[00:35:51.880 --> 00:35:52.880]   Yeah.
[00:35:52.880 --> 00:36:05.880]   No, it's like, uh, there's a documentation for it, but it's like, uh, Jason PDFs, all different image types, all different video types, all different audio types, all different audio types.
[00:36:05.880 --> 00:36:10.880]   So all of the multimodal, um, features we support.
[00:36:10.880 --> 00:36:24.880]   Um, if it gets a bit more specific with like dot JSX file and dot view files for like web development, we are working on it, but it might, I mean, you will see an arrow and easiest way is to just replace it with a docs TXT.
[00:36:24.880 --> 00:36:33.880]   No, I would say like, those are like, you would need to like, use like market down or like another library to convert it.
[00:36:33.880 --> 00:36:36.880]   And then, or like copy paste the input.
[00:36:36.880 --> 00:36:37.880]   Yeah.
[00:36:37.880 --> 00:36:38.880]   Yeah.
[00:36:38.880 --> 00:36:39.880]   Yeah.
[00:36:39.880 --> 00:36:40.880]   Yeah.
[00:36:40.880 --> 00:36:41.880]   Yeah.
[00:36:41.880 --> 00:36:56.880]   So I'm not exactly sure what our researchers did.
[00:36:56.880 --> 00:37:02.880]   The only thing I know is that we get better performance when you provide the image plus the OCR.
[00:37:02.880 --> 00:37:06.880]   So I guess there's a benefit of having both.
[00:37:06.880 --> 00:37:07.880]   Awesome.
[00:37:07.880 --> 00:37:10.880]   And the second question is the script you just showed us.
[00:37:10.880 --> 00:37:11.880]   Yeah.
[00:37:11.880 --> 00:37:20.880]   Is it essentially the same thing as we saw on the UI in the face of .
[00:37:20.880 --> 00:37:21.880]   Yes, kinda.
[00:37:21.880 --> 00:37:29.880]   So the UI or the AI studio, of course, doesn't use Python, but it calls the same API's behind the scenes.
[00:37:29.880 --> 00:37:34.880]   So the API behind the file upload one is the same API we call from AI studio.
[00:37:34.880 --> 00:37:36.880]   We call the same exact model.
[00:37:36.880 --> 00:37:38.880]   Both have the same exact parameters.
[00:37:38.880 --> 00:37:43.880]   So you should be easily what you test and experiment in the AI studio.
[00:37:43.880 --> 00:37:46.880]   Can you convert into code and run it locally?
[00:37:46.880 --> 00:37:51.880]   There's also this, um, get code, um, button.
[00:37:51.880 --> 00:37:57.880]   So if you are in AI studio and I mean, we can quickly try uploading our invoice again.
[00:37:57.880 --> 00:38:07.880]   And acknowledge ship and use our prompt.
[00:38:07.880 --> 00:38:12.880]   So here.
[00:38:12.880 --> 00:38:17.880]   And now we run basically the same request.
[00:38:17.880 --> 00:38:21.880]   And we can now, we also have this, um, it's a bit hidden.
[00:38:21.880 --> 00:38:28.880]   It's like this code, um, button at the top, which, uh, where you can get the exact same code.
[00:38:28.880 --> 00:38:31.880]   Basically takes a few seconds as the wifi is super bad.
[00:38:31.880 --> 00:38:35.880]   But here you get like the exact same Python code where you create your client.
[00:38:35.880 --> 00:38:36.880]   We have our model.
[00:38:36.880 --> 00:38:41.880]   In this case, as we uploaded it manually, we provide the document not as a file URI.
[00:38:41.880 --> 00:38:43.880]   We provide it directly as base64.
[00:38:43.880 --> 00:38:44.880]   We have our prompt.
[00:38:44.880 --> 00:38:48.880]   Uh, we have the model request already since we generated it.
[00:38:48.880 --> 00:38:49.880]   And then you can continue.
[00:38:49.880 --> 00:38:50.880]   Okay.
[00:38:50.880 --> 00:38:51.880]   Cool.
[00:38:51.880 --> 00:38:52.880]   Uh, question.
[00:38:52.880 --> 00:38:53.880]   Yep.
[00:38:53.880 --> 00:38:59.880]   Uh, can we still use the count tokens, uh, function for when we use a token?
[00:38:59.880 --> 00:39:00.880]   Yep.
[00:39:00.880 --> 00:39:02.880]   So I mean, we can quickly, so try it.
[00:39:02.880 --> 00:39:03.880]   So we are here.
[00:39:03.880 --> 00:39:04.880]   We have our PDF.
[00:39:04.880 --> 00:39:09.880]   I think, I guess it's very interesting to know, like, how many, um, tokens will we use.
[00:39:09.880 --> 00:39:16.880]   So, uh, let's quickly count tokens.
[00:39:16.880 --> 00:39:28.880]   So, if we go here, we have our count tokens and now we use the same contents.
[00:39:28.880 --> 00:39:29.880]   We have the same model ID.
[00:39:29.880 --> 00:39:32.880]   We have our prompt and we have our PDF.
[00:39:32.880 --> 00:39:36.880]   And let's print our token count.
[00:39:36.880 --> 00:39:37.880]   Okay.
[00:39:37.880 --> 00:39:39.880]   And alternatively, what we also have done.
[00:39:39.880 --> 00:39:47.880]   So if you use the, uh, uh, response, so you run a request already, you should have access
[00:39:47.880 --> 00:39:49.880]   to the response or usage metadata.
[00:39:49.880 --> 00:39:50.880]   Yes.
[00:39:50.880 --> 00:39:51.880]   And so we have our account tokens.
[00:39:51.880 --> 00:39:56.880]   So our PDF here is converted into like, uh, uh, roughly 500, uh, tokens.
[00:39:56.880 --> 00:40:00.880]   Um, and the, the prompt we have is like around 20.
[00:40:00.880 --> 00:40:05.880]   And if we compare it to like the request we run, we see, okay, we have the same exact amount
[00:40:05.880 --> 00:40:06.880]   of prompt tokens.
[00:40:06.880 --> 00:40:07.880]   And we have prompt details.
[00:40:07.880 --> 00:40:08.880]   And we have prompt details.
[00:40:08.880 --> 00:40:19.880]   We have our output tokens, four tokens of 42 and candidate tokens of 78.
[00:40:19.880 --> 00:40:21.880]   Okay.
[00:40:21.880 --> 00:40:22.880]   More questions or?
[00:40:22.880 --> 00:40:23.880]   Yeah.
[00:40:23.880 --> 00:40:24.880]   Okay.
[00:40:24.880 --> 00:40:25.880]   Okay.
[00:40:25.880 --> 00:40:25.880]   Yeah.
[00:40:25.880 --> 00:40:26.880]   Yeah.
[00:40:26.880 --> 00:40:27.880]   Yeah.
[00:40:27.880 --> 00:40:27.880]   Okay.
[00:40:27.880 --> 00:40:28.880]   Okay.
[00:40:28.880 --> 00:40:29.880]   Yeah.
[00:40:29.880 --> 00:40:30.880]   Okay.
[00:40:30.880 --> 00:40:30.880]   Okay.
[00:40:30.880 --> 00:40:30.880]   Okay.
[00:40:30.880 --> 00:40:31.880]   Okay.
[00:40:31.880 --> 00:40:31.880]   Okay.
[00:40:31.880 --> 00:40:32.880]   Okay.
[00:40:32.880 --> 00:40:32.880]   Okay.
[00:40:32.880 --> 00:40:33.880]   Okay.
[00:40:33.880 --> 00:40:34.880]   Okay.
[00:40:34.880 --> 00:40:35.880]   Okay.
[00:40:35.880 --> 00:40:36.880]   Okay.
[00:40:36.880 --> 00:40:36.880]   Um, not for, you know, okay.
[00:40:36.880 --> 00:40:37.880]   Yeah.
[00:40:37.880 --> 00:40:38.880]   Okay.
[00:40:38.880 --> 00:40:39.880]   Yeah.
[00:40:39.880 --> 00:40:40.880]   Okay.
[00:40:40.880 --> 00:40:41.880]   Yeah.
[00:40:41.880 --> 00:40:42.880]   Okay.
[00:40:42.880 --> 00:40:42.880]   Okay.
[00:40:42.880 --> 00:40:43.880]   Okay.
[00:40:43.880 --> 00:40:44.880]   Okay.
[00:40:44.880 --> 00:40:45.880]   Okay.
[00:40:45.880 --> 00:40:46.880]   Yeah.
[00:40:46.880 --> 00:40:48.880]   So, the PDF is converted into an image and we provide the image and if the image or like
[00:40:48.880 --> 00:40:54.880]   the PDF has tables, visuals, mind maps, uh, the model is trained on similar data.
[00:40:54.880 --> 00:40:55.880]   So, it will definitely understand parts of it.
[00:40:55.880 --> 00:40:56.880]   I mean, we can, we can try it.
[00:40:56.880 --> 00:41:05.880]   I mean, maybe we can like search for some mind map and ask it something.
[00:41:05.880 --> 00:41:08.880]   Um, you, maybe you can start thinking about a prompt.
[00:41:08.880 --> 00:41:11.780]   So it will definitely understand the parts of it.
[00:41:11.780 --> 00:41:13.460]   I mean, we can try it.
[00:41:13.460 --> 00:41:18.180]   I mean, maybe we can search for some mind map
[00:41:18.180 --> 00:41:22.040]   and ask it something.
[00:41:22.040 --> 00:41:25.380]   Maybe you can start thinking about a prompt
[00:41:25.380 --> 00:41:33.380]   while I'm searching for a mind map, if Wi-Fi allows us.
[00:41:33.380 --> 00:41:33.880]   OK.
[00:41:33.880 --> 00:41:41.280]   OK.
[00:41:41.280 --> 00:41:42.440]   We have our mind map.
[00:41:42.440 --> 00:41:47.860]   I guess it's just a mind map on how to do mind maps.
[00:41:47.860 --> 00:41:49.860]   Any idea what you would like to know?
[00:41:49.860 --> 00:41:53.680]   I mean, what's the most central concept for you?
[00:41:53.680 --> 00:41:54.180]   Sorry?
[00:41:54.180 --> 00:41:57.440]   What's the most central concept in the mind map?
[00:41:57.440 --> 00:41:57.940]   Yeah.
[00:42:02.460 --> 00:42:03.200]   Like this?
[00:42:03.200 --> 00:42:03.700]   Yeah.
[00:42:03.700 --> 00:42:04.000]   OK.
[00:42:04.000 --> 00:42:15.800]   I mean, I'm opening it, but I think on the small scale,
[00:42:15.800 --> 00:42:19.960]   it looks correct with how to mind map.
[00:42:19.960 --> 00:42:26.360]   Answers?
[00:42:26.360 --> 00:42:26.860]   Perfect.
[00:42:26.860 --> 00:42:31.240]   I mean, the issue that theory happens, right?
[00:42:31.240 --> 00:42:32.600]   Like, there's a table.
[00:42:32.600 --> 00:42:35.140]   So the fidelity of the table, in fact,
[00:42:35.140 --> 00:42:37.180]   that we're going to capture it in an image.
[00:42:37.180 --> 00:42:40.260]   So the fidelity of the image represents that table well.
[00:42:40.260 --> 00:42:42.700]   If, for example, that's a complicated table.
[00:42:42.700 --> 00:42:43.840]   So those are our challenges, right?
[00:42:43.840 --> 00:42:45.940]   That you can basically see you as a media.
[00:42:45.940 --> 00:42:51.660]   And if you're saying it's only for OCR, and then only for an image,
[00:42:51.660 --> 00:42:53.860]   that if you're going to get this done with that,
[00:42:53.860 --> 00:42:57.000]   or even if it might not be using .
[00:42:57.000 --> 00:43:00.840]   But if that's a challenge, .
[00:43:00.840 --> 00:43:02.820]   So where we have seen the most success
[00:43:02.820 --> 00:43:04.900]   is when you, like, separate a bit.
[00:43:04.900 --> 00:43:07.960]   So there are already very good existing methods, which
[00:43:07.960 --> 00:43:11.840]   allow you to extract tables or other visuals from documents.
[00:43:11.840 --> 00:43:15.320]   And when you then, like, work with those images and tables
[00:43:15.320 --> 00:43:18.480]   directly, and not, like, you--
[00:43:18.480 --> 00:43:20.260]   the way how we work changes from, like,
[00:43:20.260 --> 00:43:24.840]   previously we provided a table, run OCR, then ask our question.
[00:43:24.840 --> 00:43:28.160]   Now we directly ask the question based on the table,
[00:43:28.160 --> 00:43:30.880]   as the models get so good in, like, the multimodal understanding
[00:43:30.880 --> 00:43:33.300]   that it can combine, like, the different aspects.
[00:43:33.300 --> 00:43:37.420]   I mean, we can try it maybe as a good example as well.
[00:43:37.420 --> 00:43:41.480]   Maybe we find some nice, I don't know,
[00:43:41.480 --> 00:43:43.800]   inverse image or something.
[00:43:43.800 --> 00:43:46.160]   And then we can, like, ask it maybe to add something
[00:43:46.160 --> 00:43:48.540]   or to combine it, which would be very hard, I guess,
[00:43:48.540 --> 00:43:50.540]   for a normal model.
[00:43:50.540 --> 00:43:53.300]   But in general, like, especially Gemini
[00:43:53.300 --> 00:43:56.260]   is so good with, like, the multimodal understanding.
[00:43:56.260 --> 00:43:58.300]   It also-- videos is, like--
[00:43:58.300 --> 00:44:00.220]   that's, like, my most new favorite thing
[00:44:00.220 --> 00:44:04.420]   is, like, take a YouTube video, which is below one hour,
[00:44:04.420 --> 00:44:07.140]   put it into AI Studio and, like, have it summarize it.
[00:44:07.140 --> 00:44:08.980]   Or if you have, like, any specific question,
[00:44:08.980 --> 00:44:11.580]   like, it's so much faster than, like, sitting there,
[00:44:11.580 --> 00:44:13.720]   even, like, watching it in, like, two speeds.
[00:44:13.720 --> 00:44:16.440]   You get a response in, like, 80 seconds or something.
[00:44:16.440 --> 00:44:18.140]   And you can, like, even, like, ask it
[00:44:18.140 --> 00:44:22.620]   to extract specific timestamps on when something was set
[00:44:22.620 --> 00:44:25.420]   or to help you, like, section it very easily.
[00:44:25.420 --> 00:44:33.620]   Sorry, can you speak a little bit louder?
[00:44:33.620 --> 00:44:34.120]   Yeah.
[00:44:34.120 --> 00:44:40.000]   I don't think so.
[00:44:40.000 --> 00:44:44.860]   So AI Studio is, like, very developer-centric.
[00:44:44.860 --> 00:44:47.500]   And we don't want to do too much black magic.
[00:44:47.500 --> 00:44:51.780]   There are safety filters and control, which you can configure
[00:44:51.780 --> 00:44:53.800]   in the SDK or in AI Studio.
[00:44:53.800 --> 00:44:56.460]   And in AI Studio is under Advanced Settings.
[00:44:56.460 --> 00:44:57.840]   I have safety settings.
[00:44:57.840 --> 00:44:59.520]   I have all of them off.
[00:44:59.520 --> 00:45:03.840]   But if you, like, want to filter on very explicit content
[00:45:03.840 --> 00:45:08.560]   or hateful content, we run some classifications, basically,
[00:45:08.560 --> 00:45:12.740]   before and after to make sure that you are not creating for your users
[00:45:12.740 --> 00:45:15.080]   harmful content.
[00:45:15.080 --> 00:45:15.580]   OK.
[00:45:15.580 --> 00:45:18.320]   I have our invoice image.
[00:45:18.320 --> 00:45:35.460]   OK.
[00:45:35.460 --> 00:45:36.460]   What should we ask?
[00:45:39.400 --> 00:45:46.740]   How much it would cost if we subtract the pedal, maybe?
[00:45:46.740 --> 00:45:46.980]   Yeah.
[00:45:46.980 --> 00:45:47.980]   How much it would cost if we subtract the pedal?
[00:45:47.980 --> 00:45:47.980]   Yeah.
[00:45:47.980 --> 00:45:48.980]   How much it would cost if we subtract the pedal?
[00:45:48.980 --> 00:45:49.980]   Yeah.
[00:45:49.980 --> 00:45:49.980]   How much it would cost if we subtract the pedal?
[00:45:49.980 --> 00:45:49.980]   Yeah.
[00:45:49.980 --> 00:45:50.980]   How much it would cost if we subtract the pedal?
[00:45:50.980 --> 00:45:51.980]   Yeah.
[00:45:51.980 --> 00:45:51.980]   How much it would cost if we subtract the pedal?
[00:45:51.980 --> 00:45:52.980]   Yeah.
[00:45:52.980 --> 00:45:52.980]   How much it would cost if we subtract the pedal?
[00:45:52.980 --> 00:45:53.980]   Yeah.
[00:45:53.980 --> 00:45:53.980]   How much it would cost if we subtract the pedal?
[00:45:53.980 --> 00:45:54.980]   Yeah.
[00:45:54.980 --> 00:45:54.980]   How much it would cost if we subtract the pedal?
[00:45:54.980 --> 00:45:55.980]   Yeah.
[00:45:55.980 --> 00:45:55.980]   How much it would cost if we subtract the pedal?
[00:45:55.980 --> 00:45:56.980]   Yeah.
[00:45:56.980 --> 00:45:57.980]   How much it would cost if we subtract the pedal?
[00:45:57.980 --> 00:45:57.980]   Yeah.
[00:45:57.980 --> 00:45:58.980]   How much it would cost if we subtract the pedal?
[00:45:58.980 --> 00:45:59.980]   Yeah.
[00:45:59.980 --> 00:45:59.980]   How much it would cost if we subtract the pedal?
[00:45:59.980 --> 00:46:00.980]   Yeah.
[00:46:00.980 --> 00:46:01.980]   How much it would cost if we subtract the pedal?
[00:46:01.980 --> 00:46:26.980]   So I sadly don't have an answer for this.
[00:46:26.980 --> 00:46:31.980]   I think you can always think a bit about, like, would we as humans have struggled to
[00:46:31.980 --> 00:46:34.980]   understand those PDFs if they are, like, switched up?
[00:46:34.980 --> 00:46:37.980]   If yes, then most likely the model will do as well.
[00:46:37.980 --> 00:46:45.980]   I think one very nice part about Gemini AI Studio and the Gemini API is you can get started very quickly.
[00:46:45.980 --> 00:46:55.980]   Like, all of us kind of set up within, like, 20 to 30 minutes a free account with access to Gemini 2.5 Flash via API, 2.5 Pro in the UI.
[00:46:55.980 --> 00:46:59.980]   So the best thing always is, like, to test and to explore and evaluate.
[00:46:59.980 --> 00:47:05.980]   And even if you need to run, like, 1,000 PDFs, it's not very cost or, like, expensive anymore.
[00:47:05.980 --> 00:47:13.980]   So the really best thing is to run your own evals to get some more than, like, I try five PDFs in the UI.
[00:47:13.980 --> 00:47:14.980]   Really look into it.
[00:47:14.980 --> 00:47:20.980]   And if you have, like, any questions or problems, like, best way is to reach out to us.
[00:47:20.980 --> 00:47:22.980]   We have teams helping and building with customers.
[00:47:22.980 --> 00:47:26.980]   And then we can, like, iterate on it together.
[00:47:26.980 --> 00:47:27.980]   Going back to your PDF.
[00:47:27.980 --> 00:47:28.980]   Any question?
[00:47:28.980 --> 00:47:30.980]   Any prompt idea?
[00:47:30.980 --> 00:47:31.980]   Yeah, I have a question.
[00:47:31.980 --> 00:47:32.980]   Yeah.
[00:47:32.980 --> 00:47:35.980]   I know you explained about security.
[00:47:35.980 --> 00:47:45.980]   But there are mandated security by law, which are LLM firewall, or benchmarking automations,
[00:47:45.980 --> 00:47:53.980]   or LLM guardrails, or SEM, poster management, mandated by CISA.
[00:47:53.980 --> 00:48:18.980]   So when I implement those rules for either defense or for financial applications, how do you -- just a small set of -- I know that Google is pretty strong in setting up those security measures from a different perspective.
[00:48:18.980 --> 00:48:28.980]   How do you integrate this go lab and the other security measures?
[00:48:28.980 --> 00:48:37.980]   So I guess for those type of environments where you have a lot of, like, compliance regulations, best is to work with Google Cloud.
[00:48:37.980 --> 00:48:45.980]   So everything we do in AI Studio is also somewhat similar available in Google Cloud in Vertex AI.
[00:48:45.980 --> 00:48:50.980]   And Vertex AI provides more features for those kind of use cases.
[00:48:50.980 --> 00:49:01.980]   They -- I'm not exactly sure, but they definitely have more, like, information they can provide on how to handle all of those things and those guardrails with Gemini.
[00:49:01.980 --> 00:49:02.980]   So that --
[00:49:02.980 --> 00:49:03.980]   So that --
[00:49:03.980 --> 00:49:14.980]   So the global -- you're suggesting we need to go on a global Google GCP environment.
[00:49:14.980 --> 00:49:28.980]   When I go global on GCP environment, then there are certain performance and cost being more here, such as --
[00:49:28.980 --> 00:49:43.980]   So there's a guardrail for bot-based, and there's a guardrail for organization-based, and there's a guardrail based on the industry-based.
[00:49:43.980 --> 00:49:55.980]   So we have to split those platforms into -- from most granular level to all the way to industry-wide level.
[00:49:55.980 --> 00:50:07.980]   So that's becoming -- when I do it globally at GCP level, then it becomes more expensive, and as well as there can be a performance issue.
[00:50:07.980 --> 00:50:12.980]   Yeah. So I know that there are regional endpoints for Gemini and Vertex AI as well.
[00:50:12.980 --> 00:50:29.980]   And also at Cloud Next, they announced a new Gemini on-device kind of thing where big companies can buy basically a huge box where Gemini is pre-installed, and it gets delivered to your environment.
[00:50:29.980 --> 00:50:31.980]   I'm not exactly sure about the details.
[00:50:31.980 --> 00:50:41.980]   The easiest is to do a quick Google search and look for it, but those are exactly where Vertex provides you more features and support than AI Studio.
[00:50:41.980 --> 00:50:57.980]   Yeah. Thanks. One of those , someone from Google also represented, and that's a good platform, but I didn't know how you can integrate from here to there.
[00:50:57.980 --> 00:51:00.980]   Yeah. This is the most granular level. Yeah.
[00:51:00.980 --> 00:51:07.980]   How do you integrate from the most granular level to the global level? That's the part of .
[00:51:07.980 --> 00:51:08.980]   But anyway, thanks for it.
[00:51:08.980 --> 00:51:12.980]   Okay. Maybe back to your PDF question regarding what to ask.
[00:51:12.980 --> 00:51:19.980]   So instead of like asking what the total sum was, I asked it to sum up the unit prices, which worked very nicely.
[00:51:19.980 --> 00:51:37.980]   Of course, it's a very well-formatted PDF in this case, but the image understanding is like very good, and the new way of how we should think about it is like I should ask the question directly based on the image before doing too much of processing we have been doing in the past.
[00:51:37.980 --> 00:51:57.980]   Cool. Okay. We are now at like half-time almost. I guess it's time we move maybe a bit away from all of the multimodality part into more about, I guess, agenda parts, which are, I would say, definitely more interesting, at least to me, especially if you combine in with like the multimodality parts.
[00:51:57.980 --> 00:52:18.980]   Okay. So part three is all about structured output and function calling. Do you know what structured outputs and function calling is and like how it roughly works? Any hand signals? Yes or?
[00:52:18.980 --> 00:52:19.980]   Yes.
[00:52:19.980 --> 00:52:47.980]   Everyone? Okay. Not bad. Okay. So the part three goes, continues with PDFs as they are kind of very interesting and also we want to do structured outputs. So structured outputs is for us a way to create more structured data structures.
[00:52:47.980 --> 00:53:05.980]   from text, so which we can use to work way more easily afterwards, right? And at the end, we prefer structured output much better or much more because we can integrate it into other APIs. We can connect APIs and Gemini supports or the SDK supports PyDentic.
[00:53:05.980 --> 00:53:23.980]   PyDentic. So PyDentic is a very nice Python library, which lets you create those data structures. And also we can create native nested data structures. So here we have a recipe with a name, ingredients, which is a list of strings. And then we have a recipe list, which is basically a list of our recipes.
[00:53:23.980 --> 00:53:34.940]   And we can provide it in our configuration, so similar to the generation arguments or our thinking budget, we have a response type and a response schema we can provide.
[00:53:34.940 --> 00:53:52.940]   Here we ask it, okay, can it generate two popular cookie recipes for us? And we basically force it to use our structure. And I already nicely printed it here, but if we look at the raw response...
[00:53:52.940 --> 00:54:15.940]   of our model, we get back a JSON with all of the different input fields. And there's also a nice.parse method, which allows us to convert it back into our Pylandic schema, and then we can access all of the data points.
[00:54:15.940 --> 00:54:24.940]   And as we had our invoice, we can now maybe, like, complete the exercise with you.
[00:54:24.940 --> 00:54:33.940]   What if we, like, so we asked about the total amount, right? But when working with PDFs, normally we want to have structured data as a result, right?
[00:54:33.940 --> 00:54:40.940]   Text is not very helpful for us when we want to put it into a database or want to work with it. We really need those data schemas.
[00:54:40.940 --> 00:55:01.940]   And what is very nice about Gemini is that we can basically combine both of it. So we use our structured output method with our multimodal capabilities for files. And we can provide our file...
[00:55:01.940 --> 00:55:02.940]   ...and we can provide our file...
[00:55:02.940 --> 00:55:03.940]   ...and we can provide our file...
[00:55:03.940 --> 00:55:04.940]   ...and we can provide our file...
[00:55:04.940 --> 00:55:05.940]   ...and we can provide our file...
[00:55:05.940 --> 00:55:06.940]   ...and we can provide our file...
[00:55:06.940 --> 00:55:07.940]   ...and we can provide our file...
[00:55:07.940 --> 00:55:08.940]   ...and we can provide our file...
[00:55:08.940 --> 00:55:09.940]   ...and we can provide our file...
[00:55:09.940 --> 00:55:10.940]   ...and we can provide our file...
[00:55:10.940 --> 00:55:11.940]   ...and we can provide our file...
[00:55:11.940 --> 00:55:12.940]   ...and we can provide our file...
[00:55:12.940 --> 00:55:13.940]   ...and we can provide our file...
[00:55:13.940 --> 00:55:14.940]   ...and we can provide our file...
[00:55:14.940 --> 00:55:15.940]   ...and we can provide our file...
[00:55:15.940 --> 00:55:16.940]   ...and we can provide our file...
[00:55:16.940 --> 00:55:17.940]   ...and we can provide our file...
[00:55:17.940 --> 00:55:18.940]   ...and we can provide our file...
[00:55:18.940 --> 00:55:19.940]   ...and we can provide our file...
[00:55:19.940 --> 00:55:20.940]   ...and we can provide our file...
[00:55:20.940 --> 00:55:21.940]   ...and we can provide our file...
[00:55:21.940 --> 00:55:22.940]   ...and we can provide our file...
[00:55:22.940 --> 00:55:23.940]   ...and we can provide our file...
[00:55:23.940 --> 00:55:25.940]   ...and we can provide our file...
[00:55:25.940 --> 00:55:26.940]   ...and we can provide our file...
[00:55:26.940 --> 00:55:27.940]   ...and we can provide our file...
[00:55:27.940 --> 00:55:28.940]   ...and we can provide our file...
[00:55:28.940 --> 00:55:29.940]   ...and we can provide our file...
[00:55:29.940 --> 00:55:30.940]   ...and we can provide our file...
[00:55:30.940 --> 00:55:31.940]   ...and we can provide our file...
[00:55:31.940 --> 00:55:32.940]   ...and we can provide our file...
[00:55:32.940 --> 00:55:33.940]   ...and we can provide our file...
[00:55:33.940 --> 00:55:34.940]   ...and we can provide our file...
[00:55:34.940 --> 00:55:35.940]   ...and we can provide our file...
[00:55:35.940 --> 00:55:36.940]   ...and we can provide our file...
[00:55:36.940 --> 00:55:37.940]   ...and we can provide our file...
[00:55:37.940 --> 00:55:38.940]   ...and we can provide our file...
[00:55:38.940 --> 00:55:39.940]   ...and we can provide our file...
[00:55:39.940 --> 00:55:40.940]   ...and we can provide our file...
[00:55:40.940 --> 00:55:41.940]   ...and we can provide our file...
[00:55:41.940 --> 00:55:42.940]   ...and we can provide our file...
[00:55:42.940 --> 00:55:43.940]   ...and we can provide our file...
[00:55:43.940 --> 00:55:44.940]   ...and we can provide our file...
[00:55:44.940 --> 00:55:45.940]   ...and we can provide our file...
[00:55:45.940 --> 00:55:46.940]   ...and we can provide our file...
[00:55:46.940 --> 00:55:57.940]   ...oh...
[00:55:57.940 --> 00:55:58.940]   ...we need our invoice...
[00:55:58.940 --> 00:55:59.940]   ...so maybe...
[00:55:59.940 --> 00:56:00.940]   ...it's a good example...
[00:56:00.940 --> 00:56:01.940]   ...so...
[00:56:01.940 --> 00:56:02.940]   ...I didn't change...
[00:56:02.940 --> 00:56:03.940]   ...the recipe...
[00:56:03.940 --> 00:56:04.940]   ...from our...
[00:56:04.940 --> 00:56:05.940]   ...like data structure...
[00:56:05.940 --> 00:56:07.940]   ...which we want to create...
[00:56:07.940 --> 00:56:08.940]   ...and we ask it to extract...
[00:56:08.940 --> 00:56:10.940]   ...the information from our PDF...
[00:56:10.940 --> 00:56:11.940]   ...our PDF is an invoice...
[00:56:11.940 --> 00:56:12.940]   ...from a supermarket...
[00:56:12.940 --> 00:56:13.940]   ...so...
[00:56:13.940 --> 00:56:15.940]   ...it doesn't have...
[00:56:15.940 --> 00:56:16.940]   ...a recipe name...
[00:56:16.940 --> 00:56:17.940]   ...ingredients...
[00:56:17.940 --> 00:56:18.940]   ...so...
[00:56:18.940 --> 00:56:19.940]   ...Gemini did not...
[00:56:19.940 --> 00:56:20.940]   ...generate...
[00:56:20.940 --> 00:56:21.940]   ...or hallucinated something...
[00:56:21.940 --> 00:56:22.940]   ...so we get back...
[00:56:22.940 --> 00:56:23.940]   ...a...
[00:56:23.940 --> 00:56:24.940]   ...empty recipe list...
[00:56:24.940 --> 00:56:25.940]   ...so if we now change it...
[00:56:25.940 --> 00:56:26.940]   ...to our...
[00:56:26.940 --> 00:56:27.940]   ...invoice data...
[00:56:27.940 --> 00:56:28.940]   ...um...
[00:56:28.940 --> 00:56:30.940]   ...we should...
[00:56:30.940 --> 00:56:32.940]   ...hopefully...
[00:56:32.940 --> 00:56:33.940]   ...then see...
[00:56:33.940 --> 00:56:34.940]   ...the correct...
[00:56:34.940 --> 00:56:35.940]   ...extracted...
[00:56:35.940 --> 00:56:36.940]   ...information...
[00:56:36.940 --> 00:56:38.940]   ...yes...
[00:56:38.940 --> 00:56:46.940]   ...so...
[00:56:46.940 --> 00:56:47.940]   ...we extracted...
[00:56:47.940 --> 00:56:48.940]   ...the date...
[00:56:48.940 --> 00:56:49.940]   ...all of the items...
[00:56:49.940 --> 00:56:50.940]   ...we bought...
[00:56:50.940 --> 00:56:51.940]   ...and all of the different prices...
[00:56:51.940 --> 00:56:52.940]   ...and...
[00:56:52.940 --> 00:56:53.940]   ...with that data...
[00:56:53.940 --> 00:56:54.940]   ...now...
[00:56:54.940 --> 00:56:55.940]   ...it makes it much more easier...
[00:56:55.940 --> 00:56:56.940]   ...for us to work with...
[00:56:56.940 --> 00:56:57.940]   ...right...
[00:56:57.940 --> 00:56:58.940]   ...if I have some kind of...
[00:56:58.940 --> 00:56:59.940]   ...automated...
[00:56:59.940 --> 00:57:00.940]   ...system...
[00:57:00.940 --> 00:57:01.940]   ...where I need to...
[00:57:01.940 --> 00:57:02.940]   ...like...
[00:57:02.940 --> 00:57:03.940]   ...take in invoices...
[00:57:03.940 --> 00:57:04.940]   ...pdf...
[00:57:04.940 --> 00:57:05.940]   ...document...
[00:57:05.940 --> 00:57:06.940]   ...I can now provide...
[00:57:06.940 --> 00:57:06.940]   ...a...
[00:57:06.940 --> 00:57:08.940]   ...structured...
[00:57:08.940 --> 00:57:09.940]   ...to...
[00:57:09.940 --> 00:57:10.940]   ...what information...
[00:57:10.940 --> 00:57:11.940]   ...I want to extract...
[00:57:11.940 --> 00:57:12.940]   ...and Gemini...
[00:57:12.940 --> 00:57:13.940]   ...does basically...
[00:57:13.940 --> 00:57:14.940]   ...all of the matching...
[00:57:14.940 --> 00:57:15.940]   ...for us...
[00:57:15.940 --> 00:57:16.940]   ...which is like...
[00:57:16.940 --> 00:57:17.940]   ...super nice...
[00:57:17.940 --> 00:57:18.940]   ...and...
[00:57:18.940 --> 00:57:19.940]   ...function calling...
[00:57:19.940 --> 00:57:20.940]   ...basically...
[00:57:20.940 --> 00:57:21.940]   ...is the same idea...
[00:57:21.940 --> 00:57:22.940]   ...but instead of...
[00:57:22.940 --> 00:57:23.940]   ...um...
[00:57:23.940 --> 00:57:24.940]   ...having like...
[00:57:24.940 --> 00:57:25.940]   ...a data structure...
[00:57:25.940 --> 00:57:26.940]   ...our output is...
[00:57:26.940 --> 00:57:27.940]   ...a name...
[00:57:27.940 --> 00:57:28.940]   ...and the argument...
[00:57:28.940 --> 00:57:29.940]   ...so...
[00:57:29.940 --> 00:57:30.940]   ...similar to what we have...
[00:57:30.940 --> 00:57:31.940]   ...um...
[00:57:31.940 --> 00:57:32.940]   ...we create...
[00:57:32.940 --> 00:57:33.940]   ...a structure...
[00:57:33.940 --> 00:57:34.940]   ...of like...
[00:57:34.940 --> 00:57:35.940]   ...how a function...
[00:57:35.940 --> 00:57:36.940]   ...signature is done...
[00:57:36.940 --> 00:57:37.940]   ...so...
[00:57:37.940 --> 00:57:38.940]   ...we have a weather function...
[00:57:38.940 --> 00:57:39.940]   ...which has a name...
[00:57:39.940 --> 00:57:40.940]   ...a description...
[00:57:40.940 --> 00:57:41.940]   ...and like...
[00:57:41.940 --> 00:57:42.940]   ...the properties...
[00:57:42.940 --> 00:57:43.940]   ...which we need to provide...
[00:57:43.940 --> 00:57:44.940]   ...um...
[00:57:44.940 --> 00:57:45.940]   ...there's the same...
[00:57:45.940 --> 00:57:46.940]   ...function...
[00:57:46.940 --> 00:57:47.940]   ...but...
[00:57:47.940 --> 00:57:48.940]   ...just as Python code...
[00:57:48.940 --> 00:57:49.940]   ...and...
[00:57:49.940 --> 00:57:50.940]   ...with function calling...
[00:57:50.940 --> 00:57:51.940]   ...we provide...
[00:57:51.940 --> 00:57:52.940]   ...the function declaration...
[00:57:52.940 --> 00:57:53.940]   ...and our prompt...
[00:57:53.940 --> 00:57:54.940]   ...and then the model...
[00:57:54.940 --> 00:57:55.940]   ...generates...
[00:57:55.940 --> 00:57:56.940]   ...a structure...
[00:57:56.940 --> 00:57:57.940]   ...a structure...
[00:57:57.940 --> 00:57:58.940]   ...output...
[00:57:58.940 --> 00:57:59.940]   ...which has the...
[00:57:59.940 --> 00:58:00.940]   ...function name...
[00:58:00.940 --> 00:58:01.940]   ...it wants to call...
[00:58:01.940 --> 00:58:02.940]   ...the get weather method...
[00:58:02.940 --> 00:58:03.940]   ...and...
[00:58:03.940 --> 00:58:04.940]   ...have a weather function...
[00:58:04.940 --> 00:58:05.940]   ...we only have one...
[00:58:05.940 --> 00:58:06.940]   ...location...
[00:58:06.940 --> 00:58:07.940]   ...we provide it...
[00:58:07.940 --> 00:58:08.940]   ...similar...
[00:58:08.940 --> 00:58:09.940]   ...to all of the other...
[00:58:09.940 --> 00:58:10.940]   ...configurations...
[00:58:10.940 --> 00:58:11.940]   ...in our configuration...
[00:58:11.940 --> 00:58:12.940]   ...argument...
[00:58:12.940 --> 00:58:13.940]   ...this time...
[00:58:13.940 --> 00:58:14.940]   ...we have tools...
[00:58:14.940 --> 00:58:15.940]   ...and...
[00:58:15.940 --> 00:58:16.940]   ...we want to know...
[00:58:16.940 --> 00:58:17.940]   ...what the weather is in Tokyo...
[00:58:17.940 --> 00:58:18.940]   ...and...
[00:58:18.940 --> 00:58:19.940]   ...obviously...
[00:58:19.940 --> 00:58:20.940]   ...what's the weather...
[00:58:20.940 --> 00:58:21.940]   ...fits into the...
[00:58:21.940 --> 00:58:22.940]   ...description of our function...
[00:58:22.940 --> 00:58:23.940]   ...as it...
[00:58:23.940 --> 00:58:24.940]   ...helps us retrieve...
[00:58:24.940 --> 00:58:25.940]   ...run it...
[00:58:25.940 --> 00:58:26.940]   ...the model...
[00:58:26.940 --> 00:58:27.940]   ...instead of...
[00:58:27.940 --> 00:58:28.940]   ...generating a nice...
[00:58:28.940 --> 00:58:29.940]   ...response...
[00:58:29.940 --> 00:58:30.940]   ...wants to call...
[00:58:30.940 --> 00:58:31.940]   ...the get weather method...
[00:58:31.940 --> 00:58:32.940]   ...and...
[00:58:32.940 --> 00:58:33.940]   ...with the location...
[00:58:33.940 --> 00:58:34.940]   ...Tokyo...
[00:58:34.940 --> 00:58:35.940]   ...if I change...
[00:58:35.940 --> 00:58:36.940]   ...the prompt...
[00:58:36.940 --> 00:58:37.940]   ...to...
[00:58:37.940 --> 00:58:38.940]   ...hello...
[00:58:38.940 --> 00:58:39.940]   ...oh...
[00:58:39.940 --> 00:58:42.940]   ...makes sense...
[00:58:42.940 --> 00:58:43.940]   ...one second...
[00:58:43.940 --> 00:58:50.940]   ...so...
[00:58:50.940 --> 00:58:51.940]   ...if I change...
[00:58:51.940 --> 00:58:52.940]   ...to...
[00:58:52.940 --> 00:58:53.940]   ...hello...
[00:58:53.940 --> 00:58:54.940]   ...we don't have a function call...
[00:58:54.940 --> 00:58:55.940]   ...right...
[00:58:55.940 --> 00:58:56.940]   ...like...
[00:58:56.940 --> 00:58:57.940]   ...the model...
[00:58:57.940 --> 00:58:58.940]   ...correctly understands...
[00:58:58.940 --> 00:58:59.940]   ...hey...
[00:58:59.940 --> 00:59:00.940]   ...that's just a greeting...
[00:59:00.940 --> 00:59:01.940]   ...let's response...
[00:59:01.940 --> 00:59:02.940]   ...and like...
[00:59:02.940 --> 00:59:03.940]   ...how can I help you...
[00:59:03.940 --> 00:59:04.940]   ...so...
[00:59:04.940 --> 00:59:05.940]   ...but...
[00:59:05.940 --> 00:59:06.940]   ...we want to call a function...
[00:59:06.940 --> 00:59:07.940]   ...so...
[00:59:07.940 --> 00:59:08.940]   ...we have...
[00:59:08.940 --> 00:59:09.940]   ...what's the weather...
[00:59:09.940 --> 00:59:10.940]   ...is in Tokyo...
[00:59:10.940 --> 00:59:11.940]   ...and then the next step...
[00:59:11.940 --> 00:59:12.940]   ...is for you...
[00:59:12.940 --> 00:59:13.940]   ...as a developer...
[00:59:13.940 --> 00:59:14.940]   ...directly the function...
[00:59:14.940 --> 00:59:15.940]   ...what you would normally...
[00:59:15.940 --> 00:59:16.940]   ...then have in your...
[00:59:16.940 --> 00:59:17.940]   ...code...
[00:59:17.940 --> 00:59:18.940]   ...or in your applications...
[00:59:18.940 --> 00:59:19.940]   ...a way to identify...
[00:59:19.940 --> 00:59:19.940]   ...okay...
[00:59:19.940 --> 00:59:20.940]   ...which function is called...
[00:59:20.940 --> 00:59:21.940]   ...could be a...
[00:59:21.940 --> 00:59:22.940]   ...simple switch statement...
[00:59:22.940 --> 00:59:23.940]   ...to check...
[00:59:23.940 --> 00:59:23.940]   ...okay...
[00:59:23.940 --> 00:59:24.940]   ...what's the name...
[00:59:24.940 --> 00:59:25.940]   ...and if you get the name...
[00:59:25.940 --> 00:59:26.940]   ...call the method...
[00:59:26.940 --> 00:59:28.940]   ...with the provided argument...
[00:59:28.940 --> 00:59:29.940]   ...and then what you do...
[00:59:29.940 --> 00:59:30.940]   ...is...
[00:59:30.940 --> 00:59:31.940]   ...the output of your function...
[00:59:31.940 --> 00:59:33.940]   ...is the next user input...
[00:59:33.940 --> 00:59:34.940]   ...so...
[00:59:34.940 --> 00:59:35.940]   ...the model generates...
[00:59:35.940 --> 00:59:36.940]   ...this...
[00:59:36.940 --> 00:59:37.940]   ...name and arguments object...
[00:59:37.940 --> 00:59:38.940]   ...and we provide it...
[00:59:38.940 --> 00:59:39.940]   ...as a user...
[00:59:39.940 --> 00:59:40.940]   ...the output...
[00:59:40.940 --> 00:59:41.940]   ...and in our case...
[00:59:41.940 --> 00:59:42.940]   ...it's the result...
[00:59:42.940 --> 00:59:43.940]   ...and if we look at...
[00:59:43.940 --> 00:59:44.940]   ...the...
[00:59:44.940 --> 00:59:45.940]   ...weather method...
[00:59:45.940 --> 00:59:46.940]   ...we have...
[00:59:46.940 --> 00:59:47.940]   ...it's...
[00:59:47.940 --> 00:59:48.940]   ...basically...
[00:59:48.940 --> 00:59:49.940]   ...some dummy data...
[00:59:49.940 --> 00:59:50.940]   ...about the temperature...
[00:59:50.940 --> 00:59:51.940]   ...the condition...
[00:59:51.940 --> 00:59:52.940]   ...and where it is...
[00:59:52.940 --> 00:59:53.940]   ...and then...
[00:59:53.940 --> 00:59:54.940]   ...the...
[00:59:54.940 --> 00:59:55.940]   ...the model generates...
[00:59:55.940 --> 00:59:56.940]   ...a very nice response...
[00:59:56.940 --> 00:59:57.940]   ...so we have user input...
[00:59:57.940 --> 00:59:58.940]   ...model has a...
[00:59:58.940 --> 00:59:59.940]   ...structured output...
[00:59:59.940 --> 01:00:00.940]   ...user provides...
[01:00:00.940 --> 01:00:01.940]   ...a structured response...
[01:00:01.940 --> 01:00:02.940]   ...and then the model...
[01:00:02.940 --> 01:00:03.940]   ...generates a very nice...
[01:00:03.940 --> 01:00:04.940]   ...user-friendly response...
[01:00:04.940 --> 01:00:05.940]   ...user-friendly response...
[01:00:05.940 --> 01:00:05.940]   ...so...
[01:00:05.940 --> 01:00:06.940]   ...we call our function...
[01:00:06.940 --> 01:00:07.940]   ...the function...
[01:00:07.940 --> 01:00:08.940]   ...returns the weather...
[01:00:08.940 --> 01:00:09.940]   ...and then...
[01:00:09.940 --> 01:00:10.940]   ...the model generates...
[01:00:10.940 --> 01:00:11.940]   ...a very nice response...
[01:00:11.940 --> 01:00:12.940]   ...which is the weather...
[01:00:12.940 --> 01:00:13.940]   ...in Tokyo is sunny...
[01:00:13.940 --> 01:00:14.940]   ...with a temperature...
[01:00:14.940 --> 01:00:15.940]   ...of 22 degrees Celsius...
[01:00:15.940 --> 01:00:16.940]   ...and it feels like...
[01:00:16.940 --> 01:00:17.940]   ...24 degrees Celsius...
[01:00:17.940 --> 01:00:18.940]   ...so...
[01:00:18.940 --> 01:00:19.940]   ...you can think about it...
[01:00:19.940 --> 01:00:20.940]   ...and that's how I can...
[01:00:20.940 --> 01:00:21.940]   ...integrate tools...
[01:00:21.940 --> 01:00:22.940]   ...or make it...
[01:00:22.940 --> 01:00:23.940]   ...or convert my LLM...
[01:00:23.940 --> 01:00:24.940]   ...into an agent...
[01:00:24.940 --> 01:00:25.940]   ...more or less...
[01:00:25.940 --> 01:00:27.940]   ...or a way to call something...
[01:00:27.940 --> 01:00:28.940]   ...um...
[01:00:28.940 --> 01:00:29.940]   ...the get a weather method...
[01:00:29.940 --> 01:00:30.940]   ...can be anything...
[01:00:30.940 --> 01:00:32.940]   ...it can be a database call...
[01:00:32.940 --> 01:00:33.940]   ...it can be...
[01:00:33.940 --> 01:00:35.940]   ...a real API call...
[01:00:35.940 --> 01:00:36.940]   ...it can be...
[01:00:36.940 --> 01:00:37.940]   ...I don't know...
[01:00:37.940 --> 01:00:38.940]   ...reading emails...
[01:00:38.940 --> 01:00:39.940]   ...sending emails...
[01:00:39.940 --> 01:00:40.940]   ...all of the things...
[01:00:40.940 --> 01:00:41.940]   ...we currently see...
[01:00:41.940 --> 01:00:42.940]   ...with all of the MCP...
[01:00:42.940 --> 01:00:43.940]   ...hype basically going on...
[01:00:43.940 --> 01:00:44.940]   ...and MCP servers...
[01:00:44.940 --> 01:00:46.940]   ...have tools as well...
[01:00:46.940 --> 01:00:47.940]   ...and those tools...
[01:00:47.940 --> 01:00:48.940]   ...of MCP servers...
[01:00:48.940 --> 01:00:49.940]   ...basically expose...
[01:00:49.940 --> 01:00:50.940]   ...the same...
[01:00:50.940 --> 01:00:51.940]   ...declarations...
[01:00:51.940 --> 01:00:52.940]   ...so...
[01:00:52.940 --> 01:00:53.940]   ...an MCP servers...
[01:00:53.940 --> 01:00:54.940]   ...has the tools...
[01:00:54.940 --> 01:00:55.940]   ...defined...
[01:00:55.940 --> 01:00:56.940]   ...get weather...
[01:00:56.940 --> 01:00:57.940]   ...for example...
[01:00:57.940 --> 01:00:58.940]   ...if it is a weather MCP...
[01:00:58.940 --> 01:00:59.940]   ...server...
[01:00:59.940 --> 01:01:00.940]   ...and it has an endpoint...
[01:01:00.940 --> 01:01:01.940]   ...or a method...
[01:01:01.940 --> 01:01:02.940]   ...which you can call...
[01:01:02.940 --> 01:01:03.940]   ...which is list tools...
[01:01:03.940 --> 01:01:04.940]   ...and this list tools...
[01:01:04.940 --> 01:01:05.940]   ...method...
[01:01:05.940 --> 01:01:06.940]   ...would then return...
[01:01:06.940 --> 01:01:07.940]   ...these schemas...
[01:01:07.940 --> 01:01:09.940]   ...of our functions...
[01:01:09.940 --> 01:01:10.940]   ...which look...
[01:01:10.940 --> 01:01:11.940]   ...very similar...
[01:01:11.940 --> 01:01:12.940]   ...to what we have created here...
[01:01:12.940 --> 01:01:13.940]   ...and then what you do...
[01:01:13.940 --> 01:01:14.940]   ...on your LLM...
[01:01:14.940 --> 01:01:15.940]   ...side...
[01:01:15.940 --> 01:01:16.940]   ...or client side...
[01:01:16.940 --> 01:01:17.940]   ...is...
[01:01:17.940 --> 01:01:18.940]   ...manually...
[01:01:18.940 --> 01:01:19.940]   ...but more abstracted away...
[01:01:19.940 --> 01:01:20.940]   ...and more managed...
[01:01:20.940 --> 01:01:21.940]   ...and of course...
[01:01:21.940 --> 01:01:22.940]   ...the benefit here...
[01:01:22.940 --> 01:01:23.940]   ...is that...
[01:01:23.940 --> 01:01:24.940]   ...not every one of us...
[01:01:24.940 --> 01:01:25.940]   ...needs to implement...
[01:01:25.940 --> 01:01:26.940]   ...the schemas...
[01:01:26.940 --> 01:01:27.940]   ...from the MCP server...
[01:01:27.940 --> 01:01:28.940]   ...provided into your LLM...
[01:01:28.940 --> 01:01:29.940]   ...call...
[01:01:29.940 --> 01:01:30.940]   ...and then the LLM...
[01:01:30.940 --> 01:01:31.940]   ...generates...
[01:01:31.940 --> 01:01:32.940]   ...depending on the context...
[01:01:32.940 --> 01:01:33.940]   ...the output as well...
[01:01:33.940 --> 01:01:34.940]   ...which is structured...
[01:01:34.940 --> 01:01:35.940]   ...and then call the remote tool...
[01:01:35.940 --> 01:01:36.940]   ...so...
[01:01:36.940 --> 01:01:37.940]   ...very similar...
[01:01:37.940 --> 01:01:38.940]   ...to what we have done here...
[01:01:38.940 --> 01:01:39.940]   ...on the client side...
[01:01:39.940 --> 01:01:40.940]   ...manually...
[01:01:40.940 --> 01:01:42.940]   ...but more abstracted away...
[01:01:42.940 --> 01:01:43.940]   ...and more managed...
[01:01:43.940 --> 01:01:44.940]   ...and of course...
[01:01:44.940 --> 01:01:45.940]   ...the benefit here...
[01:01:45.940 --> 01:01:46.940]   ...is that...
[01:01:46.940 --> 01:01:47.940]   ...not every one of us...
[01:01:47.940 --> 01:01:48.940]   ...needs to implement...
[01:01:48.940 --> 01:01:49.940]   ...the get weather method...
[01:01:49.940 --> 01:01:50.940]   ...it's way easier to use...
[01:01:50.940 --> 01:01:51.940]   ...like the weather MCP service...
[01:01:51.940 --> 01:01:52.940]   ...from...
[01:01:52.940 --> 01:01:53.940]   ...I don't know...
[01:01:53.940 --> 01:01:54.940]   ...some weather provider...
[01:01:54.940 --> 01:01:55.940]   ...similar...
[01:01:55.940 --> 01:01:56.940]   ...if you want to use...
[01:01:56.940 --> 01:01:57.940]   ...maybe your own personal...
[01:01:57.940 --> 01:01:58.940]   ...Google Drive MCP server...
[01:01:58.940 --> 01:01:59.940]   ...this would be...
[01:01:59.940 --> 01:02:00.940]   ...if Google creates those...
[01:02:00.940 --> 01:02:01.940]   ...so that's the whole idea...
[01:02:01.940 --> 01:02:02.940]   ...why MCP servers...
[01:02:02.940 --> 01:02:03.940]   ...is kind of so cool...
[01:02:03.940 --> 01:02:04.940]   ...so...
[01:02:04.940 --> 01:02:05.940]   ...and...
[01:02:05.940 --> 01:02:06.940]   ...um...
[01:02:06.940 --> 01:02:07.940]   ...yeah...
[01:02:07.940 --> 01:02:08.940]   ...yeah...
[01:02:08.940 --> 01:02:09.940]   ...yeah...
[01:02:09.940 --> 01:02:10.940]   ...so...
[01:02:10.940 --> 01:02:11.940]   ...currently...
[01:02:11.940 --> 01:02:12.940]   ...we are working...
[01:02:12.940 --> 01:02:13.940]   ...on improving...
[01:02:13.940 --> 01:02:14.940]   ...and extending...
[01:02:14.940 --> 01:02:15.940]   ...but currently...
[01:02:15.940 --> 01:02:16.940]   ...the suggestion is...
[01:02:16.940 --> 01:02:17.940]   ...probably...
[01:02:17.940 --> 01:02:18.940]   ...between five to ten...
[01:02:18.940 --> 01:02:19.940]   ...and...
[01:02:19.940 --> 01:02:20.940]   ...if you have more tools...
[01:02:20.940 --> 01:02:21.940]   ...you can use...
[01:02:21.940 --> 01:02:22.940]   ...embedding models...
[01:02:22.940 --> 01:02:23.940]   ...to basically filter...
[01:02:23.940 --> 01:02:24.940]   ...you have to use a problem...
[01:02:24.940 --> 01:02:25.940]   ...and what you would do...
[01:02:25.940 --> 01:02:26.940]   ...is basically...
[01:02:26.940 --> 01:02:27.940]   ...run some...
[01:02:27.940 --> 01:02:28.940]   ...similarity matching...
[01:02:28.940 --> 01:02:29.940]   ...between the descriptions...
[01:02:29.940 --> 01:02:29.940]   ...and like...
[01:02:29.940 --> 01:02:30.940]   ...what makes sense...
[01:02:30.940 --> 01:02:31.940]   ...what doesn't make sense...
[01:02:31.940 --> 01:02:32.940]   ...and then you only...
[01:02:32.940 --> 01:02:33.940]   ...put...
[01:02:33.940 --> 01:02:34.940]   ...the...
[01:02:34.940 --> 01:02:35.940]   ...top tools...
[01:02:35.940 --> 01:02:36.940]   ...so...
[01:02:36.940 --> 01:02:37.940]   ...to speak...
[01:02:37.940 --> 01:02:50.940]   ...I'm not sure...
[01:02:50.940 --> 01:02:51.940]   ...about the claim...
[01:02:51.940 --> 01:02:52.940]   ...and like...
[01:02:52.940 --> 01:02:53.940]   ...how you do it...
[01:02:53.940 --> 01:02:55.940]   ...is that Gemini 2.5 Pro...
[01:02:55.940 --> 01:02:56.940]   ...was the first model...
[01:02:56.940 --> 01:02:57.940]   ...to complete...
[01:02:57.940 --> 01:02:58.940]   ...Pokemon Blue...
[01:02:58.940 --> 01:02:59.940]   ...which ran...
[01:02:59.940 --> 01:02:59.940]   ...I think...
[01:02:59.940 --> 01:03:00.940]   ...for like...
[01:03:00.940 --> 01:03:01.940]   ...200 hours straight...
[01:03:01.940 --> 01:03:02.940]   ...the only...
[01:03:02.940 --> 01:03:03.940]   ...like...
[01:03:03.940 --> 01:03:03.940]   ...the big challenge...
[01:03:03.940 --> 01:03:04.940]   ...here is like...
[01:03:04.940 --> 01:03:04.940]   ...so...
[01:03:04.940 --> 01:03:04.940]   ...we have like...
[01:03:04.940 --> 01:03:05.940]   ...a limited context...
[01:03:05.940 --> 01:03:05.940]   ...right...
[01:03:05.940 --> 01:03:06.940]   ...which is for Gemini...
[01:03:06.940 --> 01:03:07.940]   ...1 million...
[01:03:07.940 --> 01:03:08.940]   ...so...
[01:03:08.940 --> 01:03:09.940]   ...if you would continue...
[01:03:09.940 --> 01:03:10.940]   ...for two hours...
[01:03:10.940 --> 01:03:11.940]   ...you would definitely...
[01:03:11.940 --> 01:03:12.940]   ...run out of like...
[01:03:12.940 --> 01:03:13.940]   ...those two...
[01:03:13.940 --> 01:03:14.940]   ...like 1 million tokens...
[01:03:14.940 --> 01:03:14.940]   ...and...
[01:03:14.940 --> 01:03:15.940]   ...entropic...
[01:03:15.940 --> 01:03:16.940]   ...I'm not sure...
[01:03:16.940 --> 01:03:17.940]   ...what that context...
[01:03:17.940 --> 01:03:18.940]   ...currently is...
[01:03:18.940 --> 01:03:19.940]   ...but...
[01:03:19.940 --> 01:03:20.940]   ...what you most...
[01:03:20.940 --> 01:03:21.940]   ...likely do...
[01:03:21.940 --> 01:03:21.940]   ...is...
[01:03:21.940 --> 01:03:22.940]   ...you summarize...
[01:03:22.940 --> 01:03:23.940]   ...you compress...
[01:03:23.940 --> 01:03:24.940]   ...the context...
[01:03:24.940 --> 01:03:25.940]   ...and the conversation...
[01:03:25.940 --> 01:03:26.940]   ...and what you provide...
[01:03:26.940 --> 01:03:27.940]   ...to your model...
[01:03:27.940 --> 01:03:28.940]   ...so...
[01:03:28.940 --> 01:03:28.940]   ...yes...
[01:03:28.940 --> 01:03:29.940]   ...I'm pretty sure Gemini...
[01:03:29.940 --> 01:03:30.940]   ...can run for more...
[01:03:30.940 --> 01:03:30.940]   ...than two hours...
[01:03:30.940 --> 01:03:31.940]   ...but it depends on...
[01:03:31.940 --> 01:03:31.940]   ...like...
[01:03:31.940 --> 01:03:32.940]   ...what you want...
[01:03:32.940 --> 01:03:32.940]   ...to solve...
[01:03:32.940 --> 01:03:33.940]   ...and how you are going...
[01:03:33.940 --> 01:03:34.940]   ...to solve it...
[01:03:34.940 --> 01:03:35.940]   ...yep?
[01:03:35.940 --> 01:03:38.940]   If you call it a native tool...
[01:03:38.940 --> 01:03:39.940]   ...it seems like...
[01:03:39.940 --> 01:03:40.940]   ...the background traces...
[01:03:40.940 --> 01:03:41.940]   ...are all hidden...
[01:03:41.940 --> 01:03:42.940]   ...is that correct?
[01:03:42.940 --> 01:03:43.940]   Is there any way...
[01:03:43.940 --> 01:03:44.940]   ...to access them...
[01:03:44.940 --> 01:03:45.940]   ...that you can imagine...
[01:03:45.940 --> 01:03:46.940]   ...for managing performance?
[01:03:46.940 --> 01:03:47.940]   Yeah...
[01:03:47.940 --> 01:03:48.940]   ...that's correct...
[01:03:48.940 --> 01:03:49.940]   ...so...
[01:03:49.940 --> 01:03:50.940]   ...native tools...
[01:03:50.940 --> 01:03:51.940]   ...are the next section...
[01:03:51.940 --> 01:03:52.940]   ...we can go into it...
[01:03:52.940 --> 01:03:53.940]   ...in one second...
[01:03:53.940 --> 01:03:54.940]   ...and...
[01:03:54.940 --> 01:03:55.940]   ...yes...
[01:03:55.940 --> 01:03:56.940]   ...currently...
[01:03:56.940 --> 01:03:57.940]   ...the native tools...
[01:03:57.940 --> 01:03:58.940]   ...are not like...
[01:03:58.940 --> 01:03:59.940]   ...being returned...
[01:03:59.940 --> 01:04:00.940]   ...in a way we had...
[01:04:00.940 --> 01:04:01.940]   ...with like...
[01:04:01.940 --> 01:04:02.940]   ...the scenes...
[01:04:02.940 --> 01:04:03.940]   ...and what the user gets...
[01:04:03.940 --> 01:04:04.940]   ...is the final...
[01:04:04.940 --> 01:04:05.940]   ...good...
[01:04:05.940 --> 01:04:06.940]   ...assistant response...
[01:04:06.940 --> 01:04:07.940]   ...um...
[01:04:07.940 --> 01:04:08.940]   ...that's great feedback...
[01:04:08.940 --> 01:04:09.940]   ...um...
[01:04:09.940 --> 01:04:10.940]   ...regarding like...
[01:04:10.940 --> 01:04:11.940]   ...can we have them or not...
[01:04:11.940 --> 01:04:11.940]   ...like...
[01:04:11.940 --> 01:04:12.940]   ...very happy to take it...
[01:04:12.940 --> 01:04:13.940]   ...to the team...
[01:04:13.940 --> 01:04:14.940]   ...I can definitely see...
[01:04:14.940 --> 01:04:15.940]   ...why it would be helpful...
[01:04:15.940 --> 01:04:16.940]   ...for you...
[01:04:16.940 --> 01:04:17.940]   ...for like...
[01:04:17.940 --> 01:04:18.940]   ...people to...
[01:04:18.940 --> 01:04:19.940]   ...directly build with it...
[01:04:19.940 --> 01:04:20.940]   ...um...
[01:04:20.940 --> 01:04:21.940]   ...but for now...
[01:04:21.940 --> 01:04:22.940]   ...it's not the case...
[01:04:22.940 --> 01:04:23.940]   ...and...
[01:04:23.940 --> 01:04:24.940]   ...speaking of native tools...
[01:04:24.940 --> 01:04:25.940]   ...so...
[01:04:25.940 --> 01:04:26.940]   ...gemini can...
[01:04:26.940 --> 01:04:27.940]   ...is basically...
[01:04:27.940 --> 01:04:28.940]   ...trained to do...
[01:04:28.940 --> 01:04:29.940]   ...native things...
[01:04:29.940 --> 01:04:30.940]   ...so...
[01:04:30.940 --> 01:04:31.940]   ...we generate...
[01:04:31.940 --> 01:04:32.940]   ...declaration...
[01:04:32.940 --> 01:04:33.940]   ...and can...
[01:04:33.940 --> 01:04:34.940]   ...try to do everything...
[01:04:34.940 --> 01:04:35.940]   ...but native tools...
[01:04:35.940 --> 01:04:36.940]   ...are much easier to use...
[01:04:36.940 --> 01:04:37.940]   ...as you don't need to...
[01:04:37.940 --> 01:04:38.940]   ...define...
[01:04:38.940 --> 01:04:39.940]   ...or create a declaration...
[01:04:39.940 --> 01:04:40.940]   ...and...
[01:04:40.940 --> 01:04:41.940]   ...they work basically...
[01:04:41.940 --> 01:04:42.940]   ...on the backend side...
[01:04:42.940 --> 01:04:43.940]   ...so you don't need to...
[01:04:43.940 --> 01:04:44.940]   ...execute anything...
[01:04:44.940 --> 01:04:45.940]   ...and as native tools...
[01:04:45.940 --> 01:04:46.940]   ...we currently have...
[01:04:46.940 --> 01:04:47.940]   ...Google search available...
[01:04:47.940 --> 01:04:48.940]   ...um...
[01:04:48.940 --> 01:04:49.940]   ...basically...
[01:04:49.940 --> 01:04:50.940]   ...are in AI Studio here...
[01:04:50.940 --> 01:04:51.940]   ...so...
[01:04:51.940 --> 01:04:52.940]   ...we have...
[01:04:52.940 --> 01:04:53.940]   ...structured output...
[01:04:53.940 --> 01:04:54.940]   ...this is not a native tool...
[01:04:54.940 --> 01:04:55.940]   ...which we used...
[01:04:55.940 --> 01:04:56.940]   ...to...
[01:04:56.940 --> 01:04:57.940]   ...get back the structures...
[01:04:57.940 --> 01:04:58.940]   ...code execution...
[01:04:58.940 --> 01:04:59.940]   ...is a native tools...
[01:04:59.940 --> 01:05:00.940]   ...and...
[01:05:00.940 --> 01:05:01.940]   ...basically means...
[01:05:01.940 --> 01:05:02.940]   ...that we...
[01:05:02.940 --> 01:05:03.940]   ...or...
[01:05:03.940 --> 01:05:04.940]   ...gemini...
[01:05:04.940 --> 01:05:05.940]   ...runs code for us...
[01:05:05.940 --> 01:05:06.940]   ...so...
[01:05:06.940 --> 01:05:07.940]   ...function...
[01:05:07.940 --> 01:05:08.940]   ...to sort...
[01:05:08.940 --> 01:05:09.940]   ...top...
[01:05:09.940 --> 01:05:10.940]   ...five...
[01:05:10.940 --> 01:05:11.940]   ...cities...
[01:05:11.940 --> 01:05:12.940]   ...based...
[01:05:12.940 --> 01:05:13.940]   ...on...
[01:05:13.940 --> 01:05:14.940]   ...population...
[01:05:14.940 --> 01:05:15.940]   ...so...
[01:05:15.940 --> 01:05:16.940]   ...what it can do...
[01:05:16.940 --> 01:05:17.940]   ...is like run...
[01:05:17.940 --> 01:05:18.940]   ...python code for us...
[01:05:18.940 --> 01:05:19.940]   ...so...
[01:05:19.940 --> 01:05:20.940]   ...if you prompt it to...
[01:05:20.940 --> 01:05:21.940]   ...solve a task...
[01:05:21.940 --> 01:05:22.940]   ...using Python...
[01:05:22.940 --> 01:05:23.940]   ...um...
[01:05:23.940 --> 01:05:24.940]   ...um...
[01:05:24.940 --> 01:05:25.940]   ...it should run...
[01:05:25.940 --> 01:05:26.940]   ...for us...
[01:05:26.940 --> 01:05:27.940]   ...the Python code...
[01:05:27.940 --> 01:05:28.940]   ...so...
[01:05:28.940 --> 01:05:29.940]   ...it should run...
[01:05:29.940 --> 01:05:30.940]   ...for us...
[01:05:30.940 --> 01:05:31.940]   ...the Python code...
[01:05:31.940 --> 01:05:32.940]   ...so...
[01:05:32.940 --> 01:05:33.940]   ...it generates...
[01:05:33.940 --> 01:05:34.940]   ...the Python code...
[01:05:34.940 --> 01:05:35.940]   ...so...
[01:05:35.940 --> 01:05:36.940]   ...it generates...
[01:05:36.940 --> 01:05:38.940]   ...the Python code...
[01:05:38.940 --> 01:05:39.940]   ...and it did not...
[01:05:39.940 --> 01:05:40.940]   ...run it...
[01:05:40.940 --> 01:05:42.940]   ...that's a bad example...
[01:05:42.940 --> 01:05:44.940]   ...sorry?
[01:05:44.940 --> 01:05:46.940]   ...
[01:05:46.940 --> 01:05:47.940]   ...oh...
[01:05:47.940 --> 01:05:48.940]   ...did I?
[01:05:48.940 --> 01:05:49.940]   ...ah...
[01:05:49.940 --> 01:05:49.940]   ...so...
[01:05:49.940 --> 01:05:50.940]   ...my bad...
[01:05:50.940 --> 01:05:51.940]   ...not Gemini's bad...
[01:05:51.940 --> 01:05:54.940]   ...use...
[01:05:54.940 --> 01:05:55.940]   ...python...
[01:05:55.940 --> 01:05:56.940]   ...let's see...
[01:05:56.940 --> 01:05:57.940]   ...what it does...
[01:05:57.940 --> 01:05:58.940]   ...um...
[01:05:58.940 --> 01:06:02.940]   ...okay...
[01:06:02.940 --> 01:06:02.940]   ...yeah...
[01:06:02.940 --> 01:06:03.940]   ...now it gets...
[01:06:03.940 --> 01:06:04.940]   ...thanks...
[01:06:04.940 --> 01:06:05.940]   ...perfect...
[01:06:05.940 --> 01:06:06.940]   ...so...
[01:06:06.940 --> 01:06:07.940]   ...so...
[01:06:07.940 --> 01:06:08.940]   ...we have some reasoning...
[01:06:08.940 --> 01:06:09.940]   ...and then it generates...
[01:06:09.940 --> 01:06:10.940]   ...executable code...
[01:06:10.940 --> 01:06:11.940]   ...executable code is...
[01:06:11.940 --> 01:06:12.940]   ...also provided via the API...
[01:06:12.940 --> 01:06:13.940]   ...um...
[01:06:13.940 --> 01:06:14.940]   ...which runs for us...
[01:06:14.940 --> 01:06:15.940]   ...Python...
[01:06:15.940 --> 01:06:16.940]   ...so...
[01:06:16.940 --> 01:06:17.940]   ...it writes the Python script...
[01:06:17.940 --> 01:06:18.940]   ...it executes the code...
[01:06:18.940 --> 01:06:19.940]   ...um...
[01:06:19.940 --> 01:06:20.940]   ...and...
[01:06:20.940 --> 01:06:21.940]   ...it generates...
[01:06:21.940 --> 01:06:22.940]   ...the Mudblood lib chart...
[01:06:22.940 --> 01:06:23.940]   ...and normally we...
[01:06:23.940 --> 01:06:24.940]   ...okay...
[01:06:24.940 --> 01:06:25.940]   ...in the notebook...
[01:06:25.940 --> 01:06:26.940]   ...we have an example...
[01:06:26.940 --> 01:06:27.940]   ...available...
[01:06:27.940 --> 01:06:28.940]   ...on how you...
[01:06:28.940 --> 01:06:29.940]   ...get the chart...
[01:06:29.940 --> 01:06:30.940]   ...if we...
[01:06:30.940 --> 01:06:31.940]   ...look into...
[01:06:31.940 --> 01:06:32.940]   ...the code execution tool...
[01:06:32.940 --> 01:06:33.940]   ...and here...
[01:06:33.940 --> 01:06:34.940]   ...we run it...
[01:06:34.940 --> 01:06:35.940]   ...and it returns the markdown...
[01:06:35.940 --> 01:06:36.940]   ...and you can also...
[01:06:36.940 --> 01:06:37.940]   ...it can regenerate...
[01:06:37.940 --> 01:06:38.940]   ...and return...
[01:06:38.940 --> 01:06:39.940]   ...images...
[01:06:39.940 --> 01:06:41.940]   ...next to code execution tool...
[01:06:41.940 --> 01:06:43.940]   ...there is the URL context tool...
[01:06:43.940 --> 01:06:45.940]   ...which basically allows you...
[01:06:45.940 --> 01:06:46.940]   ...to provide a URL...
[01:06:46.940 --> 01:06:47.940]   ...as part of your prompt...
[01:06:47.940 --> 01:06:48.940]   ...and we will extract...
[01:06:48.940 --> 01:06:49.940]   ...the information...
[01:06:49.940 --> 01:06:50.940]   ...from the website...
[01:06:50.940 --> 01:06:51.940]   ...behind the scenes...
[01:06:51.940 --> 01:06:52.940]   ...and make it available...
[01:06:52.940 --> 01:06:53.940]   ...into your...
[01:06:53.940 --> 01:06:54.940]   ...context...
[01:06:54.940 --> 01:06:55.940]   ...instead of...
[01:06:55.940 --> 01:06:56.940]   ...going to a website...
[01:06:56.940 --> 01:06:57.940]   ...command A...
[01:06:57.940 --> 01:06:58.940]   ...command C...
[01:06:58.940 --> 01:06:59.940]   ...command V...
[01:06:59.940 --> 01:07:00.940]   ...we do it for you...
[01:07:00.940 --> 01:07:01.940]   ...so...
[01:07:01.940 --> 01:07:02.940]   ...in this case...
[01:07:02.940 --> 01:07:03.940]   ...I ask it...
[01:07:03.940 --> 01:07:04.940]   ...what is the...
[01:07:04.940 --> 01:07:05.940]   ...other...
[01:07:05.940 --> 01:07:06.940]   ...benefits of Python...
[01:07:06.940 --> 01:07:07.940]   ...from the URL...
[01:07:07.940 --> 01:07:08.940]   ...you can provide...
[01:07:08.940 --> 01:07:09.940]   ...up to 20 URLs...
[01:07:09.940 --> 01:07:10.940]   ...in one request...
[01:07:10.940 --> 01:07:11.940]   ...behind the scenes...
[01:07:11.940 --> 01:07:12.940]   ...it goes to the URL...
[01:07:12.940 --> 01:07:14.940]   ...extracts the information...
[01:07:14.940 --> 01:07:16.940]   ...provides it as part of your prompt...
[01:07:16.940 --> 01:07:17.940]   ...and if we look into our prompt...
[01:07:17.940 --> 01:07:18.940]   ...yeah...
[01:07:18.940 --> 01:07:19.940]   ...here...
[01:07:19.940 --> 01:07:20.940]   ...it returned our nice...
[01:07:20.940 --> 01:07:21.940]   ...matplot...
[01:07:21.940 --> 01:07:22.940]   ...chart...
[01:07:22.940 --> 01:07:23.940]   ...which is very cool...
[01:07:23.940 --> 01:07:24.940]   ...and then...
[01:07:24.940 --> 01:07:25.940]   ...a final...
[01:07:25.940 --> 01:07:27.940]   ...tool is...
[01:07:27.940 --> 01:07:28.940]   ...of course...
[01:07:28.940 --> 01:07:29.940]   ...Google...
[01:07:29.940 --> 01:07:30.940]   ...and Google Search...
[01:07:30.940 --> 01:07:31.940]   ...kind of makes sense...
[01:07:31.940 --> 01:07:32.940]   ...um...
[01:07:32.940 --> 01:07:33.940]   ...so...
[01:07:33.940 --> 01:07:34.940]   ...let me find it...
[01:07:34.940 --> 01:07:35.940]   ...yeah...
[01:07:35.940 --> 01:07:36.940]   ...you can...
[01:07:36.940 --> 01:07:37.940]   ...allow or enable Google Search...
[01:07:37.940 --> 01:07:38.940]   ...which then...
[01:07:38.940 --> 01:07:39.940]   ...um...
[01:07:39.940 --> 01:07:41.940]   ...allows Gemini to...
[01:07:41.940 --> 01:07:42.940]   ...use...
[01:07:42.940 --> 01:07:43.940]   ...or...
[01:07:43.940 --> 01:07:44.940]   ...do Google Search...
[01:07:44.940 --> 01:07:45.940]   ...behind the scenes...
[01:07:45.940 --> 01:07:46.940]   ...and what happens here...
[01:07:46.940 --> 01:07:47.940]   ...is that...
[01:07:47.940 --> 01:07:48.940]   ...it takes our prompt...
[01:07:48.940 --> 01:07:49.940]   ...um...
[01:07:49.940 --> 01:07:50.940]   ...in this case...
[01:07:50.940 --> 01:07:51.940]   ...what are the latest developments...
[01:07:51.940 --> 01:07:52.940]   ...and renewable energies...
[01:07:52.940 --> 01:07:53.940]   ...and...
[01:07:53.940 --> 01:07:54.940]   ...first...
[01:07:54.940 --> 01:07:55.940]   ...it converts it into one...
[01:07:55.940 --> 01:07:57.940]   ...or multiple Google Search queries...
[01:07:57.940 --> 01:07:58.940]   ...then it executes...
[01:07:58.940 --> 01:07:59.940]   ...those Google Search queries...
[01:07:59.940 --> 01:08:01.940]   ...provides it back to the model...
[01:08:01.940 --> 01:08:02.940]   ...and then the model generates...
[01:08:02.940 --> 01:08:03.940]   ...your final response...
[01:08:03.940 --> 01:08:04.940]   ...from your user input...
[01:08:04.940 --> 01:08:06.940]   ...and from all of the search results...
[01:08:06.940 --> 01:08:08.940]   ...currently we don't...
[01:08:08.940 --> 01:08:09.940]   ...as mentioned...
[01:08:09.940 --> 01:08:10.940]   ...don't export...
[01:08:10.940 --> 01:08:11.940]   ...or expose those...
[01:08:11.940 --> 01:08:12.940]   ...tool calls...
[01:08:12.940 --> 01:08:13.940]   ...but...
[01:08:13.940 --> 01:08:14.940]   ...I guess...
[01:08:14.940 --> 01:08:16.940]   ...especially helpful...
[01:08:16.940 --> 01:08:17.940]   ...or interesting...
[01:08:17.940 --> 01:08:18.940]   ...for...
[01:08:18.940 --> 01:08:19.940]   ...um...
[01:08:19.940 --> 01:08:20.940]   ...Google Search...
[01:08:20.940 --> 01:08:21.940]   ...is that...
[01:08:21.940 --> 01:08:22.940]   ...we have...
[01:08:22.940 --> 01:08:23.940]   ...a...
[01:08:23.940 --> 01:08:24.940]   ...grounding...
[01:08:24.940 --> 01:08:25.940]   ...metadata...
[01:08:25.940 --> 01:08:26.940]   ...object...
[01:08:26.940 --> 01:08:33.940]   ...yes...
[01:08:33.940 --> 01:08:36.940]   ...so we have...
[01:08:36.940 --> 01:08:37.940]   ...grounding support...
[01:08:37.940 --> 01:08:38.940]   ...which basically...
[01:08:38.940 --> 01:08:39.940]   ...allows...
[01:08:39.940 --> 01:08:40.940]   ...or points...
[01:08:40.940 --> 01:08:41.940]   ...exactly...
[01:08:41.940 --> 01:08:42.940]   ...to where it got...
[01:08:42.940 --> 01:08:43.940]   ...or like...
[01:08:43.940 --> 01:08:44.940]   ...which information...
[01:08:44.940 --> 01:08:45.940]   ...refers to...
[01:08:45.940 --> 01:08:46.940]   ...which...
[01:08:46.940 --> 01:08:47.940]   ...source...
[01:08:47.940 --> 01:08:48.940]   ...we have...
[01:08:48.940 --> 01:08:49.940]   ...and also...
[01:08:49.940 --> 01:08:50.940]   ...grounding...
[01:08:50.940 --> 01:08:51.940]   ...meta...
[01:08:51.940 --> 01:08:52.940]   ...information...
[01:08:52.940 --> 01:08:53.940]   ...which websites...
[01:08:53.940 --> 01:08:54.940]   ...there is...
[01:08:54.940 --> 01:08:55.940]   ...which websites...
[01:08:55.940 --> 01:08:56.940]   ...were crawled...
[01:08:56.940 --> 01:08:57.940]   ...and in our...
[01:08:57.940 --> 01:08:58.940]   ...case...
[01:08:58.940 --> 01:08:59.940]   ...so...
[01:08:59.940 --> 01:09:00.940]   ...we have...
[01:09:00.940 --> 01:09:01.940]   ...the...
[01:09:01.940 --> 01:09:02.940]   ...yes...
[01:09:02.940 --> 01:09:03.940]   ...there...
[01:09:03.940 --> 01:09:04.940]   ...so...
[01:09:04.940 --> 01:09:05.940]   ...um...
[01:09:05.940 --> 01:09:06.940]   ...for both...
[01:09:06.940 --> 01:09:07.940]   ...code execution...
[01:09:07.940 --> 01:09:08.940]   ...and...
[01:09:08.940 --> 01:09:09.940]   ...grounding...
[01:09:09.940 --> 01:09:10.940]   ...and...
[01:09:10.940 --> 01:09:11.940]   ...URL...
[01:09:11.940 --> 01:09:12.940]   ...context...
[01:09:12.940 --> 01:09:13.940]   ...we...
[01:09:13.940 --> 01:09:14.940]   ...increase the...
[01:09:14.940 --> 01:09:15.940]   ...context...
[01:09:15.940 --> 01:09:16.940]   ...right?
[01:09:16.940 --> 01:09:17.940]   ...google search...
[01:09:17.940 --> 01:09:18.940]   ...um...
[01:09:18.940 --> 01:09:19.940]   ...there's...
[01:09:19.940 --> 01:09:20.940]   ...a free tier...
[01:09:20.940 --> 01:09:21.940]   ...from...
[01:09:21.940 --> 01:09:22.940]   ...I think...
[01:09:22.940 --> 01:09:23.940]   ...1500 Google searches...
[01:09:23.940 --> 01:09:24.940]   ...which are free...
[01:09:24.940 --> 01:09:25.940]   ...and...
[01:09:25.940 --> 01:09:26.940]   ...afterwards...
[01:09:26.940 --> 01:09:27.940]   ...I think...
[01:09:27.940 --> 01:09:28.940]   ...they have...
[01:09:28.940 --> 01:09:29.940]   ...$35...
[01:09:29.940 --> 01:09:30.940]   ...per...
[01:09:30.940 --> 01:09:31.940]   ...1,000...
[01:09:31.940 --> 01:09:32.940]   ...searches...
[01:09:32.940 --> 01:09:33.940]   ...code execution...
[01:09:33.940 --> 01:09:34.940]   ...the...
[01:09:34.940 --> 01:09:35.940]   ...python...
[01:09:35.940 --> 01:09:36.940]   ...running...
[01:09:36.940 --> 01:09:37.940]   ...is...
[01:09:37.940 --> 01:09:38.940]   ...free...
[01:09:38.940 --> 01:09:39.940]   ...um...
[01:09:39.940 --> 01:09:40.940]   ...um...
[01:09:40.940 --> 01:09:41.940]   ...yeah...
[01:09:41.940 --> 01:09:42.940]   ...and...
[01:09:42.940 --> 01:09:43.940]   ...I think...
[01:09:43.940 --> 01:09:44.940]   ...what's...
[01:09:44.940 --> 01:09:45.940]   ...what's...
[01:09:45.940 --> 01:09:45.940]   ...very cool...
[01:09:45.940 --> 01:09:46.940]   ...you already have done it...
[01:09:46.940 --> 01:09:47.940]   ...or are going to do it later...
[01:09:47.940 --> 01:09:47.940]   ...is...
[01:09:47.940 --> 01:09:48.940]   ...you can combine those...
[01:09:48.940 --> 01:09:49.940]   ...so...
[01:09:49.940 --> 01:09:50.940]   ...you can use the Google search tool...
[01:09:50.940 --> 01:09:52.940]   ...with the URL context tool...
[01:09:52.940 --> 01:09:53.940]   ...or the...
[01:09:53.940 --> 01:09:54.940]   ...code execution tool...
[01:09:54.940 --> 01:09:55.940]   ...with the Google search tool...
[01:09:55.940 --> 01:09:56.940]   ...to...
[01:09:56.940 --> 01:09:57.940]   ...basically...
[01:09:57.940 --> 01:09:58.940]   ...have it done...
[01:09:58.940 --> 01:09:59.940]   ...more agentically...
[01:09:59.940 --> 01:10:00.940]   ...like...
[01:10:00.940 --> 01:10:01.940]   ...first search...
[01:10:01.940 --> 01:10:02.940]   ...for like...
[01:10:02.940 --> 01:10:03.940]   ...what's the latest react...
[01:10:03.940 --> 01:10:04.940]   ...or Python version...
[01:10:04.940 --> 01:10:05.940]   ...then write a Python script...
[01:10:05.940 --> 01:10:06.940]   ...and run it...
[01:10:06.940 --> 01:10:07.940]   ...and return it...
[01:10:07.940 --> 01:10:08.940]   ...um...
[01:10:08.940 --> 01:10:09.940]   ...which makes it very nice...
[01:10:09.940 --> 01:10:10.940]   ...to use...
[01:10:10.940 --> 01:10:11.940]   ...to use...
[01:10:11.940 --> 01:10:12.940]   ...to use...
[01:10:12.940 --> 01:10:13.940]   ...to use...
[01:10:13.940 --> 01:10:14.940]   ...to use...
[01:10:14.940 --> 01:10:15.940]   ...the deep research tool...
[01:10:15.940 --> 01:10:16.940]   ...that also would be...
[01:10:16.940 --> 01:10:17.940]   ...release...
[01:10:17.940 --> 01:10:18.940]   ...and...
[01:10:18.940 --> 01:10:19.940]   ...yeah...
[01:10:19.940 --> 01:10:20.940]   ...we have heard...
[01:10:20.940 --> 01:10:21.940]   ...like a few people...
[01:10:21.940 --> 01:10:22.940]   ...would like to have...
[01:10:22.940 --> 01:10:23.940]   ...the deep research...
[01:10:23.940 --> 01:10:24.940]   ...API...
[01:10:24.940 --> 01:10:25.940]   ...I think...
[01:10:25.940 --> 01:10:26.940]   ...the more people...
[01:10:26.940 --> 01:10:27.940]   ...ask for it...
[01:10:27.940 --> 01:10:28.940]   ...the more likely...
[01:10:28.940 --> 01:10:29.940]   ...it will going to be...
[01:10:29.940 --> 01:10:30.940]   ...um...
[01:10:30.940 --> 01:10:31.940]   ...maybe something...
[01:10:31.940 --> 01:10:32.940]   ...are part of...
[01:10:32.940 --> 01:10:33.940]   ...like our team...
[01:10:33.940 --> 01:10:34.940]   ...we...
[01:10:34.940 --> 01:10:35.940]   ...yesterday...
[01:10:35.940 --> 01:10:36.940]   ...we...
[01:10:36.940 --> 01:10:37.940]   ...open sourced...
[01:10:37.940 --> 01:10:38.940]   ...an example...
[01:10:38.940 --> 01:10:39.940]   ...for how you can build...
[01:10:39.940 --> 01:10:40.940]   ...your...
[01:10:40.940 --> 01:10:41.940]   ...um...
[01:10:41.940 --> 01:10:42.940]   ...your own...
[01:10:42.940 --> 01:10:43.940]   ...deep research...
[01:10:43.940 --> 01:10:44.940]   ...using...
[01:10:44.940 --> 01:10:45.940]   ...lang graph...
[01:10:45.940 --> 01:10:46.940]   ...with Gemini...
[01:10:46.940 --> 01:10:47.940]   ...very similar to...
[01:10:47.940 --> 01:10:48.940]   ...um...
[01:10:48.940 --> 01:10:49.940]   ...right...
[01:10:49.940 --> 01:10:50.940]   ...very similar to...
[01:10:50.940 --> 01:10:51.940]   ...what basically...
[01:10:51.940 --> 01:10:52.940]   ...the whole...
[01:10:52.940 --> 01:10:53.940]   ...deep research...
[01:10:53.940 --> 01:10:54.940]   ...agents do...
[01:10:54.940 --> 01:10:55.940]   ...you have a...
[01:10:55.940 --> 01:10:56.940]   ...question...
[01:10:56.940 --> 01:10:57.940]   ...we generate queries...
[01:10:57.940 --> 01:10:58.940]   ...we then run...
[01:10:58.940 --> 01:10:59.940]   ...like multiple...
[01:10:59.940 --> 01:11:00.940]   ...web searches...
[01:11:00.940 --> 01:11:01.940]   ...okay...
[01:11:01.940 --> 01:11:02.940]   ...was the user...
[01:11:02.940 --> 01:11:03.940]   ...question already asked...
[01:11:03.940 --> 01:11:04.940]   ...do I need to do...
[01:11:04.940 --> 01:11:05.940]   ...more research...
[01:11:05.940 --> 01:11:06.940]   ...and then you have...
[01:11:06.940 --> 01:11:07.940]   ...this kind of loop...
[01:11:07.940 --> 01:11:08.940]   ...for...
[01:11:08.940 --> 01:11:09.940]   ...okay...
[01:11:09.940 --> 01:11:10.940]   ...do I need to...
[01:11:10.940 --> 01:11:11.940]   ...search other tools...
[01:11:11.940 --> 01:11:12.940]   ...uh...
[01:11:12.940 --> 01:11:13.940]   ...it's completely open source...
[01:11:13.940 --> 01:11:14.940]   ...it uses...
[01:11:14.940 --> 01:11:15.940]   ...all of the things...
[01:11:15.940 --> 01:11:16.940]   ...we have currently...
[01:11:16.940 --> 01:11:17.940]   ...seen today...
[01:11:17.940 --> 01:11:18.940]   ...gemini 2.5...
[01:11:18.940 --> 01:11:19.940]   ...flesh...
[01:11:19.940 --> 01:11:20.940]   ...gemini 2.0...
[01:11:20.940 --> 01:11:21.940]   ...so...
[01:11:21.940 --> 01:11:22.940]   ...if you want...
[01:11:22.940 --> 01:11:23.940]   ...your own...
[01:11:23.940 --> 01:11:24.940]   ...deep research...
[01:11:24.940 --> 01:11:25.940]   ...that's probably...
[01:11:25.940 --> 01:11:26.940]   ...the best way...
[01:11:26.940 --> 01:11:28.940]   ...to start...
[01:11:28.940 --> 01:11:29.940]   ...so...
[01:11:29.940 --> 01:11:30.940]   ...so...
[01:11:30.940 --> 01:11:31.940]   ...there is additional...
[01:11:31.940 --> 01:11:32.940]   ...pricing for...
[01:11:32.940 --> 01:11:33.940]   ...the Google search...
[01:11:33.940 --> 01:11:34.940]   ...we had it...
[01:11:34.940 --> 01:11:35.940]   ...like...
[01:11:35.940 --> 01:11:36.940]   ...two minutes ago...
[01:11:36.940 --> 01:11:37.940]   ...basically...
[01:11:37.940 --> 01:11:38.940]   ...1,500...
[01:11:38.940 --> 01:11:39.940]   ...searches are free...
[01:11:39.940 --> 01:11:40.940]   ...if you use...
[01:11:40.940 --> 01:11:41.940]   ...the native tool...
[01:11:41.940 --> 01:11:42.940]   ...then it costs money...
[01:11:42.940 --> 01:11:43.940]   ...and all of those tools...
[01:11:43.940 --> 01:11:44.940]   ...in a way...
[01:11:44.940 --> 01:11:45.940]   ...enrich your context...
[01:11:45.940 --> 01:11:46.940]   ...so...
[01:11:46.940 --> 01:11:47.940]   ...if you use...
[01:11:47.940 --> 01:11:48.940]   ...the URL...
[01:11:48.940 --> 01:11:49.940]   ...context tool...
[01:11:49.940 --> 01:11:50.940]   ...which goes to...
[01:11:50.940 --> 01:11:51.940]   ...a blog post...
[01:11:51.940 --> 01:11:52.940]   ...and a blog post...
[01:11:52.940 --> 01:11:53.940]   ...has...
[01:11:53.940 --> 01:11:54.940]   ...10,000 tokens...
[01:11:54.940 --> 01:11:55.940]   ...you pay for those...
[01:11:55.940 --> 01:11:56.940]   ...10,000 tokens...
[01:11:56.940 --> 01:11:57.940]   ...as it's included...
[01:11:57.940 --> 01:11:58.940]   ...into your prompt...
[01:11:58.940 --> 01:11:59.940]   ...and then...
[01:11:59.940 --> 01:12:00.940]   ...tries to answer...
[01:12:00.940 --> 01:12:01.940]   ...your question...
[01:12:01.940 --> 01:12:02.940]   ...for like...
[01:12:02.940 --> 01:12:03.940]   ...the function calling...
[01:12:03.940 --> 01:12:04.940]   ...we had...
[01:12:04.940 --> 01:12:05.940]   ...it's a bit different...
[01:12:05.940 --> 01:12:06.940]   ...of course...
[01:12:06.940 --> 01:12:07.940]   ...we generate tokens...
[01:12:07.940 --> 01:12:08.940]   ...but like...
[01:12:08.940 --> 01:12:09.940]   ...the structured output...
[01:12:09.940 --> 01:12:10.940]   ...tokens are...
[01:12:10.940 --> 01:12:11.940]   ...less...
[01:12:11.940 --> 01:12:12.940]   ...and you do...
[01:12:12.940 --> 01:12:13.940]   ...the function calling...
[01:12:13.940 --> 01:12:14.940]   ...or like...
[01:12:14.940 --> 01:12:15.940]   ...the Python call...
[01:12:15.940 --> 01:12:16.940]   ...on your side...
[01:12:16.940 --> 01:12:17.940]   ...if we have...
[01:12:17.940 --> 01:12:18.940]   ...to...
[01:12:18.940 --> 01:12:19.940]   ...which have...
[01:12:19.940 --> 01:12:20.940]   ...overlapping...
[01:12:20.940 --> 01:12:21.940]   ...functions...
[01:12:21.940 --> 01:12:22.940]   ...like...
[01:12:22.940 --> 01:12:23.940]   ...in the same...
[01:12:23.940 --> 01:12:24.940]   ...whether...
[01:12:24.940 --> 01:12:25.940]   ...one...
[01:12:25.940 --> 01:12:26.940]   ...to...
[01:12:26.940 --> 01:12:27.940]   ...which is giving...
[01:12:27.940 --> 01:12:28.940]   ...and...
[01:12:28.940 --> 01:12:29.940]   ...the...
[01:12:29.940 --> 01:12:30.940]   ...to...
[01:12:30.940 --> 01:12:31.940]   ...which is giving...
[01:12:31.940 --> 01:12:32.940]   ...and...
[01:12:32.940 --> 01:12:33.940]   ...the...
[01:12:33.940 --> 01:12:34.940]   ...to...
[01:12:34.940 --> 01:12:35.940]   ...which is giving...
[01:12:35.940 --> 01:12:36.940]   ...and...
[01:12:36.940 --> 01:12:37.940]   ...to...
[01:12:37.940 --> 01:12:38.940]   ...to...
[01:12:38.940 --> 01:12:39.940]   ...which is giving...
[01:12:39.940 --> 01:12:40.940]   ...temperature...
[01:12:40.940 --> 01:12:41.940]   ...and...
[01:12:41.940 --> 01:12:42.940]   ...how does the...
[01:12:42.940 --> 01:12:43.940]   ...to...
[01:12:43.940 --> 01:12:44.940]   ...and...
[01:12:44.940 --> 01:12:46.940]   ...that's definitely...
[01:12:46.940 --> 01:12:47.940]   ...a good question...
[01:12:47.940 --> 01:12:48.940]   ...so...
[01:12:48.940 --> 01:12:49.940]   ...function calling...
[01:12:49.940 --> 01:12:50.940]   ...of course...
[01:12:50.940 --> 01:12:51.940]   ...is...
[01:12:51.940 --> 01:12:52.940]   ...much more than...
[01:12:52.940 --> 01:12:53.940]   ...one tool...
[01:12:53.940 --> 01:12:54.940]   ...and...
[01:12:54.940 --> 01:12:55.940]   ...never going to be...
[01:12:55.940 --> 01:12:56.940]   ...calling the...
[01:12:56.940 --> 01:12:57.940]   ...weather API...
[01:12:57.940 --> 01:12:58.940]   ...because...
[01:12:58.940 --> 01:12:59.940]   ...I mean...
[01:12:59.940 --> 01:13:00.940]   ...we have...
[01:13:00.940 --> 01:13:01.940]   ...weather apps, right?
[01:13:01.940 --> 01:13:02.940]   ...um...
[01:13:02.940 --> 01:13:03.940]   ...but it's a good...
[01:13:03.940 --> 01:13:04.940]   ...example to show...
[01:13:04.940 --> 01:13:05.940]   ...but that's very cool...
[01:13:05.940 --> 01:13:06.940]   ...is so...
[01:13:06.940 --> 01:13:07.940]   ...there's...
[01:13:07.940 --> 01:13:07.940]   ...parallel...
[01:13:07.940 --> 01:13:08.940]   ...function calling...
[01:13:08.940 --> 01:13:09.940]   ...so...
[01:13:09.940 --> 01:13:10.940]   ...we are under...
[01:13:10.940 --> 01:13:11.940]   ...gemini documentation...
[01:13:11.940 --> 01:13:12.940]   ...again...
[01:13:12.940 --> 01:13:13.940]   ...and...
[01:13:13.940 --> 01:13:14.940]   ...in the lights, right?
[01:13:14.940 --> 01:13:15.940]   ...if you...
[01:13:15.940 --> 01:13:16.940]   ...want to say...
[01:13:16.940 --> 01:13:17.940]   ...okay...
[01:13:17.940 --> 01:13:18.940]   ...set us into a party mode...
[01:13:18.940 --> 01:13:19.940]   ...you would expect...
[01:13:19.940 --> 01:13:20.940]   ...all of them to start...
[01:13:20.940 --> 01:13:21.940]   ...at the same time...
[01:13:21.940 --> 01:13:22.940]   ...and...
[01:13:22.940 --> 01:13:23.940]   ...with Gemini...
[01:13:23.940 --> 01:13:24.940]   ...we have parallel...
[01:13:24.940 --> 01:13:25.940]   ...true calling...
[01:13:25.940 --> 01:13:26.940]   ...so...
[01:13:26.940 --> 01:13:27.940]   ...basically...
[01:13:27.940 --> 01:13:28.940]   ...what Gemini would do...
[01:13:28.940 --> 01:13:29.940]   ...instead of generating...
[01:13:29.940 --> 01:13:30.940]   ...one...
[01:13:30.940 --> 01:13:31.940]   ...object as an output...
[01:13:31.940 --> 01:13:32.940]   ...it generates a list...
[01:13:32.940 --> 01:13:33.940]   ...with...
[01:13:33.940 --> 01:13:34.940]   ...basically three objects...
[01:13:34.940 --> 01:13:35.940]   ...for all of the functions...
[01:13:35.940 --> 01:13:36.940]   ...you need to call...
[01:13:36.940 --> 01:13:37.940]   ...and then...
[01:13:37.940 --> 01:13:38.940]   ...you iterate...
[01:13:38.940 --> 01:13:39.940]   ...over those...
[01:13:39.940 --> 01:13:40.940]   ...inputs and outputs...
[01:13:40.940 --> 01:13:41.940]   ...of the tools...
[01:13:41.940 --> 01:13:42.940]   ...are not dependent...
[01:13:42.940 --> 01:13:43.940]   ...of each other, right?
[01:13:43.940 --> 01:13:44.940]   ...I can start my disco ball...
[01:13:44.940 --> 01:13:45.940]   ...and the music...
[01:13:45.940 --> 01:13:46.940]   ...at the same time...
[01:13:46.940 --> 01:13:47.940]   ...and not...
[01:13:47.940 --> 01:13:47.940]   ...okay...
[01:13:47.940 --> 01:13:48.940]   ...I first need to start...
[01:13:48.940 --> 01:13:49.940]   ...my disco ball...
[01:13:49.940 --> 01:13:50.940]   ...and if it runs...
[01:13:50.940 --> 01:13:51.940]   ...I can like...
[01:13:51.940 --> 01:13:52.940]   ...start the music...
[01:13:52.940 --> 01:13:53.940]   ...if you have...
[01:13:53.940 --> 01:13:54.940]   ...more of those...
[01:13:54.940 --> 01:13:55.940]   ...sequential tool calling...
[01:13:55.940 --> 01:13:56.940]   ...basically...
[01:13:56.940 --> 01:13:57.940]   ...you need the input...
[01:13:57.940 --> 01:13:58.940]   ...sorry...
[01:13:58.940 --> 01:13:59.940]   ...you need the output...
[01:13:59.940 --> 01:14:00.940]   ...of the first function...
[01:14:00.940 --> 01:14:01.940]   ...for the input...
[01:14:01.940 --> 01:14:02.940]   ...of the second function...
[01:14:02.940 --> 01:14:03.940]   ...basically...
[01:14:03.940 --> 01:14:04.940]   ...you have like...
[01:14:04.940 --> 01:14:04.940]   ...some kind of...
[01:14:04.940 --> 01:14:06.940]   ...smart home system...
[01:14:06.940 --> 01:14:07.940]   ...and you want...
[01:14:07.940 --> 01:14:08.940]   ...to set the temperature...
[01:14:08.940 --> 01:14:09.940]   ...based on like...
[01:14:09.940 --> 01:14:10.940]   ...the outside weather...
[01:14:10.940 --> 01:14:11.940]   ...you would first need to...
[01:14:11.940 --> 01:14:12.940]   ...check what's the weather...
[01:14:12.940 --> 01:14:13.940]   ...and then like...
[01:14:13.940 --> 01:14:14.940]   ...set your temperature...
[01:14:14.940 --> 01:14:15.940]   ...inside of your house...
[01:14:15.940 --> 01:14:16.940]   ...here would...
[01:14:16.940 --> 01:14:17.940]   ...you basically...
[01:14:17.940 --> 01:14:18.940]   ...provide instructions...
[01:14:18.940 --> 01:14:19.940]   ...using the system prompt...
[01:14:19.940 --> 01:14:20.940]   ...to your model...
[01:14:20.940 --> 01:14:21.940]   ...to say okay...
[01:14:21.940 --> 01:14:22.940]   ...to change the weather...
[01:14:22.940 --> 01:14:23.940]   ...you first need to...
[01:14:23.940 --> 01:14:24.940]   ...look up...
[01:14:24.940 --> 01:14:25.940]   ...the weather...
[01:14:25.940 --> 01:14:26.940]   ...and then set the temperature...
[01:14:26.940 --> 01:14:27.940]   ...and what Gemini would do...
[01:14:27.940 --> 01:14:28.940]   ...basically...
[01:14:28.940 --> 01:14:29.940]   ...you have your user prompt...
[01:14:29.940 --> 01:14:30.940]   ...it generates the...
[01:14:30.940 --> 01:14:31.940]   ...function...
[01:14:31.940 --> 01:14:32.940]   ...structured function...
[01:14:32.940 --> 01:14:33.940]   ...you call the function...
[01:14:33.940 --> 01:14:34.940]   ...and instead of...
[01:14:34.940 --> 01:14:35.940]   ...generating a user-friendly...
[01:14:35.940 --> 01:14:36.940]   ...response...
[01:14:36.940 --> 01:14:37.940]   ...it generates another...
[01:14:37.940 --> 01:14:38.940]   ...function call...
[01:14:38.940 --> 01:14:39.940]   ...and then...
[01:14:39.940 --> 01:14:40.940]   ...you can call it...
[01:14:40.940 --> 01:14:41.940]   ...so basically...
[01:14:41.940 --> 01:14:42.940]   ...it continues...
[01:14:42.940 --> 01:14:43.940]   ...this function calling...
[01:14:43.940 --> 01:14:44.940]   ...loop...
[01:14:44.940 --> 01:14:45.940]   ...before generating...
[01:14:45.940 --> 01:14:46.940]   ...a very nice...
[01:14:46.940 --> 01:14:47.940]   ...user-friendly output...
[01:14:47.940 --> 01:14:48.940]   ...can you see that again?
[01:14:48.940 --> 01:14:49.940]   So...
[01:14:49.940 --> 01:14:50.940]   ...can I...
[01:14:50.940 --> 01:14:51.940]   ...function call...
[01:14:51.940 --> 01:14:52.940]   ...in the loop?
[01:14:52.940 --> 01:14:53.940]   Yes...
[01:14:53.940 --> 01:14:54.940]   ...kind of...
[01:14:54.940 --> 01:14:55.940]   ...I mean...
[01:14:55.940 --> 01:14:56.940]   ...I can like...
[01:14:56.940 --> 01:14:57.940]   ...so there's...
[01:14:57.940 --> 01:14:58.940]   ...I put up an example...
[01:14:58.940 --> 01:14:59.940]   ...for like...
[01:14:59.940 --> 01:15:00.940]   ...the sequential...
[01:15:00.940 --> 01:15:01.940]   ...function calling...
[01:15:01.940 --> 01:15:02.940]   ...to manage...
[01:15:02.940 --> 01:15:03.940]   ...multiple function...
[01:15:03.940 --> 01:15:04.940]   ...calling...
[01:15:04.940 --> 01:15:05.940]   ...time-outs...
[01:15:05.940 --> 01:15:06.940]   ...and...
[01:15:06.940 --> 01:15:07.940]   ...the responses...
[01:15:07.940 --> 01:15:08.940]   ...is there a...
[01:15:08.940 --> 01:15:09.940]   ...like...
[01:15:09.940 --> 01:15:10.940]   ...manage...
[01:15:10.940 --> 01:15:11.940]   ...that...
[01:15:11.940 --> 01:15:11.940]   ...you need to do...
[01:15:11.940 --> 01:15:12.940]   ...or...
[01:15:12.940 --> 01:15:13.940]   ...do we have to write...
[01:15:13.940 --> 01:15:14.940]   ...if there are...
[01:15:14.940 --> 01:15:15.940]   ...multiple...
[01:15:15.940 --> 01:15:16.940]   ...function calls...
[01:15:16.940 --> 01:15:17.940]   ...and some...
[01:15:17.940 --> 01:15:18.940]   ...sequential...
[01:15:18.940 --> 01:15:19.940]   ...and some...
[01:15:19.940 --> 01:15:20.940]   ...longer...
[01:15:20.940 --> 01:15:21.940]   ...for...
[01:15:21.940 --> 01:15:21.940]   ...for...
[01:15:21.940 --> 01:15:22.940]   ...is there...
[01:15:22.940 --> 01:15:23.940]   ...for...
[01:15:23.940 --> 01:15:24.940]   ...for...
[01:15:24.940 --> 01:15:25.940]   ...for...
[01:15:25.940 --> 01:15:25.940]   ...can...
[01:15:25.940 --> 01:15:26.940]   ...to...
[01:15:26.940 --> 01:15:27.940]   ...handle...
[01:15:27.940 --> 01:15:28.940]   ...like...
[01:15:28.940 --> 01:15:29.940]   ...functions...
[01:15:29.940 --> 01:15:30.940]   ...who could...
[01:15:30.940 --> 01:15:31.940]   ...time-out...
[01:15:31.940 --> 01:15:32.940]   ...or like...
[01:15:32.940 --> 01:15:33.940]   ...the best way...
[01:15:33.940 --> 01:15:34.940]   ...so it's a...
[01:15:34.940 --> 01:15:35.940]   ...bit like...
[01:15:35.940 --> 01:15:36.940]   ...I would say...
[01:15:36.940 --> 01:15:37.940]   ...parallel calling...
[01:15:37.940 --> 01:15:38.940]   ...is like...
[01:15:38.940 --> 01:15:39.940]   ...you need to wait...
[01:15:39.940 --> 01:15:40.940]   ...for all of the results...
[01:15:40.940 --> 01:15:41.940]   ...and provide an error message...
[01:15:41.940 --> 01:15:42.940]   ...or not ready yet...
[01:15:42.940 --> 01:15:43.940]   ...or something...
[01:15:43.940 --> 01:15:44.940]   ...but you would need to...
[01:15:44.940 --> 01:15:46.940]   ...to explore how it works...
[01:15:46.940 --> 01:15:47.940]   ...on the live API...
[01:15:47.940 --> 01:15:48.940]   ...which is basically...
[01:15:48.940 --> 01:15:49.940]   ...our way to create...
[01:15:49.940 --> 01:15:50.940]   ...real-time agents...
[01:15:50.940 --> 01:15:51.940]   ...they are working...
[01:15:51.940 --> 01:15:52.940]   ...something called...
[01:15:52.940 --> 01:15:54.940]   ...asynchronous function calling...
[01:15:54.940 --> 01:15:55.940]   ...where...
[01:15:55.940 --> 01:15:56.940]   ...the conversation continues...
[01:15:56.940 --> 01:15:57.940]   ...so...
[01:15:57.940 --> 01:15:58.940]   ...when you think about...
[01:15:58.940 --> 01:15:59.940]   ...a customer support agent...
[01:15:59.940 --> 01:16:00.940]   ...which you can...
[01:16:00.940 --> 01:16:01.940]   ...which you talk to...
[01:16:01.940 --> 01:16:02.940]   ...right...
[01:16:02.940 --> 01:16:03.940]   ...it would be very weird...
[01:16:03.940 --> 01:16:04.940]   ...if the agent stops...
[01:16:04.940 --> 01:16:05.940]   ...for like...
[01:16:05.940 --> 01:16:06.940]   ...three minutes...
[01:16:06.940 --> 01:16:07.940]   ...and doesn't say something...
[01:16:07.940 --> 01:16:08.940]   ...because it needs to look up...
[01:16:08.940 --> 01:16:09.940]   ...your information...
[01:16:09.940 --> 01:16:10.940]   ...so...
[01:16:10.940 --> 01:16:11.940]   ...that's what they call...
[01:16:11.940 --> 01:16:12.940]   ...asynchronous function calling...
[01:16:12.940 --> 01:16:12.940]   ...so...
[01:16:12.940 --> 01:16:13.940]   ...you can continue...
[01:16:13.940 --> 01:16:14.940]   ...the conversation...
[01:16:14.940 --> 01:16:15.940]   ...with the agent...
[01:16:15.940 --> 01:16:15.940]   ...but the agent...
[01:16:15.940 --> 01:16:16.940]   ...runs a tool call...
[01:16:16.940 --> 01:16:17.940]   ...and then...
[01:16:17.940 --> 01:16:18.940]   ...injects the response...
[01:16:18.940 --> 01:16:19.940]   ...later...
[01:16:19.940 --> 01:16:20.940]   ...but it's only...
[01:16:20.940 --> 01:16:21.940]   ...for the live API...
[01:16:21.940 --> 01:16:22.940]   ...and is that...
[01:16:22.940 --> 01:16:23.940]   ...for the...
[01:16:23.940 --> 01:16:24.940]   ...yeah...
[01:16:24.940 --> 01:16:25.940]   ...so...
[01:16:25.940 --> 01:16:27.940]   ...documentation...
[01:16:27.940 --> 01:16:30.940]   ...live API...
[01:16:30.940 --> 01:16:31.940]   ...it was launched...
[01:16:31.940 --> 01:16:32.940]   ...on...
[01:16:32.940 --> 01:16:33.940]   ...I think...
[01:16:33.940 --> 01:16:34.940]   ...in I/O...
[01:16:34.940 --> 01:16:35.940]   ...or...
[01:16:35.940 --> 01:16:36.940]   ...on Cloud Next...
[01:16:36.940 --> 01:16:37.940]   ...so...
[01:16:37.940 --> 01:16:38.940]   ...yeah...
[01:16:38.940 --> 01:16:39.940]   ...like...
[01:16:39.940 --> 01:16:40.940]   ...tool use with live API...
[01:16:40.940 --> 01:16:41.940]   ...and there's...
[01:16:41.940 --> 01:16:43.940]   ...asynchronous function calling...
[01:16:43.940 --> 01:16:44.940]   ...um...
[01:16:44.940 --> 01:16:45.940]   ...with code snippets...
[01:16:45.940 --> 01:16:46.940]   ...for...
[01:16:46.940 --> 01:16:47.940]   ...for Python...
[01:16:47.940 --> 01:16:48.940]   ...and JavaScript...
[01:16:48.940 --> 01:16:49.940]   ...cool...
[01:16:49.940 --> 01:16:51.940]   ...yeah...
[01:16:51.940 --> 01:16:52.940]   ...is asynchronous...
[01:16:52.940 --> 01:16:53.940]   ...function calling...
[01:16:53.940 --> 01:16:54.940]   ...the synonyms...
[01:16:54.940 --> 01:16:54.940]   ...for...
[01:16:54.940 --> 01:16:55.940]   ...parallay...
[01:16:55.940 --> 01:16:56.940]   ...parallay...
[01:16:56.940 --> 01:16:57.940]   ...parallay...
[01:16:57.940 --> 01:16:57.940]   ...no...
[01:16:57.940 --> 01:16:58.940]   ...it's more like...
[01:16:58.940 --> 01:16:59.940]   ...I start a function call now...
[01:16:59.940 --> 01:17:00.940]   ...I need to continue...
[01:17:00.940 --> 01:17:01.940]   ...my conversation...
[01:17:01.940 --> 01:17:02.940]   ...I get back the response...
[01:17:02.940 --> 01:17:03.940]   ...later...
[01:17:03.940 --> 01:17:04.940]   ...so...
[01:17:04.940 --> 01:17:05.940]   ...instead of like...
[01:17:05.940 --> 01:17:06.940]   ...getting the response...
[01:17:06.940 --> 01:17:07.940]   ...what you get back...
[01:17:07.940 --> 01:17:08.940]   ...yes...
[01:17:08.940 --> 01:17:09.940]   ...what you get back...
[01:17:09.940 --> 01:17:10.940]   ...from the model...
[01:17:10.940 --> 01:17:11.940]   ...it could be...
[01:17:11.940 --> 01:17:12.940]   ...for example...
[01:17:12.940 --> 01:17:13.940]   ...interrupted...
[01:17:13.940 --> 01:17:14.940]   ...the developer...
[01:17:14.940 --> 01:17:14.940]   ...know...
[01:17:14.940 --> 01:17:15.940]   ...okay...
[01:17:15.940 --> 01:17:16.940]   ...I started something...
[01:17:16.940 --> 01:17:17.940]   ...the model knows...
[01:17:17.940 --> 01:17:18.940]   ...it started something...
[01:17:18.940 --> 01:17:19.940]   ...and then you can inject...
[01:17:19.940 --> 01:17:20.940]   ...once...
[01:17:20.940 --> 01:17:21.940]   ...the...
[01:17:21.940 --> 01:17:22.940]   ...your functions...
[01:17:22.940 --> 01:17:23.940]   ...the output is ready...
[01:17:23.940 --> 01:17:24.940]   ...put it back into...
[01:17:24.940 --> 01:17:25.940]   ...the conversation...
[01:17:25.940 --> 01:17:26.940]   ...and then the model...
[01:17:26.940 --> 01:17:27.940]   ...uses that information...
[01:17:27.940 --> 01:17:29.940]   ...to continue...
[01:17:29.940 --> 01:17:30.940]   ...and what about...
[01:17:30.940 --> 01:17:31.940]   ...of...
[01:17:31.940 --> 01:17:32.940]   ...of...
[01:17:32.940 --> 01:17:33.940]   ...the API codes...
[01:17:33.940 --> 01:17:34.940]   ...yep...
[01:17:34.940 --> 01:17:35.940]   ...yep...
[01:17:35.940 --> 01:17:36.940]   ...yep...
[01:17:36.940 --> 01:17:37.940]   ...yep...
[01:17:37.940 --> 01:17:38.940]   ...yep...
[01:17:38.940 --> 01:17:39.940]   ...what's the equivalent...
[01:17:39.940 --> 01:17:40.940]   ...um...
[01:17:40.940 --> 01:17:41.940]   ...so...
[01:17:41.940 --> 01:17:42.940]   ...in AI Studio...
[01:17:42.940 --> 01:17:42.940]   ...we don't have...
[01:17:42.940 --> 01:17:43.940]   ...a feature like this...
[01:17:43.940 --> 01:17:44.940]   ...but you can like...
[01:17:44.940 --> 01:17:45.940]   ...use...
[01:17:45.940 --> 01:17:46.940]   ...third-party...
[01:17:46.940 --> 01:17:47.940]   ...tools...
[01:17:47.940 --> 01:17:48.940]   ...like...
[01:17:48.940 --> 01:17:49.940]   ...langsmith...
[01:17:49.940 --> 01:17:50.940]   ...or...
[01:17:50.940 --> 01:17:51.940]   ...arise...
[01:17:51.940 --> 01:17:52.940]   ...AI...
[01:17:52.940 --> 01:17:53.940]   ...Phoenix...
[01:17:53.940 --> 01:17:54.940]   ...but Vertex...
[01:17:54.940 --> 01:17:55.940]   ...AI...
[01:17:55.940 --> 01:17:56.940]   ...supports...
[01:17:56.940 --> 01:17:57.940]   ...those features...
[01:17:57.940 --> 01:17:58.940]   ...okay...
[01:17:58.940 --> 01:17:59.940]   ...so...
[01:17:59.940 --> 01:18:00.940]   ...if we have...
[01:18:00.940 --> 01:18:01.940]   ...yeah...
[01:18:01.940 --> 01:18:02.940]   ...there was a question...
[01:18:02.940 --> 01:18:03.940]   ...yeah...
[01:18:03.940 --> 01:18:04.940]   ...in AI...
[01:18:04.940 --> 01:18:05.940]   ...previous...
[01:18:05.940 --> 01:18:06.940]   ...understanding...
[01:18:06.940 --> 01:18:07.940]   ...and...
[01:18:07.940 --> 01:18:08.940]   ...in AI...
[01:18:08.940 --> 01:18:09.940]   ...in AI...
[01:18:09.940 --> 01:18:10.940]   ...in AI...
[01:18:10.940 --> 01:18:11.940]   ...I don't know...
[01:18:11.940 --> 01:18:12.940]   ...the only thing I know...
[01:18:12.940 --> 01:18:13.940]   ...was only Gemini 2.0...
[01:18:13.940 --> 01:18:14.940]   ...flash...
[01:18:14.940 --> 01:18:14.940]   ...available...
[01:18:14.940 --> 01:18:15.940]   ...in the live API...
[01:18:15.940 --> 01:18:16.940]   ...but now we have...
[01:18:16.940 --> 01:18:17.940]   ...Gemini 2.5...
[01:18:17.940 --> 01:18:18.940]   ...flash...
[01:18:18.940 --> 01:18:19.940]   ...so basically the model...
[01:18:19.940 --> 01:18:20.940]   ...we used in like...
[01:18:20.940 --> 01:18:21.940]   ...the Jupyter Notebooks...
[01:18:21.940 --> 01:18:22.940]   ...um...
[01:18:22.940 --> 01:18:23.940]   ...I guess you have to try...
[01:18:23.940 --> 01:18:24.940]   ...or maybe like...
[01:18:24.940 --> 01:18:25.940]   ...reach out to the people...
[01:18:25.940 --> 01:18:26.940]   ...who are working more...
[01:18:26.940 --> 01:18:27.940]   ...with it...
[01:18:27.940 --> 01:18:28.940]   ...so...
[01:18:28.940 --> 01:18:29.940]   ...you have to try...
[01:18:29.940 --> 01:18:30.940]   ...so...
[01:18:30.940 --> 01:18:31.940]   ...you have to try...
[01:18:31.940 --> 01:18:32.940]   ...you have to try...
[01:18:32.940 --> 01:18:33.940]   ...more questions...
[01:18:33.940 --> 01:18:33.940]   ...yep...
[01:18:33.940 --> 01:18:34.940]   ...url context...
[01:18:34.940 --> 01:18:35.940]   ...so...
[01:18:35.940 --> 01:18:36.940]   ...url context...
[01:18:36.940 --> 01:18:39.940]   ...true basically works...
[01:18:39.940 --> 01:18:40.940]   ...based on the link...
[01:18:40.940 --> 01:18:41.940]   ...you provide...
[01:18:41.940 --> 01:18:42.940]   ...so...
[01:18:42.940 --> 01:18:43.940]   ...if you provide...
[01:18:43.940 --> 01:18:44.940]   ...your own...
[01:18:44.940 --> 01:18:45.940]   ...personal blog...
[01:18:45.940 --> 01:18:46.940]   ...it goes to...
[01:18:46.940 --> 01:18:47.940]   ...that link...
[01:18:47.940 --> 01:18:48.940]   ...and tries to...
[01:18:48.940 --> 01:18:49.940]   ...extract the information...
[01:18:49.940 --> 01:18:50.940]   ...and uses it...
[01:18:50.940 --> 01:18:51.940]   ...in...
[01:18:51.940 --> 01:18:52.940]   ...the context...
[01:18:52.940 --> 01:18:53.940]   ...and uses it in...
[01:18:53.940 --> 01:18:54.940]   ...the context...
[01:18:54.940 --> 01:18:55.940]   ...and search...
[01:18:55.940 --> 01:18:56.940]   ...basically uses...
[01:18:56.940 --> 01:18:57.940]   ...google search...
[01:18:57.940 --> 01:18:58.940]   ...creates...
[01:18:58.940 --> 01:18:59.940]   ...one or multiple...
[01:18:59.940 --> 01:19:00.940]   ...search queries...
[01:19:00.940 --> 01:19:01.940]   ...based on the prompt...
[01:19:01.940 --> 01:19:02.940]   ...searches...
[01:19:02.940 --> 01:19:03.940]   ...and then...
[01:19:03.940 --> 01:19:04.940]   ...provides the outputs...
[01:19:04.940 --> 01:19:05.940]   ...into your prompt...
[01:19:05.940 --> 01:19:06.940]   ...so...
[01:19:06.940 --> 01:19:07.940]   ...if you already know...
[01:19:07.940 --> 01:19:08.940]   ...where...
[01:19:08.940 --> 01:19:09.940]   ...the source is...
[01:19:09.940 --> 01:19:10.940]   ...for...
[01:19:10.940 --> 01:19:11.940]   ...your prompt...
[01:19:11.940 --> 01:19:12.940]   ...to create...
[01:19:12.940 --> 01:19:13.940]   ...the best answer...
[01:19:13.940 --> 01:19:14.940]   ...url context...
[01:19:14.940 --> 01:19:15.940]   ...could be...
[01:19:15.940 --> 01:19:16.940]   ...a good use case...
[01:19:16.940 --> 01:19:17.940]   ...for it...
[01:19:21.940 --> 01:19:30.940]   ...I don't know...
[01:19:30.940 --> 01:19:31.940]   ...you...
[01:19:31.940 --> 01:19:32.940]   ...paywall content...
[01:19:32.940 --> 01:19:33.940]   ...you mean like...
[01:19:33.940 --> 01:19:34.940]   ...pages...
[01:19:34.940 --> 01:19:37.940]   ...I don't know...
[01:19:37.940 --> 01:19:38.940]   ...I would not expect...
[01:19:38.940 --> 01:19:39.940]   ...to have it...
[01:19:39.940 --> 01:19:40.940]   ...like...
[01:19:40.940 --> 01:19:41.940]   ...but...
[01:19:41.940 --> 01:19:42.940]   ...the live API...
[01:19:42.940 --> 01:19:43.940]   ...supports function calling...
[01:19:43.940 --> 01:19:44.940]   ...so...
[01:19:44.940 --> 01:19:45.940]   ...if you have...
[01:19:45.940 --> 01:19:46.940]   ...a subscription...
[01:19:46.940 --> 01:19:47.940]   ...or like...
[01:19:47.940 --> 01:19:48.940]   ...a way to access...
[01:19:48.940 --> 01:19:49.940]   ...just paid content...
[01:19:49.940 --> 01:19:50.940]   ...you can create...
[01:19:50.940 --> 01:19:51.940]   ...which the model...
[01:19:51.940 --> 01:19:52.940]   ...can then invoke...
[01:19:52.940 --> 01:19:53.940]   ...and use...
[01:19:53.940 --> 01:19:54.940]   ...as a context...
[01:19:54.940 --> 01:19:54.940]   ...for...
[01:19:54.940 --> 01:19:55.940]   ...for its...
[01:19:55.940 --> 01:19:56.940]   ...information...
[01:19:56.940 --> 01:19:58.940]   ...okay...
[01:19:58.940 --> 01:19:59.940]   ...cool...
[01:19:59.940 --> 01:20:00.940]   ...then...
[01:20:00.940 --> 01:20:01.940]   ...last section...
[01:20:01.940 --> 01:20:01.940]   ...I guess...
[01:20:01.940 --> 01:20:02.940]   ...every one of you...
[01:20:02.940 --> 01:20:03.940]   ...might have heard...
[01:20:03.940 --> 01:20:04.940]   ...about model context...
[01:20:04.940 --> 01:20:05.940]   ...protocol by now...
[01:20:05.940 --> 01:20:06.940]   ...and...
[01:20:06.940 --> 01:20:07.940]   ...that's like...
[01:20:07.940 --> 01:20:08.940]   ...either...
[01:20:08.940 --> 01:20:09.940]   ...our...
[01:20:09.940 --> 01:20:10.940]   ...solution...
[01:20:10.940 --> 01:20:11.940]   ...to how we all...
[01:20:11.940 --> 01:20:12.940]   ...align...
[01:20:12.940 --> 01:20:13.940]   ...on how to call...
[01:20:13.940 --> 01:20:14.940]   ...agents...
[01:20:14.940 --> 01:20:20.700]   of it. I think it makes it way more accessible for people to build agents, especially if we get more
[01:20:20.700 --> 01:20:27.100]   first-party remote MCP servers, where you can basically focus on building your agent instead of
[01:20:27.100 --> 01:20:31.020]   creating all of those functions. I mean, I'm pretty sure there are like now a million get weather
[01:20:31.020 --> 01:20:37.980]   functions which can be used, and I hope with MCP we can like fix this. What we shipped and announced
[01:20:37.980 --> 01:20:45.580]   at Google I/O is a native integration of MCP servers inside the Google Gen AI SDK. So the SDK,
[01:20:45.580 --> 01:20:51.660]   which we have used during the whole workshop, allows us to directly use MCP servers and sessions,
[01:20:51.660 --> 01:20:58.220]   which makes it even easier for all of us to integrate it. So when we look back at our function
[01:20:58.220 --> 01:21:03.660]   calling example, we needed to call the function, create a declaration, and all of those different
[01:21:03.660 --> 01:21:12.700]   things. And now with the MCP integration, we can basically only start or initialize our client.
[01:21:12.700 --> 01:21:21.260]   Here I created an MCP weather service, which kind of has the same functionality, and all of the things
[01:21:21.260 --> 01:21:28.140]   we now need to do is like we use our generate content method, and in our tools argument we provide our
[01:21:28.140 --> 01:21:35.900]   session. So we start our server, we create our session, and we provide the session to
[01:21:35.900 --> 01:21:43.740]   the Gemini SDK. And then what happens behind the scenes is basically the same function call loop we
[01:21:43.740 --> 01:21:50.300]   did manually. It's like, okay, what are the tools available? Get all of the tools from the MCP servers,
[01:21:50.300 --> 01:21:57.660]   put them into the LLM call. If the LLM call makes a function call, extract the function call,
[01:21:57.660 --> 01:22:05.100]   call the MCP server, get the response from the MCP server, put it back into our conversation,
[01:22:05.100 --> 01:22:12.700]   have the model generate a final response. I guess it's probably time to find out if Colab has
[01:22:12.700 --> 01:22:17.580]   node installed, and to see if it works.
[01:22:17.580 --> 01:22:22.380]   Okay.
[01:22:22.380 --> 01:22:28.780]   Okay, it doesn't.
[01:22:37.820 --> 01:22:57.180]   What I can do is I can quickly set it up locally and show you in one second on how it works.
[01:22:57.180 --> 01:23:02.460]   and I can quickly set it up locally and I can quickly set it up locally in one second on how it works.
[01:23:02.460 --> 01:23:04.540]   I can quickly set it up locally and show you in one second on how it works.
[01:23:04.540 --> 01:23:06.700]   I can quickly set it up locally and show you in one second on how it works.
[01:23:06.700 --> 01:23:08.700]   I can quickly set it up locally and show you in one second on how it works.
[01:23:08.700 --> 01:23:10.700]   I can quickly set it up locally and show you in one second on how it works.
[01:23:10.700 --> 01:23:12.700]   I can quickly set it up locally and show you in one second on how it works.
[01:23:12.700 --> 01:23:15.100]   I can quickly set it up locally and show you in one second on how it works.
[01:23:15.100 --> 01:23:17.660]   I can quickly set it up locally and show you in one second on how it works.
[01:23:17.660 --> 01:23:19.580]   I can quickly set it up locally and show you in one second on how it works.
[01:23:19.580 --> 01:23:21.660]   I can quickly set it up locally and show you in one second on how it works.
[01:23:21.660 --> 01:23:33.100]   I can quickly set it up locally and show you in one second on how it works.
[01:23:33.100 --> 01:23:36.220]   I can quickly set it up locally and show you in one second on how it works.
[01:23:36.220 --> 01:23:42.220]   I can quickly set it up locally and show you in one second on how it works.
[01:23:42.220 --> 01:23:46.620]   I can quickly set it up locally and show you in one second on how it works.
[01:23:46.620 --> 01:23:50.220]   I can quickly set it up locally and show you in one second on how it works.
[01:23:50.220 --> 01:24:01.660]   I can quickly set it up locally and show you in one second on how it works.
[01:24:01.660 --> 01:24:05.980]   Okay.
[01:24:15.980 --> 01:24:16.620]   Okay.
[01:24:16.620 --> 01:24:17.340]   So we are back.
[01:24:17.340 --> 01:24:19.420]   I'm in cursor.
[01:24:19.420 --> 01:24:20.140]   Same notebook.
[01:24:20.140 --> 01:24:22.060]   Same setup.
[01:24:22.060 --> 01:24:24.780]   And now I can like use it.
[01:24:24.780 --> 01:24:28.940]   And now basically what happens if I, let's not ask about London, right?
[01:24:28.940 --> 01:24:29.900]   We are in San Francisco.
[01:24:29.900 --> 01:24:33.260]   Let's ask it about the weather in San Francisco.
[01:24:33.260 --> 01:24:38.460]   It now does all of like the different function calls and loops behind the scenes.
[01:24:38.460 --> 01:24:40.140]   The MCP server is very simple.
[01:24:40.140 --> 01:24:45.500]   It uses the Open Meteor API, which is kind of free to use on a small scale for testing.
[01:24:45.500 --> 01:24:52.860]   So we generate the output, run all of the MCP calls.
[01:24:52.860 --> 01:24:55.340]   Might take a bit longer for the API call.
[01:24:55.340 --> 01:24:56.540]   And then we get back.
[01:24:56.540 --> 01:24:56.860]   Okay.
[01:24:56.860 --> 01:25:00.780]   The weather in San Francisco today will be 70 degrees Celsius at zero.
[01:25:01.340 --> 01:25:04.860]   And then all of the other numbers.
[01:25:04.860 --> 01:25:12.060]   And that's basically now all you need to combine or connect an MCP server with the Gemini SDK,
[01:25:12.060 --> 01:25:16.700]   which is like, I mean, it fits on a single screen, like, which is easy enough for you to get started.
[01:25:17.660 --> 01:25:23.500]   We use here like a local running MCP server, but it works the same way with a remote MCP server.
[01:25:23.500 --> 01:25:28.460]   That's also the exercise for this part of the workshop.
[01:25:28.460 --> 01:25:35.740]   So basically, Deep Vicky from the Cognition AI guys in the Devon, they have a very nice remote MCP server,
[01:25:35.740 --> 01:25:38.380]   which can talk to GitHub repositories.
[01:25:38.940 --> 01:25:43.660]   So instead of like creating a sitIO client, you can use the streamable HTTP client
[01:25:43.660 --> 01:25:48.540]   and connect a remote MCP server to Gemini to talk to it.
[01:25:48.540 --> 01:25:53.660]   And yeah, basically benefit for one of the advancements currently happening in AI.
[01:25:53.660 --> 01:25:56.460]   Do we have more questions?
[01:25:56.460 --> 01:25:58.220]   Yeah.
[01:25:58.220 --> 01:26:02.060]   Yeah.
[01:26:02.060 --> 01:26:13.980]   So ADK is, for those of you who don't know, is like Agent Development Kit.
[01:26:13.980 --> 01:26:22.620]   It's an agent library, which adds a lot of more abstraction on top of like the client SDK we used.
[01:26:22.620 --> 01:26:28.300]   It makes it a lot easier to do all of the tool calling, integrates MCP server as well,
[01:26:28.300 --> 01:26:33.020]   makes it much more easier to manage like multiple agents or deploy it to cloud.
[01:26:33.020 --> 01:26:35.820]   So it has a lot of, I would say, batteries included.
[01:26:35.820 --> 01:26:42.780]   Question again depends on you if you would like to use frameworks or rather prefer building it yourself.
[01:26:42.780 --> 01:26:47.100]   I see a bit benefit of like getting started very quickly using agentic frameworks.
[01:26:47.100 --> 01:26:52.300]   But the more abstraction you add, right, the more, the less you know on the first time.
[01:26:52.300 --> 01:26:55.500]   And then maybe you need to dig a bit deeper later.
[01:26:55.500 --> 01:27:01.180]   And all of the advancements or speed you get in the beginning will be your slowdowns in the future.
[01:27:01.180 --> 01:27:03.980]   But ADK is definitely a great way to start.
[01:27:03.980 --> 01:27:06.060]   They also have like tons of examples.
[01:27:06.060 --> 01:27:08.780]   It has support for Gemini and the Gemini API.
[01:27:08.780 --> 01:27:11.580]   So definitely a good way to take a look.
[01:27:11.580 --> 01:27:12.380]   Yep.
[01:27:12.380 --> 01:27:23.740]   No, I don't think so.
[01:27:23.740 --> 01:27:29.900]   But what you can do with YouTube links or YouTube videos is we can ask it to return timestamps for
[01:27:29.900 --> 01:27:30.940]   you as the response.
[01:27:32.060 --> 01:27:33.740]   And it works very nicely.
[01:27:33.740 --> 01:27:35.260]   So it is very accurately.
[01:27:35.260 --> 01:27:43.180]   Because so basically a video is more or less just many images behind each other, right?
[01:27:43.180 --> 01:27:47.740]   And currently when we process videos, it will be done at one frames per second.
[01:27:47.740 --> 01:27:53.020]   And you will always have like the timestamp, the image, the timestamp, the image.
[01:27:53.020 --> 01:27:58.700]   That's how Gemini exactly knows at what place in the video is, I don't know,
[01:27:58.700 --> 01:28:00.620]   a man jumping or dancing or something.
[01:28:02.860 --> 01:28:05.980]   So it's analyzing one frame per second?
[01:28:05.980 --> 01:28:06.220]   Yes.
[01:28:06.220 --> 01:28:08.380]   And then describing it?
[01:28:08.380 --> 01:28:11.740]   It depends on your, I mean, we can, I mean, it's part of the section.
[01:28:11.740 --> 01:28:15.900]   Can I use that for the time to summarize videos?
[01:28:15.900 --> 01:28:19.980]   Yeah, but yeah, basically what happens with videos is, I mean,
[01:28:19.980 --> 01:28:26.700]   videos are 24 frames per second or even more that like easily let the context explode.
[01:28:26.700 --> 01:28:30.620]   So currently what is done is that we have one frame per second.
[01:28:30.620 --> 01:28:33.980]   So if you have 60 seconds, it would be 60 images,
[01:28:33.980 --> 01:28:37.980]   which makes it also easy to count how many tokens it would be.
[01:28:37.980 --> 01:28:44.620]   And that's also how we can fit in a one hour long video into 1 million tokens, basically.
[01:28:44.620 --> 01:28:49.900]   Is it using the transcript from YouTube or is it doing a speech to text?
[01:28:49.900 --> 01:28:54.540]   No, it's all multimodal natively.
[01:28:54.540 --> 01:28:56.380]   Okay, it's not using...
[01:28:56.380 --> 01:29:00.220]   No, I mean, you can like easily upload normal.mp4 files,
[01:29:00.220 --> 01:29:03.580]   and you can ask it like what was saying or said in the video.
[01:29:03.580 --> 01:29:05.580]   Yeah, I tried that for Dutch speaking.
[01:29:05.580 --> 01:29:08.300]   Okay, cool.
[01:29:08.300 --> 01:29:10.780]   Yeah.
[01:29:10.780 --> 01:29:23.100]   So I'm also like, maybe for you, if you don't know, it's like memory is basically next to tools, what makes an agent, an agent, and for memory, we have short term memory and long term memory.
[01:29:23.100 --> 01:29:36.460]   short term memory is basically your conversation, which is part of your current state when you talk to an agent, and long term memory is basically memory or like information about a previous interaction or something about the user.
[01:29:36.460 --> 01:29:51.820]   long term memory is not like part of the LLM, which we need to provide externally.
[01:29:51.820 --> 01:29:57.180]   And mem zero is like something I looked at it because it's very nice.
[01:29:57.180 --> 01:29:59.180]   It's does it implicitly.
[01:29:59.180 --> 01:30:05.180]   So basically, it takes the conversation and tries to create a nice abstraction for you, which you can include.
[01:30:05.180 --> 01:30:11.100]   I'm not sure like what the current state is like, how or what works well with Gemini.
[01:30:11.100 --> 01:30:16.940]   I'm like, what I always see or where Gemini really shines is the long context.
[01:30:17.660 --> 01:30:22.860]   So the better your information extraction is and like what you provide to the model based on the memory.
[01:30:22.860 --> 01:30:24.460]   I think it works very well.
[01:30:24.460 --> 01:30:28.380]   I'm not sure about those tool calling memory kind of systems.
[01:30:28.380 --> 01:30:29.980]   Yep.
[01:30:29.980 --> 01:30:34.460]   Yeah.
[01:30:34.460 --> 01:30:35.100]   Yeah.
[01:30:35.100 --> 01:30:36.620]   So we are working on 2 million.
[01:30:36.620 --> 01:30:39.820]   I'm not sure when it is like generally available, but
[01:30:39.820 --> 01:30:47.180]   Yeah, like that there was research, but you know, like the bigger you go, the more expensive you get.
[01:30:47.180 --> 01:30:50.540]   And do you want to pay like $50 per 1 million tokens?
[01:30:50.540 --> 01:30:53.900]   Yeah.
[01:30:53.900 --> 01:30:59.020]   More questions or everyone working?
[01:30:59.020 --> 01:31:02.060]   Yep.
[01:31:02.060 --> 01:31:02.300]   Then
[01:31:02.300 --> 01:31:09.180]   So, before MCP, we need to define the functions.
[01:31:09.180 --> 01:31:09.420]   Yeah.
[01:31:09.420 --> 01:31:11.020]   And to call it ourselves.
[01:31:11.020 --> 01:31:11.420]   Yeah.
[01:31:11.420 --> 01:31:16.620]   And maybe decide the logic, how to call it to, what do you call it to ourselves as well?
[01:31:16.620 --> 01:31:16.860]   No.
[01:31:16.860 --> 01:31:17.980]   No.
[01:31:17.980 --> 01:31:25.660]   So the difference with MCPs now and what we had previously is that we don't need to write and define
[01:31:25.660 --> 01:31:29.020]   the functions and the function declarations.
[01:31:29.020 --> 01:31:35.180]   The LLM sees at the end the exact same thing.
[01:31:35.180 --> 01:31:41.580]   So if I create my function declarations manually with a JSON schema or if I retrieve them from
[01:31:41.580 --> 01:31:44.700]   an MCP server, those are the same things for the LLM.
[01:31:44.700 --> 01:31:53.020]   It just makes it much easier to not need to rewrite the same functionalities over and over again,
[01:31:53.020 --> 01:31:53.500]   right?
[01:31:53.500 --> 01:31:58.620]   If you work at a company and you want to integrate APIs, which you have internally,
[01:31:58.620 --> 01:32:06.220]   there's a pretty big chance that two teams write the same function declaration and the same wrapper to call it.
[01:32:06.220 --> 01:32:11.980]   And the idea here is to only have one team needing to write it and everyone to benefit from it.
[01:32:11.980 --> 01:32:15.900]   The same as with public APIs like Google Maps, G Drive.
[01:32:15.900 --> 01:32:23.820]   So MCPs gives us a way to collaboratively create the best or the standard as a way to how to call it.
[01:32:23.820 --> 01:32:28.780]   And then everyone can implement the MCP tools, which you need for your use case.
[01:32:28.780 --> 01:32:42.700]   It's so an MCP server, for example, exposes four tools.
[01:32:42.700 --> 01:32:49.580]   You provide all of those four input schemas, which are like function declarations with a name,
[01:32:49.580 --> 01:32:52.940]   a description and the parameters to your LLM call.
[01:32:52.940 --> 01:32:57.820]   And then based on the prompt and those declarations, the LLM in this case,
[01:32:57.820 --> 01:33:05.180]   Gemini decides if it should call a tool, which tool could to call, or should it call multiple tools?
[01:33:05.180 --> 01:33:11.100]   And that's the same logic we had for normal or have for normal function calling.
[01:33:11.100 --> 01:33:13.900]   So there's no, no difference in that way.
[01:33:13.900 --> 01:33:22.060]   The only difference we see is that MCP servers being easily available or implementing many tools,
[01:33:22.060 --> 01:33:25.580]   people start to be very easy on how many to add, right?
[01:33:25.580 --> 01:33:29.100]   So we see people at like 50, 100 tools.
[01:33:29.100 --> 01:33:33.260]   So we need to improve our LLMs to be able to have them really know,
[01:33:33.260 --> 01:33:38.940]   okay, which is the right tool to use when you have like 50 different tools available at once.
[01:33:38.940 --> 01:33:51.820]   So there are examples for ADK to work with A2A. So A2A stands for Agent to Agent Protocol, which is done by the Google Cloud team.
[01:33:51.820 --> 01:34:09.660]   The idea here is to allow companies to build agents in different frameworks like LLM chain, LLM graph, LLAMA index and then have an easy way to create multi-agent systems that one agent can call the other agent without needing to implement complex logic.
[01:34:09.660 --> 01:34:27.420]   But the Gemini SDK is like not directly, but there are great examples for it.
[01:34:27.420 --> 01:34:27.820]   Cool.
[01:34:27.820 --> 01:34:52.460]   So we are working on basically browser use or computer use use cases, which is available in preview, which we are currently testing with a few companies.
[01:34:52.460 --> 01:34:59.740]   That would allow Gemini to control UI. So it could basically go to whatever website you wanted to go to.
[01:34:59.740 --> 01:35:09.340]   And then there's, sorry, the URL context tool where you can provide a website and we would programmatically try to extract information from it.
[01:35:09.340 --> 01:35:14.300]   Of course, it's like if it's a super heavy JavaScript website, there's not much to extract.
[01:35:14.300 --> 01:35:19.820]   That's where like the browser use agent would then be useful.
[01:35:19.820 --> 01:35:22.860]   Like an API for marina or something.
[01:35:22.860 --> 01:35:24.060]   Yeah, kind of.
[01:35:24.060 --> 01:35:25.500]   Yeah.
[01:35:25.500 --> 01:35:27.660]   Hopefully coming soon.
[01:35:27.660 --> 01:35:46.540]   So it will return structured outputs again based on what you provide so you can control the local environment.
[01:35:46.540 --> 01:36:01.420]   But we are also working with the cloud run team to make it super easy to you for you to run so that you can like run a Chrome instance on a cloud run, which Gemini can talk to in control or you can like control a local instance.
[01:36:01.420 --> 01:36:03.660]   Yeah, yeah.
[01:36:03.660 --> 01:36:04.460]   Yeah.
[01:36:04.460 --> 01:36:10.060]   That's a good question.
[01:36:10.060 --> 01:36:15.820]   I think the whole industry is currently trying to answer like what's the best way to handle agent authentication.
[01:36:15.820 --> 01:36:19.500]   So the MCP as a protocol itself supports all off.
[01:36:19.500 --> 01:36:31.500]   So basically when you want to connect to an MCP server, which is protected, you would get back for free with like not authorized, which can then trigger an overflow on your client.
[01:36:31.500 --> 01:36:39.660]   Maybe you have seen it in like cloud desktop, where you get a pop up like to log in with, I don't know, like you're like Atlassian account or something.
[01:36:39.660 --> 01:36:44.860]   So that's like one way of doing it, but it definitely needs more work, right?
[01:36:44.860 --> 01:36:57.660]   Do you want your agent to access all of your emails or all of your GitHub repositories or how can you like scope it down to like only the one specific repository, but they are currently like actively working on it.
[01:36:57.660 --> 01:37:00.300]   And I know that off zero will be here tomorrow as well.
[01:37:00.300 --> 01:37:02.420]   Those guys are very great to talk to.
[01:37:02.420 --> 01:37:04.140]   I think I know that they're doing a lot there.
[01:37:04.140 --> 01:37:05.140]   So.
[01:37:05.140 --> 01:37:06.140]   Yeah.
[01:37:06.140 --> 01:37:18.140]   I was wondering if you could say something about the citations and how that's different from like URL contexts.
[01:37:18.140 --> 01:37:30.700]   I think I was just struggling with trying to application on it and also just sort of curious about how, like how you trigger it as well as .
[01:37:30.700 --> 01:37:38.980]   You mean citation in when you just send a regular prompt or citation when you like use Google search and then have citations?
[01:37:38.980 --> 01:37:44.260]   I think very specifically citation metadata, like the output .
[01:37:44.260 --> 01:37:45.980]   Yep.
[01:37:45.980 --> 01:37:49.860]   So that's available at like the Google search tool.
[01:37:49.860 --> 01:37:54.540]   And it has information about which websites was used to retrieve.
[01:37:54.540 --> 01:37:58.260]   You can click on the link directly to see where you land.
[01:37:58.260 --> 01:38:09.540]   And then there's this metadata or like chunking support or like crowning support, which basically has a start index and an end index from the answer.
[01:38:09.540 --> 01:38:11.580]   And then also which sources were used.
[01:38:11.580 --> 01:38:20.140]   So you technically can highlight or put numbers behind it to help users understand, okay, that part of the response
[01:38:20.140 --> 01:38:26.700]   is generated based on those two links.
[01:38:26.700 --> 01:38:35.260]   And then the part of the part is that it seems like if you use the Google search tool, the citations that you get there.
[01:38:35.260 --> 01:38:42.580]   But then like the citation metadata, it seems like maybe like guessing from the training data, but...
[01:38:42.580 --> 01:38:46.460]   You mean in general there are sometimes citation metadata or...?
[01:38:46.460 --> 01:38:48.460]   Sorry, what?
[01:38:48.460 --> 01:38:51.140]   Which citation data do you mean?
[01:38:51.140 --> 01:38:55.700]   The one literally called the non-ground data.
[01:38:55.700 --> 01:38:56.700]   Okay.
[01:38:56.700 --> 01:39:05.700]   I know, or I only know that's part of like legal and like training that if there's something referred directly, you need to like provide it.
[01:39:05.700 --> 01:39:07.020]   That's why it is there.
[01:39:07.020 --> 01:39:09.020]   That's why it is not always there.
[01:39:09.020 --> 01:39:11.700]   It can be there, but it doesn't, must be.
[01:39:11.700 --> 01:39:28.260]   And it's not like for a user to, hey, that's coming from there, but it's more like compliance basically, why we need to have it.
[01:39:28.260 --> 01:39:32.220]   I only know about like the web search feature.
[01:39:32.220 --> 01:39:38.540]   They have a citation thing where it's just whatever you pass as input, it'll get you correct the book from that.
[01:39:38.540 --> 01:39:39.940]   It's kind of like in the response.
[01:39:39.940 --> 01:39:40.940]   Ah, okay.
[01:39:40.940 --> 01:39:43.940]   So you provide as a context, like a document.
[01:39:43.940 --> 01:39:44.940]   Yeah.
[01:39:44.940 --> 01:39:45.940]   Okay.
[01:39:45.940 --> 01:39:48.820]   And that stage is where it's getting this from.
[01:39:48.820 --> 01:39:51.420]   I imagine you can kind of like force that.
[01:39:51.420 --> 01:39:52.420]   Yep.
[01:39:52.420 --> 01:39:56.700]   But I'm curious what the good best practices are.
[01:39:56.700 --> 01:40:07.860]   And if you could use, you know, StrapGraph words versus the URL context, like another avenue, you could go with that?
[01:40:07.860 --> 01:40:09.420]   No, that's like a very good question.
[01:40:09.420 --> 01:40:13.860]   Currently, we don't have like the same experience as Anthropic has.
[01:40:13.860 --> 01:40:21.500]   I guess the base is like to really try and like different prompting strategies and like what you want to achieve.
[01:40:21.500 --> 01:40:24.860]   Yeah, no, but it's like good, good feedback.
[01:40:24.860 --> 01:40:38.020]   Sadly, not yet.
[01:40:38.020 --> 01:40:48.020]   I hope, hopefully one day that you can like just use Gmail, here's Drive and let's chat, but currently there is no public remote MCP server.
[01:40:48.020 --> 01:40:55.180]   I don't know exactly what, what are the reasons.
[01:40:55.180 --> 01:40:59.180]   I think the more people ask for it, the easier it will be that we get once.
[01:40:59.180 --> 01:41:07.340]   So if you like it's great feedback, more people, if the more people are going to use MCP servers, the higher the chances are going to be.
[01:41:07.340 --> 01:41:12.340]   And I think in general for MCP to succeed, we need more first party remote servers, right?
[01:41:12.340 --> 01:41:15.500]   Because we cannot build a secure GitHub MCP servers.
[01:41:15.500 --> 01:41:21.500]   That's something GitHub needs to do because they know how their OOF system works, how you can scope it.
[01:41:21.500 --> 01:41:25.500]   So we really need those first party MCP servers in the long time.
[01:41:25.500 --> 01:41:36.660]   For AI mode?
[01:41:36.660 --> 01:41:38.660]   I have no idea.
[01:41:38.660 --> 01:41:43.660]   I think like, so AI mode, you mean about like inside Google search?
[01:41:43.660 --> 01:41:44.660]   Yeah.
[01:41:44.660 --> 01:41:53.820]   I think in general, overall, same goes for like normal Google searches, like have high quality content, try to stick to like web standards.
[01:41:53.820 --> 01:42:00.820]   I guess same works here as well, but I don't know, sorry.
[01:42:00.820 --> 01:42:01.820]   Yeah.
[01:42:01.820 --> 01:42:11.820]   When making like full calls with the files API, should it trigger the prompt caching project 9.5 or does it work?
[01:42:11.820 --> 01:42:12.820]   It should.
[01:42:12.820 --> 01:42:18.820]   So if you uploaded a PDF, you need to make sure that you put a PDF at the first part of your prompt.
[01:42:18.820 --> 01:42:23.820]   So you'd like the automatic caching works from the beginning to the end, right?
[01:42:23.820 --> 01:42:26.820]   If you change the beginning, you can never cache like the long document.
[01:42:26.820 --> 01:42:31.820]   But if you put the PDF in the beginning and change the prompt behind it, it should work.
[01:42:31.820 --> 01:42:32.820]   Yes.
[01:42:32.820 --> 01:42:36.820]   Yeah.
[01:42:36.820 --> 01:42:37.820]   I had a question.
[01:42:37.820 --> 01:42:38.820]   Google search running as well.
[01:42:38.820 --> 01:42:46.820]   So sometimes there's a case where the index that provides either the startup and index is actually out of range for kind of like the length of the--
[01:42:46.820 --> 01:42:47.820]   Really?
[01:42:47.820 --> 01:42:48.820]   Yeah.
[01:42:48.820 --> 01:42:49.820]   Answers provide, yeah.
[01:42:49.820 --> 01:42:51.820]   I was curious if you had any similar experiences.
[01:42:51.820 --> 01:42:56.820]   No, but if you like have an example for us to reproduce and to share, that would be very helpful.
[01:42:56.820 --> 01:43:03.820]   The only thing I know is that so sometimes there can be a start index, which can be null, which basically means it's zero.
[01:43:03.820 --> 01:43:05.820]   Like it starts at the beginning.
[01:43:05.820 --> 01:43:06.820]   Yeah.
[01:43:06.820 --> 01:43:08.820]   Sometimes I get for even start .
[01:43:08.820 --> 01:43:09.820]   Yeah.
[01:43:09.820 --> 01:43:18.820]   Like if you have an example, please like send it to me on Twitter or somewhere.
[01:43:18.820 --> 01:43:23.820]   Like, okay, that would be very helpful because that should not be the case.
[01:43:23.820 --> 01:43:29.820]   And then for the, excuse me, the grounding metadata is two parts, the .
[01:43:29.820 --> 01:43:30.820]   Yeah.
[01:43:30.820 --> 01:43:33.820]   Is there any way to actually get the citation?
[01:43:33.820 --> 01:43:35.820]   Or maybe that was the question that the gentleman asked.
[01:43:35.820 --> 01:43:40.820]   The citation from the website, basically the text that it refers to or not?
[01:43:40.820 --> 01:43:41.820]   So that--
[01:43:41.820 --> 01:43:42.820]   Because you only get the website, actually.
[01:43:42.820 --> 01:43:43.820]   You just get the URL.
[01:43:43.820 --> 01:43:44.820]   Yeah, no.
[01:43:44.820 --> 01:43:52.820]   Like, so currently you get like the start and end of the response, which refers to something, but not the web part.
[01:43:52.820 --> 01:43:56.820]   But that's like, like, please put it all together and like send it to us.
[01:43:56.820 --> 01:44:01.820]   Like very happy to like talk to the Google search team who was like building the native tool.
[01:44:01.820 --> 01:44:05.820]   It's super helpful with like to better understand like what you need.
[01:44:05.820 --> 01:44:09.820]   Okay.
[01:44:09.820 --> 01:44:12.820]   Cool.
[01:44:12.820 --> 01:44:14.820]   Then, thanks all for coming.
[01:44:14.820 --> 01:44:16.820]   Please continue with the workshop.
[01:44:16.820 --> 01:44:17.820]   Try it out.
[01:44:17.820 --> 01:44:26.820]   If you have like any questions, we are very happy to receive any positive, negative feedback, any ideas, any pain points you have.
[01:44:26.820 --> 01:44:28.820]   We are available on like social channels.
[01:44:28.820 --> 01:44:30.820]   You can like find me, Philip Schmidt, basically everywhere.
[01:44:30.820 --> 01:44:36.820]   If not, we open a GitHub issue or be very noisy about when something doesn't work.
[01:44:36.820 --> 01:44:39.820]   We always try to make sure we fix it.
[01:44:39.820 --> 01:44:40.820]   Cool.
[01:44:40.820 --> 01:44:41.820]   Thanks.
[01:44:41.820 --> 01:44:42.820]   Thank you.
[01:44:42.820 --> 01:44:43.820]   Thank you.
[01:44:43.820 --> 01:44:44.820]   Thank you.
[01:44:44.820 --> 01:44:45.820]   Thank you.
[01:44:45.820 --> 01:44:50.040]   We'll see you next time.

