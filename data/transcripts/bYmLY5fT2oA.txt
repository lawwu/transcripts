
[00:00:00.000 --> 00:00:04.360]   Hey, what's up everyone?
[00:00:04.360 --> 00:00:09.160]   My name is Costa and I am a machine learning engineer intern at Weights & Biases.
[00:00:09.160 --> 00:00:13.240]   In this video, I'll showcase how to self-host and maintain Weights & Biases deployment on
[00:00:13.240 --> 00:00:16.520]   AWS using Terraform Cloud.
[00:00:16.520 --> 00:00:20.480]   Terraform is an open source tool that allows you to use code to define resources provision
[00:00:20.480 --> 00:00:21.480]   in the cloud.
[00:00:21.480 --> 00:00:26.520]   In a nutshell, you can write code like this to precisely define the resource you want,
[00:00:26.520 --> 00:00:31.360]   then use Terraform plan to see the plan infrastructure changes, and use Terraform apply to apply
[00:00:31.360 --> 00:00:33.720]   these changes to the cloud.
[00:00:33.720 --> 00:00:37.560]   And seeing is believing, you can actually go to your cloud provider's dashboard to
[00:00:37.560 --> 00:00:40.120]   see the provisioned resource.
[00:00:40.120 --> 00:00:44.520]   Terraform Cloud is a software as a service provider to augment developers' workflow
[00:00:44.520 --> 00:00:46.280]   in a production setting.
[00:00:46.280 --> 00:00:50.740]   Today we're going to talk about the most popular version control workflow, which integrates
[00:00:50.740 --> 00:00:53.560]   very nicely with GitHub workflows.
[00:00:53.560 --> 00:00:56.480]   There are roughly three stages of this workflow.
[00:00:56.480 --> 00:01:00.920]   First, whenever we want to make an infrastructure change, we start by creating a pull request
[00:01:00.920 --> 00:01:03.480]   by modifying the Terraform files.
[00:01:03.480 --> 00:01:08.360]   This PR will automatically trigger a Terraform plan, which you can conveniently view it in
[00:01:08.360 --> 00:01:10.600]   the Terraform Cloud's dashboard.
[00:01:10.600 --> 00:01:14.240]   Once we're happy with the PR, we can go ahead and merge it, and Terraform Cloud will
[00:01:14.240 --> 00:01:18.320]   automatically apply the plan changes to the infrastructure.
[00:01:18.320 --> 00:01:22.160]   You might be wondering, why do I need this complicated process to provision resources
[00:01:22.160 --> 00:01:24.840]   when I could use my cloud provider's dashboard?
[00:01:24.840 --> 00:01:29.040]   Well, we're really talking about what happens when you have complicated infrastructures
[00:01:29.040 --> 00:01:31.620]   that have hundreds of resources.
[00:01:31.620 --> 00:01:35.920]   With Terraform, it's easy to scale, whereas the alternative is to have a massive brain
[00:01:35.920 --> 00:01:39.920]   to know how to click buttons on hundreds of dashboards.
[00:01:39.920 --> 00:01:42.840]   With the introduction out of the way, let's get started.
[00:01:42.840 --> 00:01:47.620]   We start by creating an empty GitHub repository on GitHub to version our infrastructure.
[00:01:47.620 --> 00:01:54.240]   We then simply clone the repository to our machine and use VS Code to check out the folder.
[00:01:54.240 --> 00:02:01.700]   Then we're going to log in to Terraform Cloud, create a new workspace, and choose the version
[00:02:01.700 --> 00:02:03.600]   control workflow.
[00:02:03.600 --> 00:02:11.740]   Then we're going to select the WMB stack repository we just created, turn on the automatic speculative
[00:02:11.740 --> 00:02:15.180]   plans option, and finally create the workspace.
[00:02:15.180 --> 00:02:20.260]   Then we're going to configure a Terraform Cloud setting to make the workflow easier.
[00:02:20.260 --> 00:02:26.260]   In particular, we're going to turn on the auto apply option.
[00:02:26.260 --> 00:02:32.100]   Next, we're going to set up some Terraform variables.
[00:02:32.100 --> 00:02:38.380]   In particular, we're going to add our AWS access key and secret, and according to WMB
[00:02:38.380 --> 00:02:43.140]   Terraform's documentation, we also need to set up a global name as well as license.
[00:02:43.140 --> 00:02:47.300]   This is a great place to input your license if you have one, but for this video, we're
[00:02:47.300 --> 00:02:48.540]   going to leave it blank.
[00:02:48.540 --> 00:02:53.740]   Next, we're going to queue a dummy run according to Terraform Cloud's requirements so that
[00:02:53.740 --> 00:02:57.100]   our pull request can trigger a speculative run.
[00:02:57.100 --> 00:03:00.300]   Note that this dummy run is expected to fail.
[00:03:00.300 --> 00:03:03.300]   Once this is finished, we're ready to dive into some code.
[00:03:03.300 --> 00:03:08.620]   Go to the WMB local repository and check out the Terraform AWS folder.
[00:03:08.620 --> 00:03:14.300]   Then we're going to copy the local.tf, kube, and infra folder to our repository.
[00:03:14.300 --> 00:03:17.300]   Here I simply use curl to download these files.
[00:03:17.300 --> 00:03:22.460]   I also need to match the Terraform 1.0 version that is used in Terraform Cloud.
[00:03:22.460 --> 00:03:27.000]   Next, we're going to prepare a pull request for our infrastructure change.
[00:03:27.000 --> 00:03:32.500]   We do this by creating a branch, commit our changes, and push to our repository.
[00:03:32.500 --> 00:03:37.640]   Now we're ready to go back to GitHub and finally make the pull request, which will automatically
[00:03:37.640 --> 00:03:41.020]   trigger a speculative plan from Terraform.
[00:03:41.020 --> 00:03:45.660]   Once the plan has finished, we can click on the integration link to see the planned infrastructure
[00:03:45.660 --> 00:03:46.820]   changes.
[00:03:46.820 --> 00:03:51.700]   As you can see in this page, Terraform plans to spin up all the required resources for
[00:03:51.700 --> 00:03:53.980]   the Ways and Biases deployment.
[00:03:53.980 --> 00:03:58.100]   Once we're happy with the change, we can go ahead and merge the pull request.
[00:03:58.100 --> 00:04:03.060]   Because we had previously configured the auto apply feature, now Terraform Cloud is going
[00:04:03.060 --> 00:04:07.620]   to automatically apply our infrastructure changes from this PR.
[00:04:07.620 --> 00:04:11.260]   This is a point you could get up and go get a cup of coffee because this process will
[00:04:11.260 --> 00:04:13.980]   take 10 to 30 minutes.
[00:04:13.980 --> 00:04:17.260]   Sometimes Terraform could fail to create all the resources.
[00:04:17.260 --> 00:04:22.140]   Not to worry, simply queue another plan and the issue usually goes away.
[00:04:22.140 --> 00:04:27.000]   During the replan, Terraform will recalibrate and make up for the resources it had failed
[00:04:27.000 --> 00:04:28.260]   to create.
[00:04:28.260 --> 00:04:33.180]   Once the apply has finished, we can open an output URL and we can readily see the private
[00:04:33.180 --> 00:04:36.200]   WMB installation up and running.
[00:04:36.200 --> 00:04:40.240]   Simply create an account, continue, and you're in.
[00:04:40.240 --> 00:04:46.260]   In the following video, I'll showcase how to add HTTPS to the WMB deployment using Route
[00:04:46.260 --> 00:04:47.420]   53.
[00:04:47.420 --> 00:04:50.640]   We will first check out and pull the main branch.
[00:04:50.640 --> 00:04:56.940]   Then in infra.tf, I am going to add my own domain, casa-h.dev to the Route 53 zone.
[00:04:56.940 --> 00:05:02.100]   I'll also output the name server so that I can tell my domain provider to use these name
[00:05:02.100 --> 00:05:03.100]   servers.
[00:05:03.100 --> 00:05:08.820]   Note that I'll also need to output the name servers in the local.tf.
[00:05:08.820 --> 00:05:13.420]   The next steps are like what we did before, which is to basically make a PR, review the
[00:05:13.420 --> 00:05:32.180]   speculative plan changes on Terraform, and then merge it.
[00:05:32.180 --> 00:05:35.860]   At this point, we see the name servers from the Route 53 zone.
[00:05:35.860 --> 00:05:40.820]   I personally use Google Domains as my domain providers, and I'm simply going to tell it
[00:05:40.820 --> 00:05:43.340]   to use these name servers.
[00:05:43.340 --> 00:05:46.320]   After that, we'll check out and pull the main branch again.
[00:05:46.320 --> 00:05:49.700]   And now we're ready to set up HTTPS for our deployment.
[00:05:49.700 --> 00:05:54.600]   The exact source code is a bit arcane to understand, but I basically use Route 53 to set up a
[00:05:54.600 --> 00:05:57.500]   subdomain and a certificate as well.
[00:05:57.500 --> 00:06:03.680]   Next, we're going to tell the load balancer to always redirect HTTP to HTTPS, and also
[00:06:03.680 --> 00:06:06.300]   just set up a listener for HTTPS endpoint.
[00:06:06.300 --> 00:06:09.080]   Lastly, we'll delete the original listener.
[00:06:09.080 --> 00:06:10.660]   Now we're ready to ship.
[00:06:10.660 --> 00:06:23.500]   Simply make a pull request, review, and merge, and we should be able to see the HTTPS deployment.
[00:06:23.500 --> 00:06:53.420]   Once the Terraform apply is finished, we can use our custom subdomain to open the WMB installation.
[00:06:53.420 --> 00:06:59.040]   And as you can see, the connection is secured, and the certificate is signed by AWS.
[00:06:59.040 --> 00:07:01.820]   With that said, this concludes our video tutorial.
[00:07:01.820 --> 00:07:05.980]   The source code of our Terraform files is linked in the video description, and if you
[00:07:05.980 --> 00:07:11.540]   ever run into any issues, feel free to reach out to us at support@wmb.com.
[00:07:11.540 --> 00:07:13.580]   My name is Costa, and I'll see you again.
[00:07:13.580 --> 00:07:16.940]   [MUSIC PLAYING]

