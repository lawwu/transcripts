
[00:00:00.000 --> 00:00:12.000]   So, how do you inspire or ensure that the Einstein level of simplification is reached?
[00:00:12.000 --> 00:00:14.800]   So, can you do code review?
[00:00:14.800 --> 00:00:17.800]   Can you look at code?
[00:00:17.800 --> 00:00:26.040]   If I gave you the code for the Ford F-150 and said, "Here, is this a mess or is this
[00:00:26.040 --> 00:00:27.440]   okay?"
[00:00:27.440 --> 00:00:28.720]   Is it possible to tell?
[00:00:28.720 --> 00:00:31.780]   Is it possible to regulate?
[00:00:31.780 --> 00:00:38.800]   An experienced developer can look at code and see if it smells.
[00:00:38.800 --> 00:00:42.960]   Mixed metaphors deliberately.
[00:00:42.960 --> 00:00:55.880]   The point is that it is hard to generate something that is really obviously clean and can be
[00:00:55.880 --> 00:00:57.760]   appreciated.
[00:00:57.760 --> 00:01:02.680]   But you can usually recognize when you haven't reached that point.
[00:01:02.680 --> 00:01:12.320]   And so, I've never looked at the F-150 code, so I wouldn't know.
[00:01:12.320 --> 00:01:14.320]   But I know what I ought to be looking for.
[00:01:14.320 --> 00:01:21.240]   I'll be looking for some tricks that correlate with bugs and elsewhere.
[00:01:21.240 --> 00:01:28.120]   I have tried to formulate rules for what good code looks like.
[00:01:28.120 --> 00:01:36.280]   And the current version of that is called the C++ core guidelines.
[00:01:36.280 --> 00:01:42.160]   One thing people should remember is there's what you can do in a language and what you
[00:01:42.160 --> 00:01:43.160]   should do.
[00:01:43.160 --> 00:01:50.640]   In a language, you have lots of things that is necessary in some context, but not in others.
[00:01:50.640 --> 00:01:55.880]   There's things that exist just because there's 30-year-old code out there and you can't get
[00:01:55.880 --> 00:01:57.360]   rid of it.
[00:01:57.360 --> 00:02:03.400]   But you can't have rules that says, "When you create it, try and follow these rules."
[00:02:03.400 --> 00:02:12.280]   This does not create good programs by themselves, but it limits the damage for mistakes.
[00:02:12.280 --> 00:02:15.500]   It limits the possibilities of mistakes.
[00:02:15.500 --> 00:02:21.480]   And basically, we are trying to say, "What is it that a good programmer does?"
[00:02:21.480 --> 00:02:26.400]   At the fairly simple level of where you use the language and how you use it.
[00:02:26.400 --> 00:02:32.280]   Now, I can put all the rules for chiseling and marble.
[00:02:32.280 --> 00:02:37.640]   It doesn't mean that somebody who follows all of those rules can do a masterpiece by
[00:02:37.640 --> 00:02:40.500]   Michelangelo.
[00:02:40.500 --> 00:02:46.420]   That is, there's something else to write a good program, just as there's something else
[00:02:46.420 --> 00:02:50.600]   to create an important work of art.
[00:02:50.600 --> 00:02:57.600]   That is, there's some kind of inspiration, understanding, gift.
[00:02:57.600 --> 00:03:08.800]   But we can approach the sort of technical, the craftsmanship level of it.
[00:03:08.800 --> 00:03:16.400]   The famous painters, the famous sculptors was among other things, superb craftsmen.
[00:03:16.400 --> 00:03:22.840]   They could express their ideas using their tools very well.
[00:03:22.840 --> 00:03:28.380]   And so, these days, I think what I'm doing, what a lot of people are doing, we are still
[00:03:28.380 --> 00:03:33.440]   trying to figure out how it is to use our tools very well.
[00:03:33.440 --> 00:03:39.640]   For a really good piece of code, you need a spark of inspiration.
[00:03:39.640 --> 00:03:42.600]   And you can't, I think, regulate that.
[00:03:42.600 --> 00:03:50.240]   You cannot say that, "I'll take a picture only, I'll buy your picture only if you're
[00:03:50.240 --> 00:03:51.240]   at least Van Gogh."
[00:03:51.240 --> 00:03:58.920]   There are other things you can regulate, but not the inspiration.
[00:03:58.920 --> 00:04:01.480]   I think that's quite beautifully put.
[00:04:01.480 --> 00:04:10.160]   It is true that there is, as an experienced programmer, when you see code that's inspired,
[00:04:10.160 --> 00:04:16.880]   that's like Michelangelo, you know it when you see it.
[00:04:16.880 --> 00:04:23.640]   And the opposite of that is code that is messy, code that smells, you know when you see it.
[00:04:23.640 --> 00:04:29.120]   And I'm not sure you can describe it in words, except vaguely through guidelines and so on.
[00:04:29.120 --> 00:04:36.000]   Yes, it's easier to recognize ugly than to recognize beauty in code.
[00:04:36.000 --> 00:04:41.120]   And for the reason is that sometimes beauty comes from something that's innovative and
[00:04:41.120 --> 00:04:42.760]   unusual.
[00:04:42.760 --> 00:04:47.600]   And you have to sometimes think reasonably hard to appreciate that.
[00:04:47.600 --> 00:04:51.880]   On the other hand, the messes have things in common.
[00:04:51.880 --> 00:04:52.880]   Yes.
[00:04:52.880 --> 00:04:53.880]   Yes.
[00:04:53.880 --> 00:04:53.880]   Yes.
[00:04:53.880 --> 00:04:55.940]   you
[00:04:55.940 --> 00:04:58.000]   you
[00:04:58.000 --> 00:05:00.060]   you
[00:05:00.060 --> 00:05:02.120]   you
[00:05:02.120 --> 00:05:04.180]   you
[00:05:04.180 --> 00:05:06.240]   you
[00:05:06.240 --> 00:05:08.300]   you
[00:05:08.300 --> 00:05:18.300]   [BLANK_AUDIO]

