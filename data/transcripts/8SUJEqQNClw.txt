
[00:00:00.000 --> 00:00:02.000]   -
[00:00:02.000 --> 00:00:17.440]   - Okay, Agents or Workflows, why not both?
[00:00:17.440 --> 00:00:19.440]   Thank you, Alex, for the nice intro.
[00:00:19.440 --> 00:00:25.180]   Like he said, I used to be the co-founder of Gatsby.
[00:00:25.180 --> 00:00:27.700]   I wrote a book called Principles of AI Agents,
[00:00:27.700 --> 00:00:28.580]   which is floating around.
[00:00:28.580 --> 00:00:31.040]   Hopefully, many of you have gotten a copy.
[00:00:31.040 --> 00:00:33.400]   We have more around the conference.
[00:00:33.400 --> 00:00:37.140]   There was a big debate a couple of months ago,
[00:00:37.140 --> 00:00:41.880]   which the terminally on Twitter people may have noticed,
[00:00:41.880 --> 00:00:43.660]   which I just referenced.
[00:00:43.660 --> 00:00:48.880]   And I think this is a big reason why we're having this talk,
[00:00:48.880 --> 00:00:50.740]   why we're having this track.
[00:00:50.740 --> 00:00:53.080]   This is gonna be kind of like a reverse mullet talk
[00:00:53.080 --> 00:00:53.920]   or something like that.
[00:00:53.920 --> 00:00:54.920]   It's like party in the front,
[00:00:54.920 --> 00:00:56.640]   business in the back or something.
[00:00:56.640 --> 00:00:58.360]   So we're gonna start with the party or the debate
[00:00:58.360 --> 00:00:59.560]   or whatever this is.
[00:00:59.560 --> 00:01:02.260]   This is referenced in the last talk as well.
[00:01:02.260 --> 00:01:05.200]   Anthropic wrote a great blog post in December.
[00:01:05.200 --> 00:01:07.680]   It was called Building Effective Agents.
[00:01:07.680 --> 00:01:09.120]   It had great diagrams.
[00:01:09.120 --> 00:01:10.940]   It showed what an agent was.
[00:01:10.940 --> 00:01:13.100]   Can we close the door, please?
[00:01:13.100 --> 00:01:21.380]   It showed some workflow examples, like different types of routing and orchestration.
[00:01:21.380 --> 00:01:24.240]   It was a great blog post.
[00:01:24.240 --> 00:01:26.880]   In April, OpenAI also released a paper.
[00:01:26.880 --> 00:01:31.760]   I think there was some controversy about that on Twitter, because some of the points people
[00:01:31.760 --> 00:01:35.340]   made was like, look, this isn't a lot of new material.
[00:01:35.340 --> 00:01:40.360]   Other people pointed out this kind of callout at the end, which is basically like an anti-workflow
[00:01:40.360 --> 00:01:41.360]   blast.
[00:01:41.360 --> 00:01:45.640]   It's like, hey, like, and I think people were like, hey, yo, what's going on here?
[00:01:45.640 --> 00:01:49.520]   This is just like not accurate, and it's coming from a big model provider, so it's kind of
[00:01:49.520 --> 00:01:50.520]   muddying the water.
[00:01:50.520 --> 00:01:54.200]   So there was a lot of controversy around that.
[00:01:54.200 --> 00:02:01.700]   That was the SWIX blog post I was referencing, the emergency blog post went out on latent space.
[00:02:01.700 --> 00:02:04.460]   I have a couple hot takes on that, and then I have a takeaway.
[00:02:04.460 --> 00:02:09.200]   I promise both the hot takes and the takeaway are relevant to the systems you're building.
[00:02:09.200 --> 00:02:10.140]   We care a lot about this.
[00:02:10.140 --> 00:02:13.460]   This is the reason we wrote a book.
[00:02:13.460 --> 00:02:17.620]   First hot take is like, look, just this, I'm going to add OpenAI here, but it's like, just
[00:02:17.620 --> 00:02:19.460]   don't be that guy.
[00:02:19.460 --> 00:02:24.380]   And I'll explain like the context of the, like, I mean, I think we know this meme, but like,
[00:02:24.380 --> 00:02:26.120]   what I mean by that guy in this context.
[00:02:26.120 --> 00:02:30.420]   So that guy just thinks that, like, they and they alone, like, know the only right way
[00:02:30.420 --> 00:02:34.100]   to do development.
[00:02:34.100 --> 00:02:39.720]   Sometimes and like, I actually ran into Lori Voss in the hallway yesterday, and we started
[00:02:39.720 --> 00:02:44.620]   talking about that guy that we sort of had known from the last decade.
[00:02:44.620 --> 00:02:49.120]   But sometimes that guy works for like a fang style company, and they're in like a public
[00:02:49.120 --> 00:02:53.320]   facing role, and then the rest of us are just really in for it.
[00:02:53.320 --> 00:02:58.320]   It was like, if you sort of look at the last decade, a lot of web devs got these like lectures
[00:02:58.320 --> 00:03:04.080]   by not all Googlers, but like certain Googlers about like the right way to use the platform.
[00:03:04.080 --> 00:03:08.100]   And it was just, you know, again, I'm going to go really deep, I don't know how deep into
[00:03:08.100 --> 00:03:12.660]   web dev like folks are, but like, it was just sort of this code, anti-react code word, and
[00:03:12.660 --> 00:03:16.740]   it was kind of like, they were sort of pushing these technologies that were not very easy to
[00:03:16.740 --> 00:03:18.400]   use instead.
[00:03:18.400 --> 00:03:23.780]   I'm just kind of hoping like, the model providers, right, kind of have this like elevated position
[00:03:23.780 --> 00:03:24.780]   in the ecosystem.
[00:03:24.780 --> 00:03:31.160]   So whatever they say carries a lot of weight, similar to like the fang companies in like,
[00:03:31.160 --> 00:03:34.520]   you know, web dev and in general.
[00:03:34.520 --> 00:03:39.400]   So like, let's just, here's to hoping for a good quality of a discourse this time around.
[00:03:39.400 --> 00:03:44.160]   So here's a hot note, take number two, and I'm going to add link chain here.
[00:03:44.160 --> 00:03:51.840]   We should consider like graph, node, and edge APIs within frameworks harmful.
[00:03:51.840 --> 00:03:58.120]   And like, I say this as someone who used to be a co-founder of a React meta framework that
[00:03:58.120 --> 00:04:06.100]   famously used GraphQL as a default way of fetching data.
[00:04:06.100 --> 00:04:08.840]   We wrote our data fetching queries like this.
[00:04:08.840 --> 00:04:12.280]   It was really cool in 2017.
[00:04:12.280 --> 00:04:15.520]   We, GraphQL is still cool, right, GraphQL is a great technology.
[00:04:15.520 --> 00:04:23.420]   We indexed on this pattern and it became kind of the default way of fetching data in Gatsby.
[00:04:23.420 --> 00:04:26.180]   Some of our users love this, but many of them didn't.
[00:04:26.180 --> 00:04:28.920]   Many of them just wanted a React meta framework.
[00:04:28.920 --> 00:04:32.600]   Okay, why is he talking about like the last decade of web development?
[00:04:32.600 --> 00:04:33.600]   You'll see why.
[00:04:33.600 --> 00:04:37.100]   They ended up using other frameworks instead.
[00:04:37.100 --> 00:04:43.380]   And when I see APIs that look something like this, it gives me flashbacks.
[00:04:43.380 --> 00:04:51.240]   I do not think you should need to learn graph theory to write workflows, to build production
[00:04:51.240 --> 00:04:52.640]   applications.
[00:04:52.640 --> 00:04:59.140]   More problematically, you should also probably not need all of your team to grok graph theory.
[00:04:59.140 --> 00:05:02.560]   A more grokkable pattern looks something like this.
[00:05:02.560 --> 00:05:07.800]   And I've used, like, I've used master workflows here.
[00:05:07.800 --> 00:05:09.680]   But it's sort of like a fluent syntax.
[00:05:09.680 --> 00:05:12.260]   You can clearly see the control flow.
[00:05:12.260 --> 00:05:17.180]   But I mean, this is like the ingest workflow syntax.
[00:05:17.180 --> 00:05:20.680]   You can kind of clearly see the flow of the code.
[00:05:20.680 --> 00:05:25.360]   You can see what happens, and then what happens after that, and what happens after that.
[00:05:25.360 --> 00:05:31.860]   You can just see it by, like, when you're reading the code, your eyes can go from the top to the bottom.
[00:05:31.860 --> 00:05:34.860]   And then, okay, I see what's going on here, great, I get it.
[00:05:34.860 --> 00:05:35.360]   Right?
[00:05:35.360 --> 00:05:36.360]   It's readable code.
[00:05:36.360 --> 00:05:38.360]   It's like a readable way of doing things.
[00:05:38.360 --> 00:05:49.780]   I think when, if we have to use nodes and edges and connect things, we lose that readability of code, which is really important when we're building, we all build software in teams, right?
[00:05:49.780 --> 00:05:50.780]   So, generally.
[00:05:50.780 --> 00:06:03.780]   So, I mentioned this earlier, right, like, you and your colleagues should be able to use a workflow framework, or whatever, without learning graph theory.
[00:06:03.780 --> 00:06:11.780]   Again, like I said, it's a reverse mullet, like party in the front, hot tics in the front, like business in the back.
[00:06:11.780 --> 00:06:21.780]   Okay, so, like, now that we've kind of like talked about, like, we've sort of like opined on the discourse of the day, let's get down to business, okay?
[00:06:21.780 --> 00:06:24.780]   Design patterns for agents and workflows.
[00:06:24.780 --> 00:06:33.780]   And when I say design patterns, like, this phrase has kind of a storied history, so this is a book which came out, I think, like, late '70s by this guy named Christopher Alexander.
[00:06:33.780 --> 00:06:40.780]   It was very famous, it spawned a bunch of, like, not, so, okay, Christopher Alexander was a professor at Berkeley.
[00:06:40.780 --> 00:06:42.780]   He was an architect.
[00:06:42.780 --> 00:06:52.780]   He sort of cataloged in both sort of, like, urban planning as well as, like, internal sort of, like, in-building architecture.
[00:06:52.780 --> 00:06:58.780]   Like, these are a couple hundred of the patterns of what we see are the right ways of building.
[00:06:58.780 --> 00:07:01.780]   And just wrote them all up in a book.
[00:07:01.780 --> 00:07:10.780]   And so, oddly, architects were not very fond of this, but, like, software engineers loved it and sort of it became all the rage and, like, this predates me, but, like,
[00:07:10.780 --> 00:07:14.780]   the late '80s, early '90s, sometime around then.
[00:07:14.780 --> 00:07:32.780]   And so I think there's, like, I think what we do not yet have, we have sort of, like, steps towards this, but what we do not yet have is a commonly accepted verbiage and, like, language and glossary of what are agentic patterns, right?
[00:07:32.780 --> 00:07:34.780]   Orgentic workflow patterns.
[00:07:34.780 --> 00:07:38.780]   And so, okay, let's just start with, like, what are agents and workflows.
[00:07:38.780 --> 00:07:44.780]   Maybe I'm not gonna spend a lot of time on the slide because I think the previous speaker talked about this.
[00:07:44.780 --> 00:07:50.780]   is I was honestly, because people have covered this ground, these guys did a workshop yesterday and they did a great job.
[00:07:50.780 --> 00:07:52.780]   So I just, like, took their slides and put them in there.
[00:07:52.780 --> 00:07:53.780]   Put them in here.
[00:07:53.780 --> 00:07:55.780]   Props to Nick and Zach if they're in the room somewhere.
[00:07:55.780 --> 00:08:00.780]   But they did a workshop on Monster yesterday, which was amazing.
[00:08:00.780 --> 00:08:01.780]   Okay.
[00:08:01.780 --> 00:08:06.780]   So, but, like, okay, like, let's just, like, how would we explain it to a friend?
[00:08:06.780 --> 00:08:10.780]   Okay, I think about agents like a turn-based game, right?
[00:08:10.780 --> 00:08:16.780]   Like, I take a turn, then the agent takes a turn, then I take a turn, then the agent takes a turn,
[00:08:16.780 --> 00:08:19.780]   and then the agent takes another turn, maybe makes, like, a tool call or something, right?
[00:08:19.780 --> 00:08:21.780]   It's, like, back and forth.
[00:08:21.780 --> 00:08:26.780]   And then I think about, like, workflows are, like, this rules engine for your tech tree, right?
[00:08:26.780 --> 00:08:27.780]   Okay, we gotta...
[00:08:27.780 --> 00:08:29.780]   I played Civ a lot when I was a kid.
[00:08:29.780 --> 00:08:34.780]   You gotta discover bronze working before you can research iron working, right?
[00:08:34.780 --> 00:08:38.780]   You gotta get metallurgy before you can research gunpowder, right?
[00:08:38.780 --> 00:08:41.780]   Like, there's some sort of dependency chain here.
[00:08:41.780 --> 00:08:46.780]   And it's important to kind of track the dependencies, because you can't do step B until you do step A.
[00:08:46.780 --> 00:08:48.780]   And a lot of workflows are these, like, data pipelines.
[00:08:48.780 --> 00:08:53.780]   Step A, step B, step C, step D, step E, execute them all in order, go.
[00:08:53.780 --> 00:08:54.780]   Right?
[00:08:54.780 --> 00:08:59.780]   You know, conversations have threads, you can have memory.
[00:08:59.780 --> 00:09:03.780]   Like, these are all the emergent properties that happen when you think about...
[00:09:03.780 --> 00:09:06.780]   When you think about, like, lots and lots and lots of messages.
[00:09:06.780 --> 00:09:18.780]   Similarly, if you think about these sort of, like, dependencies, you can think about branching and parallelism and conditions and loops and suspending and resuming and replaying and all this fun stuff.
[00:09:18.780 --> 00:09:21.780]   Like, those are sort of the emergent properties of workflows.
[00:09:21.780 --> 00:09:28.780]   And, I mean, just kind of recapping, like, workflows have been around for a while, obviously.
[00:09:28.780 --> 00:09:31.780]   They're becoming more popular now for a variety of reasons.
[00:09:31.780 --> 00:09:32.780]   But one of them just...
[00:09:32.780 --> 00:09:34.780]   And I want to bring this back here, because it's important, right?
[00:09:34.780 --> 00:09:40.780]   Like, you can always just write, you know, code that says do A and then do B and do C and do D.
[00:09:40.780 --> 00:09:51.780]   But the reason why they're just more popular in AI engineering than sort of, like, normal engineering is because, like, non-determinism is sort of core to what we're doing here.
[00:09:51.780 --> 00:10:01.780]   And being able to kind of trace it and figure out what happened is, like, if it's important in software engineering, it's 10x as important in AI engineering.
[00:10:01.780 --> 00:10:04.780]   So, let's see.
[00:10:04.780 --> 00:10:07.780]   Look, at the end of the day, it's just a trade-off, right?
[00:10:07.780 --> 00:10:09.780]   You can have power or you can have control.
[00:10:09.780 --> 00:10:12.780]   You can decide which parts you want power on, which parts you want control on.
[00:10:12.780 --> 00:10:16.780]   You can start with power, and then anything that goes off the rails, you can add control.
[00:10:16.780 --> 00:10:20.780]   At the end of the day, like many things we do, it's just a trade-off.
[00:10:20.780 --> 00:10:26.780]   This slide, I was not able to drop in, but the photo I wanted to drop in.
[00:10:26.780 --> 00:10:37.780]   We've done a lot of whiteboarding sessions with, like, hey, I'm starting to build an agent, and I'm trying to figure out how to think about this.
[00:10:37.780 --> 00:10:48.780]   Or my agent is, I'm feeding in this giant PDF of medical documentation, and I'm trying to diagnose 12 symptoms, and it's not accurately pulling out the right information.
[00:10:48.780 --> 00:10:54.780]   Okay, have you considered breaking that one LLM call into 12 LLM calls?
[00:10:54.780 --> 00:11:06.780]   A lot of what you do in these kinds of sessions is you sort of think about, you kind of ask, hey, what part of your application is performing not very well in terms of reliability?
[00:11:06.780 --> 00:11:13.780]   And then, like, how could you add some structure to the process here so you can get additional reliability?
[00:11:13.780 --> 00:11:18.780]   And I encourage that sort of, like, practice.
[00:11:18.780 --> 00:11:26.780]   We kind of encourage that practice, like, obviously, we're happy to do that with whoever, but, like, also just, like, do it with each other and, like, just try explaining your architecture to your friend or your colleague, right?
[00:11:26.780 --> 00:11:41.780]   And then, like, diagram it out on a board, because you can, when you're doing these things, like, magically, like, you realize that, actually, there's a better way of doing a certain thing, and maybe a more creative way of using the primitives together.
[00:11:41.780 --> 00:11:43.780]   Coming to that, right?
[00:11:43.780 --> 00:11:44.780]   Coming to that, right?
[00:11:44.780 --> 00:11:47.780]   So, here's just some thoughts, right?
[00:11:47.780 --> 00:11:49.780]   Agents and workflow composition.
[00:11:49.780 --> 00:11:54.780]   So, agents have tools, and, you know, they can call tools, you know, workflows have steps.
[00:11:54.780 --> 00:11:56.780]   An agent can be a step.
[00:11:56.780 --> 00:11:58.780]   A workflow can be a tool.
[00:11:58.780 --> 00:11:59.780]   An agent can be a tool.
[00:11:59.780 --> 00:12:00.780]   An agent can be a tool.
[00:12:00.780 --> 00:12:02.780]   A workflow can be a step.
[00:12:02.780 --> 00:12:09.780]   And, like, most primitives, the magic happens when you combine these things together.
[00:12:09.780 --> 00:12:11.780]   The agent supervisor model.
[00:12:11.780 --> 00:12:15.780]   You have an agent that is calling other agents as tools, right?
[00:12:15.780 --> 00:12:21.780]   So, let's see, we have, this one was a research agent and a summary agent, and then, like, an orchestrator agent.
[00:12:21.780 --> 00:12:39.780]   These are, like, these are all, like, Mastra, sort of, like, Mastra code is just more of, like, an example of, like, you know, but I think, like, it's illustrative, not the particular lines of code and what they are, but, like, these examples are sort of simple enough to fit in the, you know, slightly smaller version of the right panel of my slide, right?
[00:12:39.780 --> 00:12:41.780]   And that's sort of the interesting thing.
[00:12:41.780 --> 00:12:46.780]   We can use these terms and the implementation is not too long.
[00:12:46.780 --> 00:12:48.780]   It's grokkable in a slide.
[00:12:48.780 --> 00:13:02.780]   And so, again, like, that's kind of what gives us power is that, like, the primitives are simple, but the combinations are also, like, once we get a hang around, once we get the hang of them, we can, you know, run pretty fast.
[00:13:02.780 --> 00:13:04.780]   You know, you could have workflows as tools.
[00:13:04.780 --> 00:13:19.780]   So, I think, you know, it's, like, hey, like, you want to plan location, you want to, like, check the weather, then you want to plan the trip, maybe these are, like, more complex workflows, pass that to an agent, let it sort of, like, iterate and decide.
[00:13:19.780 --> 00:13:21.780]   Workflows doing agent handoffs.
[00:13:21.780 --> 00:13:23.780]   I'm looking at time here.
[00:13:23.780 --> 00:13:24.780]   Dynamic tool injection.
[00:13:24.780 --> 00:13:25.780]   This is interesting, too.
[00:13:25.780 --> 00:13:32.780]   I think, like, you know, agents can start failing if you give them, let's say, double digit numbers of tools.
[00:13:32.780 --> 00:13:40.780]   And you may want to be thoughtful about which tools you're handing to a particular agent at a particular time when it's performing at a particular task.
[00:13:40.780 --> 00:13:43.780]   You can also, you know, nested workflows.
[00:13:43.780 --> 00:13:44.780]   Again, workflow is a step.
[00:13:44.780 --> 00:13:54.780]   But, again, like, the real, and just I'm going to reemphasize this, the real alpha comes from sort of, like, using these patterns together in the right sort of way.
[00:13:54.780 --> 00:14:04.780]   Reality has a surprising amount of detail, and so do agentic workflows that sort of, like, by the time they enter production.
[00:14:04.780 --> 00:14:07.780]   I think I also have a couple minutes for questions.
[00:14:07.780 --> 00:14:20.780]   So, do you think, then, basically, would be even better if you combine the deep research agent plus the workflow, versus if you want to replace another ?
[00:14:20.780 --> 00:14:25.780]   So the question, yeah, the question is, would it be better to combine the deep research agent?
[00:14:25.780 --> 00:14:30.780]   So, I have a workflow that I know for a fact that it works very well right now with 20 tools.
[00:14:30.780 --> 00:14:31.780]   Yeah.
[00:14:31.780 --> 00:14:36.780]   But then I'll set your arguments that there is no need for me to orchestrate this workflow and just...
[00:14:36.780 --> 00:14:40.780]   So, the question is that your agent works great with 20 tools.
[00:14:40.780 --> 00:14:45.780]   I would say, like, we are a community of practice more than we are a community of theory.
[00:14:45.780 --> 00:14:50.780]   If your agent is working according to what you would need, like, do it.
[00:14:50.780 --> 00:14:56.780]   If it's not theoretically correct, that probably means the theory is wrong, not the practice.
[00:14:56.780 --> 00:15:01.780]   This is a young field, and the practice is evolving faster than the theory, right?
[00:15:01.780 --> 00:15:04.780]   I think that's just my general comment.
[00:15:04.780 --> 00:15:09.780]   One more question.
[00:15:09.780 --> 00:15:11.780]   Where can we find you after the talk?
[00:15:11.780 --> 00:15:13.780]   You can find me around the conference.
[00:15:13.780 --> 00:15:14.780]   You can...
[00:15:14.780 --> 00:15:15.780]   I'm @calcsam.
[00:15:15.780 --> 00:15:21.780]   That's C-A-L-C, like calculator, and S-A-M, like my name, which is my handle when I was 12, because...
[00:15:21.780 --> 00:15:24.780]   Yeah, anyway.
[00:15:24.780 --> 00:15:26.780]   Thanks, everyone, for coming.
[00:15:26.780 --> 00:15:27.780]   Really appreciate it.
[00:15:27.780 --> 00:15:29.780]   Please grab a copy of the book around the conference.
[00:15:29.780 --> 00:15:30.780]   Thank you very much.
[00:15:30.780 --> 00:15:30.780]   Thank you very much.
[00:15:30.780 --> 00:15:30.780]   Thank you very much.
[00:15:30.780 --> 00:15:30.780]   Thank you very much.
[00:15:30.780 --> 00:15:31.780]   Thank you very much.
[00:15:31.780 --> 00:15:36.360]   Transcription by ESO. Translation by —

