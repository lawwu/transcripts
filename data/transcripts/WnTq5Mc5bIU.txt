
[00:00:00.000 --> 00:00:05.000]   - Cool, so I was actually hoping today to chat with,
[00:00:05.000 --> 00:00:22.440]   to kind of do this presentation
[00:00:22.440 --> 00:00:24.520]   along with the enterprise partner
[00:00:24.520 --> 00:00:26.060]   that we've been working with,
[00:00:26.060 --> 00:00:28.200]   but we couldn't get legal clearance in time.
[00:00:28.200 --> 00:00:33.200]   So just kind of imagine somebody else here, I guess.
[00:00:33.200 --> 00:00:36.100]   But a public healthcare company
[00:00:36.100 --> 00:00:39.420]   where we'll talk about kind of an automation use case
[00:00:39.420 --> 00:00:44.420]   and what it kind of took to make AI reliably solve
[00:00:44.420 --> 00:00:49.860]   a problem that would have a pretty kind of serious impact.
[00:00:49.860 --> 00:00:54.220]   The context here is a large public healthcare company
[00:00:54.220 --> 00:00:58.520]   that specializes in, that creates software for radiologists
[00:00:58.520 --> 00:00:59.860]   and radiology clinics.
[00:00:59.860 --> 00:01:03.540]   And the idea is when operators,
[00:01:03.540 --> 00:01:06.440]   when patients want to schedule appointments,
[00:01:06.440 --> 00:01:07.700]   they call operators.
[00:01:07.700 --> 00:01:10.860]   And so, you know, patients will call operators and say,
[00:01:10.860 --> 00:01:15.860]   "Hey, I'm a male, I'm over 30, I have a symptom.
[00:01:16.860 --> 00:01:18.860]   You know, I've gotten this is my health insurance provider.
[00:01:18.860 --> 00:01:19.940]   This is my vendor."
[00:01:19.940 --> 00:01:22.560]   And what operators who are on the phone do
[00:01:22.560 --> 00:01:25.280]   is figure out what the right procedure code for them is.
[00:01:25.280 --> 00:01:26.660]   They do a bunch of data entry.
[00:01:26.660 --> 00:01:29.740]   And they also see whether,
[00:01:29.740 --> 00:01:34.680]   they also try to get like the right appointment scheduled
[00:01:34.680 --> 00:01:35.500]   and stuff like that, right?
[00:01:35.500 --> 00:01:38.880]   So that is kind of the lay of the land.
[00:01:38.880 --> 00:01:43.880]   In this kind of situation what was kind of observed
[00:01:43.880 --> 00:01:49.720]   was this call takes about 12 to 15 minutes to run through, right?
[00:01:49.720 --> 00:01:55.620]   And if every three minutes that you can reduce from that call
[00:01:55.620 --> 00:01:58.660]   has about a $50 million impact,
[00:01:58.660 --> 00:02:02.020]   both in terms of more calls that you can do from that center,
[00:02:02.020 --> 00:02:06.940]   servicing thousands of clinics, both in the U.S. and in the world,
[00:02:06.940 --> 00:02:07.540]   mostly in Europe.
[00:02:07.540 --> 00:02:10.140]   And in this situation,
[00:02:10.140 --> 00:02:13.540]   the more time you can kind of shave off,
[00:02:13.540 --> 00:02:15.700]   the more business impact you can get
[00:02:15.700 --> 00:02:18.000]   because of both like the more appointments that you can schedule,
[00:02:18.000 --> 00:02:26.000]   but also the lower kind of capital cost of training somebody,
[00:02:26.000 --> 00:02:29.140]   dealing with the fact that you have to kind of retrain an operator
[00:02:29.140 --> 00:02:30.880]   to kind of take these calls, right?
[00:02:30.880 --> 00:02:37.560]   Now, um, the, the kind of, the big challenge here is that-
[00:02:37.560 --> 00:02:45.640]   I had a nice slide to show you, uh,
[00:02:45.640 --> 00:02:48.860]   how complicated it is for the operator to schedule a call.
[00:02:48.860 --> 00:02:52.920]   So, what you can do right now is imagine the worst,
[00:02:52.920 --> 00:02:58.740]   most complicated, uh, enterprise UI screen that you have ever seen.
[00:02:58.740 --> 00:03:00.420]   Like, just the worst, right?
[00:03:00.420 --> 00:03:05.420]   Like, uh, it's, it's like, it's got like 15 tabs,
[00:03:05.420 --> 00:03:07.860]   and so as you're filling data here on the call,
[00:03:07.860 --> 00:03:09.980]   you've got to switch a tab, go to the next tab,
[00:03:09.980 --> 00:03:12.500]   then fill up another screen, uh, fill up some more data there.
[00:03:12.500 --> 00:03:16.420]   Uh, so it's, it's a, it's a, it's a pretty kind of nightmarish situation
[00:03:16.420 --> 00:03:18.420]   for the operator who's trying to fill this data up.
[00:03:18.420 --> 00:03:25.100]   So, the, the big kind of challenge is, is that it's, it's not just kind of navigating this UI and filling up this data,
[00:03:25.100 --> 00:03:31.100]   but what it kind of comes down to is you have to figure out what the right procedure code is for that patient
[00:03:31.100 --> 00:03:32.940]   before you schedule them in, right?
[00:03:32.940 --> 00:03:39.380]   And different kinds of, uh, situations will require different kinds of medical procedure codes.
[00:03:39.380 --> 00:03:47.780]   So, for example, you might have, like, uh, mammogram with ultrasound urinal, or bilateral, or with, um,
[00:03:47.780 --> 00:03:50.780]   with an ultrasound also, uh, baked in, right?
[00:03:50.780 --> 00:03:57.780]   Um, but maybe they need wheelchair assistance, and so that code becomes a different, like, it becomes M-M-1-2-3-W-A, right?
[00:03:57.780 --> 00:04:00.700]   Like, it, it changes, and the number of codes change.
[00:04:00.700 --> 00:04:07.940]   It's not just dependent on the patient that, when they come in, and the patient's kind of symptoms, and age, and gender, and stuff like that,
[00:04:07.940 --> 00:04:12.340]   but also whether the patient had already come to the clinic before.
[00:04:12.340 --> 00:04:16.580]   Uh, it also depends on state regulation, federal regulation, and local regulation.
[00:04:16.580 --> 00:04:20.820]   It also depends on if the clinic decides that they don't like to work after 3 p.m.
[00:04:20.820 --> 00:04:25.140]   So, you know, then you can't, you can't schedule an appointment for that particular clinic.
[00:04:25.140 --> 00:04:31.980]   Um, the number of permutations and combinations that are required, uh, is, is kind of explosive.
[00:04:31.980 --> 00:04:39.140]   Uh, the last bit of it that makes it really shitty, even, is that nobody even agrees on the same set of procedure codes.
[00:04:39.140 --> 00:04:45.980]   So you can't even sit and say, "Aha, this is the space of all the codes, and, and that's what we're gonna, like, analyze and have a decision tree on."
[00:04:45.980 --> 00:04:49.540]   Nope. Uh, different kind of clinic family comes in, and they have a different set of codes.
[00:04:49.540 --> 00:04:53.540]   Some people have 250 codes, uh, just for mammograms, some people have 5.
[00:04:53.540 --> 00:05:03.380]   Um, and this is, I'm, I'm just, I'm gonna, I'm gonna, I've been shocked over the last few weeks, just looking at this entire space, and I'm like, "Oh ho, this is why it sucks so much."
[00:05:03.380 --> 00:05:06.380]   Um, and so this is kind of the situation, right?
[00:05:06.380 --> 00:05:11.380]   And so, the way that their stack is set up is, they have kind of three players in this, right?
[00:05:11.380 --> 00:05:19.140]   So there's, there's one who's the operator, who's this, uh, person who's, uh, trying to take calls, whose, whose jobs we're trying to replace.
[00:05:19.140 --> 00:05:20.820]   Uh, so it's even worse than them.
[00:05:20.820 --> 00:05:28.380]   But, uh, but the second, the second piece, uh, is, uh, the person here is the developer who's building this very complicated software.
[00:05:28.380 --> 00:05:32.380]   Because, you know, it's kind of not on them, this is just a really complicated thing to do.
[00:05:32.380 --> 00:05:38.620]   So it's not like, uh, I can material UI, whatever, like, uh, ShadCN this, I dated myself.
[00:05:38.620 --> 00:05:44.020]   Uh, you know, you can, like, you can, you can have, like, a new fancy UI, uh, to solve this problem.
[00:05:44.020 --> 00:05:46.940]   It's, it's not that, it's just genuinely a really complicated problem.
[00:05:46.940 --> 00:05:51.060]   Um, and so they have to, will they, like, code every edge case up, right?
[00:05:51.060 --> 00:05:54.180]   So what would you do? You convert every case into a configuration, right?
[00:05:54.180 --> 00:06:00.780]   You're like, so, if the clinic has variable timings, let's create a configuration block called timing block.
[00:06:00.780 --> 00:06:08.500]   Uh, and then let's figure out how, uh, what, you know, what the right kind of time for them to, uh, schedule the appointment is and stuff like that.
[00:06:08.500 --> 00:06:21.300]   Um, in this kind of situation, um, in these kind of three players, right, uh, you, you have this, this administrator, right, for every clinic,
[00:06:21.300 --> 00:06:25.780]   who's a non-technical person, who actually knows all of the clinic rules, right?
[00:06:25.780 --> 00:06:30.660]   So they know, they know everything, but the problem is they can't really build it, right?
[00:06:30.660 --> 00:06:37.380]   So, so you have kind of this config explosion problem, or you have a, and you have a training burden, which is that every time you increase configuration,
[00:06:37.380 --> 00:06:41.980]   you've got to train the, uh, you've got to train the operators to do more with that configuration.
[00:06:41.980 --> 00:06:45.300]   You have a lot of uncoded rules and business logic that people don't want to code up.
[00:06:45.300 --> 00:06:49.380]   Like, nobody wants to code up a situation of, like, this clinic in Chicago doesn't like to work on a Friday.
[00:06:49.380 --> 00:06:50.380]   Like, it's not a thing.
[00:06:50.380 --> 00:06:54.380]   Uh, um, well, I, it's probably, like, the Bay Area, I guess, but not, not Chicago.
[00:06:54.380 --> 00:07:01.100]   And then, um, and then, of course, the, the, what this nets out to saying is that every time you encode a new rule, um,
[00:07:01.100 --> 00:07:07.860]   it's, it's, it's more expensive than the benefit that you get, so, you know, we just, we just kind of offload this training to operators, right?
[00:07:07.860 --> 00:07:10.660]   And, and this leads to what I call kind of the automation paradox, right?
[00:07:10.660 --> 00:07:15.100]   So the automation paradox is the people who understand the rules can't code the automation,
[00:07:15.100 --> 00:07:18.500]   and the people who can code the automation, uh, can't understand the rules.
[00:07:18.500 --> 00:07:21.380]   Uh, can't, don't, won't, whatever, right?
[00:07:21.380 --> 00:07:23.220]   Like, they, they, developers, right?
[00:07:23.220 --> 00:07:25.380]   They don't, they don't want to go out into the field and do real work.
[00:07:25.380 --> 00:07:27.740]   They're like, oh, let me, let me, by code something.
[00:07:27.740 --> 00:07:40.940]   Um, so the AI idea, unsurprisingly, this is going to be a shocker for you guys, is what if the non-tech people could write and update, uh, these algorithms in natural language, right?
[00:07:40.940 --> 00:07:48.580]   Like, what does it take to make that happen, so that we can kind of cut the developer out of the loop and just have admins,
[00:07:48.580 --> 00:07:53.700]   Vibe code, in production, right?
[00:07:53.700 --> 00:07:56.980]   What does it take for us to get there, right?
[00:07:56.980 --> 00:08:10.660]   And that's kind of what we've been working on, uh, for the last, uh, for the last few months, uh, and I kind of want to share with you what, uh, what we've done, uh, uh, and I have, I have a live demo as well, but the internet is janky, so I'm gonna play a recorded thing that I was just doing
[00:08:10.660 --> 00:08:40.380]   in the corner, quickly recording it first, so that, so that you can then see it, okay, cool, all right, so the challenges, the first challenge is what I call the language problem, and the language problem is essentially, the business user has a language that seems very obvious to them, and if you give this to, like, a stock LLM, um, it will result in, you know, maybe MRI machines catching fire when it is deployed, no, it won't actually happen, thankfully, thankfully we're not doing that work yet,
[00:08:40.380 --> 00:08:44.700]   yet, we're just starting another project where we're getting into that, but we're staying away from the actual scanning,
[00:08:44.700 --> 00:08:55.100]   uh, so, so won't actually catch, catch fire, but the problem is that the LLM does not speak your business language, it speaks your programming language, so you can meta,
[00:08:55.100 --> 00:09:02.700]   you can say do react-y things, or do rusty things, or do JavaScript-y things, uh, or TypeScript things, but, but you can't, um, but it's kind of hard to, like,
[00:09:02.700 --> 00:09:08.900]   that specific terminology of what you want to do, and how it should work and translate your environment to intent is challenging.
[00:09:08.900 --> 00:09:19.020]   There are two other problems that I would say are kind of non-AI problems, but just, like, uh, very important things to set up, one is the DevOps problem, what even is the SDLC for a non-technical user, right, like, what is a,
[00:09:19.020 --> 00:09:26.620]   what is review, staging, production, uh, fixing, uh, troubleshooting when you're a non-technical user, right, like, that's kind of weird.
[00:09:26.620 --> 00:09:36.220]   Um, and the second is a security problem, which is so, uh, cool, we gave these non-technical users a way to, uh, write whatever business logic on the fly,
[00:09:36.220 --> 00:09:44.060]   uh, what if it causes a massive, uh, data breach, or a security leak, um, then, you know, might as well, might as well shut down.
[00:09:44.060 --> 00:09:50.780]   Uh, so, so that's, that's kind of the stuff that needs to be opinionatedly, opinionatedly solved.
[00:09:50.780 --> 00:10:00.380]   Cool, alright, so, the solution. Now, um, the idea is, suppose you're a company called Acme, um,
[00:10:00.380 --> 00:10:06.460]   what, what people are kind of, what developers are doing today in this company called Acme, or for this, for this healthcare company,
[00:10:06.460 --> 00:10:15.580]   is, um, developers have tribal knowledge and know-how, and they use that to talk to a foundation model, uh, with assisted tooling, etc.,
[00:10:15.580 --> 00:10:20.700]   depending on your tool of choice, and they generate, you know, uh, programs, and programs do things, right?
[00:10:20.700 --> 00:10:30.300]   Instead of that, what if the non-technical user spoke to a model that was taught the language of your domain instead,
[00:10:30.300 --> 00:10:36.380]   and that would generate, let's call, let's call it Acme QL, uh, surprise, prompt QL, which is then coming,
[00:10:36.380 --> 00:10:41.820]   Acme, whatever, company QL, but, um, uh, let's say it generates a language in, it generates this,
[00:10:41.820 --> 00:10:47.740]   it generates a plan in a language called company QL, and this company QL plan is a program, is like a
[00:10:48.380 --> 00:10:52.220]   deterministic artifact that can actually be executed, so that's kind of the bridge between
[00:10:52.220 --> 00:10:57.980]   the business user, the AI, and what actually gets executed, uh, deterministically, and then
[00:10:57.980 --> 00:11:03.820]   this is, uh, run, right? So this now is programmatically run, uh, once this work is done. So the hard part
[00:11:03.820 --> 00:11:11.980]   becomes, how can we encode whatever practices we have about, um, uh, everything from, uh, procedural semantics, to
[00:11:11.980 --> 00:11:20.220]   ontologies, to entities, to specifics, into, uh, into a model, how can we teach that to a model, so that it can
[00:11:20.220 --> 00:11:31.500]   then just start to generate, uh, things that make sense to a, uh, uh, to a business user, right? Um, let me load up, uh, a demo,
[00:11:31.500 --> 00:11:39.580]   uh, and see what this looks like, so let's hit play here, and I want to keep my scroller, so, um,
[00:11:39.580 --> 00:11:45.100]   I start with kind of something simple, which is, as a business user, um, I start with something very
[00:11:45.100 --> 00:11:52.300]   simple that says, uh, for, can you folks see on the back? No? All right, let me go to a past thread and
[00:11:52.300 --> 00:12:01.580]   show you what a conversation actually looks like, right? So, all right. So, I did this demo on GitHub to
[00:12:01.580 --> 00:12:08.540]   kind of take a situation where we want to dynamically reassign, uh, who gets to be a supporter when a
[00:12:08.540 --> 00:12:13.100]   particular GitHub issue comes in. Kind of an equivalent problem statement that has the same kind of, like,
[00:12:13.100 --> 00:12:18.380]   weird business rules and logic that you need to have, uh, to actually make it work, right? So, for example,
[00:12:18.380 --> 00:12:22.300]   I kind of go in and I'm like, depending on this kind of business logic or these kinds of rules,
[00:12:22.300 --> 00:12:27.660]   um, this is the person who should be assigned, right? So, as a business user, I start the conversation off
[00:12:27.660 --> 00:12:34.380]   with, uh, given, uh, issue description, something like data pipelines are not working, um, find the most
[00:12:34.380 --> 00:12:41.660]   relevant file, uh, using AI, uh, and, uh, and you'll have to go through a bunch of files, so then find, uh,
[00:12:41.660 --> 00:12:48.860]   the most relevant file, and then find the, find, like, the top contributor, right? Straightforward,
[00:12:48.860 --> 00:12:54.140]   um, as long as you're connected to the data and you understand what all of these words mean,
[00:12:54.140 --> 00:12:58.460]   which is a big part of setting up the semantic layer, etc., whatnot. Um, and then it kind of goes
[00:12:58.460 --> 00:13:04.620]   and does stuff and gives me a response, right? And says, "Hey, so we identified, uh, analytics pipeline.py,
[00:13:04.620 --> 00:13:18.940]   this is the GitHub issue, uh, this is the, uh, sorry, that's not the repo, uh, yeah, that's the, uh,
[00:13:18.940 --> 00:13:23.020]   repo I'd set up for this is sample repo, right? So it has a bunch of files, uh, and now from this bunch
[00:13:23.020 --> 00:13:27.820]   of files, I want you to kind of go in and say, "Hey, uh, find the right issue, find the right file,
[00:13:27.820 --> 00:13:32.620]   and from that file, find the top contributor," right? And so, uh, that top contributor gets found,
[00:13:32.620 --> 00:13:36.940]   and I actually have confidence that, "Okay, this is sort of working. I've actually done this work myself."
[00:13:36.940 --> 00:13:42.780]   The next thing we do is introduce a primitive called automations. So automations is now primitive
[00:13:42.780 --> 00:13:49.740]   in this, uh, ACME QL, right? So I say, "Convert this to an automation." Um, and this is the only
[00:13:49.740 --> 00:13:54.540]   technical thing I deal with ever as a business user. I say, "Input has a field name called description,
[00:13:54.540 --> 00:13:59.900]   and output should have a field called, uh, name. That's it. I kind of don't care. There's an input and
[00:13:59.900 --> 00:14:04.140]   there's an output, and I'm gonna stop thinking about what my business logic does." It then goes
[00:14:04.140 --> 00:14:08.140]   ahead, converts it into an automation, runs a bunch of tests. If it sees the test, it fixes it,
[00:14:08.140 --> 00:14:13.740]   does a whole bunch of things in the background, um, and then kind of gets to a place, uh, where it
[00:14:13.740 --> 00:14:19.260]   returns, uh, a suggested user and what that user should be. And then I can go ahead and say, "Test this
[00:14:19.260 --> 00:14:23.660]   with more input and output," right? So test this with these kinds of issues, like, "Oh, the database
[00:14:23.660 --> 00:14:27.660]   is down," or "Data is down," or whatever users say, right? "Pods are not scaling down." This whenever
[00:14:27.660 --> 00:14:33.500]   traffic, whenever the traffic spike ends, uh, whatever kind of situation you have, right? And, and what this
[00:14:33.500 --> 00:14:40.620]   then does is, uh, it runs a bunch more tests, does that, and as soon as, uh, you're kind of satisfied with
[00:14:40.620 --> 00:14:46.460]   the result of that test, um, or not, uh, you decide to continue. In this case, I'm not satisfied because
[00:14:46.460 --> 00:14:50.540]   I looked at Tom, and this is again the kind of stuff I'm not, I don't want to look at code, right? But I
[00:14:50.540 --> 00:14:55.020]   look at Tom, I'm like, "Tom doesn't sound like the right guy. Show me all the users and their emails."
[00:14:55.020 --> 00:15:02.460]   And then I go in and see, uh, "Oh, Tom is from a different company. Uh, Tom is from a different
[00:15:02.460 --> 00:15:07.340]   company, so I, I can't, I can't assign this to Tom, even though Tom is on our GitHub and is an external
[00:15:07.340 --> 00:15:13.340]   contributor," right? And so then I kind of add in another rule saying, "Hey, uh, remove this somebody
[00:15:13.340 --> 00:15:17.420]   else from an external company," right? And I keep modifying this automation, keep testing it, whatever.
[00:15:17.420 --> 00:15:24.300]   As soon as that is done, as soon as that is done, I hit, uh, deploy. Uh, I hit, uh, deploy button here.
[00:15:24.300 --> 00:15:30.380]   That's all I do as a non-technical person. Um, this is our stock UI, the UI that, uh, is, the UI is there for
[00:15:30.380 --> 00:15:37.180]   those field, uh, for the field folks, the risk admins, uh, is more specialized for them. Um, and then
[00:15:37.180 --> 00:15:41.260]   they go and deploy this code, and, uh, in the live demo that I would have showed you, I would have
[00:15:41.260 --> 00:15:47.820]   showed you that if you, uh, have these kinds of, lots of different issues that I was doing, uh, things
[00:15:47.820 --> 00:15:53.660]   like, uh, "Oh, data pipelines are corrupting data, uh, users get assigned," uh, and then when I say
[00:15:53.660 --> 00:15:58.460]   nonsense things like, "Give me a new feature real fast, real cheap," uh, I want to start assigning,
[00:15:58.460 --> 00:16:01.500]   I want to have a different, more complicated business rule, right? So I want to go in and say,
[00:16:01.500 --> 00:16:09.180]   "Hmm, in case," let me just skip to the end and say, uh, "In case there is a generic request,
[00:16:09.180 --> 00:16:18.140]   uh, just change that to assign that to a default person," right? So I do this exclusion rule, uh,
[00:16:18.140 --> 00:16:22.460]   and after I check the exclusion rule, I say, "In case no relevant files are found, assigned to this
[00:16:22.460 --> 00:16:26.460]   person," right? So I can keep adding these more and more business, I can add more business rules,
[00:16:26.460 --> 00:16:30.940]   I can test, and I can deploy, and the whole system kind of works, because for me as a business user,
[00:16:30.940 --> 00:16:35.740]   there's really no difference in working with data and shipping business logic on data,
[00:16:35.740 --> 00:16:40.220]   because if I can be confident that the business logic is working here, all I need is a guarantee
[00:16:40.220 --> 00:16:47.420]   that this works, uh, beyond, right? So, um, that's kind of roughly, uh, that's kind of roughly what this,
[00:16:47.420 --> 00:16:52.700]   what this looks like. Um, from a security point of view, uh, the important thing is that the data layer
[00:16:52.700 --> 00:16:57.020]   is the part which keeps it real, so you can have as much vibe coding as you want on the layers above
[00:16:57.020 --> 00:17:02.620]   that, so that there's no multi-tenant authorization rules, etc. So this AcmeQL plan is running strictly
[00:17:02.620 --> 00:17:07.980]   in user space, it's not actually running, uh, in data space. Um, the impact that we do this with
[00:17:07.980 --> 00:17:12.220]   procedure code selection and appointment selection, and that has a hundred million dollar impact plus
[00:17:12.220 --> 00:17:16.140]   upwards for them that they're going to realize, uh, over the course of this year that they've already
[00:17:16.140 --> 00:17:22.060]   started to. Um, I just wanted to end on this particular note, which is that this is kind of where I
[00:17:22.060 --> 00:17:26.540]   I believe, uh, we're heading to, uh, which is that instead of developers building software,
[00:17:26.540 --> 00:17:31.900]   I think, uh, I think we need to start building the vibe coding platforms that are unique to our
[00:17:31.900 --> 00:17:37.980]   organization, um, and that's kind of what will help. Um, we're at a booth here in PromptQL, so please do
[00:17:37.980 --> 00:17:42.860]   check us out and check out how we do the learning stuff, uh, but that's my time. Thank you so much, folks.
[00:17:42.860 --> 00:17:48.780]   Thank you.

