
[00:00:00.000 --> 00:00:24.320]   where are you joining us from oh i'm here from uh Iran there right great yeah
[00:00:27.360 --> 00:00:39.040]   4 30 in the morning oh wow well that's very impressive but it's good yeah really good
[00:00:39.040 --> 00:00:50.080]   thanks for joining thank you for the session uh codes codes uh uh 67 mines from from capital yeah
[00:00:50.080 --> 00:00:57.040]   well look at that only three of us lots of people watching the vietro videos but
[00:00:57.040 --> 00:01:03.360]   not so many people joining us live i guess it's uh hard to maintain the consistency well thank
[00:01:03.360 --> 00:01:09.520]   you first for joining um that's uh is there anything you wanted to talk about or should we
[00:01:09.520 --> 00:01:23.600]   keep going oh uh yeah ask me uh both of you ah okay i think you were about to finish the
[00:01:24.160 --> 00:01:31.920]   glyph yeah i think you finished the let's go have a look and then share my screen
[00:01:31.920 --> 00:01:38.080]   um so i guess we're doing this one will we the rest
[00:01:38.080 --> 00:01:41.680]   were we in the middle of something
[00:01:41.680 --> 00:01:47.360]   let's see i guess not
[00:01:47.520 --> 00:01:51.520]   yeah
[00:01:51.520 --> 00:01:57.920]   is this different to upshoe is this like a bigger version of it or something
[00:01:57.920 --> 00:02:06.080]   oh it's up shoes that is up shoe yeah we've already done that right i think so yeah yeah
[00:02:06.080 --> 00:02:11.200]   i think so i'm just going to type help just in case it's some weird different version of it
[00:02:12.640 --> 00:02:20.800]   oh what has happened that's strange
[00:02:20.800 --> 00:02:38.880]   huh okay never mind um and have we definitely not done iota andaba
[00:02:41.840 --> 00:02:53.200]   i guess if we did it would have been probably here
[00:03:08.320 --> 00:03:13.680]   um okay dialogue language elements
[00:03:13.680 --> 00:03:20.160]   and try and remember what iota andaba does
[00:03:20.160 --> 00:03:26.960]   where interval index
[00:03:26.960 --> 00:03:30.960]   let's put it next to iota
[00:03:36.160 --> 00:03:45.840]   as well
[00:03:45.840 --> 00:03:54.320]   okay so i'm going to guess that it is shift i
[00:03:54.320 --> 00:03:57.840]   correct aota andaba
[00:03:57.840 --> 00:04:07.520]   okay
[00:04:07.520 --> 00:04:24.960]   all right we've already got row at this point so that's good
[00:04:25.920 --> 00:04:27.920]   so
[00:04:27.920 --> 00:04:36.560]   bmat is two by three
[00:04:36.560 --> 00:04:54.240]   all right so um iota andaba i guess pretty clearly is showing us the locations of
[00:04:55.120 --> 00:05:01.840]   the binary trues
[00:05:01.840 --> 00:05:11.120]   and more than that it is replicating them the number of times according to what the number is
[00:05:11.120 --> 00:05:22.560]   doesn't work on negative numbers doesn't work on floats
[00:05:23.920 --> 00:05:29.440]   okay seems easy enough and then for matrices
[00:05:29.440 --> 00:05:33.200]   it's telling us the coordinates
[00:05:33.200 --> 00:05:38.320]   of each of the binary trues
[00:05:38.320 --> 00:05:51.600]   it would be easier if this was printed out
[00:05:51.600 --> 00:05:58.400]   row one column two two one two three cool
[00:05:58.400 --> 00:06:11.680]   so anything else i should add or anything so it makes sense
[00:06:11.680 --> 00:06:18.960]   what's this one
[00:06:18.960 --> 00:06:30.320]   uh
[00:06:30.320 --> 00:06:31.200]   so
[00:06:31.200 --> 00:06:42.160]   we won't put it in our notebook but i'm sure we try to figure out if we can figure out what this is
[00:06:42.160 --> 00:07:09.600]   iota row omega oh okay so just the index of that oh why is x here hi isak i see so iota
[00:07:11.120 --> 00:07:12.880]   iota row of omega
[00:07:12.880 --> 00:07:22.880]   is the indices that were with yeah correspond to that to that array
[00:07:22.880 --> 00:07:35.840]   and okay so um that's our input that's a function that's a function function operator
[00:07:37.920 --> 00:07:42.400]   function okay so that's a function
[00:07:42.400 --> 00:07:53.840]   that's a function that's a function so this is a fork with three functions does that sound right
[00:07:56.160 --> 00:08:07.440]   i'm right hooray so we go row of this and then we go
[00:08:07.440 --> 00:08:18.160]   slash over comma now there's no reason to use over right because it's monadic so we
[00:08:18.160 --> 00:08:28.720]   could just use jot and get the same thing yes um so first
[00:08:28.720 --> 00:08:40.720]   so is this
[00:08:40.720 --> 00:08:46.640]   the column is not necessary is it
[00:08:46.640 --> 00:08:53.440]   uh it's not
[00:08:53.440 --> 00:08:58.160]   i guess this is in case it's like a scalar or something
[00:08:58.160 --> 00:09:06.640]   okay and then can anyone remember what slash does
[00:09:09.200 --> 00:09:17.360]   set the replicate i guess that's the monadic right uh over do
[00:09:17.360 --> 00:09:24.640]   monadic slash is not defined oh so
[00:09:24.640 --> 00:09:37.600]   wait uh wait how is this working because monadic slash is not defined
[00:09:37.600 --> 00:10:04.000]   that's a syntax error
[00:10:06.880 --> 00:10:16.080]   oh no no no it's dyadic because there's a omega here okay so it's dyadic
[00:10:16.080 --> 00:10:22.640]   okay we've got a okay we've got a fork
[00:10:22.640 --> 00:10:29.600]   slash iota row and a dyadic fork
[00:10:34.640 --> 00:10:38.320]   applies the outside functions to both outside arguments
[00:10:38.320 --> 00:10:55.520]   here yep so this is a dyadic fork and it applies the outside functions to both outside arguments
[00:10:56.880 --> 00:11:08.000]   so are they just recreating the monadic iota underbar um let's see so this is going to be oh i see
[00:11:08.000 --> 00:11:17.920]   i think you're right
[00:11:20.240 --> 00:11:29.280]   um so the reason this works is that slash means replicate and
[00:11:29.280 --> 00:11:36.560]   the left hand side tells me how many things times to replicate the right hand side
[00:11:36.560 --> 00:11:44.000]   omega slash omega
[00:11:44.320 --> 00:11:53.120]   okay so there's a mega slash omega so that's doing the replicate
[00:11:53.120 --> 00:12:08.320]   and then you've got row of omega as we discussed
[00:12:11.520 --> 00:12:15.200]   okay and then dyadic iota
[00:12:15.200 --> 00:12:21.040]   dyadic
[00:12:21.040 --> 00:12:24.560]   index of
[00:12:24.560 --> 00:12:35.040]   so
[00:12:35.040 --> 00:12:39.840]   wait what did i do wrong
[00:12:40.800 --> 00:12:51.600]   oh um it's uh it's
[00:12:51.600 --> 00:12:57.760]   this row is applied to the left down the right
[00:12:57.760 --> 00:13:06.560]   so it's a mega row omega
[00:13:06.960 --> 00:13:12.960]   yeah
[00:13:12.960 --> 00:13:14.960]   is that right
[00:13:14.960 --> 00:13:29.120]   no so i can put parentheses here right no okay so i'm pausing it wrong oh i'm pausing it wrong
[00:13:29.120 --> 00:13:35.520]   because of the omegas this is not in parentheses it's not a fork so i'm totally wrong
[00:13:36.480 --> 00:13:42.480]   um so we actually have to be careful about precedence here without parentheses it's
[00:13:42.480 --> 00:13:49.360]   going to be there's actually no operators in this version so we uh bind most tightly on the on the
[00:13:49.360 --> 00:13:56.400]   right so this is actually simply going to be row of omega which is four and then iota which is one
[00:13:56.400 --> 00:14:08.640]   two three four so it's just going to be that which does give us the answer
[00:14:08.640 --> 00:14:17.120]   okay got to be careful of precedence
[00:14:17.120 --> 00:14:25.360]   okay
[00:14:25.360 --> 00:14:31.040]   and i guess you could do that tacitly
[00:14:31.040 --> 00:14:41.360]   by doing
[00:14:41.360 --> 00:14:44.960]   jot
[00:14:44.960 --> 00:14:52.720]   and then what Adam calls selfie
[00:14:52.720 --> 00:14:55.840]   oh look at that
[00:14:55.840 --> 00:15:00.800]   awesome yay
[00:15:00.800 --> 00:15:08.160]   okay that was a bit of a digression
[00:15:12.640 --> 00:15:19.280]   i think we'll line in the docs to say this is how you can define iota underbar
[00:15:19.280 --> 00:15:24.160]   we've made that a bit faster but i guess it'd be less fun okay yeah
[00:15:24.160 --> 00:15:37.840]   biotic iota underbar
[00:15:38.320 --> 00:15:38.820]   okay
[00:15:38.820 --> 00:15:46.400]   thank you for your fast cable stuff by the way is that okay
[00:15:46.400 --> 00:15:53.360]   it was something i wanted for myself i think a lot of people are going to find it really useful
[00:15:53.360 --> 00:16:03.040]   yeah i hope so i'm i'm right now trying to fight with github actions and trying to get it scheduled
[00:16:05.040 --> 00:16:09.280]   run update if any of the libraries are if any of the libraries are
[00:16:09.280 --> 00:16:13.920]   great idea not the latest it'll just update them and then i can
[00:16:13.920 --> 00:16:21.760]   have a big repository that people can just point to so you don't have to upload their own
[00:16:21.760 --> 00:16:30.480]   unless they want to now this one i remember doing with claire it's a bit of an odd one
[00:16:30.480 --> 00:16:37.920]   so
[00:16:37.920 --> 00:16:45.360]   okay
[00:16:45.360 --> 00:16:52.800]   okay
[00:16:52.800 --> 00:17:06.800]   oh where we are
[00:17:14.880 --> 00:17:20.560]   okay so
[00:17:20.560 --> 00:17:28.720]   hey iou oh there's two things here
[00:17:28.720 --> 00:17:43.520]   what's it doing okay so the number of results is the same as the number on the right hand side
[00:17:43.520 --> 00:18:01.200]   let's start with a numeric one because i think i know this one so what the two four six does
[00:18:01.200 --> 00:18:09.520]   is it creates a number of groups the first group it creates is less than two and then two to less
[00:18:09.520 --> 00:18:19.920]   than four and then four to less than six and then greater than or equal to six and so less than two
[00:18:19.920 --> 00:18:32.080]   will become zero two to less than four will become one four two less than six will become two greater
[00:18:32.080 --> 00:18:42.560]   than or equal to six will become three so that's why one is less than two so it becomes zero two is
[00:18:42.560 --> 00:18:51.840]   two less than four so it becomes one and so forth so just tell to these to find break points
[00:18:51.840 --> 00:18:57.440]   and then it just applies these to those break points and gives you the results
[00:18:58.880 --> 00:19:04.160]   but be very careful because it's a bit weird that it starts at zero instead of one
[00:19:04.160 --> 00:19:13.520]   which when i asked about this on the APL discord Marshall Lockburn told me he considers this an
[00:19:13.520 --> 00:19:19.760]   off by one error in APL although somebody else pointed out it does have some convenient properties
[00:19:19.760 --> 00:19:26.880]   so you can think of it as like the group number one is the bit defined by
[00:19:27.360 --> 00:19:34.240]   when you actually get greater than or equal to two so zero is like less than the minimum value
[00:19:34.240 --> 00:19:36.640]   does that make sense
[00:19:36.640 --> 00:19:45.360]   okay so this is exactly the same thing that for letters these letters are in alphabetical order
[00:19:45.360 --> 00:19:53.840]   so d is between a and e so it's one y is later than u so it's five
[00:19:54.640 --> 00:19:56.640]   that's it
[00:19:56.640 --> 00:20:00.660]   gotcha
[00:20:00.660 --> 00:20:10.640]   okay rank two arrays
[00:20:10.640 --> 00:20:22.640]   i don't know
[00:20:22.640 --> 00:20:29.440]   so
[00:20:29.440 --> 00:20:39.440]   interval index works with major cells
[00:20:39.440 --> 00:20:47.440]   okay so this is one of these ones with broadcasting built-in
[00:20:51.280 --> 00:21:02.080]   wait is that
[00:21:02.080 --> 00:21:20.320]   higher rank left document
[00:21:20.320 --> 00:21:28.240]   and it compares subarrays in y which is the right argument
[00:21:28.240 --> 00:21:45.120]   with the major cells of x
[00:21:45.120 --> 00:21:51.920]   so
[00:21:51.920 --> 00:22:02.400]   i'm not quite following uh
[00:22:02.400 --> 00:22:08.480]   what are subarrays of this i guess three three is a subarray
[00:22:13.200 --> 00:22:20.800]   so it's not broadcasting length just three or three three three would give errors right
[00:22:20.800 --> 00:22:23.920]   but what if we did uh
[00:22:23.920 --> 00:22:29.200]   two rows two columns
[00:22:29.200 --> 00:22:35.040]   of three three three five
[00:22:39.040 --> 00:22:46.720]   yeah so it's this is subarray one i guess this is subarray two so this is the same as as
[00:22:46.720 --> 00:22:54.560]   this result concatenated with this result how does it decide that three three is one i guess
[00:22:54.560 --> 00:23:03.280]   it's looking through here to find like a row that contains what exactly would zero three
[00:23:03.280 --> 00:23:12.720]   give you the same result no i think it's like it's trying to it's basically like looking for
[00:23:12.720 --> 00:23:23.360]   the first okay i think the issue is um it's it's it's comparing column one and then column two
[00:23:24.000 --> 00:23:31.520]   and column two would only matter if there was a tie so i think if we went um
[00:23:31.520 --> 00:23:42.480]   okay one two three four three five
[00:23:46.080 --> 00:23:57.280]   so three three is not bigger than three four three four is but then three five is higher still
[00:23:57.280 --> 00:24:00.160]   and then four five is off the end
[00:24:00.160 --> 00:24:05.840]   oh greater than or equal to is always going to be there
[00:24:05.840 --> 00:24:14.560]   yeah so it's saying uh what row which would this slot into by first of all making sure that it's
[00:24:14.560 --> 00:24:19.600]   greater than or equal to the first column and greater than or equal to the second column so
[00:24:19.600 --> 00:24:24.480]   this one would have to go here because the second is not greater than or equal to
[00:24:24.480 --> 00:24:31.360]   but if either of them are greater than the second then it would slot them after right yeah which i
[00:24:31.360 --> 00:24:45.280]   think is i think it's exactly the same as doing 12 34 35 all right that's basically the same thing right
[00:24:45.280 --> 00:24:52.080]   same results
[00:24:52.080 --> 00:24:58.020]   okay
[00:24:58.020 --> 00:25:08.020]   okay
[00:25:08.020 --> 00:25:22.020]   oh
[00:25:22.020 --> 00:25:28.020]   yeah
[00:25:28.020 --> 00:25:31.540]   and if you want to learn more about this they've got quite extensive examples
[00:25:31.540 --> 00:25:34.740]   which i suspect means that this is fairly important
[00:25:34.740 --> 00:25:42.100]   i guess in you know anytime you're trying to place a continuous number into a bunch of buckets
[00:25:42.100 --> 00:25:45.300]   you would use this kind of approach
[00:25:45.300 --> 00:25:51.460]   like plotting groups or something like that
[00:25:52.020 --> 00:25:52.020]   that
[00:25:52.020 --> 00:25:54.520]   okay
[00:25:54.520 --> 00:25:56.820]   histograms
[00:25:56.820 --> 00:26:01.540]   molly you're very quiet i can't quite hear you probably
[00:26:01.540 --> 00:26:08.820]   oh uh yeah my mic was long ways away uh histograms yeah yeah
[00:26:08.820 --> 00:26:19.700]   circle okay i wonder if circle should go in the basic math section
[00:26:19.700 --> 00:26:23.060]   because that's circle functions
[00:26:23.060 --> 00:26:31.700]   i kind of mentioned we're going to need other stuff much
[00:26:31.700 --> 00:26:43.220]   a bit of a big topic i guess circle functions
[00:26:43.220 --> 00:26:47.860]   uh circle here it is
[00:26:48.740 --> 00:26:50.740]   uh
[00:26:50.740 --> 00:26:58.820]   right circle how do we
[00:26:58.820 --> 00:27:06.340]   write circle hey yeah just remembered i've actually installed the
[00:27:06.340 --> 00:27:08.820]   apl keyboard i don't need this thing anymore
[00:27:08.820 --> 00:27:15.940]   oh i guess it's useful to see what button to press anyway okay so it's
[00:27:17.460 --> 00:27:19.620]   oh so i can just press alt o
[00:27:19.620 --> 00:27:24.260]   oh maybe i need to do this
[00:27:24.260 --> 00:27:28.740]   auto there we go cool
[00:27:28.740 --> 00:27:46.180]   auto which i guess is just called circle yep circle
[00:27:46.980 --> 00:27:47.480]   or
[00:27:47.480 --> 00:27:51.220]   monadic circle
[00:27:51.220 --> 00:27:57.380]   i times so i guess that means we could just go
[00:27:57.380 --> 00:28:07.940]   one at circle one and can we do like that yeah okay seems easy enough
[00:28:07.940 --> 00:28:15.140]   okay nothing weird
[00:28:15.940 --> 00:28:20.900]   oh fun
[00:28:20.900 --> 00:28:30.020]   uh
[00:28:30.020 --> 00:28:33.620]   or illness identity
[00:28:33.620 --> 00:28:38.260]   so i
[00:28:41.220 --> 00:28:45.460]   pi i a to the pi i yeah
[00:28:45.460 --> 00:28:54.500]   i lose identity
[00:28:54.500 --> 00:29:05.300]   although at this point we haven't done any kind of
[00:29:09.780 --> 00:29:12.260]   trainee thing so maybe we should do that in two steps
[00:29:12.260 --> 00:29:20.040]   uh
[00:29:20.040 --> 00:29:24.500]   pi i
[00:29:24.500 --> 00:29:27.380]   equals
[00:29:35.140 --> 00:29:47.860]   pi i oops what did i do wrong
[00:30:03.060 --> 00:30:13.780]   oh it's not exact is that what it's saying
[00:30:13.780 --> 00:30:27.780]   something weird going on here
[00:30:27.780 --> 00:30:39.460]   it doesn't sound weird so this is pi i this is pi i
[00:30:39.460 --> 00:30:46.500]   and then this is e to the power of that
[00:30:46.500 --> 00:30:55.220]   yeah that's definitely pi i
[00:30:55.380 --> 00:30:59.380]   pi
[00:30:59.380 --> 00:31:03.380]   that's strange
[00:31:03.380 --> 00:31:20.420]   oh i see it's minus one plus 10 to the negative 16
[00:31:21.700 --> 00:31:29.300]   i which is basically zero so i think what's happened is um i guess is that uh
[00:31:29.300 --> 00:31:38.260]   this is special case or something in APL dialogue APL to remove the annoying floating point
[00:31:38.260 --> 00:31:43.300]   residue leftover bit here basically this is close enough to zero i
[00:31:43.300 --> 00:31:47.380]   for some reason when we do it all in one go it's
[00:31:49.620 --> 00:31:53.300]   gets it exactly right all right well maybe we won't show that then
[00:31:53.300 --> 00:31:58.040]   okay
[00:31:58.040 --> 00:32:02.900]   diatic
[00:32:02.900 --> 00:32:16.100]   circle function
[00:32:16.900 --> 00:32:40.580]   yeah there isn't really a short way to do this so i'm inclined to just provide a link
[00:32:40.580 --> 00:32:47.060]   to this one right here so i'm going to just give you a quick example of what we're going to do.
[00:32:47.060 --> 00:32:47.140]   you
[00:32:47.140 --> 00:32:47.220]   you
[00:32:47.220 --> 00:32:49.300]   you
[00:32:49.300 --> 00:32:51.380]   you
[00:32:51.380 --> 00:32:53.460]   you
[00:32:53.460 --> 00:32:55.540]   you
[00:32:55.540 --> 00:32:57.620]   you
[00:33:23.620 --> 00:33:25.700]   um but basically the idea is you
[00:33:25.700 --> 00:33:39.700]   put something on the left and whatever you put on the left to find what function you get
[00:33:39.700 --> 00:33:41.780]   you
[00:33:42.180 --> 00:33:42.680]   you
[00:33:42.680 --> 00:33:42.760]   you
[00:33:42.760 --> 00:33:42.840]   you
[00:33:42.840 --> 00:33:42.920]   you
[00:33:42.920 --> 00:33:43.000]   you
[00:33:43.000 --> 00:33:43.080]   you
[00:33:43.080 --> 00:33:43.160]   you
[00:33:43.160 --> 00:33:43.240]   you
[00:33:43.240 --> 00:33:43.320]   you
[00:33:43.320 --> 00:33:43.400]   you
[00:33:43.400 --> 00:33:43.480]   you
[00:33:43.480 --> 00:33:43.560]   you
[00:33:43.560 --> 00:33:43.640]   you
[00:33:43.640 --> 00:33:43.720]   you
[00:33:43.720 --> 00:33:43.800]   you
[00:33:43.800 --> 00:33:43.880]   you
[00:33:43.880 --> 00:33:43.960]   you
[00:33:43.960 --> 00:33:44.040]   you
[00:33:44.040 --> 00:33:44.120]   you
[00:33:44.120 --> 00:33:44.200]   you
[00:33:44.200 --> 00:33:44.280]   you
[00:33:44.280 --> 00:33:44.360]   you
[00:33:44.360 --> 00:33:44.440]   you
[00:33:44.440 --> 00:33:44.520]   you
[00:33:44.520 --> 00:33:44.600]   you
[00:33:44.600 --> 00:33:44.680]   you
[00:33:44.680 --> 00:33:44.760]   you
[00:33:44.760 --> 00:33:44.840]   you
[00:33:44.840 --> 00:33:44.920]   you
[00:33:44.920 --> 00:33:45.000]   you
[00:33:45.000 --> 00:33:45.080]   you
[00:33:45.080 --> 00:33:45.160]   you
[00:33:45.160 --> 00:33:45.240]   you
[00:33:45.240 --> 00:33:45.320]   you
[00:33:45.320 --> 00:33:45.400]   you
[00:33:45.400 --> 00:33:45.480]   you
[00:33:45.480 --> 00:33:45.560]   you
[00:33:45.560 --> 00:33:45.640]   you
[00:33:45.640 --> 00:33:45.720]   you
[00:33:45.720 --> 00:33:45.800]   you
[00:33:45.800 --> 00:33:45.880]   you
[00:33:45.880 --> 00:33:45.960]   you
[00:33:45.960 --> 00:33:46.040]   you
[00:33:46.040 --> 00:33:48.120]   you
[00:33:48.120 --> 00:33:50.200]   you
[00:33:50.200 --> 00:33:52.280]   you
[00:33:52.280 --> 00:33:54.360]   you
[00:33:54.360 --> 00:33:56.440]   you
[00:33:56.440 --> 00:33:57.960]   you
[00:33:57.960 --> 00:33:59.960]   you
[00:33:59.960 --> 00:34:01.960]   you
[00:34:01.960 --> 00:34:03.960]   you
[00:34:03.960 --> 00:34:05.960]   you
[00:34:05.960 --> 00:34:07.960]   you
[00:34:07.960 --> 00:34:09.960]   you
[00:34:09.960 --> 00:34:11.960]   you
[00:34:11.960 --> 00:34:13.960]   you
[00:34:13.960 --> 00:34:15.960]   you
[00:34:15.960 --> 00:34:17.960]   and cause is two
[00:34:17.960 --> 00:34:19.960]   you
[00:34:19.960 --> 00:34:21.960]   you
[00:34:21.960 --> 00:34:23.960]   you
[00:34:23.960 --> 00:34:31.800]   and presumably we can do both
[00:34:31.800 --> 00:34:37.000]   yep and can we do it to multiple things
[00:34:37.000 --> 00:34:49.800]   what does that do
[00:34:49.800 --> 00:34:55.640]   what does that do
[00:34:55.640 --> 00:34:57.640]   what does that do
[00:34:57.640 --> 00:34:59.640]   what does that do
[00:34:59.640 --> 00:35:01.640]   what does that do
[00:35:01.640 --> 00:35:03.640]   what does that do
[00:35:03.640 --> 00:35:05.640]   what does that do
[00:35:05.640 --> 00:35:07.640]   what does that do
[00:35:07.640 --> 00:35:09.640]   what does that do
[00:35:09.640 --> 00:35:11.640]   what does that do
[00:35:11.640 --> 00:35:13.640]   what does that do
[00:35:13.640 --> 00:35:15.640]   and not quite clear on what happens when
[00:35:15.640 --> 00:35:17.640]   and not quite clear on what happens when
[00:35:17.640 --> 00:35:20.280]   is an array
[00:35:20.280 --> 00:35:31.320]   oh I guess it's but well no okay that makes sense so if we do pi
[00:35:31.320 --> 00:35:36.760]   hi
[00:35:36.760 --> 00:35:38.760]   hi
[00:35:38.760 --> 00:35:59.880]   okay so that's basically zero zero
[00:35:59.880 --> 00:36:05.240]   or maybe point five
[00:36:05.240 --> 00:36:07.240]   okay
[00:36:07.240 --> 00:36:09.240]   okay
[00:36:09.240 --> 00:36:15.400]   so then what happens if we what does that do
[00:36:15.400 --> 00:36:22.280]   because you kind of I was expecting four results I was expecting sine and cos because
[00:36:22.280 --> 00:36:28.200]   if we do sine and cos of zero
[00:36:30.280 --> 00:36:46.200]   or sine and cos of half pi
[00:36:57.560 --> 00:37:02.120]   so why do you so what do the two numbers mean
[00:37:02.120 --> 00:37:06.520]   yeah
[00:37:06.520 --> 00:37:16.280]   I I think you're applying each function to each of the er sorry
[00:37:16.280 --> 00:37:23.720]   each straight function to each of the ones and the right side I need a better vocabulary
[00:37:23.720 --> 00:37:26.680]   you think it's broadcasting
[00:37:26.840 --> 00:37:30.920]   over the scalars
[00:37:30.920 --> 00:37:35.640]   yes
[00:37:35.640 --> 00:37:40.840]   yeah I think uh
[00:37:40.840 --> 00:37:49.000]   oh right that's exactly what happens by default in APL right is a scalar broadcasts over an array
[00:37:49.000 --> 00:37:54.200]   but if they're both arrays then they just broadcast to each other yes yes yes you're exactly right
[00:37:56.120 --> 00:37:58.120]   okay great
[00:37:58.120 --> 00:38:12.120]   okay fine
[00:38:20.680 --> 00:38:28.280]   okay element of we should put with our kind of set related stuff which I guess is where
[00:38:28.280 --> 00:38:32.680]   up and down she were
[00:38:32.680 --> 00:38:34.680]   okay
[00:38:34.680 --> 00:38:53.960]   oh
[00:38:53.960 --> 00:38:59.480]   epsilon
[00:39:01.720 --> 00:39:02.760]   one of the epsilon
[00:39:02.760 --> 00:39:07.880]   means enlist because ml for us is one I remember
[00:39:07.880 --> 00:39:20.680]   and it's just called epsilon yes epsilon
[00:39:25.640 --> 00:39:34.600]   my attic epsilon enlist and dyadic
[00:39:34.600 --> 00:39:46.840]   epsilon is member of
[00:39:55.480 --> 00:40:00.680]   okay
[00:40:00.680 --> 00:40:14.680]   okay see what's going on here
[00:40:19.480 --> 00:40:25.000]   matrix is two by three
[00:40:25.000 --> 00:40:38.680]   row iota six
[00:40:38.680 --> 00:40:42.520]   so what it's doing is it's got zero that's got a matrix from one to six
[00:40:43.080 --> 00:40:49.400]   that's got a array with seven and eight that's got a scalar nine and it just uh flattens them
[00:40:49.400 --> 00:40:54.920]   and sticks them all together flatten and concatenate I wonder if that does that for
[00:40:54.920 --> 00:40:58.760]   more axes yes it does
[00:40:58.760 --> 00:41:08.760]   seems easy enough
[00:41:11.640 --> 00:41:19.080]   uh okay so this is interesting
[00:41:19.080 --> 00:41:21.080]   um
[00:41:21.080 --> 00:41:33.160]   yeah so this is two by three but this is a single this is oh sorry and then this is
[00:41:35.080 --> 00:41:44.280]   ranks this is a shape three so I guess this is um doing the broadcasting thing kind of it's
[00:41:44.280 --> 00:41:48.440]   applying it to each row
[00:41:48.440 --> 00:41:58.680]   all the elements in rebel order
[00:42:01.160 --> 00:42:06.680]   so this flattens up to the rays
[00:42:06.680 --> 00:42:08.680]   um
[00:42:08.680 --> 00:42:11.960]   well
[00:42:11.960 --> 00:42:20.680]   yeah I guess so
[00:42:20.680 --> 00:42:30.200]   yeah it is
[00:42:31.160 --> 00:42:33.240]   uh and also higher rank arrays
[00:42:33.240 --> 00:42:44.840]   but yeah this last one's interesting in that it's uh combining these different shapes
[00:42:44.840 --> 00:42:52.200]   and actually
[00:42:52.200 --> 00:42:58.040]   we've ended up with less ones than we started with right
[00:42:58.040 --> 00:43:04.760]   so it's doing something slightly weird here
[00:43:04.760 --> 00:43:20.360]   oh no uh wait am I doing this right okay now I'm reading it wrong so actually yeah sorry
[00:43:22.760 --> 00:43:30.200]   I forgot I got confused by the precedence yeah so even though there's no space there
[00:43:30.200 --> 00:43:35.960]   we have to remember this is actually that right okay yeah so it's just flattening it out so it's
[00:43:35.960 --> 00:43:50.680]   not weird oh
[00:43:50.680 --> 00:44:03.640]   yeah so you've got to be careful to remember that although it prints this like a word nine it's
[00:44:03.640 --> 00:44:06.440]   actually these are just characters
[00:44:06.440 --> 00:44:12.680]   n i n and e that's why this shape is 13
[00:44:12.680 --> 00:44:24.680]   okay
[00:44:24.680 --> 00:44:33.720]   so
[00:44:51.640 --> 00:44:57.560]   member of a b c four
[00:44:57.560 --> 00:45:01.880]   is that
[00:45:01.880 --> 00:45:13.400]   is it an okay so is a b c an element of this set no it's not is for an element of this set
[00:45:13.400 --> 00:45:16.680]   yes it is so we get zero one
[00:45:16.680 --> 00:45:25.080]   uh and then this is just saying um is
[00:45:25.080 --> 00:45:33.880]   each element of the matrix an element of this set and it puts them in the same order so
[00:45:33.880 --> 00:45:40.120]   one is not an element two is an element three is not an element so forth
[00:45:41.880 --> 00:45:50.840]   makes sense so if you if you kind of reversed that and did um like one two three epsilon matt
[00:45:50.840 --> 00:45:58.680]   would it be searching like the major cells of if matt was on the um the right hand side
[00:45:58.680 --> 00:46:08.040]   yeah so it's saying okay so still looking cell-wise it's not looking at major cells
[00:46:08.840 --> 00:46:17.000]   saying is six anywhere in that matrix i think yeah two anywhere in the matrix
[00:46:17.000 --> 00:46:23.560]   yeah exactly so i think the right the the rank of the right hand side seems totally meaningless
[00:46:23.560 --> 00:46:33.400]   okay it's just traded as a set
[00:46:35.960 --> 00:46:42.360]   i i also tried with two matrices and got the same behavior that you would expect there cool
[00:46:42.360 --> 00:46:46.520]   thanks boy all right
[00:46:46.520 --> 00:46:56.520]   epsilon underbar
[00:46:56.520 --> 00:47:07.080]   uh
[00:47:07.080 --> 00:47:21.080]   just dyadic
[00:47:21.080 --> 00:47:21.160]   you
[00:47:21.160 --> 00:47:21.240]   you
[00:47:21.240 --> 00:47:21.320]   you
[00:47:21.320 --> 00:47:21.400]   you
[00:47:21.400 --> 00:47:21.480]   you
[00:47:21.480 --> 00:47:21.560]   you
[00:47:21.560 --> 00:47:21.640]   you
[00:47:21.640 --> 00:47:21.720]   you
[00:47:21.720 --> 00:47:21.800]   you
[00:47:21.800 --> 00:47:21.880]   you
[00:47:21.880 --> 00:47:21.960]   you
[00:47:21.960 --> 00:47:22.040]   you
[00:47:22.040 --> 00:47:22.120]   you
[00:47:22.120 --> 00:47:22.200]   you
[00:47:22.200 --> 00:47:22.280]   you
[00:47:22.280 --> 00:47:22.360]   you
[00:47:22.360 --> 00:47:22.440]   you
[00:47:22.440 --> 00:47:22.520]   you
[00:47:22.520 --> 00:47:22.600]   you
[00:47:22.600 --> 00:47:22.680]   you
[00:47:22.680 --> 00:47:22.760]   you
[00:47:22.760 --> 00:47:22.840]   you
[00:47:22.840 --> 00:47:22.920]   you
[00:47:22.920 --> 00:47:23.000]   you
[00:47:23.000 --> 00:47:23.080]   you
[00:47:23.080 --> 00:47:23.160]   you
[00:47:23.160 --> 00:47:23.240]   you
[00:47:23.240 --> 00:47:23.320]   you
[00:47:23.320 --> 00:47:23.400]   you
[00:47:23.400 --> 00:47:23.480]   you
[00:47:23.480 --> 00:47:23.560]   you
[00:47:23.560 --> 00:47:23.640]   you
[00:47:23.640 --> 00:47:23.720]   you
[00:47:23.720 --> 00:47:23.800]   you
[00:47:23.800 --> 00:47:23.880]   you
[00:47:23.880 --> 00:47:23.960]   you
[00:47:23.960 --> 00:47:24.040]   you
[00:47:24.040 --> 00:47:24.120]   you
[00:47:24.120 --> 00:47:24.200]   you
[00:47:24.200 --> 00:47:24.280]   you
[00:47:24.280 --> 00:47:24.360]   you
[00:47:24.360 --> 00:47:24.440]   you
[00:47:24.440 --> 00:47:24.520]   you
[00:47:24.520 --> 00:47:24.600]   you
[00:47:24.600 --> 00:47:24.680]   you
[00:47:24.680 --> 00:47:26.760]   you
[00:47:26.760 --> 00:47:28.840]   you
[00:47:28.840 --> 00:47:30.920]   you
[00:47:57.560 --> 00:48:02.840]   okay where is a in oh is a no uh
[00:48:02.840 --> 00:48:18.840]   is b and um a and a is a and a is and i think it's going okay wait no because n is in both
[00:48:18.840 --> 00:48:31.080]   and that would be zero and that's zero so it should be so i was wrong
[00:48:31.080 --> 00:48:43.080]   yeah worked for the first two it finds occurrences of x within y
[00:48:43.080 --> 00:48:58.760]   oh okay the whole of x anna is here
[00:48:58.760 --> 00:49:02.600]   and anna is
[00:49:02.600 --> 00:49:10.600]   okay and we're going to try to give the easy examples
[00:49:10.600 --> 00:49:31.560]   okay there we go
[00:49:31.560 --> 00:49:36.520]   yeah
[00:49:36.520 --> 00:49:45.000]   yeah okay
[00:49:45.000 --> 00:49:52.520]   how do we create this thing x is
[00:49:56.280 --> 00:50:04.200]   okay x one is two by two
[00:50:04.200 --> 00:50:10.920]   oh one one oh
[00:50:10.920 --> 00:50:13.720]   x two
[00:50:16.600 --> 00:50:33.080]   is four by four oh one oh one one oh oh one oh i see
[00:50:33.080 --> 00:50:41.400]   that's what we want
[00:50:41.400 --> 00:50:57.720]   wait what's
[00:50:57.720 --> 00:51:06.600]   oh that's x and y never mind x
[00:51:08.600 --> 00:51:12.760]   y
[00:51:12.760 --> 00:51:24.680]   all right oh i see so it's finding where is like this oh where is this like one one diagonal
[00:51:24.680 --> 00:51:33.400]   and you can find it here here and here since there are the ones okay
[00:51:33.400 --> 00:51:40.360]   okay
[00:51:40.360 --> 00:51:48.280]   makes sense yeah i think the the apl wiki seems to have a kind of a
[00:51:48.280 --> 00:51:53.880]   i think a better explanation of it but
[00:51:53.880 --> 00:51:59.560]   the inquiry maybe you guys already talked about that i've been i've been in and out of the
[00:51:59.560 --> 00:52:11.080]   discussions um no we hadn't thanks buddy
[00:52:11.080 --> 00:52:19.080]   okay
[00:52:25.160 --> 00:52:32.680]   great
[00:52:32.680 --> 00:52:42.040]   why is there an n here is that actually the little n
[00:52:42.040 --> 00:52:49.000]   oh no let's see the other shoe on that one and children we've done
[00:52:52.680 --> 00:53:00.280]   this first two might go under the math i think might go in math yeah i think there's the circle
[00:53:00.280 --> 00:53:08.280]   star is um log and natural log and the domino looking thing is matrix division and matrix
[00:53:08.280 --> 00:53:15.800]   inversion i think okay matrix we're going to have to do after we've done rank certainly log we can do
[00:53:22.040 --> 00:53:43.160]   circles oh that's easy
[00:53:43.160 --> 00:53:49.160]   did i have to type it
[00:53:49.160 --> 00:53:57.080]   i think it is um the back tick star thing
[00:53:57.080 --> 00:54:10.280]   oh or alt star now to me
[00:54:10.280 --> 00:54:15.320]   not a great rendering here
[00:54:15.320 --> 00:54:24.440]   yeah
[00:54:43.800 --> 00:54:45.720]   i think rather than writing that i'd rather write
[00:54:45.720 --> 00:54:52.920]   a to the power one
[00:54:52.920 --> 00:55:06.920]   cool
[00:55:06.920 --> 00:55:14.040]   okay
[00:55:14.040 --> 00:55:32.040]   there we go
[00:55:35.800 --> 00:55:37.080]   domino quad divi
[00:55:37.080 --> 00:55:42.680]   matrix inverse and matrix division by
[00:55:42.680 --> 00:55:45.720]   okay
[00:55:45.720 --> 00:55:56.920]   but i'll write them down and then we can put them somewhere
[00:55:57.880 --> 00:56:04.040]   all right
[00:56:04.040 --> 00:56:13.000]   and how do i take this one molly no
[00:56:13.000 --> 00:56:25.160]   or anybody i believe it's um the um plus so it's the same as division but with the shift key i think
[00:56:25.160 --> 00:56:37.880]   that one um i think so that doesn't quite look right does it uh that was sorry is that sorry
[00:56:37.880 --> 00:56:52.280]   that was alt shift slash uh alt shift plus or oh sorry cool
[00:56:52.280 --> 00:57:03.400]   okay
[00:57:03.400 --> 00:57:19.400]   is there some way to get a good what's a good easy way to get an identity matrix
[00:57:19.400 --> 00:57:28.520]   um
[00:57:28.520 --> 00:57:31.400]   i did not have a blog
[00:57:31.400 --> 00:57:37.800]   oh well i i used it i don't know that i uh
[00:57:37.800 --> 00:57:44.520]   and how i got there
[00:57:44.520 --> 00:57:51.640]   yeah
[00:57:51.640 --> 00:57:58.760]   yeah
[00:58:21.240 --> 00:58:27.880]   here was um i'll put in the chat when my identity function was why is this not working
[00:58:27.880 --> 00:58:37.560]   have i got it the wrong way around i think i do actually yes
[00:58:37.560 --> 00:58:46.360]   oh there's a few things happening in the chat i noticed
[00:58:46.360 --> 00:58:53.480]   so
[00:58:53.480 --> 00:59:05.320]   i guess it's fine anyway we can see easily enough it's
[00:59:05.320 --> 00:59:09.480]   that's the invert that's the identity
[00:59:09.480 --> 00:59:16.600]   oh
[00:59:16.600 --> 00:59:26.600]   okay
[00:59:31.960 --> 00:59:39.080]   dyadic
[00:59:39.080 --> 00:59:44.520]   i'm not really sure what matrix division means
[00:59:44.520 --> 00:59:53.080]   very few
[00:59:53.800 --> 01:00:00.200]   okay
[01:00:00.200 --> 01:00:20.200]   now
[01:00:20.200 --> 01:00:27.320]   so
[01:00:27.320 --> 01:00:37.720]   oh i think i'm using x instead of the dash
[01:00:37.720 --> 01:00:49.640]   okay i haven't quite heard that expression matrix division before but it makes sense
[01:00:50.600 --> 01:00:58.760]   it's just the opposite of matrix modification
[01:00:58.760 --> 01:01:16.280]   oh cool the pseudoinverses as well if there's more rows and columns the least squares result
[01:01:17.720 --> 01:01:19.560]   so i think that's just what's called the pseudo inverse
[01:01:19.560 --> 01:01:26.840]   it's neat okay linear regression on complex numbers why not
[01:01:26.840 --> 01:01:42.200]   oh lots of things to study there
[01:01:45.640 --> 01:01:50.280]   all right probably a good time to stop
[01:01:50.280 --> 01:01:57.160]   i thought we've done dot or if we already done it in
[01:01:57.160 --> 01:02:02.200]   this one situation what do we not do it at all
[01:02:02.200 --> 01:02:14.680]   i'm not sure we've done it um no that's bad because i've definitely referred to it
[01:02:15.560 --> 01:02:23.720]   um yeah i think we talked about it a bit um okay well let's pop it underneath a ray
[01:02:23.720 --> 01:02:35.320]   rank but i don't know that we
[01:02:35.320 --> 01:02:39.320]   linear algebra
[01:02:39.320 --> 01:02:45.960]   algebra
[01:02:45.960 --> 01:02:53.240]   let's quickly do this then
[01:02:53.240 --> 01:03:00.920]   before we finish dot
[01:03:00.920 --> 01:03:07.720]   which is a operator oh it's an operator
[01:03:07.720 --> 01:03:22.360]   so we cut through it here
[01:03:22.360 --> 01:03:37.000]   okay let's put it over here
[01:03:37.720 --> 01:03:49.640]   let's put it over here
[01:03:49.640 --> 01:04:02.280]   okay
[01:04:03.160 --> 01:04:12.920]   okay
[01:04:12.920 --> 01:04:23.560]   so
[01:04:23.560 --> 01:04:34.200]   dot
[01:04:35.160 --> 01:04:35.160]   dot
[01:04:35.160 --> 01:04:44.840]   all right
[01:04:44.840 --> 01:04:55.480]   okay
[01:04:55.480 --> 01:05:04.120]   so
[01:05:04.120 --> 01:05:10.760]   you
[01:05:10.920 --> 01:05:11.500]   you
[01:05:11.500 --> 01:05:12.140]   you
[01:05:12.140 --> 01:05:12.780]   you
[01:05:12.780 --> 01:05:13.420]   you
[01:05:13.420 --> 01:05:16.060]   you
[01:05:16.060 --> 01:05:18.700]   you
[01:05:43.180 --> 01:05:49.980]   okay so this is a dot product one times four plus two times five plus three times six
[01:05:49.980 --> 01:06:01.820]   this is interesting
[01:06:08.620 --> 01:06:15.660]   so this is um and isn't it so this is three equals three and three equals three and three
[01:06:15.660 --> 01:06:18.780]   equals three and three equals three if i did this would be zero
[01:06:18.780 --> 01:06:29.260]   that's cool
[01:06:29.260 --> 01:06:34.860]   for example
[01:06:34.860 --> 01:06:34.940]   you
[01:06:34.940 --> 01:06:35.020]   you
[01:06:35.020 --> 01:06:35.100]   you
[01:06:35.100 --> 01:06:35.180]   you
[01:06:35.180 --> 01:06:35.260]   you
[01:06:35.260 --> 01:06:35.340]   you
[01:06:35.340 --> 01:06:35.420]   you
[01:06:35.420 --> 01:06:35.500]   you
[01:06:35.500 --> 01:06:35.580]   you
[01:06:35.580 --> 01:06:35.660]   you
[01:06:35.660 --> 01:06:35.740]   you
[01:06:35.740 --> 01:06:35.820]   you
[01:06:35.820 --> 01:06:35.900]   you
[01:06:35.900 --> 01:06:35.980]   you
[01:06:35.980 --> 01:06:36.060]   you
[01:06:36.060 --> 01:06:36.140]   you
[01:06:36.140 --> 01:06:36.220]   you
[01:06:36.220 --> 01:06:36.300]   you
[01:06:36.300 --> 01:06:36.380]   you
[01:06:36.380 --> 01:06:36.460]   you
[01:06:36.460 --> 01:06:36.540]   you
[01:06:36.540 --> 01:06:36.620]   you
[01:06:36.620 --> 01:06:36.700]   you
[01:06:36.700 --> 01:06:36.780]   you
[01:06:36.780 --> 01:06:36.860]   you
[01:06:36.860 --> 01:06:36.940]   you
[01:06:36.940 --> 01:06:37.020]   you
[01:06:37.020 --> 01:06:37.100]   you
[01:06:37.100 --> 01:06:37.180]   you
[01:06:37.180 --> 01:06:37.260]   you
[01:06:37.260 --> 01:06:37.340]   you
[01:06:37.340 --> 01:06:37.420]   you
[01:06:37.420 --> 01:06:37.500]   you
[01:06:37.500 --> 01:06:37.580]   you
[01:06:37.580 --> 01:06:37.660]   you
[01:06:37.660 --> 01:06:37.740]   you
[01:06:37.740 --> 01:06:37.820]   you
[01:06:37.820 --> 01:06:37.900]   you
[01:06:37.900 --> 01:06:37.980]   you
[01:06:37.980 --> 01:06:38.060]   you
[01:06:38.060 --> 01:06:38.140]   you
[01:06:38.140 --> 01:06:38.220]   you
[01:06:38.220 --> 01:06:38.300]   you
[01:06:38.300 --> 01:06:38.380]   you
[01:06:38.380 --> 01:06:38.460]   you
[01:06:38.460 --> 01:06:38.540]   you
[01:06:38.540 --> 01:06:38.620]   you
[01:06:38.620 --> 01:06:40.700]   you
[01:06:40.700 --> 01:06:42.780]   you
[01:06:42.780 --> 01:06:44.860]   you
[01:06:44.860 --> 01:06:46.940]   you
[01:06:46.940 --> 01:06:54.540]   you
[01:07:12.540 --> 01:07:32.140]   you
[01:07:32.140 --> 01:07:34.620]   and so you could
[01:07:34.620 --> 01:07:42.780]   let's see i'm reading my own blog post trying to figure out what it means so
[01:07:42.780 --> 01:07:48.380]   good
[01:07:48.380 --> 01:08:06.140]   well let's maybe just put it in the forums right after we do it
[01:08:10.220 --> 01:08:21.820]   and so then they had uh oh yeah then they got a special case
[01:08:21.820 --> 01:08:29.420]   so
[01:08:29.420 --> 01:08:50.700]   actually didn't we do that in the competition thing
[01:08:51.100 --> 01:08:55.100]   because we were doing that oh or maybe we just played with it but we
[01:08:55.100 --> 01:08:56.860]   ended up getting rid of it
[01:08:56.860 --> 01:09:06.780]   i remember we talked about outer product for that gene example
[01:09:06.780 --> 01:09:17.580]   but um yeah i think i messed it up and didn't quite get it working so that's fine
[01:09:17.580 --> 01:09:38.300]   all right i think that's it thanks all good to see you
[01:09:40.380 --> 01:09:48.140]   bye bye thanks bye

