
[00:00:00.000 --> 00:00:03.360]   [MUSIC PLAYING]
[00:00:03.360 --> 00:00:06.200]   Hello.
[00:00:06.200 --> 00:00:09.200]   Today, I'm excited to introduce Webhook Automations
[00:00:09.200 --> 00:00:11.000]   and Weights and Biases.
[00:00:11.000 --> 00:00:14.560]   This is going to allow teams to integrate CI/CD tools,
[00:00:14.560 --> 00:00:16.960]   like GitHub Actions, with the Weights and Biases model
[00:00:16.960 --> 00:00:20.680]   registry and facilitate clean handoff between ML development
[00:00:20.680 --> 00:00:22.240]   and ML deployment.
[00:00:22.240 --> 00:00:24.120]   To set up a webhook, you first need
[00:00:24.120 --> 00:00:26.560]   to create a secret so that Weights and Biases can
[00:00:26.560 --> 00:00:31.000]   authenticate to an external tool, like GitHub Actions.
[00:00:31.000 --> 00:00:32.460]   Weights and Biases has a secret store
[00:00:32.460 --> 00:00:33.880]   where you can add this information
[00:00:33.880 --> 00:00:36.840]   and access it in the webhook.
[00:00:36.840 --> 00:00:40.320]   Next, we're going to add the webhook, which is just simply
[00:00:40.320 --> 00:00:44.240]   the URL and secret combination that we'll use and configure
[00:00:44.240 --> 00:00:45.240]   later with the payload.
[00:00:45.240 --> 00:00:53.880]   Next, we'll need to go to the model registry
[00:00:53.880 --> 00:00:56.040]   and configure the automation for a registered model
[00:00:56.040 --> 00:00:58.360]   that we care about.
[00:00:58.360 --> 00:01:00.820]   I'm going to choose this nature classification model, which
[00:01:00.820 --> 00:01:04.240]   has several models that have been trained over time.
[00:01:04.240 --> 00:01:06.740]   As we can see here, we have a staging model and a production
[00:01:06.740 --> 00:01:08.480]   model.
[00:01:08.480 --> 00:01:10.200]   Automations will come in handy in being
[00:01:10.200 --> 00:01:14.080]   able to hand off the production model to CI/CD
[00:01:14.080 --> 00:01:17.740]   to be containerized in an imprint server.
[00:01:17.740 --> 00:01:19.860]   Viewing details, we can understand a little bit more
[00:01:19.860 --> 00:01:25.280]   about this model, where it came from, and how it was built.
[00:01:25.280 --> 00:01:29.040]   Creating an automation, we can determine
[00:01:29.040 --> 00:01:31.400]   which event type in the model registry
[00:01:31.400 --> 00:01:33.840]   will trigger the webhook.
[00:01:33.840 --> 00:01:36.600]   Here we have two options, one when a new model is added
[00:01:36.600 --> 00:01:40.480]   to this registered model, or when an artifact alias is
[00:01:40.480 --> 00:01:42.720]   added to a particular model version,
[00:01:42.720 --> 00:01:44.840]   such as when the production alias is added
[00:01:44.840 --> 00:01:47.680]   to a particular model version.
[00:01:47.680 --> 00:01:49.640]   I'm going to select that one.
[00:01:49.640 --> 00:01:52.680]   And in particular, I'm going to choose the production alias.
[00:01:52.680 --> 00:01:55.120]   Whenever the production alias is added to a particular model
[00:01:55.120 --> 00:01:58.680]   version, this webhook will trigger.
[00:01:58.680 --> 00:02:03.360]   I want this to happen for the nature classification model.
[00:02:03.360 --> 00:02:07.320]   And I want a webhook to trigger when that occurs.
[00:02:07.320 --> 00:02:09.740]   I'm going to select the webhook that I chose before.
[00:02:09.740 --> 00:02:12.520]   And next, I need to add the payload.
[00:02:12.520 --> 00:02:15.320]   We can use template strings to configure
[00:02:15.320 --> 00:02:16.960]   what context from weights and biases
[00:02:16.960 --> 00:02:20.400]   we want to pass to the webhook, and therefore to GitHub
[00:02:20.400 --> 00:02:21.120]   Actions.
[00:02:21.120 --> 00:02:23.040]   I'm going to paste this payload here.
[00:02:23.040 --> 00:02:26.080]   Here we're passing the event type, along with the production
[00:02:26.080 --> 00:02:30.960]   model artifact string, along with the weights and biases
[00:02:30.960 --> 00:02:32.560]   entity.
[00:02:32.560 --> 00:02:34.800]   Our GitHub Action will use this context later on
[00:02:34.800 --> 00:02:38.320]   to pull the model and put it into a containerized inference
[00:02:38.320 --> 00:02:38.820]   server.
[00:02:38.820 --> 00:02:48.280]   Now that the automation has been created,
[00:02:48.280 --> 00:02:51.160]   we can go to our staging model.
[00:02:51.160 --> 00:02:52.640]   Let's add the production alias.
[00:02:52.640 --> 00:02:59.240]   And with that, you'll notice that this production
[00:02:59.240 --> 00:03:00.240]   alias is purple.
[00:03:00.240 --> 00:03:01.080]   It's protected.
[00:03:01.080 --> 00:03:05.880]   So only model registry admins can make this change.
[00:03:05.880 --> 00:03:11.000]   When I made that change, that triggered GitHub Action
[00:03:11.000 --> 00:03:16.600]   to consume that model artifact, containerize it
[00:03:16.600 --> 00:03:19.560]   into a TorchServe inference server,
[00:03:19.560 --> 00:03:21.000]   and deploy it to Kubernetes.
[00:03:21.000 --> 00:03:27.200]   So with Webhook Automations, you can facilitate clean handoff
[00:03:27.200 --> 00:03:30.000]   of model artifacts from model development
[00:03:30.000 --> 00:03:32.960]   to model deployment and testing.
[00:03:32.960 --> 00:03:36.320]   [MUSIC PLAYING]
[00:03:36.880 --> 00:03:39.920]   [TYPING]
[00:03:40.520 --> 00:03:43.880]   [MUSIC PLAYING]
[00:03:43.880 --> 00:03:45.880]   You

