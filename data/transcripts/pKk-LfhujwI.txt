
[00:00:00.500 --> 00:00:13.320]   SPEAKER 1: Hey, I'm Connor.
[00:00:13.320 --> 00:00:15.940]   I'm the co-founder and CTO of Unify.
[00:00:15.940 --> 00:00:16.560]   I'm Kanaal.
[00:00:16.560 --> 00:00:19.840]   I'm an engineer at Unify.
[00:00:19.840 --> 00:00:22.600]   SPEAKER 1: Awesome.
[00:00:22.600 --> 00:00:24.040]   Some quick background on Unify.
[00:00:24.040 --> 00:00:25.960]   We're building an AI system of action
[00:00:25.960 --> 00:00:29.640]   that lets companies grow revenue in a repeatable, observable,
[00:00:29.640 --> 00:00:34.400]   and scalable way, generate pipeline and find new business.
[00:00:34.400 --> 00:00:37.680]   A key belief that we have is that growth should be a science
[00:00:37.680 --> 00:00:41.560]   and that the best products foundationally should win.
[00:00:41.560 --> 00:00:44.960]   An insight that we had was that foundationally go-to-market
[00:00:44.960 --> 00:00:46.640]   is a search problem.
[00:00:46.640 --> 00:00:50.400]   It's about finding people and companies that have a problem
[00:00:50.400 --> 00:00:53.820]   that you uniquely solve.
[00:00:53.820 --> 00:00:56.940]   Historically, in order to run this search problem
[00:00:56.940 --> 00:00:59.280]   over huge amounts of unstructured, semantically rich
[00:00:59.280 --> 00:01:02.040]   data, you had to deploy people.
[00:01:02.040 --> 00:01:03.040]   You have a sales team.
[00:01:03.040 --> 00:01:04.040]   They do research.
[00:01:04.040 --> 00:01:09.600]   But in the world of LLMs and AI, you can now do that in code.
[00:01:09.600 --> 00:01:12.680]   You can get a bunch of great benefits like repeatability,
[00:01:12.680 --> 00:01:16.040]   observability, scalability that historically you couldn't get.
[00:01:16.040 --> 00:01:18.040]   How do you run this research?
[00:01:18.040 --> 00:01:22.800]   Well, you run it with agents.
[00:01:22.800 --> 00:01:26.000]   Here's what that looks like in our product.
[00:01:26.000 --> 00:01:29.720]   We take customer questions and figure out a way to answer those questions
[00:01:29.720 --> 00:01:33.800]   using internet data and sort of open research.
[00:01:33.800 --> 00:01:35.800]   We ask our customers for two things.
[00:01:35.800 --> 00:01:42.560]   One, a list of questions that they want answered about a specific company or person with defined outputs.
[00:01:42.560 --> 00:01:46.120]   So that might be text, enum, Boolean.
[00:01:46.120 --> 00:01:49.560]   And then we ask them to provide some guidance.
[00:01:49.560 --> 00:01:55.320]   That's a free-form text field that lets you describe, sort of like how you would describe to a high schooler,
[00:01:55.320 --> 00:01:57.920]   how they should go about the actual research.
[00:01:57.920 --> 00:02:06.320]   This agent then runs on thousands or tens of thousands of companies, answers those questions in an engine called plays,
[00:02:06.320 --> 00:02:13.080]   and helps you send targeted sales outreach to those companies in a timely manner.
[00:02:13.080 --> 00:02:16.200]   Some examples of things that our customers will research.
[00:02:16.200 --> 00:02:19.560]   One, when did this company last have downtime?
[00:02:19.560 --> 00:02:23.800]   Maybe if you're selling an incident response tool, you want to know if they've had downtime and speak to that.
[00:02:23.800 --> 00:02:32.560]   Or if you're selling a login tool or an auth tool, maybe you want to find times where customers are complaining about login experiences,
[00:02:32.560 --> 00:02:36.280]   bad login experiences, find some links to it and include that in a timely email.
[00:02:36.280 --> 00:02:40.760]   We run quite a few agents.
[00:02:40.760 --> 00:02:43.840]   We're pushing a lot of tokens through open AI.
[00:02:43.840 --> 00:02:50.160]   In April, we pushed 36 billion tokens, and that has increased pretty quickly every month since.
[00:02:50.160 --> 00:02:59.600]   We've learned a lot in doing this, and so we thought it would be fun to share some practical learnings of running these really generalized research agents at scale.
[00:02:59.600 --> 00:03:02.720]   Thanks, Connor.
[00:03:02.720 --> 00:03:08.200]   So going back all the way to November, the first thing we did was build the version one of our agent.
[00:03:08.200 --> 00:03:18.200]   And so Sam, one of our founding engineers, and Connor both took cracks at it using the React framework, which most of you are probably familiar with by now, but just is reasoning and then acting.
[00:03:18.200 --> 00:03:23.680]   So it allows for, like, corrective and reactive actions over the course of an agent's trajectory.
[00:03:23.680 --> 00:03:31.680]   So Connor and Sam both built versions of this framework, but they also built it with three core tools: searching the Internet, searching a website, and scraping a website.
[00:03:31.680 --> 00:03:37.160]   So you can see here on the left we have Sambot Mark1 and ConnorAgent.
[00:03:37.160 --> 00:03:42.160]   We named all of our agents here, and you can see the differences in the architecture.
[00:03:42.160 --> 00:03:49.160]   The key differences here is that Sam chose to use a weaker and faster model, 4.0, for generating the plan and revising the plan.
[00:03:49.160 --> 00:04:01.640]   And Connor chose to use 01 preview, which was the reasoning model at the time, and to generate a stronger plan, hopefully, and then lead both -- or both lead to this agentic tool use loop.
[00:04:01.640 --> 00:04:05.640]   After we built those, the first thing we wanted to know is, how do we know which one is better?
[00:04:05.640 --> 00:04:14.320]   So before we built any evals or any metrics, we spent a lot of time looking at the traces to see -- and the trajectories -- to see, okay, which one's working better?
[00:04:14.320 --> 00:04:19.120]   And what we found initially is that 01 produced much more thorough research plans.
[00:04:19.120 --> 00:04:24.880]   So you can see here on the left we have 01 preview, and on the right we have 4.0.
[00:04:24.880 --> 00:04:33.760]   You can see 01 preview and 01 are given the same prompt, and for 01 preview you have around 1,600 tokens, and only 600 for 4.0.
[00:04:33.760 --> 00:04:45.400]   If we want to zoom into this plan, we can see for a specific question, which is one of the questions in the prompt, the difference in quality and specificity of output for 01 preview versus 4.0.
[00:04:45.400 --> 00:04:54.880]   So you can see we've outlined how to answer the question in 01, potential mistakes or pitfalls in 01, and also, like, even the value type or the structured output that was provided.
[00:04:56.800 --> 00:05:10.440]   And so what we found actually from these plans is that this increase in specificity and actually just general verbosity helped the agent improve outcomes downstream of this initial planning phase.
[00:05:10.440 --> 00:05:16.440]   But after we did this kind of vibe check, we started to build actual evals.
[00:05:16.440 --> 00:05:23.280]   We started with just accuracy, which was just a percentage of questions answered correctly, and then hand-labeled a bunch of data sets.
[00:05:23.280 --> 00:05:29.920]   So I actually hand-labeled probably, like, 500 examples across, you know, 100 companies for each of these five core data sets.
[00:05:29.920 --> 00:05:34.920]   And we picked these data sets based off of what we thought the customers at the time would use our agent for.
[00:05:34.920 --> 00:05:44.040]   So things like, is this company B2B or B2C, firmographics and technographics, so that they can deploy these agents and accurately get answers about these companies.
[00:05:44.040 --> 00:05:51.680]   And when we picked ConorAgent and Sandbot Mark 1 head to head, you can see ConorAgent came out on top.
[00:05:51.680 --> 00:05:58.680]   It kind of beat out Sandbot in most of these categories, and the margin was pretty significant for these tasks.
[00:05:58.680 --> 00:06:02.680]   So what did we learn from these initial evals?
[00:06:02.680 --> 00:06:09.320]   So like I mentioned earlier, you know, these reasoning models had an outsized impact on downstream actions and downstream accuracy.
[00:06:09.320 --> 00:06:16.320]   And then we also learned that accuracy-based evaluations were a good heuristic for how good an agent is doing.
[00:06:16.320 --> 00:06:22.320]   But between that and actually still having to look at the traces, we didn't have clear insights into where to go from here.
[00:06:22.320 --> 00:06:28.960]   So we know these are the metrics that these agents produce, but how do we improve the agents?
[00:06:28.960 --> 00:06:32.880]   And so we thought about three core axes for how do we improve these agents.
[00:06:32.880 --> 00:06:39.680]   One is like changing the graph of the architecture, two is changing the models and the prompts, and then three was adding more tools.
[00:06:39.680 --> 00:06:47.960]   So we spent a lot of time reflecting on the customer use cases, customer needs at the time, and we wanted to enable like a lot of these initial workflows with these changes.
[00:06:47.960 --> 00:06:55.960]   So we picked changing the models in the prompt and adding more tools as the first two areas that we wanted to invest in for improvements.
[00:06:55.960 --> 00:07:03.400]   So I'll talk a little bit about a couple of the cool learnings we had from doing model and prompt changes.
[00:07:03.400 --> 00:07:07.320]   So the first thing we want to do is kind of optimize for performance and cost.
[00:07:07.320 --> 00:07:11.400]   01, 03, and 01 Preview were pretty expensive, and they were also pretty slow.
[00:07:11.400 --> 00:07:17.160]   So, and also in the start of this year, seemingly new models were coming out like week after week.
[00:07:17.160 --> 00:07:21.160]   So you're often just plugging in a new model and trying to see if it was better or not.
[00:07:21.160 --> 00:07:26.920]   And what was interesting is that we didn't really see a huge difference until 4.1 came out recently,
[00:07:26.920 --> 00:07:31.160]   and that's the only model we replaced 01 with in production for agentic planning.
[00:07:31.160 --> 00:07:36.520]   And the outcome of this change was that an initial agent run that used to cost around 35 cents
[00:07:36.520 --> 00:07:40.360]   now costs around 10 cents with 4.1 with similar performance.
[00:07:41.800 --> 00:07:49.800]   You can see here the number of other models that we tried and why 4.1 is the best or most cost effective model for our planning and our agent.
[00:07:49.800 --> 00:07:53.560]   And we tried even Deep Seek, Cloud 3.7, Gemini 2.5 recently.
[00:07:53.560 --> 00:07:57.800]   And one thing to know, I guess, for Deep Seek was that when it came out, it was really promising.
[00:07:57.800 --> 00:08:05.800]   But it was only until probably like a week or two ago when latency was down to an acceptable threshold or similar to like 01 for these tasks.
[00:08:05.800 --> 00:08:19.000]   Another thing we came across was date formatting, which is pretty interesting, where we had a bunch of models fail to correctly identify what date was in the future, just because of the format it was in.
[00:08:19.000 --> 00:08:32.280]   So we saw that 4.0 struggled with something like 5.14, 2025 at 3 versus May 15th, 2024, because the day was in the future, it actually thought that the date of 2024 was in the future as well.
[00:08:32.280 --> 00:08:42.680]   So we've done some adjustments and prompting just by providing actually different versions of the date and improve the performance and standardize accuracy on a date-based task across models.
[00:08:44.040 --> 00:08:46.440]   And the last main thing was how do we improve tool calling?
[00:08:46.440 --> 00:08:54.600]   This is something we're still working on, but initially the huge problem was that agents were making throwaway tool calls, something like searching for B2B, just generally.
[00:08:54.600 --> 00:09:07.240]   So what we did is we ended up changing a lot of the Pydantic models for these input schemas for tools to force the tool calling node or tool calling agent to change the input schema and think a little bit more about what it was calling.
[00:09:08.920 --> 00:09:20.200]   So just overall across prompt and model changes, we learned that, you know, agent costs are going down a lot because we were able to swap 01 to 41 for agentic planning with no notable quality change.
[00:09:20.200 --> 00:09:25.080]   And also we learned there's a ton of edge cases that evals don't necessarily catch.
[00:09:25.080 --> 00:09:33.160]   And even if you build a lot of robust evals, you're probably still going to find yourself looking at the traces to do some kind of human eval or human vibe check.
[00:09:33.160 --> 00:09:38.440]   And that's even notable from OpenAI recently with their changes in the models in ChatGPT.
[00:09:38.440 --> 00:09:42.440]   We also learned models tend to spike in different use cases.
[00:09:42.440 --> 00:09:48.600]   So using a model in planning might not be as effective in tool calling or reflecting or in different parts of your agent workflow.
[00:09:48.600 --> 00:09:51.000]   So you probably want to do some kind of node-based eval.
[00:09:53.000 --> 00:09:55.480]   So the second axis was building more tools.
[00:09:55.480 --> 00:09:58.840]   And we needed to think about what tools we needed to build.
[00:09:58.840 --> 00:10:05.480]   And so we thought about, okay, what use cases can we not support today that we really want to turn on with additional tools?
[00:10:05.480 --> 00:10:11.480]   So what customers can we power new workflows with by adding just a single new tool?
[00:10:13.000 --> 00:10:20.920]   So the four tools that we decided to add because of this were deep internet research, browser access, searching HTML, and dataset access.
[00:10:20.920 --> 00:10:23.800]   And so I'll go through a couple of these.
[00:10:23.800 --> 00:10:28.280]   So why we started with deep internet research is that internet search is still hard.
[00:10:28.280 --> 00:10:35.080]   Between SEO articles on Google and as well as with search grounding with LLMs, with things like OpenAI and perplexity,
[00:10:35.640 --> 00:10:39.960]   you're left with a lot of result qualities out of your hands.
[00:10:39.960 --> 00:10:48.040]   And we also saw that in our agentic use that tools or calls to internet were not being utilized like we would.
[00:10:48.040 --> 00:10:53.560]   So like this is how we would conduct research on the internet before using LLMs.
[00:10:53.560 --> 00:10:56.520]   So we thought about how do we do it today?
[00:10:56.520 --> 00:11:00.680]   So we're pretty good at doing internet research, but we do it fundamentally differently than agents were doing it,
[00:11:00.680 --> 00:11:03.080]   or how our agents were doing it initially.
[00:11:03.080 --> 00:11:07.080]   When you do a search on Google, you might search for a query, look at the top 10 links,
[00:11:07.080 --> 00:11:11.080]   implicitly filter out probably five of those just based on the source,
[00:11:11.080 --> 00:11:15.000]   open a couple of new tabs, maybe read through a couple of sentences on each,
[00:11:15.000 --> 00:11:18.920]   before deciding that you need to do a different search query or that you found your answer.
[00:11:18.920 --> 00:11:22.360]   So we saw that our agents were not mimicking this common behavior,
[00:11:22.360 --> 00:11:25.960]   and we wanted to adjust course to improve agent result quality.
[00:11:25.960 --> 00:11:32.520]   So we upgraded from our initial Pydantic model, which was initially we had a very naive structure,
[00:11:32.520 --> 00:11:36.600]   which is just kind of like a query term, and we've kind of flipped that to include a bunch of other
[00:11:36.600 --> 00:11:42.600]   arguments with things like a category, whether we want to live crawl, including the text in the summary,
[00:11:42.600 --> 00:11:46.280]   and also like maybe constraining like domain or even published at date.
[00:11:46.280 --> 00:11:50.760]   And so by changing all these parameters, we're changing the trajectory of a Google search as well,
[00:11:50.760 --> 00:11:56.920]   from first like reviewing just the preview from an internet search output, which is what we have on the left here,
[00:11:56.920 --> 00:12:01.640]   to after getting both the URL and the actual page content in one tool call.
[00:12:01.640 --> 00:12:10.040]   Sorry, so what this allows us to do is pull in all this content at once and sidestep this issue
[00:12:10.040 --> 00:12:15.000]   that we were seeing with agents picking an answer just based on a Google search preview,
[00:12:15.000 --> 00:12:17.560]   which as we know isn't always reliable or accurate.
[00:12:18.920 --> 00:12:23.400]   So the second main tool we built was browser access. So how do we do it again?
[00:12:23.400 --> 00:12:27.960]   There's a lot of rich data online that scraping isn't able to capture.
[00:12:27.960 --> 00:12:33.320]   So between like online data sources or data sets that require you to enter a query,
[00:12:33.320 --> 00:12:37.080]   interactive search experience, or even things like Google Maps or images,
[00:12:37.080 --> 00:12:39.320]   you can't really capture that content with scraping.
[00:12:39.320 --> 00:12:42.920]   So we wanted to allow our unified agent to use the browser the same way we would.
[00:12:42.920 --> 00:12:47.000]   So we built browser access as a sub-agent.
[00:12:47.000 --> 00:12:52.360]   So we gave this tool, which is basically browser access to this agent.
[00:12:52.360 --> 00:12:57.400]   And what it does is it decomposes the task into a browser trajectory using O4Many,
[00:12:57.400 --> 00:13:00.920]   and then also uses computer use preview to actually action on that.
[00:13:00.920 --> 00:13:03.640]   We evaluated browser use, the open source alternative,
[00:13:03.640 --> 00:13:06.440]   and we found that while it was marginally faster,
[00:13:06.440 --> 00:13:11.640]   it struggled in more complex browser tasks, which led us to use computer use preview instead.
[00:13:11.640 --> 00:13:14.600]   You can see an example of this here.
[00:13:14.600 --> 00:13:18.920]   It's where we try to find if Google has EV parking on site.
[00:13:18.920 --> 00:13:22.040]   And so it eventually ends up using the browser use tool.
[00:13:22.040 --> 00:13:23.320]   It goes to Google Maps.
[00:13:23.320 --> 00:13:29.720]   It ends up using Street View, going through looking for an EV charging station in their parking lot,
[00:13:29.720 --> 00:13:35.880]   and then also flipping to a new tab in the browser to check to see if it has EV.
[00:13:35.880 --> 00:13:41.880]   And on that last page there, it does actually confirm between Google Maps and that page that
[00:13:41.880 --> 00:13:43.400]   there is an EV charging station.
[00:13:43.400 --> 00:13:46.760]   So we learned a lot from these tools.
[00:13:46.760 --> 00:13:51.160]   And one thing we learned was, okay, we can't use this kind of naive approach to internet search.
[00:13:51.160 --> 00:13:55.080]   Internet search in Google is great, but you still need to empower your agent to be able to
[00:13:55.080 --> 00:13:59.960]   look at the data, ingest the right content into context, and then action based off of that context.
[00:14:00.600 --> 00:14:06.440]   Deep search and this pivot to changing and pulling in content at once massively reduced the amount of
[00:14:06.440 --> 00:14:10.360]   misinterpretation we had in internet search and changed how we conducted research.
[00:14:10.360 --> 00:14:16.360]   And these other tools like browser use and searching HTML unlocked completely new use cases for our agent.
[00:14:16.360 --> 00:14:22.360]   So as a result, the new agent or the new champion we have in prod is Kunal Browser Agent.
[00:14:22.360 --> 00:14:25.720]   As you can see, we still kept the name or theme of naming our agents.
[00:14:25.720 --> 00:14:32.360]   So a couple quick next steps is based on these changes in tools, we want to invest a little bit
[00:14:32.360 --> 00:14:36.920]   more time in evals to actually highlight some of these issues that I found just looking through traces
[00:14:36.920 --> 00:14:41.640]   or we found looking at outputs to make this process a little bit more repeatable and scalable.
[00:14:41.640 --> 00:14:50.760]   Awesome. We are solving a lot of interesting agent problems. So if you also want your name in our
[00:14:50.760 --> 00:14:57.320]   code base as an agent, come chat with us after or apply online. We are hiring tons of engineers. Thank you, guys.
[00:14:57.320 --> 00:15:05.320]   Thank you, guys.

