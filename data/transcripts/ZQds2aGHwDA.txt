
[00:00:00.000 --> 00:00:09.420]   So is there differences in your view, not saying which is better or so on, but differences
[00:00:09.420 --> 00:00:13.820]   in the different implementations of C++?
[00:00:13.820 --> 00:00:17.800]   Why are there several sort of maybe naive questions for me?
[00:00:17.800 --> 00:00:21.820]   GCC, Clang, so on.
[00:00:21.820 --> 00:00:24.600]   This is a very reasonable question.
[00:00:24.600 --> 00:00:33.840]   When I designed C++, most languages had multiple implementations.
[00:00:33.840 --> 00:00:40.400]   Because if you run on IBM, if you run on a Sun, if you run on a Motorola, there was just
[00:00:40.400 --> 00:00:46.420]   many, many companies and they each have their own compilation structure and their old compilers.
[00:00:46.420 --> 00:00:50.260]   It was just fairly common that there was many of them.
[00:00:50.260 --> 00:00:58.840]   And I wrote C front, assuming that other people would write compilers for C++ if I was successful.
[00:00:58.840 --> 00:01:06.320]   And furthermore, I wanted to utilize all the backend infrastructures that were available.
[00:01:06.320 --> 00:01:10.200]   I soon realized that my users were using 25 different linkers.
[00:01:10.200 --> 00:01:12.240]   I couldn't write my own linker.
[00:01:12.240 --> 00:01:21.060]   Yes, I could, but I couldn't write 25 linkers and also get any work done on the language.
[00:01:21.060 --> 00:01:28.400]   And so it came from a world where there was many linkers, many optimizers, many compiler
[00:01:28.400 --> 00:01:35.080]   front ends, not to start, but many operating systems.
[00:01:35.080 --> 00:01:41.280]   The whole world was not an 86 and a Linux box or something, whatever is the standard
[00:01:41.280 --> 00:01:42.280]   today.
[00:01:42.280 --> 00:01:45.780]   In the old days, they said a set of X.
[00:01:45.780 --> 00:01:49.580]   So basically I assumed there would be lots of compilers.
[00:01:49.580 --> 00:01:53.700]   It was not a decision that there should be many compilers.
[00:01:53.700 --> 00:01:55.420]   It was just a fact.
[00:01:55.420 --> 00:01:57.620]   That's the way the world is.
[00:01:57.620 --> 00:02:03.260]   And yes, many compilers emerged.
[00:02:03.260 --> 00:02:14.540]   And today there's at least four front ends, Clang, GCC, Microsoft, and EDG.
[00:02:14.540 --> 00:02:16.420]   It is design group.
[00:02:16.420 --> 00:02:24.220]   They supply a lot of the independent organizations and the embedded systems industry.
[00:02:24.220 --> 00:02:27.140]   And there's lots and lots of backends.
[00:02:27.140 --> 00:02:34.020]   We have to think about how many dozen backends there are because different machines have
[00:02:34.020 --> 00:02:39.120]   different things, especially in the embedded world, the machines are very different.
[00:02:39.120 --> 00:02:42.340]   The architectures are very different.
[00:02:42.340 --> 00:02:49.580]   And so having a single implementation was never an option.
[00:02:49.580 --> 00:02:54.660]   Now I also happen to dislike monocultures.
[00:02:54.660 --> 00:02:55.660]   Monocultures?
[00:02:55.660 --> 00:03:03.820]   They are dangerous because whoever owns the monoculture can go stale and there's no competition
[00:03:03.820 --> 00:03:07.140]   and there's no incentive to innovate.
[00:03:07.140 --> 00:03:13.020]   There's a lot of incentive to put barriers in the way of change because, hey, we own
[00:03:13.020 --> 00:03:16.140]   the world and it's a very comfortable world for us.
[00:03:16.140 --> 00:03:19.860]   And who are you to mess with that?
[00:03:19.860 --> 00:03:26.940]   So I really am very happy that there's four front ends for C++.
[00:03:26.940 --> 00:03:34.020]   Clang's great, but GCC was great, but then it got somewhat stale.
[00:03:34.020 --> 00:03:38.660]   Clang came along and GCC is much better now.
[00:03:38.660 --> 00:03:39.660]   Competition is good.
[00:03:39.660 --> 00:03:41.900]   Microsoft is much better now.
[00:03:41.900 --> 00:03:53.100]   So at least a low number of front end puts a lot of pressure on standards compliance
[00:03:53.100 --> 00:03:59.340]   and also on performance and error messages and compile time speed, all this good stuff
[00:03:59.340 --> 00:04:01.940]   that we want.
[00:04:01.940 --> 00:04:09.060]   Do you think, crazy question, there might come along, do you hope there might come along
[00:04:09.060 --> 00:04:17.300]   an implementation of C++ written, given all its history, written from scratch?
[00:04:17.300 --> 00:04:20.100]   So written today from scratch?
[00:04:20.100 --> 00:04:25.780]   Well, Clang and the LLVM is more or less written from scratch.
[00:04:25.780 --> 00:04:30.780]   But there's been C++ 11, 14, 17, 20.
[00:04:30.780 --> 00:04:31.780]   You know, there's been a lot of...
[00:04:31.780 --> 00:04:34.780]   I think sooner or later somebody is going to try again.
[00:04:34.780 --> 00:04:41.660]   There has been attempts to write new C++ compilers and some of them has been used and some of
[00:04:41.660 --> 00:04:43.940]   them has been absorbed into others and such.
[00:04:43.940 --> 00:04:44.820]   Yeah, it'll happen.
[00:04:44.820 --> 00:04:45.320]   Yeah.
[00:04:45.320 --> 00:04:50.320]   Yeah.
[00:04:50.320 --> 00:04:55.320]   Yeah.
[00:04:55.320 --> 00:05:00.320]   Yeah.
[00:05:00.320 --> 00:05:10.320]   [BLANK_AUDIO]

