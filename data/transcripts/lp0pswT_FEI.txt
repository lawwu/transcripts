
[00:00:00.120 --> 00:00:01.680]   - Hi, I'm Robert.
[00:00:01.680 --> 00:00:03.560]   I'm the co-founder and CTO at Wordware.
[00:00:03.560 --> 00:00:06.240]   And at Wordware, I've personally helped hundreds of teams
[00:00:06.240 --> 00:00:08.280]   build reliable AI agents.
[00:00:08.280 --> 00:00:10.560]   I'm here to share a few of the insights that we got,
[00:00:10.560 --> 00:00:12.800]   especially when it comes to tools.
[00:00:12.800 --> 00:00:15.600]   Really, agentic MCPs.
[00:00:15.600 --> 00:00:18.100]   Giving your tools time to think.
[00:00:18.100 --> 00:00:20.740]   Before I worked on LLMs and agents,
[00:00:20.740 --> 00:00:22.380]   I used to work on self-driving cars.
[00:00:22.380 --> 00:00:26.040]   And really, building high reliable systems is in my blood.
[00:00:26.040 --> 00:00:28.440]   So yeah, here we go.
[00:00:28.440 --> 00:00:30.360]   The promise of agents are automated systems
[00:00:30.360 --> 00:00:32.720]   that can take action in the real world on your behalf.
[00:00:32.720 --> 00:00:36.440]   They have all the context they need about you and your team.
[00:00:36.440 --> 00:00:38.400]   And they have the ability to actually interact
[00:00:38.400 --> 00:00:40.660]   with the tools you use and output kind of data
[00:00:40.660 --> 00:00:42.120]   where you need it.
[00:00:42.120 --> 00:00:45.860]   Unfortunately, most of the time they don't really work.
[00:00:45.860 --> 00:00:50.320]   They're often slow, expensive, and unreliable.
[00:00:50.320 --> 00:00:52.540]   I remember an example when MCP first came out
[00:00:52.540 --> 00:00:56.240]   and we hooked up Slack and it spent a bunch of time,
[00:00:56.240 --> 00:00:57.980]   you know, I just want to send a Slack message to Philip,
[00:00:57.980 --> 00:00:59.320]   it being like, hey, I'm using MCP.
[00:00:59.320 --> 00:01:00.820]   It's super cool.
[00:01:00.820 --> 00:01:02.940]   Unfortunately, it then like listed all the users
[00:01:02.940 --> 00:01:05.940]   in the Slack channel, got confused,
[00:01:05.940 --> 00:01:08.100]   tried listing all the channels, tried sending a message,
[00:01:08.100 --> 00:01:10.180]   actually finally found Philip.
[00:01:10.180 --> 00:01:12.100]   It ended up resorting to sending a message
[00:01:12.100 --> 00:01:13.760]   in the general channel being like, hey,
[00:01:13.760 --> 00:01:16.160]   could someone tell Philip MCP is awesome?
[00:01:16.160 --> 00:01:17.840]   Which I thought was kind of amusing,
[00:01:17.840 --> 00:01:20.240]   but also really not what I wanted as a user.
[00:01:20.240 --> 00:01:22.820]   It also took about five minutes to do that.
[00:01:22.820 --> 00:01:26.280]   And the real problem is that these MCPs are often low level wrappers
[00:01:26.280 --> 00:01:29.780]   around these APIs that were not designed for language models.
[00:01:29.780 --> 00:01:33.200]   You know, you get these messy responses that have huge blobs of JSON,
[00:01:33.200 --> 00:01:35.780]   which are great for like deterministic state machines,
[00:01:35.780 --> 00:01:40.980]   but kind of suck in a kind of context pollution for agents.
[00:01:40.980 --> 00:01:44.020]   You get tools that are these tiny scope, you know.
[00:01:44.020 --> 00:01:47.220]   Most of the MCP tools are just a wrap around a function,
[00:01:47.220 --> 00:01:49.320]   and functions were designed for the programmatic world,
[00:01:49.320 --> 00:01:52.560]   where you want to compose a lot of these tasks together
[00:01:52.560 --> 00:01:55.220]   into like sequences of function calls.
[00:01:55.220 --> 00:01:58.420]   That's really hard for an LLM to continue reasoning over multiple calls
[00:01:58.420 --> 00:02:01.300]   and like polluting their context with all different outputs.
[00:02:01.300 --> 00:02:04.120]   It's also a problem when you've got multi-call pagination.
[00:02:04.120 --> 00:02:08.340]   You know, when the API responds and you need to kind of loop over the results
[00:02:08.340 --> 00:02:09.980]   until you get the data you're looking for.
[00:02:09.980 --> 00:02:11.420]   This really pollutes the context window,
[00:02:11.420 --> 00:02:19.140]   but it also means that the LLM has to reason over more and more longer chains of requests.
[00:02:19.140 --> 00:02:20.380]   Authentication is a pain.
[00:02:20.380 --> 00:02:22.460]   You know, it's got a little bit easier with these hosted MCPs,
[00:02:22.460 --> 00:02:26.380]   but still, a lot of the time, you need to have your own API keys.
[00:02:26.380 --> 00:02:30.300]   You need to be like modifying, like creating bots and things.
[00:02:30.300 --> 00:02:31.900]   I'm sure that will go away over the next few months,
[00:02:31.900 --> 00:02:33.580]   but right now it's a bit of a pain.
[00:02:33.580 --> 00:02:37.980]   And yeah, just in general, the agents struggle when there's many tools
[00:02:37.980 --> 00:02:40.220]   or kind of sequences of tools to perform.
[00:02:40.220 --> 00:02:44.300]   It's really hard, you know, every tool you adds more noise to the context window.
[00:02:44.300 --> 00:02:47.420]   A lot of instructions, even just adding a Slack MTP adds eight different tools.
[00:02:47.420 --> 00:02:50.300]   If you add Notion, you add another like 20 different tools.
[00:02:50.300 --> 00:02:55.820]   And those two together, you can do a lot, but it's not like the be-all and end-all of automation.
[00:02:55.820 --> 00:02:58.220]   So how do we solve this?
[00:02:58.220 --> 00:03:02.140]   Well, in my opinion, we add more agency to the tools.
[00:03:02.140 --> 00:03:06.060]   Rather than making these tools very small, think a bit like, you know,
[00:03:06.060 --> 00:03:13.180]   a T-Rex holding a little tiny spanner or like inspect a gadget with like a thousand different tools.
[00:03:13.180 --> 00:03:20.300]   Think of it a bit more like a team of Avengers where, you know, you've got specialized people for different tasks.
[00:03:20.300 --> 00:03:21.820]   You know, you've got the Hulk to smash.
[00:03:21.820 --> 00:03:28.940]   You've got the Hulk eye to fire the arrow off and really do high precision tasks.
[00:03:28.940 --> 00:03:31.340]   And, you know, obviously we all love Iron Man.
[00:03:31.340 --> 00:03:33.820]   He's the best and he's just pretty good at a lot of things.
[00:03:33.820 --> 00:03:34.860]   Maybe that's the main agent.
[00:03:34.860 --> 00:03:35.660]   Who knows?
[00:03:35.660 --> 00:03:38.780]   I'm not sure where this analogy is going, but I'm sure it's an entertaining one.
[00:03:38.780 --> 00:03:44.060]   But really what we want to do is blur the line between what's a tool and what's an agent.
[00:03:44.060 --> 00:03:47.100]   When is an agent just a tool for another agent?
[00:03:47.820 --> 00:03:57.740]   And, you know, give tidy, simple, natural language APIs to these agents such that they get reliable, reusable, high quality outputs.
[00:03:57.740 --> 00:04:00.780]   What I'm going to do is I'm going to demonstrate Wordware's new MCP toolbox.
[00:04:00.780 --> 00:04:04.780]   And this allows you to build agentic MCPs.
[00:04:04.780 --> 00:04:08.860]   You can turn your Wordware workflows into tools for your agents.
[00:04:08.860 --> 00:04:13.180]   And so I'm just going to grab one from the landing page as an example.
[00:04:14.220 --> 00:04:24.900]   And I'm picking this kind of competitor analysis because that's a flow that requires quite a lot of taste, quite a lot of reasoning, and also integration into both Twitter and Notion.
[00:04:24.900 --> 00:04:31.660]   Rather than, you know, finding a Twitter MCP, I just use the kind of Twitter scrape tool, but went to Wordware.
[00:04:31.660 --> 00:04:35.780]   And then I've described what I really want from my competitor analysis.
[00:04:35.780 --> 00:04:37.920]   It's not just a generic whatever the LLM thinks.
[00:04:38.800 --> 00:04:41.520]   It's kind of gone into detail about what I care about.
[00:04:41.520 --> 00:04:46.160]   And I could add even more details about my company and try and work out, you know, where do we differ?
[00:04:46.160 --> 00:04:51.680]   It then creates this analysis, writes the output to Notion, and then returns the URL in the output.
[00:04:51.680 --> 00:04:53.800]   And so I can easily do this.
[00:04:53.800 --> 00:04:56.400]   I can go to mcp.beta.wordware.ai.
[00:04:56.400 --> 00:05:02.760]   So still in the early days, but yeah, we are rolling this out beyond beta fairly soon.
[00:05:03.480 --> 00:05:05.280]   And here's a toolbox I created earlier.
[00:05:05.280 --> 00:05:08.800]   I just added the competitor analysis after publishing this app earlier.
[00:05:08.800 --> 00:05:10.640]   I can enter that to Claude.
[00:05:10.640 --> 00:05:16.660]   And now I can use this tool inside my Claude.
[00:05:16.660 --> 00:05:19.340]   And what's nice about Wordware is you can add multiple tools into this toolbox.
[00:05:19.340 --> 00:05:24.080]   So you can have a bunch of different tools that are grouped together that are all related or entirely disparate.
[00:05:24.080 --> 00:05:26.420]   But you can switch on and off different toolboxes for different tasks.
[00:05:26.640 --> 00:05:33.180]   But maybe let's do something like create a competitor analysis for anaerobic AI.
[00:05:33.180 --> 00:05:38.080]   I hit this and now you can see it's going to use the Wordware tool.
[00:05:38.080 --> 00:05:39.100]   I can allow it once.
[00:05:39.100 --> 00:05:39.820]   I can allow it always.
[00:05:39.820 --> 00:05:41.980]   You know, there's nothing too bad that can go wrong here.
[00:05:41.980 --> 00:05:43.600]   So I'm just going to let it go.
[00:05:43.600 --> 00:05:45.740]   And now it's going to form this competitor analysis.
[00:05:45.740 --> 00:05:51.900]   Here's one I made earlier.
[00:05:53.280 --> 00:05:53.680]   Cool.
[00:05:53.680 --> 00:05:54.480]   So now that's done.
[00:05:54.480 --> 00:05:57.140]   I can grab the link to the Notion page on the competitor analysis.
[00:05:57.140 --> 00:05:58.720]   Open that up.
[00:05:58.720 --> 00:06:03.980]   And we'll see a nicely formatted summary based on all the tweets from Anthropic.
[00:06:03.980 --> 00:06:06.700]   And we can see they care a lot about how they're tweeting.
[00:06:06.700 --> 00:06:08.520]   And so we can learn from their style.
[00:06:08.520 --> 00:06:11.140]   And it's all in my Notion page, nicely formatted.
[00:06:11.140 --> 00:06:14.280]   And exactly where I'd want to find it again.
[00:06:14.280 --> 00:06:15.680]   So it's not just lost in the chats.
[00:06:15.680 --> 00:06:16.460]   So pretty exciting.
[00:06:16.700 --> 00:06:28.140]   We managed to build a highly reliable, highly repeatable, and highly aligned tool that allows our generic agent to be very specific and very powerful for doing that task that we wanted it to do.
[00:06:28.140 --> 00:06:34.780]   And so we've really blurred the line between what's an agent and what's a tool and allowed our agent to offload tasks to something that's more powerful.
[00:06:35.260 --> 00:06:42.360]   Exactly how, you know, we do this already in teams and you have specialists for people, you know, whether it's the Avengers or your team in a company.
[00:06:42.360 --> 00:06:44.240]   You can use Webware Toolbox to build these flows.
[00:06:44.240 --> 00:06:46.540]   You can use anything to build agentic MCPs.
[00:06:46.540 --> 00:06:49.420]   We hope you follow this pattern and give your tools time to think.

