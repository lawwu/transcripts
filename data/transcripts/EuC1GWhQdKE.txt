
[00:00:00.000 --> 00:00:14.180]   Good morning, everyone.
[00:00:14.180 --> 00:00:21.400]   So today, I want to start with a little story.
[00:00:21.400 --> 00:00:24.900]   A short history lesson, if you will.
[00:00:24.900 --> 00:00:26.580]   So, you know, sit back, get comfortable.
[00:00:27.320 --> 00:00:30.120]   I'm going to take us back to the year 1882.
[00:00:30.120 --> 00:00:34.100]   It's the dawn of the electrical revolution, really.
[00:00:34.100 --> 00:00:36.880]   The world's first commercial power plant just opened up.
[00:00:36.880 --> 00:00:40.900]   Electricity, this amazing new force,
[00:00:40.900 --> 00:00:42.780]   is all the rage in the manufacturing industry.
[00:00:42.780 --> 00:00:46.520]   People are claiming that it's going to change everything.
[00:00:46.520 --> 00:00:51.360]   And yet, something very interesting happened around this time.
[00:00:51.360 --> 00:00:54.360]   Or rather, it didn't happen.
[00:00:55.140 --> 00:01:00.280]   You see, despite electricity's obvious superiority in comparison to the traditional techniques at the time,
[00:01:00.280 --> 00:01:04.500]   like steam engines, it didn't immediately improve manufacturing productivity.
[00:01:04.500 --> 00:01:06.440]   Why?
[00:01:07.260 --> 00:01:14.800]   Well, because factory owners were simply trying to replace their old technology with this new technology into an outdated paradigm.
[00:01:14.800 --> 00:01:19.120]   Let's picture a typical factory at the time.
[00:01:19.120 --> 00:01:24.660]   So we have a huge coal-fired steam engine on one end, and we have a network of transmission lines going across the top,
[00:01:24.900 --> 00:01:27.900]   all driving hundreds of machines locked in the same rhythm.
[00:01:27.900 --> 00:01:32.020]   These legacy steam power factories were incredibly inefficient.
[00:01:32.020 --> 00:01:38.100]   You know, if one station needed power, all of a sudden you had to turn on that entire steam engine and it had to power all of them.
[00:01:38.100 --> 00:01:45.840]   Factory layouts were dictated by the limitations of the transmission lines, not by what was best for the process or for the workers.
[00:01:48.380 --> 00:01:53.860]   When electricity arrived, many factory owners simply swapped out the steam engine for an electric one.
[00:01:53.860 --> 00:02:00.100]   And sure, you know, they added some lights and, you know, workers didn't have to toil next to a coal-fired furnace all day.
[00:02:00.520 --> 00:02:03.440]   But the fundamental limitations of the factory remained.
[00:02:03.440 --> 00:02:14.140]   So, this real electrical revolution, well, it didn't actually come until we imagined factories from the ground up with electricity at its core.
[00:02:14.140 --> 00:02:19.340]   Factories started to become flexible and adaptable.
[00:02:19.340 --> 00:02:21.980]   They allowed for smaller, specialized tools.
[00:02:21.980 --> 00:02:27.380]   Workers could bring their tools to the items instead of having to lug the items back to their workstations.
[00:02:28.860 --> 00:02:33.420]   The entire manufacturing process became more efficient, more humane, and more productive.
[00:02:33.420 --> 00:02:43.020]   Now, let's fast forward 140-something years to today, and you can see that we find ourselves at a similar point in regards to AI and LLMs.
[00:02:43.020 --> 00:02:48.420]   Enterprises, startups, developers are all building and integrating LLMs into their products.
[00:02:48.420 --> 00:02:57.140]   But often, they're just tacking it onto their existing product surface, adding a few star icon buttons in the top left corner, and calling it a day.
[00:02:57.200 --> 00:03:02.180]   And this is not the first time we've seen this in Silicon Valley.
[00:03:02.180 --> 00:03:05.140]   Let's think back to when mobile first emerged, right?
[00:03:05.140 --> 00:03:09.440]   Companies simply tried to just shrink down their website and put it on a phone.
[00:03:09.440 --> 00:03:18.560]   It wasn't until we redesigned apps from the ground up with the unique capabilities of mobile, like always-on camera and GPS,
[00:03:19.080 --> 00:03:22.080]   that we actually began to see true innovation in the space and adoption.
[00:03:22.080 --> 00:03:27.880]   This is when the Snapchats and the Ubers of the world started to emerge.
[00:03:27.880 --> 00:03:36.060]   So, just as companies and just as factories went through their, you know, replaced steam engines with electric one phase,
[00:03:36.060 --> 00:03:40.860]   and tech companies went through their just-hire-a-couple mobile web dev people phase,
[00:03:40.860 --> 00:03:44.940]   we're now in our magic star icon phase with respect to AI.
[00:03:44.940 --> 00:03:52.480]   And, yeah, it's funny, but the thing is you can't blame any of the companies or developers that are actually trying to do this right now, right?
[00:03:52.480 --> 00:03:57.340]   Like, all of us are trying to do this, but in many ways, we're just still so early.
[00:03:57.340 --> 00:03:59.580]   LLMs are non-deterministic.
[00:03:59.580 --> 00:04:00.940]   They're hard to build on.
[00:04:01.020 --> 00:04:03.720]   They're completely different than what most developers are used to using.
[00:04:03.720 --> 00:04:06.720]   Reliability is still an issue.
[00:04:06.720 --> 00:04:10.020]   Prompts still take rounds and rounds of optimization.
[00:04:10.020 --> 00:04:15.200]   And we've also just started to scratch the surface of potential product opportunities.
[00:04:15.200 --> 00:04:20.240]   So far, not much has really stuck beyond just the text box.
[00:04:20.240 --> 00:04:23.800]   We've been missing something.
[00:04:23.800 --> 00:04:26.580]   Something that's a little hard to put a finger on.
[00:04:27.420 --> 00:04:31.860]   But just last week, I think we scratched the surface of a potential new product feature that we can build.
[00:04:31.860 --> 00:04:37.860]   As some of you may have heard, last Thursday, we released our new model, Claude 3.5 Sonnet.
[00:04:37.860 --> 00:04:44.800]   3.5 Sonnet is the first model that we released in the new Claude 3.5 family.
[00:04:44.800 --> 00:04:50.000]   It's only the middle model, and yet it is better than our last best model, Claude 3 Opus.
[00:04:50.000 --> 00:04:55.720]   In my opinion, Claude 3.5 Sonnet is one of the best models in the world right now.
[00:04:56.220 --> 00:04:57.960]   And the benchmarks seem to back it up.
[00:04:57.960 --> 00:05:04.440]   MMLU, human eval, GPQA, tool use, all the common characters here.
[00:05:04.440 --> 00:05:09.040]   It's top of its class in many regards in these academic lab-type environments.
[00:05:09.040 --> 00:05:12.820]   But what I am most excited for is how it actually does in the real world.
[00:05:12.820 --> 00:05:18.100]   The model is particularly strong in RAG use cases, thanks to its 200K context.
[00:05:18.100 --> 00:05:21.340]   It also has near-perfect recall over that entire context as well.
[00:05:22.820 --> 00:05:27.780]   On coding tasks, 3.5 Sonnet seems to grasp debugging problems better.
[00:05:27.780 --> 00:05:31.240]   It's not getting stuck in those same loops as much as previous models.
[00:05:31.240 --> 00:05:37.840]   One of the best methods that we've found for actually measuring more complicated chains of reasoning is pull requests.
[00:05:37.840 --> 00:05:40.220]   They have a defined task.
[00:05:40.220 --> 00:05:42.340]   They usually take a few steps to solve.
[00:05:43.000 --> 00:05:46.480]   And the model is able to iteratively write and test its way to a solution.
[00:05:46.480 --> 00:05:53.920]   In our own internal pull request evals, we're seeing that Claude 3.5 Sonnet scores a 64%.
[00:05:53.920 --> 00:05:58.640]   And to put that number in comparison, Claude 3 Opus only scored a 38%.
[00:05:58.640 --> 00:06:03.880]   3.5 Sonnet also has state-of-the-art vision abilities.
[00:06:03.880 --> 00:06:08.740]   It shows considerable improvement over 3 Opus in basically every benchmark that we tested it on.
[00:06:08.740 --> 00:06:14.120]   Things like table transcriptions and OCR are a breeze now.
[00:06:14.120 --> 00:06:19.520]   Passed this table in 3.5 Sonnet and basically replicated it perfectly in Markdown.
[00:06:19.520 --> 00:06:24.240]   Probably can't read all those numbers, but trust me, I double-checked them to make sure they're all right.
[00:06:25.380 --> 00:06:29.260]   Vision capabilities were actually what amazed me the most when I started playing around with this model.
[00:06:29.260 --> 00:06:34.700]   It feels like we are really on the cutting edge of unlocking so many more use cases.
[00:06:34.700 --> 00:06:38.900]   And, you know, as you're hearing me say all this, you might be thinking,
[00:06:38.900 --> 00:06:42.020]   well, that's great, Alex, but, I mean, it doesn't mean anything if I can't actually use the model.
[00:06:42.020 --> 00:06:43.900]   And you're right, and we heard you.
[00:06:43.900 --> 00:06:50.320]   And that's why 3.5 Sonnet is available on our API, AWS Bedrock, and Vertex AI.
[00:06:50.320 --> 00:06:53.720]   We understand that developers want choice when they're building,
[00:06:54.140 --> 00:06:57.000]   and we want Claude to be available wherever you are.
[00:06:57.000 --> 00:07:03.260]   In terms of pricing, 3.5 Sonnet is five times cheaper than 3 Opus.
[00:07:03.260 --> 00:07:08.680]   It's only $3 per million input tokens and $15 per million output tokens.
[00:07:08.680 --> 00:07:13.320]   3.5 Sonnet's combo of speed, intelligence, and low cost
[00:07:13.320 --> 00:07:17.520]   makes it much more economical to use and embed in your apps than 3 Opus.
[00:07:19.580 --> 00:07:22.660]   But 3.5 Sonnet is not all that we've released in the past week.
[00:07:22.660 --> 00:07:27.080]   We also released a new product feature that I think is actually more inspiring to developers
[00:07:27.080 --> 00:07:30.840]   in terms of thinking about and building those AI products from the ground up.
[00:07:30.840 --> 00:07:32.980]   It's called Artifacts.
[00:07:32.980 --> 00:07:39.040]   Artifacts separate the content that Claude produces from the actual chat dialogue itself.
[00:07:40.320 --> 00:07:46.140]   This allows you to work collaboratively with Claude on things from essays to SVGs to React websites.
[00:07:46.140 --> 00:07:50.880]   Artifacts become really powerful when you combine it with 3.5 Sonnet.
[00:07:51.520 --> 00:07:58.520]   Those coding skills plus that reasoning ability plus that strong visual acuity enables a new product experience that's really fun to use.
[00:07:58.520 --> 00:08:04.980]   It's also a developer's best friend in that it allows you to quickly take screenshots and figma diagrams
[00:08:04.980 --> 00:08:09.200]   and quickly turn it into code and components that you can actually just go use.
[00:08:09.940 --> 00:08:16.040]   As you can see in this, I basically cloned our entire Claude AI chat layout in React just from a single screenshot.
[00:08:16.040 --> 00:08:24.960]   And this feature has practically been hiding in plain sight now, just waiting really to be discovered for over a year and a half.
[00:08:24.960 --> 00:08:34.380]   Maybe this tweet is right, and we really are early on this S-curve of productionizing LLMs, which I think is actually pretty inspiring.
[00:08:36.980 --> 00:08:39.760]   And Artifacts is not the only AI feature that we launched recently.
[00:08:39.760 --> 00:08:42.380]   On Tuesday, we released Projects.
[00:08:42.380 --> 00:08:49.720]   Projects enables dev teams to work and collaborate much more efficiently by grounding Claude's outputs in your own knowledge,
[00:08:49.720 --> 00:08:54.560]   whether it's style guides or code bases or transcripts or even your past work.
[00:08:54.560 --> 00:09:00.920]   On our Claude team plan, you can even share these projects in your chats with all your teammates.
[00:09:02.920 --> 00:09:07.780]   At Anthropic, our engineers now upload code repos and documentation that they use.
[00:09:07.780 --> 00:09:13.340]   And I've started to see people actually just share the chats and the artifacts instead of Google Docs or site documentation.
[00:09:13.340 --> 00:09:19.260]   Projects is another great example of when you think from an LLM and an AI standpoint first,
[00:09:19.260 --> 00:09:23.040]   you can actually start to build product experiences that complement these technologies
[00:09:23.040 --> 00:09:26.320]   and don't feel like a simple add-on to what you already have.
[00:09:26.320 --> 00:09:32.500]   So now that hopefully the creative product juices are flowing in everyone's minds,
[00:09:32.500 --> 00:09:36.500]   I want to dive a little bit into API improvements that we've rolled out recently
[00:09:36.500 --> 00:09:39.700]   and things that allow you to actually build this cool stuff.
[00:09:40.980 --> 00:09:45.440]   I also want to give a preview of what's coming next that will enable you to build even more.
[00:09:45.440 --> 00:09:49.900]   So a month ago, we released our new Tool Use API.
[00:09:49.900 --> 00:09:55.380]   Tool Use allows you to give Claude custom client-side functions that it can then intelligently leverage.
[00:09:55.380 --> 00:10:00.460]   Tool Use also enables things like consistent structured JSON output.
[00:10:01.520 --> 00:10:05.860]   With 3.5 Sonnet, I've actually started to see devs give Claude hundreds of tools at a time.
[00:10:05.860 --> 00:10:11.520]   On the developer console front, we're also continuing to iterate.
[00:10:11.520 --> 00:10:17.180]   We added a prompt generator that uses Claude to write prompts for you based on a task description.
[00:10:17.180 --> 00:10:23.280]   So you can see in this video, we put in a task description, and then out comes an optimized prompt.
[00:10:23.280 --> 00:10:28.860]   And then once that prompt is all done, you can actually just start editing it right in the workbench itself.
[00:10:29.360 --> 00:10:35.420]   You can see we've also added support for variables, so you can edit prompt templates as well, test things like RAG use cases.
[00:10:35.420 --> 00:10:44.940]   And finally, we're also working on a new Evaluate feature, which is currently in console right now with a beta tag.
[00:10:44.940 --> 00:10:49.420]   And we will plan to share more on this and continue to iterate on it very soon.
[00:10:49.420 --> 00:10:53.300]   So what else is next?
[00:10:53.300 --> 00:10:56.400]   Well, there's two things that I can share right now.
[00:10:56.400 --> 00:10:59.060]   First is that you can expect more models.
[00:10:59.060 --> 00:11:04.000]   3.5 Haiku and 3.5 Opus are coming later this year.
[00:11:04.000 --> 00:11:12.120]   With each model generation, we're looking to increase the intelligence, decrease the latency, and decrease the cost.
[00:11:12.120 --> 00:11:16.460]   The number one thing that I tell developers is to not forget to build with that in mind.
[00:11:16.460 --> 00:11:20.760]   Models will become smarter, cheaper, and faster in orders of months, not years.
[00:11:21.120 --> 00:11:28.580]   When you're planning your product roadmap, be ambitious enough to build with the belief that new models may arrive during your development period.
[00:11:30.980 --> 00:11:33.920]   We are also working on other areas of research like interpretability.
[00:11:33.920 --> 00:11:42.620]   In one of our latest papers called Scaling Mono-Semanticity, we explained how we've been able to find features within models that activate for different topics.
[00:11:42.620 --> 00:11:49.640]   Once you identify a feature, you're able to clamp its value and turn it up or down to actually steer the model's outputs.
[00:11:51.580 --> 00:12:00.640]   A few weeks ago, we showed Cloud.ai users how this worked through GoldenGate Cloud, which was a version of Cloud that had the GoldenGate bridge feature turned up significantly.
[00:12:00.640 --> 00:12:04.220]   Yeah, fan favorite.
[00:12:04.220 --> 00:12:09.240]   We currently have a few beta testers also experimenting with a steering API.
[00:12:09.920 --> 00:12:21.260]   This allows developers to find and clamp features for specific attributes and actually turn that dial up or down, which, again, allows you to control Cloud's outputs in addition to actually just prompting it.
[00:12:21.260 --> 00:12:26.180]   We hope to be able to roll this out to more developers in the very near future as well.
[00:12:26.180 --> 00:12:37.900]   Now, if anything in this talk has sparked any ideas, I want to encourage you guys to just go out there and build and make quick prototypes as fast as you can to get that validation and that feedback loop started.
[00:12:38.900 --> 00:12:43.420]   And for even more of an incentive, we actually just launched another build with Cloud contest yesterday.
[00:12:43.420 --> 00:12:46.000]   It runs until July 10th.
[00:12:46.000 --> 00:12:49.980]   The top three projects will each receive 10K in Anthropic API credits.
[00:12:49.980 --> 00:12:52.520]   To see more details, just visit that link below.
[00:12:52.520 --> 00:12:55.880]   It's just at the top of our docs page as well, so you can find it there, too.
[00:12:55.880 --> 00:12:57.800]   I'll leave that up for a second.
[00:12:57.800 --> 00:13:05.780]   And finally, if you have any questions or you want to hear more about just what we're thinking about,
[00:13:06.000 --> 00:13:08.820]   I'll be at that AWS booth down the hall for the next few hours.
[00:13:08.820 --> 00:13:13.000]   You can also find me on x slash Twitter at AlexAlbert with two underscores.
[00:13:13.000 --> 00:13:15.640]   I do try to read all my DMs.
[00:13:15.640 --> 00:13:20.400]   I spend way too much time on that site, so feel free to ask questions there as well.
[00:13:20.400 --> 00:13:27.080]   And with that, I want to say thank you guys very much and enjoy the last day of the summit.
[00:13:27.080 --> 00:13:37.940]   I want to say thank you guys very much.

