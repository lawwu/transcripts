
[00:00:00.000 --> 00:00:20.540]   Thanks for coming to my talk. I'm Shitej. I'm one of the co-founders at ORB, and I'm going to be
[00:00:20.540 --> 00:00:26.460]   talking about how to think about pricing. Maybe top-level takeaway from this talk is that pricing
[00:00:26.460 --> 00:00:30.260]   is a deep, complicated topic. We're going to cover some examples. We're going to cover some
[00:00:30.260 --> 00:00:35.020]   tactical advice. But in general, the way you should think about pricing is pricing is a form of friction
[00:00:35.020 --> 00:00:40.480]   for your product. And sometimes that friction can be applied for a very good reason. Sometimes that
[00:00:40.480 --> 00:00:44.680]   friction can just prevent people from using your product. And so you really have to think about the
[00:00:44.680 --> 00:00:49.040]   value your product is delivering, as well as the audience you're delivering it to, and the way that
[00:00:49.040 --> 00:00:53.780]   you're building and innovating in your product to start really thinking about pricing. Just a quick
[00:00:53.780 --> 00:00:58.780]   intro to ORB. ORB is a usage-based billing infrastructure company, so we help companies
[00:00:58.780 --> 00:01:05.220]   at lots of layers of the stack think about pricing and billing. Nowadays, a lot of our conversations
[00:01:05.220 --> 00:01:09.860]   first center around monetization and pricing as a practice, and then we get into the weeds of how do
[00:01:09.860 --> 00:01:19.420]   we actually bill for this stuff. So maybe an intro tweet to start. This is Amjad. He's the CEO and
[00:01:19.420 --> 00:01:24.520]   founder of Replit. Replit is one of ORB's customers. And this is a tweet actually pretty recent, starting
[00:01:24.520 --> 00:01:30.060]   to think about how Replit agent should price itself. And so a pretty short tweet, but a lot of complexity
[00:01:30.060 --> 00:01:35.920]   actually packed in here. Really starting to think about, as you have Replit, which is a very popular
[00:01:35.920 --> 00:01:42.580]   agent that does programming, is starting to build full-stack web apps. How should a company like Replit
[00:01:42.580 --> 00:01:47.740]   price their agent? Should it be like a super simple, every time the agent checkpoints, it charges you a
[00:01:47.740 --> 00:01:53.780]   fixed amount? Or should it start aligning with the complexity of the change it made? And as you can
[00:01:53.780 --> 00:01:57.840]   start thinking through this question, you have to think through considerations like who is Replit built
[00:01:57.840 --> 00:02:03.800]   for, right? What are the costs that Replit incurs? But also just the user experience of if I get charged
[00:02:03.800 --> 00:02:08.720]   some amount at the end of something that this agent has done without me really having control over what
[00:02:08.720 --> 00:02:12.840]   the agent did other than the initial prompt, is that going to be surprising? Is that not going to be
[00:02:12.840 --> 00:02:18.760]   surprising, right? So these considerations apply particularly to agents because the work that the
[00:02:18.760 --> 00:02:23.800]   agent is doing is fairly opaque or can be opaque, but they actually apply at every layer of the stack,
[00:02:23.800 --> 00:02:29.560]   including the kind of infrastructure layer of the AI stack. So monetization as a whole is changing.
[00:02:29.560 --> 00:02:35.320]   Maybe let's start with some kind of traditional principles in pricing and how pricing has always been
[00:02:35.320 --> 00:02:40.080]   thought about, right? So we're maybe coming from way back in the day, you know, you're selling a fixed
[00:02:40.080 --> 00:02:46.600]   license, you go to like Fry's Electronics and buy your TurboTax license. And then of course, now you have
[00:02:46.600 --> 00:02:52.380]   seat-based pricing subscription, maybe you're paying $30 a seat, all the way to you have this usage-based
[00:02:52.380 --> 00:02:56.600]   pricing, which is very dynamic. And then maybe you can consider outcome-based pricing as a further
[00:02:56.600 --> 00:03:02.460]   evolution of that. So in traditional pricing, you have a few key principles. You want to make sure that the
[00:03:02.460 --> 00:03:05.600]   pricing is simple so that users can actually understand it. They can grok your pricing. They
[00:03:05.600 --> 00:03:10.680]   know how they're going to pay for your tool. You want to produce some friction because it determines
[00:03:10.680 --> 00:03:14.520]   the value of your product. Like willingness to pay is a very real signal. And then you want to protect
[00:03:14.520 --> 00:03:20.540]   your margins, right? Traditionally, software margins have been very healthy. You know, a good software
[00:03:20.540 --> 00:03:26.160]   margin looks like 80%. Obviously, as you start getting closer to the infrastructure layer and as you start
[00:03:26.160 --> 00:03:31.360]   moving into the world of AI, these margins are much, much more variable, not necessarily unhealthy, but
[00:03:31.360 --> 00:03:37.080]   there's a lot more degenerate workloads that you can incur with an agent. So now starting to think
[00:03:37.080 --> 00:03:42.420]   about AI native pricing, predictability matters a lot, right? I think especially when you're selling
[00:03:42.420 --> 00:03:47.540]   to more mature companies that need to budget and think about their, you know, cost profile using your
[00:03:47.540 --> 00:03:53.680]   tool, they need to be able to predict how that cost is going to scale, not just on an individual
[00:03:53.680 --> 00:03:58.380]   developer, how that cost might scale, but just generally throughout the company's buying process.
[00:03:58.380 --> 00:04:06.740]   AI is very early. So speed and just showing the value of your product and people being able to play
[00:04:06.740 --> 00:04:12.000]   around and experiment matters a lot. Oftentimes, at least in this space, it's not like people are coming
[00:04:12.000 --> 00:04:17.100]   to you buying a very established product. It's kind of your burden of proof to say, you know, here's how
[00:04:17.100 --> 00:04:21.940]   our agent works. Just go try it and then start thinking about pricing. So maybe the friction point and
[00:04:21.940 --> 00:04:27.780]   where it is has changed. And then I was just saying, um, cogs are variable, but, but not only are they
[00:04:27.780 --> 00:04:32.440]   higher, they're also changing very, very quickly. I'm sure everyone in this room seen, okay, great. Um,
[00:04:32.440 --> 00:04:38.960]   you know, open AI, uh, cut, cut model costs by a third overnight. Uh, that has a pretty material impact
[00:04:38.960 --> 00:04:45.760]   on like potentially the underlying cogs of many of these agentic tools. So, um, the three key principles
[00:04:45.760 --> 00:04:50.140]   that, that I think matter here are like really thinking about the audience, who your product is
[00:04:50.140 --> 00:04:56.320]   optimized for, what the value delivery mechanism looks like your margin structure. Um, and, and I say
[00:04:56.320 --> 00:05:01.060]   margin structure and not actually margins, because again, the underlying costs are changing very, very
[00:05:01.060 --> 00:05:05.980]   rapidly. So you want to think about what are the axes of scaling rather than what is the literal margin
[00:05:05.980 --> 00:05:10.140]   on day one, especially if you're an earlier product. And then you want to give yourself the
[00:05:10.140 --> 00:05:14.520]   flexibility to experiment over time. This comes with a lot of complexity, but I think it's very important
[00:05:14.520 --> 00:05:18.980]   because you're just not going to get it right the first time. Um, so, so these are kind of the principles
[00:05:18.980 --> 00:05:25.080]   to keep in mind, maybe going through one by one. Um, the, the way to kind of think about pricing for your
[00:05:25.080 --> 00:05:32.540]   audiences, um, you know, what is their buying journey and what are they coming to you to, to buy and what value
[00:05:32.540 --> 00:05:37.000]   are they looking to get out of it? Right. Uh, if you're like, I, I, we, we talked to lots of people
[00:05:37.000 --> 00:05:41.680]   who are like, Oh, you know, service now is pricing is so silly. You go to their pricing page and it says
[00:05:41.680 --> 00:05:47.240]   like contact sales. It's like, well, that's, that's a very, very different audience that they're selling
[00:05:47.240 --> 00:05:52.160]   to where they're probably cross selling some, some existing contracts. That is a big enterprise commit.
[00:05:52.160 --> 00:05:57.320]   They want you to talk to sales because they really want to tailor the value to their sales motion.
[00:05:57.320 --> 00:06:00.800]   Right. And then on the other hand, companies that are selling to individual developers,
[00:06:00.800 --> 00:06:04.740]   there's not a procurement team. There's no purchasing process. They want you to click,
[00:06:04.740 --> 00:06:11.100]   try it and start using the product immediately. So, so, um, don't just think about the kind of
[00:06:11.100 --> 00:06:15.280]   point of entry, but think about who's behind that at the company. Uh, is it going to be a cross
[00:06:15.280 --> 00:06:20.500]   functional decision? Is it something that someone can just insert into, you know, as, as a vendor on day
[00:06:20.500 --> 00:06:25.760]   one, or is there going to be more of a process around it? And then also, uh, start to kind of think
[00:06:25.760 --> 00:06:30.620]   about, uh, what users are seeking as quickly as possible. If they're seeking a
[00:06:30.620 --> 00:06:34.240]   proof point, then perhaps you want to be able to give them that proof point before you insert
[00:06:34.240 --> 00:06:39.280]   pricing into the equation. Here's, here's an example, again, using replet, um, couple of things
[00:06:39.280 --> 00:06:45.360]   to note here. Uh, you'll see that there's one, a lot of tiers and pricing is actually quite
[00:06:45.360 --> 00:06:49.560]   transparent. Obviously it's a free tier, right? Indicating that they want you to see the value
[00:06:49.560 --> 00:06:56.000]   without having to do a ton of work. Think about the monetization. Um, and, uh, one thing that's kind
[00:06:56.000 --> 00:07:03.680]   subtle is oftentimes pricing and packaging really starts to, uh, dictate what sort of use case they
[00:07:03.680 --> 00:07:09.260]   are imagining you to use, right? Like, um, you know, what models you have access to, how many agent
[00:07:09.260 --> 00:07:13.900]   checkpoints you have access to included, how many seats you might have included. Uh, it kind of starts
[00:07:13.900 --> 00:07:18.660]   positioning your product. Is it a multiplayer product? Is it something that people are going to
[00:07:18.660 --> 00:07:22.580]   be using daily or is it something that you're going to be using, you know, maybe like five times a month,
[00:07:22.620 --> 00:07:27.020]   uh, the way you package it really determines the incentives that you're pushing onto your users
[00:07:27.020 --> 00:07:31.660]   and obviously controlling for the costs that you might pay on the backend. Here's another example
[00:07:31.660 --> 00:07:36.780]   from Unify, which is, I think, uh, uh, agent agent to company, but it's like targeted at revenue and go
[00:07:36.780 --> 00:07:41.480]   to market teams. One, you'll see the, like the price point is a lot higher. Um, I want you to like
[00:07:41.480 --> 00:07:45.320]   forget whether it's monthly or annually or any of that, just like you come on this page, the price point
[00:07:45.320 --> 00:07:50.180]   is higher that communicates something psychologically. And then they're like second duty years are custom,
[00:07:50.180 --> 00:07:56.180]   right. Um, again, I, and, and maybe the third thing to point out here is that 50,000 credits,
[00:07:56.180 --> 00:08:00.840]   200,000 credits, 600,000 credits. I actually don't know what that means, but that seems like a large
[00:08:00.840 --> 00:08:04.720]   number that communicates something about the workflows they expect to participate in and like
[00:08:04.720 --> 00:08:10.100]   what that might mean for how you use Unify. Right. Um, of course, like it maybe goes instead,
[00:08:10.100 --> 00:08:14.820]   but the set of logos you put on your pricing page is also very important. Um, are you tailoring it
[00:08:14.820 --> 00:08:19.620]   towards, okay, we, we service the best developer brands or we service the like fortune 100 enterprises.
[00:08:19.620 --> 00:08:25.060]   Um, and so pricing is, is not just the price point, but, but of course also the, the whole experience
[00:08:25.060 --> 00:08:31.040]   of what someone sees when they land on this page. Um, let's, let's talk a little bit about margins. Um,
[00:08:31.040 --> 00:08:37.320]   you know, as, as, uh, the, the underlying architecture of your product changes, of course,
[00:08:37.320 --> 00:08:40.820]   your, your margins are going to change. These inputs are changing very quickly. Um, one,
[00:08:40.820 --> 00:08:46.520]   one, one interesting example here is, uh, you, you, as much as possible, you want to think about,
[00:08:46.520 --> 00:08:52.020]   uh, the differentiation of your product also in R and D innovation and try to pass that on to your users as
[00:08:52.020 --> 00:08:57.420]   basically pricing leverage. Uh, a good example of this is like Cloudflare has built their
[00:08:57.420 --> 00:09:01.880]   infrastructure on and their workers infrastructure on these like isolates, right? So, so they're kind
[00:09:01.880 --> 00:09:07.640]   of lightweight compute machines. And so they can charge for CPU milliseconds. And so if someone is
[00:09:07.640 --> 00:09:12.700]   building like an agentic app on Cloudflare and it makes like a, you know, call out to open AI or
[00:09:12.700 --> 00:09:16.340]   Anthropic, you're not getting charged for that because Cloudflare is just charging you for CPU
[00:09:16.340 --> 00:09:20.820]   milliseconds instead of wall time. I think that's a really good example of them, you know, taking an
[00:09:20.820 --> 00:09:25.500]   architectural bet, um, which, which might be good for many, many reasons, but it's a really good fit
[00:09:25.500 --> 00:09:30.860]   for building AI agents or generally AI software on top of Cloudflare. So that's, I see that as an
[00:09:30.860 --> 00:09:35.840]   example of like passing down technical innovation to the end user. Um, and then the other thing to
[00:09:35.840 --> 00:09:40.920]   consider about your margins is you don't have to protect them at all costs. You just have to think
[00:09:40.920 --> 00:09:45.940]   about what are the extreme edge cases and what are you doing to like prevent those outcomes, right? So
[00:09:45.940 --> 00:09:50.880]   if you have these potentially really degenerate workloads, uh, how do you incentivize reasonable
[00:09:50.880 --> 00:09:56.100]   usage? Do you put in rate limits or guardrails? Um, you don't have to kind of linearly necessarily
[00:09:56.100 --> 00:10:01.920]   scale costs with usage. You, you can protect your margins potentially in, in different ways. Um,
[00:10:02.220 --> 00:10:06.600]   this is an example from Jasper. I think this, this blog post and pricing has changed since,
[00:10:06.600 --> 00:10:11.180]   since I pulled this example, but you know, Jasper realized like, Hey, we're, we're targeted toward
[00:10:11.180 --> 00:10:14.560]   marketing teams. Marketing teams don't want to count credits. Like when they're, you know,
[00:10:14.560 --> 00:10:20.560]   basically writing marketing copy. And so, uh, they, they talk a little bit in this blog post about
[00:10:20.560 --> 00:10:25.260]   how they've architected around being able to like switch between models under the hood seamlessly.
[00:10:25.580 --> 00:10:29.780]   You don't have to choose the right model for the job. And as a result of that, they went unlimited
[00:10:29.780 --> 00:10:34.960]   on, uh, each of the three tiers. So you're, you're no longer counting credits as you're using Jasper.
[00:10:34.960 --> 00:10:40.060]   Now, uh, this kind of highlights the core value prop of the product, which is they want to be
[00:10:40.060 --> 00:10:44.680]   a really critical part of that workflow. And they don't want you to have to like pick and choose when
[00:10:44.680 --> 00:10:50.220]   you use Jasper because you might have credits or might run out of credits. So again, kind of trying to
[00:10:50.220 --> 00:10:55.480]   take, is there like an architectural, uh, advantage you have and how can you pass that on to your
[00:10:55.480 --> 00:11:01.500]   pricing model? Finally, I want to talk about flexibility. Um, you know, you, you all, as,
[00:11:01.500 --> 00:11:05.280]   as you're working in your teams, uh, you're constantly improving your product. You're putting
[00:11:05.280 --> 00:11:10.440]   a lot of R and D into it. Um, one thing that is used to be true, especially in the seat based world
[00:11:10.440 --> 00:11:16.080]   is like, you'd have R and D over here shipping a ton, um, increasing the product value. And then you'd
[00:11:16.080 --> 00:11:20.980]   have like a once a year, okay, we're changing our seat price from $20 to $25. Um, one advantage
[00:11:20.980 --> 00:11:26.500]   you have in the AI world is like, uh, the value is much closer to the end users. It's not necessarily
[00:11:26.500 --> 00:11:30.780]   like a $20 a seat thing. It's like someone is literally seeing, okay, I'm, I'm taking this
[00:11:30.780 --> 00:11:34.760]   action. This agent is giving me this output. Okay. It's getting better. It's getting, it's
[00:11:34.760 --> 00:11:38.740]   better, it's getting better. So I think not only do you as a business have a responsibility
[00:11:38.740 --> 00:11:44.780]   to incrementally evolve your price as, uh, you know, you invest R and D, but I think it's,
[00:11:44.780 --> 00:11:49.000]   it's honestly a lot more understandable for customers why that's happening because the,
[00:11:49.000 --> 00:11:54.420]   the monetization is much closer to the value of the product. Um, so, so, uh, you know,
[00:11:54.420 --> 00:12:00.020]   obviously in orbs customer base, but in general, we are seeing people, uh, make many, many more
[00:12:00.020 --> 00:12:04.100]   price changes, not just once a year or twice a year, but in fact, some customers making price
[00:12:04.100 --> 00:12:09.760]   changes, uh, two, three times a month. Um, and again, there's, there's caveats that come
[00:12:09.760 --> 00:12:14.500]   with that. Uh, you have to think about, you know, what, what is that complexity that introduces in
[00:12:14.500 --> 00:12:20.120]   the, in the mental model of your end users, how are you going to manage change? Um, and a kind of
[00:12:20.120 --> 00:12:25.900]   good internal dynamic example of this is, uh, if your go to market team is, you know, commissioned
[00:12:25.900 --> 00:12:29.480]   and, and they're selling these big enterprise contracts and your pricing is changing, or you're
[00:12:29.480 --> 00:12:33.040]   going to like a pay as you go model, you need to think about like, what does that mean for your
[00:12:33.040 --> 00:12:36.620]   sales team? What does that mean for the incentives that they have in selling your product?
[00:12:37.020 --> 00:12:41.620]   classic example of this is a lot of usage based companies now commission their sales reps, not
[00:12:41.620 --> 00:12:47.480]   on the initial contract land, but on the expansion of that account over time. And then, okay, second
[00:12:47.480 --> 00:12:51.320]   order effect. How do you think about customer success versus sales as an organization? And how do you
[00:12:51.320 --> 00:12:56.300]   organize that internally? Right? So, so repricing can have lots of impacts, not just on your end user,
[00:12:56.300 --> 00:13:01.800]   but also in the internal dynamics of your org. Um, finally, the thing I'll say is, uh, as you're
[00:13:01.800 --> 00:13:07.740]   iterating, you, you really want to, as much as possible, be able to simulate the impact that this
[00:13:07.740 --> 00:13:12.460]   pricing change is going to have on your users. In particular, I think, uh, you want to be able to
[00:13:12.460 --> 00:13:17.840]   simulate, uh, different usage patterns. So if you think about your users and cohorts, um, some might
[00:13:17.840 --> 00:13:22.840]   be using it for very different use cases. What is that revenue mix going to look like? What is your top,
[00:13:22.840 --> 00:13:27.920]   uh, revenue generating customer going to, how are they going to change with a new pricing model? You want to
[00:13:27.920 --> 00:13:32.420]   be able to do that in a, in a data informed way, especially if you're running at a, at a reasonable
[00:13:32.420 --> 00:13:39.380]   scale. Here's some predictions I have as, as we're wrapping up for AI agent pricing. I think, um, you
[00:13:39.380 --> 00:13:44.780]   know, the, the price wars will continue. We're seeing agents get cheaper and cheaper. Um, and, and, you
[00:13:44.780 --> 00:13:51.040]   know, I think you're, you, we should expect people to try to give effectively unlimited plans. I think
[00:13:51.040 --> 00:13:55.700]   there'll still be caps. I think there'll still be guardrails, but I think, um, we, we will move to a
[00:13:55.700 --> 00:14:01.380]   world where, uh, you know, people just want these agents embedded in every workflow. So we'll try to,
[00:14:01.380 --> 00:14:07.260]   try to converge to effectively unlimited. Um, I think outcome-based pricing is going to get more
[00:14:07.260 --> 00:14:12.700]   real. We are seeing some companies, uh, do that already, but the, the, the hard part about outcome
[00:14:12.700 --> 00:14:18.300]   based pricing is defining what the actual SLA is like, what, what is the outcome and how do you measure
[00:14:18.300 --> 00:14:23.780]   it? And does it make sense to the end user? Um, I think like, we're going to see a lot of clear
[00:14:23.780 --> 00:14:30.260]   definition of success language and contracts and like people really trying to get, uh, precise about
[00:14:30.260 --> 00:14:36.040]   what the outcome is that they're charging for. And then, um, I think there's going to be a lot more
[00:14:36.040 --> 00:14:41.860]   real-time visibility, spend management, uh, balance alerts. I think the kind of workflow around pricing
[00:14:41.860 --> 00:14:46.860]   and monetization is going to get, uh, more and more sophisticated. You think about like, you know,
[00:14:46.860 --> 00:14:50.700]   obviously in, in database queries, you have like query planners. I think it's quite possible that,
[00:14:50.700 --> 00:14:55.780]   you know, you, you prompt an agent, it tells you like, here's my estimate for how much, uh, how many
[00:14:55.780 --> 00:15:02.800]   credits I'm going to use, or, Hey, here's three options for, um, how I might execute, how I might plan
[00:15:02.800 --> 00:15:08.280]   this workload. One's going to take 10,000 credits. The other is going to take, you know, 4,000 credits.
[00:15:08.280 --> 00:15:13.300]   I think that customer experience of like being able to control the workflow around the spend
[00:15:13.300 --> 00:15:19.200]   is likely to get much, much more sophisticated, um, this year. So, uh, just, just final note,
[00:15:19.200 --> 00:15:23.440]   um, we have a whole ebook on how to price your AI agent that goes into much more tactical advice,
[00:15:23.440 --> 00:15:28.300]   talks about specific, you know, threshold billing, fraud, prepaid pricing models. Um,
[00:15:28.300 --> 00:15:31.540]   if you want to check that out, that is at this link. Thank you.
[00:15:31.540 --> 00:15:32.540]   Thank you.
[00:15:32.540 --> 00:15:33.040]   Thank you.
[00:15:33.040 --> 00:15:34.040]   Thank you.
[00:15:34.040 --> 00:15:34.040]   Thank you.
[00:15:34.040 --> 00:15:38.080]   I'll see you next time.

