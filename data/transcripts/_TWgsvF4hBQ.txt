
[00:00:00.000 --> 00:00:07.760]   There's an interesting statistic I saw. So Spotify has, maybe you can correct me, but
[00:00:07.760 --> 00:00:17.880]   over 50 million songs, tracks and over 3 billion playlists. So 50 million songs and 3 billion
[00:00:17.880 --> 00:00:23.120]   playlists, 60 times more playlists. What do you make of that?
[00:00:23.120 --> 00:00:30.000]   Yeah, so the way I think about it is that from a statistician or machine learning point
[00:00:30.000 --> 00:00:35.560]   of view, you have all these, if you want to think about reinforcement learning, you have
[00:00:35.560 --> 00:00:41.680]   this state space of all the tracks and you can take different journeys through this world.
[00:00:41.680 --> 00:00:50.480]   And I think of these as people helping themselves and each other, creating interesting vectors
[00:00:50.480 --> 00:00:55.160]   through this space of tracks. And then it's not so surprising that across many tens of
[00:00:55.160 --> 00:01:01.200]   millions of atomic units, there will be billions of paths that make sense. And we're probably
[00:01:01.200 --> 00:01:09.720]   pretty quite far away from having found all of them. So our job now is users, when Spotify
[00:01:09.720 --> 00:01:14.600]   started, it was really a search box that was for the time pretty powerful. And then I like
[00:01:14.600 --> 00:01:18.880]   to refer to it as this programming language called playlisting, where if you, as you probably
[00:01:18.880 --> 00:01:23.040]   were pretty good at music, you knew your new releases, you knew your back catalog, you
[00:01:23.040 --> 00:01:26.800]   knew your Star Way to Heaven, you could create a soundtrack for yourself using this playlisting
[00:01:26.800 --> 00:01:31.800]   tool that's like metaprogramming language for music to soundtrack your life. And people
[00:01:31.800 --> 00:01:35.440]   who were good at music, it's back to how do you scale the product. For people who are
[00:01:35.440 --> 00:01:39.960]   good at music, that wasn't actually enough. If you had the catalog and a good search tool,
[00:01:39.960 --> 00:01:44.440]   you can create your own sessions. You could create really good a soundtrack for your entire
[00:01:44.440 --> 00:01:49.520]   life, probably perfectly personalized because you did it yourself. But the problem was most
[00:01:49.520 --> 00:01:53.640]   people, many people aren't that good at music. They just can't spend the time. Even if you're
[00:01:53.640 --> 00:01:57.560]   very good at music, it's going to be hard to keep up. So what we did to try to scale
[00:01:57.560 --> 00:02:04.220]   this was to essentially try to build, you can think of them as agents that this friend
[00:02:04.220 --> 00:02:08.280]   that some people had that helped them navigate this music catalog. That's what we're trying
[00:02:08.280 --> 00:02:09.760]   to do for you.
[00:02:09.760 --> 00:02:20.640]   But also there is something like 200 million active users on Spotify. So there, okay, so
[00:02:20.640 --> 00:02:27.840]   from the machine learning perspective, you have these 200 million people plus they're
[00:02:27.840 --> 00:02:35.960]   creating, it's really interesting to think of a playlist as, I mean, I don't know if
[00:02:35.960 --> 00:02:40.400]   you meant it that way, but it's almost like a programming language. It's a release, a
[00:02:40.400 --> 00:02:50.000]   trace of exploration of those individual agents, the listeners, and you have all this new tracks
[00:02:50.000 --> 00:02:58.600]   coming in. So it's a fascinating space that is ripe for machine learning. So is there,
[00:02:58.600 --> 00:03:06.080]   is it possible, how can playlists be used as data in terms of machine learning and to
[00:03:06.080 --> 00:03:08.640]   help Spotify organize the music?
[00:03:08.640 --> 00:03:15.200]   So we found in our data, not surprising that people who playlisted a lot, they retained
[00:03:15.200 --> 00:03:19.920]   much better. They had a great experience. And so our first attempt was to playlist for
[00:03:19.920 --> 00:03:26.280]   users. And so we acquired this company called Tunigo of editors and professional playlisters
[00:03:26.280 --> 00:03:33.960]   and kind of leveraged the maximum of human intelligence to help build kind of these vectors
[00:03:33.960 --> 00:03:40.760]   through the track space for people. And that broadened the product. Then the obvious next,
[00:03:40.760 --> 00:03:46.040]   and we use statistical means where they could see when they created a playlist, how did
[00:03:46.040 --> 00:03:49.480]   that playlist perform? They could see skips of the songs, they could see how the songs
[00:03:49.480 --> 00:03:55.080]   perform and they manually iterated the playlist to maximize performance for a large group
[00:03:55.080 --> 00:03:59.640]   of people. But there were never enough editors to playlist for you personally.
[00:03:59.640 --> 00:04:03.440]   So the promise of machine learning was to go from kind of group personalization, using
[00:04:03.440 --> 00:04:11.080]   editors and tools and statistics to individualization. And then what's so interesting about the 3
[00:04:11.080 --> 00:04:16.160]   billion playlists we have is, we ended, the truth is we lucked out. This was not a priority
[00:04:16.160 --> 00:04:22.880]   strategy as is often the case. It looks really smart in hindsight was as dumb luck. We looked
[00:04:22.880 --> 00:04:28.680]   at these playlists and we had some people in the company, a person named Eric Bernadotton,
[00:04:28.680 --> 00:04:35.040]   who was really good at machine learning already back then in like 2007, 2008. Back then it
[00:04:35.040 --> 00:04:41.640]   was mostly collaborative filtering and so forth. But we realized that what this is,
[00:04:41.640 --> 00:04:46.680]   is people are grouping tracks for themselves that have some semantic meaning to them. And
[00:04:46.680 --> 00:04:52.120]   then they actually label it with a playlist name as well. So in a sense, people were grouping
[00:04:52.120 --> 00:04:58.360]   tracks along semantic dimensions and labeling them. And so could you use that information
[00:04:58.360 --> 00:05:07.600]   to find that latent embedding? And so we started playing around with collaborative filtering
[00:05:07.600 --> 00:05:14.920]   and we saw tremendous success with it. Basically trying to extract some of these dimensions.
[00:05:14.920 --> 00:05:20.200]   And if you think about it, it's not surprising at all. It'd be quite surprising if playlists
[00:05:20.200 --> 00:05:24.400]   were actually random, if they had no semantic meaning. For most people, they group these
[00:05:24.400 --> 00:05:29.680]   tracks for some reason. So we just happened to cross this incredible data set where people
[00:05:29.680 --> 00:05:34.440]   are taking these tens of millions of tracks and grouped them along different semantic
[00:05:34.440 --> 00:05:35.440]   vectors.
[00:05:35.440 --> 00:05:41.040]   And the semantics being outside the individual users, so it's some kind of universal. There's
[00:05:41.040 --> 00:05:46.120]   a universal embedding that holds across people on this earth.
[00:05:46.120 --> 00:05:50.880]   Yes, I do think that the embeddings you find are going to be reflective of the people who
[00:05:50.880 --> 00:05:56.120]   playlisted. So if you have a lot of indie lovers who playlist, your embed is going to
[00:05:56.120 --> 00:06:04.120]   perform better there. But what we found was that, yes, there were these latent similarities.
[00:06:04.120 --> 00:06:10.960]   They were very powerful. And it was interesting because I think that the people who playlisted
[00:06:10.960 --> 00:06:16.280]   the most initially were the so-called music aficionados who were really into music. And
[00:06:16.280 --> 00:06:23.380]   they often had a certain... Their taste was often geared towards a certain type of music.
[00:06:23.380 --> 00:06:27.480]   And so what surprised us, if you look at the problem from the outside, you might expect
[00:06:27.480 --> 00:06:32.600]   that the algorithms would start performing best with mainstreamers first, because it
[00:06:32.600 --> 00:06:37.440]   somehow feels like an easier problem to solve mainstream taste than really particular taste.
[00:06:37.440 --> 00:06:42.240]   It was the complete opposite for us. The recommendations performed fantastically for people who saw
[00:06:42.240 --> 00:06:48.280]   themselves as having very unique taste. That's probably because all of them playlisted and
[00:06:48.280 --> 00:06:51.840]   they didn't perform so well for mainstreamers. They actually thought they were a bit too
[00:06:51.840 --> 00:06:57.440]   particular and unorthodox. So we had the complete opposite of what we expected. Success within
[00:06:57.440 --> 00:07:01.400]   the hardest problem first, and then had to try to scale to more mainstream recommendations.
[00:07:01.400 --> 00:07:06.400]   [silence]
[00:07:06.400 --> 00:07:11.400]   [silence]
[00:07:11.400 --> 00:07:16.400]   [silence]
[00:07:16.400 --> 00:07:21.400]   [silence]

