
[00:00:00.000 --> 00:00:14.000]   .
[00:00:14.000 --> 00:00:16.000]   It's a pleasure to be with you today.
[00:00:16.000 --> 00:00:20.000]   My name is Michael Alveda and I'm a principal applied scientist at Microsoft.
[00:00:20.000 --> 00:00:24.000]   And today I'm going to be presenting on building applications with AI agents.
[00:00:24.000 --> 00:00:27.000]   So just as a brief bio, I've been at Microsoft for about two years.
[00:00:27.000 --> 00:00:30.000]   I've been one of the key contributors to security copilot
[00:00:30.000 --> 00:00:32.000]   and the recently announced security copilot agents,
[00:00:32.000 --> 00:00:34.000]   specifically working in the cybersecurity division.
[00:00:34.000 --> 00:00:37.000]   Before that I spent four years working on machine learning at Uber,
[00:00:37.000 --> 00:00:40.000]   lots of big geospatial problems, and I was in startups before that.
[00:00:40.000 --> 00:00:44.000]   And this talk is really a distillation of a 300-page book
[00:00:44.000 --> 00:00:46.000]   that I have coming out with O'Reilly.
[00:00:46.000 --> 00:00:50.000]   The first seven chapters are already up on early release on the platform
[00:00:50.000 --> 00:00:52.000]   and it is going to print next month.
[00:00:52.000 --> 00:00:56.000]   And while I'll be focusing mostly on slides, I won't get too deep into code
[00:00:56.000 --> 00:00:57.000]   for this particular talk.
[00:00:57.000 --> 00:01:02.000]   I just want to say that there is full code examples backing everything I'm describing here.
[00:01:02.000 --> 00:01:06.000]   So if you want to dive in a little bit deeper, take a look at what this looks like in actual code.
[00:01:06.000 --> 00:01:10.000]   This is to give you a brief introduction to that.
[00:01:10.000 --> 00:01:13.000]   So to give a brief overview of what I'll be covering,
[00:01:13.000 --> 00:01:17.000]   I'll be talking a little bit about the promise and obstacles that we're seeing so far in agentic development.
[00:01:17.000 --> 00:01:23.000]   I'll go through some of the core components that are required to build really effective AI systems that we get to production.
[00:01:23.000 --> 00:01:27.000]   And then I'll talk through some of the common pitfalls and lessons.
[00:01:27.000 --> 00:01:31.000]   So there's a tremendous amount of excitement that's happening here to just take one data point.
[00:01:31.000 --> 00:01:35.000]   If we look at the companies that have been accepted to Y Combinator just over the last three years,
[00:01:35.000 --> 00:01:41.000]   we've seen a 254% increase in companies that are describing themselves as agentic or as if they're building agents.
[00:01:41.000 --> 00:01:44.000]   Certainly we're seeing a lot of increased investment.
[00:01:44.000 --> 00:01:45.000]   There's a lot of excitement here.
[00:01:45.000 --> 00:01:50.000]   But I think we're also seeing that these are really hard problems that we're going after.
[00:01:50.000 --> 00:01:55.000]   And so if we're looking at some of the leading agentic benchmarks from academia,
[00:01:55.000 --> 00:02:01.000]   we're seeing these are hard tasks that require a sequence of multiple tool calls, multiple executions,
[00:02:01.000 --> 00:02:03.000]   and really operating in complex environments.
[00:02:03.000 --> 00:02:07.000]   If we were to go back five or 10 years, we'd be in the single digits on some of these tasks.
[00:02:07.000 --> 00:02:12.000]   So the fact that we're getting up to in the 50s, 60s, and 70s on some of this is really impressive.
[00:02:12.000 --> 00:02:16.000]   And I think just as Clay described, we want to move to where the puck is moving,
[00:02:16.000 --> 00:02:19.000]   and it's actually accelerating in that direction.
[00:02:19.000 --> 00:02:25.000]   But if you're going and trying to build your own agentic system, do not expect perfection by any measure.
[00:02:25.000 --> 00:02:31.000]   And we're seeing it's quite easy to get to those initial prototype stages that might get you to 70% accuracy,
[00:02:31.000 --> 00:02:36.000]   but it's increasingly challenging to go after that long tail of increasingly complex scenarios.
[00:02:36.000 --> 00:02:41.000]   So just to give a brief definition to start, I'm sure you've heard a few of these at the conference so far.
[00:02:41.000 --> 00:02:46.000]   But I'm defining it as an entity that can reason, act, communicate, and adapt to solve tasks.
[00:02:46.000 --> 00:02:49.000]   And so we treat the foundation model as a foundation.
[00:02:49.000 --> 00:02:55.000]   And then we can add these additional components to increase the performance and effectiveness in different scenarios.
[00:02:55.000 --> 00:02:59.000]   There's been a lot of discussion about what constitutes an agentic system.
[00:02:59.000 --> 00:03:06.000]   And I think Andrew Eng helped clarify this, that it's not a binary distinction, but it really is a continuum.
[00:03:06.000 --> 00:03:07.000]   It really is a spectrum.
[00:03:07.000 --> 00:03:13.000]   And what I would add on to that is there's a second axis that we should consider, which is the effectiveness of the system.
[00:03:13.000 --> 00:03:20.000]   And so I wouldn't think about agency or the agenticness of your system as a goal or an end in and of itself.
[00:03:20.000 --> 00:03:23.000]   It is a tool to help you solve problems.
[00:03:23.000 --> 00:03:30.000]   And so I just think it's a classic example of something that has a very low degree of agency, but a really high degree of efficacy.
[00:03:30.000 --> 00:03:32.000]   It's robotic process automation.
[00:03:32.000 --> 00:03:41.000]   This is a previous generation of automation that's been incredibly helpful and incredibly useful and is used by many companies and delivers a lot of economic value.
[00:03:41.000 --> 00:03:44.000]   The problem is those types of automations are fixed.
[00:03:44.000 --> 00:03:45.000]   They're brittle.
[00:03:45.000 --> 00:03:48.000]   Small changes to the input can allow the entire thing to break.
[00:03:48.000 --> 00:03:52.000]   So it requires a lot of manual intervention to continue maintaining and updating these.
[00:03:52.000 --> 00:04:04.000]   And so I think part of the promise as we move to these more agentic systems is they're flexible, they're adaptable, and they unlock this additional capability of adapting to and responding to those changing inputs.
[00:04:04.000 --> 00:04:12.000]   But we want to make sure that any time we're adding agency to our system when we're moving along the right, we're staying at that very high level of effectiveness.
[00:04:12.000 --> 00:04:17.000]   We want to make sure that any incremental addition towards agency maintains that high level of performance.
[00:04:17.000 --> 00:04:22.000]   What we don't want to do is end up compromising the degree of effectiveness.
[00:04:22.000 --> 00:04:30.000]   And I think there's no shortage of bad chatbots that we've seen shipped by many companies that are relatively low on efficacy and relatively low on agency.
[00:04:30.000 --> 00:04:37.000]   But we also want to avoid our going out over our skis, building agentic systems that are low in efficacy.
[00:04:37.000 --> 00:04:43.000]   That's what I would call the future news stories that all of us want to avoid so that as we're designing things, we're delivering things that are delivering value.
[00:04:43.000 --> 00:04:46.000]   So I'll start with tool use.
[00:04:46.000 --> 00:04:49.000]   And I just want to say this is a really -- it's such a powerful idea.
[00:04:49.000 --> 00:04:50.000]   And it's really simple in principle.
[00:04:50.000 --> 00:04:52.000]   We're working with foundation models.
[00:04:52.000 --> 00:04:56.000]   These are autoregressive generative models that are predicting one token at a time.
[00:04:56.000 --> 00:04:58.000]   Typically, those are predicting natural language.
[00:04:58.000 --> 00:05:01.000]   But they can also output function calls.
[00:05:01.000 --> 00:05:12.000]   And so if you're exposing tools and functionality to this language model in the attribute that we are calling an entity, all of a sudden that agent can now invoke functions.
[00:05:12.000 --> 00:05:16.000]   And we're now exposing the full range of tools that we can expose over APIs.
[00:05:16.000 --> 00:05:22.000]   So just think about the incredible functionality that you can expose to this, but also the risk and challenge that comes along with it.
[00:05:22.000 --> 00:05:32.000]   And so it requires a great degree of discernment and responsibility to think about which of those functionalities we're going to expose and in what way so that we can deliver values to our customers.
[00:05:32.000 --> 00:05:35.000]   And, of course, this also operates in a loop.
[00:05:35.000 --> 00:05:38.000]   So we apply that parser to the outputted text.
[00:05:38.000 --> 00:05:39.000]   We invoke the tool.
[00:05:39.000 --> 00:05:41.000]   And we get some response back, some observation.
[00:05:41.000 --> 00:05:45.000]   That's a way of providing more information to the agent that it can use to solve problems.
[00:05:45.000 --> 00:05:51.000]   We then continue this in a loop until we take our final output and we generate that for the customer.
[00:05:51.000 --> 00:06:00.000]   As you're thinking about designing and building tools, one really common fallacy I see is to think that there's a one-to-one mapping between your APIs and your tools.
[00:06:00.000 --> 00:06:06.000]   If you're working in an organization that has 300 APIs, please do not register 300 tools with your agent.
[00:06:06.000 --> 00:06:08.000]   It will get really confused.
[00:06:08.000 --> 00:06:18.000]   And something we've seen empirically is that the more tools that you expose to an individual prompt, to an individual completion call, the less accuracy you see overall.
[00:06:18.000 --> 00:06:21.000]   There's more semantic collision between those different tools.
[00:06:21.000 --> 00:06:28.000]   So if at all possible, reduce the number of tools that you're exposing at a single time and really try and group them together in logical ways.
[00:06:28.000 --> 00:06:32.000]   You want to keep that scope really specific, really clear, specific names and descriptions.
[00:06:32.000 --> 00:06:35.000]   And those tools should really feel like a single human-facing action.
[00:06:35.000 --> 00:06:44.000]   So now that you've exposed this rich functionality and tools to your agent, you need to think about how you're going to invoke it and what the orchestration pattern is going to look like.
[00:06:44.000 --> 00:06:47.000]   I would recommend that you keep it simple.
[00:06:47.000 --> 00:06:53.000]   And in particular, just a huge amount of great work can be done with these standard workflow patterns.
[00:06:53.000 --> 00:06:58.000]   And it's applying -- so if it can fall into a single chain, please do that.
[00:06:58.000 --> 00:06:59.000]   It will make it easier to measure.
[00:06:59.000 --> 00:07:00.000]   It will keep your costs down.
[00:07:00.000 --> 00:07:01.000]   It will keep your reliability up.
[00:07:01.000 --> 00:07:05.000]   And it will allow you to deliver value for customers more easily.
[00:07:05.000 --> 00:07:08.000]   And you can also apply different types of branching logic.
[00:07:08.000 --> 00:07:12.000]   You can rely on the LLM to choose which path through the tree that you might want to go through.
[00:07:12.000 --> 00:07:24.000]   I work in cybersecurity and applying these types of patterns work really nicely for deciding what the severity of an incident is, what additional information we need to enrich in performing and going through that multi-hop enrichment and reasoning.
[00:07:24.000 --> 00:07:25.000]   It's incredibly valuable.
[00:07:25.000 --> 00:07:32.000]   Moving through to a full agentic pattern is putting more power into the hands of the model.
[00:07:32.000 --> 00:07:37.000]   You're relying on it to choose which actions to invoke and do that repeatedly in order to solve some work.
[00:07:37.000 --> 00:07:41.000]   And it's just harder to measure and it's harder to get full performance out of that.
[00:07:41.000 --> 00:07:43.000]   But remember the bitter lesson.
[00:07:43.000 --> 00:07:57.000]   If you are getting to a point where your chains and the trees that you're building out are becoming so complex and so convoluted and they're difficult to maintain, that's probably a sign that you want to move to a more agentic pattern that will make it easier to maintain long-term.
[00:07:57.000 --> 00:08:02.000]   And it might be something that you might want to start considering doing some additional fine-tuning on your model for that.
[00:08:02.000 --> 00:08:15.000]   The other pattern that we found to be incredibly useful and I think we'll see scale in the future is too many teams are relying on the large language model to apply the logic that they want to have applied.
[00:08:15.000 --> 00:08:25.000]   So if you have some fixed business logic, if you only want to take an action if A, B, and C are correct, what you can do is expose tools to your agent to update each of those states.
[00:08:25.000 --> 00:08:29.000]   And you can apply sanitization and validation on each of those.
[00:08:29.000 --> 00:08:38.000]   You keep your logic in deterministic fixed business logic that you can maintain over time and you maintain the state external to the model.
[00:08:38.000 --> 00:08:43.000]   And so that way you can ensure that the correct actions are only taken when those conditions are met.
[00:08:43.000 --> 00:08:48.000]   There's also been a real interest in moving from single agent to multi-agent systems.
[00:08:48.000 --> 00:08:57.000]   I think the best reason that I know to break down a single agent system to a multi-agent system is exactly that problem I was describing earlier with tool calls.
[00:08:57.000 --> 00:09:01.000]   If you just start dumping too many tools into a single prompt, it will get overwhelmed.
[00:09:01.000 --> 00:09:09.000]   But if you can break down those larger groups of tools into semantically similar groups, register it with an individual agent,
[00:09:09.000 --> 00:09:20.000]   and then rely on this coordinator to route to the appropriate agent to handle that task is a great way to continue to scale as your number of tools grows so you can handle a wider variety of scenarios.
[00:09:20.000 --> 00:09:23.000]   There's also been a lot of talk about the agent to agent protocol.
[00:09:23.000 --> 00:09:25.000]   It's a really exciting future direction.
[00:09:25.000 --> 00:09:31.000]   Most of the successful multi-agent systems that I've seen have been built by an individual team that is able to coordinate that.
[00:09:31.000 --> 00:09:40.000]   I think what agent to agent protocol is really reaching towards and aiming towards is a future where different teams building different agents are able to discover and coordinate and work together.
[00:09:40.000 --> 00:09:46.000]   I think we will see more of that, but it's really early days and there's plenty of additional technical and security questions to work through for that.
[00:09:46.000 --> 00:09:49.000]   This brings us to evaluation.
[00:09:49.000 --> 00:09:56.000]   My general recommendation, both for my team and I think for just about everyone, is invest more in evaluation.
[00:09:56.000 --> 00:10:02.000]   It's gotten so easy to build and it is very easy to get to your 70% or 80% accuracy.
[00:10:02.000 --> 00:10:05.000]   But there are so many hyperperimeters to choose.
[00:10:05.000 --> 00:10:06.000]   How many agents?
[00:10:06.000 --> 00:10:07.000]   How many tools do you expose?
[00:10:07.000 --> 00:10:08.000]   Which model do you use?
[00:10:08.000 --> 00:10:10.000]   What type of memory do I want to use?
[00:10:10.000 --> 00:10:16.000]   All of those questions are almost impossible to answer without a high quality rigorous evaluation set.
[00:10:16.000 --> 00:10:20.000]   So I really encourage everyone to focus more time on this than you think.
[00:10:20.000 --> 00:10:24.000]   And really, it's moving us towards a type of test-driven development with agents.
[00:10:24.000 --> 00:10:28.000]   Your agent then becomes defined in terms of the inputs and the outputs that you're expecting.
[00:10:28.000 --> 00:10:33.000]   And there's a whole range of tools that you can use to then automatically improve relative to that.
[00:10:33.000 --> 00:10:37.000]   So labeling, I think, is a bit of a bad word from all of our time in machine learning.
[00:10:37.000 --> 00:10:40.000]   That is the thing that we outsourced to Mechanical Turk.
[00:10:40.000 --> 00:10:42.000]   I think that is no longer something that we can do.
[00:10:42.000 --> 00:10:52.000]   And really, the AI architects and the AI engineers who are building agents, you really need to take more ownership and responsibility of exactly what you want your agent to do.
[00:10:52.000 --> 00:10:59.000]   And so spending time defining those inputs and outputs can really help accelerate your team in making all of those hard questions as you move forward.
[00:10:59.000 --> 00:11:02.000]   And the ground is changing under us in terms of models and frameworks.
[00:11:02.000 --> 00:11:07.000]   And so you take those user inputs, you run it through your agent, you get your outputs.
[00:11:07.000 --> 00:11:09.000]   There needs to be some amount of human review.
[00:11:09.000 --> 00:11:12.000]   And then you take those new additions, you add them to your evaluation set.
[00:11:12.000 --> 00:11:17.000]   Once you have this evaluation set, you can now run it through your agent and go through our evaluation loop.
[00:11:17.000 --> 00:11:19.000]   You can analyze your failures.
[00:11:19.000 --> 00:11:23.000]   You probably want to do some type of clustering and summarization on those outputs.
[00:11:23.000 --> 00:11:25.000]   And you can suggest improvements.
[00:11:25.000 --> 00:11:29.000]   And if this looks like a lot of work, fortunately, there are fantastic tools to help you with this.
[00:11:29.000 --> 00:11:31.000]   And it's not as hard as it looks.
[00:11:31.000 --> 00:11:34.000]   So a couple incredible open source libraries I recommend.
[00:11:34.000 --> 00:11:37.000]   Intel Agent, which is great at generating additional synthetic inputs.
[00:11:37.000 --> 00:11:44.000]   Let's say you don't necessarily have access to your raw user data for security or privacy concerns.
[00:11:44.000 --> 00:11:46.000]   Or let's say you're building something that hasn't shipped yet.
[00:11:46.000 --> 00:11:48.000]   Synthetic data can get you a long way.
[00:11:48.000 --> 00:11:52.000]   Microsoft is also open sourced pirate, which is great for red teaming agents.
[00:11:52.000 --> 00:12:00.000]   A fantastic idea to run and launch before you ship your agents that will try jailbreak red team and try and otherwise compromise your agent.
[00:12:00.000 --> 00:12:02.000]   Great strategy to take.
[00:12:02.000 --> 00:12:05.000]   Label Studio is a great framework to help you build up these evaluation sets.
[00:12:05.000 --> 00:12:08.000]   And then there's this whole rich set of tools.
[00:12:08.000 --> 00:12:14.000]   So besides automatic prompt optimization, automatic prompt engineering, we also have trace, textgrad, dspy.
[00:12:14.000 --> 00:12:21.000]   All of these allow you to set hyperparameters and calculate gradients using a foundation model as a judge.
[00:12:21.000 --> 00:12:28.000]   So it can look at your failures and automatically suggest changes back through your flows to automatically improve your system.
[00:12:28.000 --> 00:12:33.000]   So instead of you manually looking at examples and having to say, well, maybe this thing will work and I'll run it through,
[00:12:33.000 --> 00:12:36.000]   there's a lot of development by anecdote happening right now.
[00:12:36.000 --> 00:12:42.000]   And I just encourage all of us that as we build up these evaluation sets and run and batch and start analyzing at the aggregate level,
[00:12:42.000 --> 00:12:48.000]   it allows us to make more intelligent steps to take the parallel over to optimizing a neural network model.
[00:12:48.000 --> 00:12:56.000]   slightly larger batches will help us take more accurate steps towards the global minimum.
[00:12:56.000 --> 00:12:57.000]   This brings us to observability.
[00:12:57.000 --> 00:13:00.000]   I think the iceberg is a fantastic metaphor here.
[00:13:00.000 --> 00:13:03.000]   We're working with generative models.
[00:13:03.000 --> 00:13:05.000]   They're very good at generating content.
[00:13:05.000 --> 00:13:10.000]   That's a very good thing, but it also is a real challenge for us as we're thinking about evaluating these systems at scale.
[00:13:10.000 --> 00:13:21.000]   And as soon as you deploy these and get this out into the hands of customers, it becomes really hard to understand what's actually happening out there and really understanding the full range of failures and use cases.
[00:13:21.000 --> 00:13:26.000]   So I encourage you to use tools like open LLMetry and open telemetry integrations.
[00:13:26.000 --> 00:13:37.000]   You really want to have detailed logs and tracing and probably some way of doing additional clustering and automated summarization to understand those main categories of failure modes so that you can optimize and improve your system more easily.
[00:13:37.000 --> 00:13:45.000]   And now this brings us to just a few of the common pitfalls that we've seen both internally and also speaking with folks outside of Microsoft.
[00:13:45.000 --> 00:13:50.000]   Just insufficient evals is far and away the biggest limitation and challenge that I see.
[00:13:50.000 --> 00:13:53.000]   But also on the tool side, maybe you haven't built enough tools.
[00:13:53.000 --> 00:13:57.000]   Maybe the descriptions are not sufficiently accurate or clear.
[00:13:57.000 --> 00:14:00.000]   Maybe there's too high a degree of semantic overlap between your tools.
[00:14:00.000 --> 00:14:08.000]   And so individual completion calls are getting confused between those tools and leading to worse outcomes than you suspect.
[00:14:08.000 --> 00:14:10.000]   And then excessive complexity.
[00:14:10.000 --> 00:14:13.000]   There's so many bells and whistles these days.
[00:14:13.000 --> 00:14:15.000]   It's very easy to go chasing these other things.
[00:14:15.000 --> 00:14:27.000]   I just encourage us all to stay really focused on the principles, really focused on what we're trying to achieve, and only add additional complexity if we've actually tested and make sure that it's actually providing for a better experience for our users and customers.
[00:14:27.000 --> 00:14:31.000]   And then this lack of learning, so tightening up the learning loop is really challenging.
[00:14:31.000 --> 00:14:33.000]   All of this content makes it hard to sift through.
[00:14:33.000 --> 00:14:42.000]   And so really focusing on getting down to those root causes and suggesting improvements that will result in a better system.
[00:14:42.000 --> 00:14:47.000]   And then the final thing I'll add is coming from the cybersecurity division, this is such an exciting time for this technology.
[00:14:47.000 --> 00:14:49.000]   I think it's going to help us in so many ways.
[00:14:49.000 --> 00:14:53.000]   But agentic systems are a new class of potential vulnerability.
[00:14:53.000 --> 00:14:56.000]   And so I just encourage all of us to really design for safety at every layer.
[00:14:56.000 --> 00:14:59.000]   Pirate can definitely help on many layers of this.
[00:14:59.000 --> 00:15:03.000]   But just good software engineering and good principles are really critical for this.
[00:15:03.000 --> 00:15:12.000]   And make sure that you're building tripwires and detectors at different stages of your agentic stack so that you can eject out and fall back to human review in all of the critical cases.
[00:15:12.000 --> 00:15:22.000]   So this brings me to the end of my talk, and I think I'll just close with a quote that I love from Paul Krugman that productivity isn't everything, but in the long run, it is almost everything.
[00:15:22.000 --> 00:15:29.000]   A country's ability to prove its standards of living over time depends almost entirely on its ability to raise its output per worker.
[00:15:29.000 --> 00:15:35.000]   I really think we're at the beginning of an upshift in the amount of work that every single one of us can accomplish.
[00:15:35.000 --> 00:15:40.000]   And I think this new design pattern for agents is going to help each of us accomplish more.
[00:15:40.000 --> 00:15:42.000]   And I'm really excited about what we're going to be able to do together.
[00:15:42.000 --> 00:15:43.000]   Thank you so much.
[00:15:43.000 --> 00:15:44.000]   Thank you so much.
[00:15:44.000 --> 00:15:45.000]   Thank you.
[00:15:45.000 --> 00:15:49.240]   We'll see you next time.

