
[00:00:00.000 --> 00:00:29.980]   Thank you.
[00:00:29.980 --> 00:00:59.960]   Thank you.
[00:00:59.960 --> 00:01:29.940]   Thank you.
[00:01:29.940 --> 00:01:59.920]   Thank you.
[00:01:59.920 --> 00:02:29.900]   Thank you.
[00:02:29.900 --> 00:02:38.260]   Hi, everyone.
[00:02:38.260 --> 00:02:43.660]   Thank you for joining us in today's Reksis, the inaugural Reksis track at the AI Engineer
[00:02:43.660 --> 00:02:44.120]   World's Fair.
[00:02:44.840 --> 00:02:50.840]   So today, what I want to share about is what the future might look like when we try to
[00:02:50.840 --> 00:02:54.240]   merge recommendation systems and language models.
[00:02:54.240 --> 00:02:57.360]   So my wife looked at my slides and she's like, they're so plain.
[00:02:58.240 --> 00:03:01.200]   So therefore, I'll be giving the talk together with latte and mochi.
[00:03:01.200 --> 00:03:04.480]   You might have seen mochi wandering the halls around somewhere, but there'll be a lot of
[00:03:04.480 --> 00:03:05.300]   doggos throughout this slide.
[00:03:05.300 --> 00:03:06.020]   I hope you enjoy.
[00:03:06.020 --> 00:03:12.300]   First, language modeling techniques are not new in recommendation systems.
[00:03:12.800 --> 00:03:14.600]   I mean, it started with work2vec in 2013.
[00:03:14.600 --> 00:03:20.680]   We started learning item embeddings across, from co-occurrences in user interaction sequences,
[00:03:20.680 --> 00:03:23.600]   and then after that, we started using GRU for, right?
[00:03:23.600 --> 00:03:27.460]   I don't know who here remembers recurrent neural networks, gated recurrent units.
[00:03:27.460 --> 00:03:27.680]   Yeah.
[00:03:27.680 --> 00:03:32.880]   So those were very short-term, and we predict the next item from a short set of sequences.
[00:03:32.880 --> 00:03:39.340]   Then, of course, transformers and attention came about, and we became better on attention
[00:03:39.340 --> 00:03:40.480]   on long-range dependencies.
[00:03:40.480 --> 00:03:45.100]   So that's where we started, hey, you know, can we just process on everything in the user
[00:03:45.100 --> 00:03:49.060]   sequence, hundreds, 2,000 item IDs long, and try to learn from that.
[00:03:49.060 --> 00:03:54.820]   And of course, now, today in this track, I wanted to share with you about three ideas that
[00:03:54.820 --> 00:03:59.000]   I think are worth thinking about, semantic IDs, data augmentation, and unified models.
[00:03:59.000 --> 00:04:04.220]   So the first challenge we have is hash-based item IDs.
[00:04:04.220 --> 00:04:06.620]   Who here works on recommendation systems?
[00:04:06.620 --> 00:04:13.460]   So you probably know that hash-based item IDs actually don't encode the content of the item
[00:04:13.460 --> 00:04:17.400]   itself, and then the problem is that every time you have a new item, you suffer from the
[00:04:17.400 --> 00:04:23.000]   cold start problem, which is that you have to relearn about this item all over again, and
[00:04:23.000 --> 00:04:27.180]   therefore, then there's also sparsity, right, whereby you have a long set of tailed items
[00:04:27.180 --> 00:04:30.240]   that have maybe one or two interactions, or even up to ten, but it's just not enough to
[00:04:30.240 --> 00:04:30.440]   learn.
[00:04:30.440 --> 00:04:35.260]   So recommendation systems have this issue of being very popularity bias, and they just
[00:04:35.260 --> 00:04:36.420]   struggle with cold start and sparsity.
[00:04:36.420 --> 00:04:42.000]   So the solution is semantic IDs that may even involve multimodal content.
[00:04:42.900 --> 00:04:46.960]   So here's an example of trainable multimodal semantics IDs from Kuaishou.
[00:04:46.960 --> 00:04:50.140]   So Kuaishou is kind of like TikTok or Xia Hongsu.
[00:04:50.140 --> 00:04:52.480]   It's a short video platform in China.
[00:04:52.480 --> 00:04:53.900]   I think it's the number two short video platform.
[00:04:53.900 --> 00:04:58.580]   You might have used their text-to-video model, Kling, which they released sometime last year.
[00:04:58.580 --> 00:05:04.080]   So the problem they had, you know, being a short video platform, users upload hundreds of millions
[00:05:04.080 --> 00:05:05.200]   of short videos every day.
[00:05:05.740 --> 00:05:07.760]   And it's really hard to learn from this short video.
[00:05:07.760 --> 00:05:13.120]   So how can we combine static content embeddings with dynamic user behavior?
[00:05:13.120 --> 00:05:17.540]   Here's how they did it, with trainable multimodal semantic IDs.
[00:05:17.540 --> 00:05:19.180]   So I'm going to go through each step here.
[00:05:19.180 --> 00:05:22.380]   So this is the Kuaishou model.
[00:05:22.380 --> 00:05:24.560]   It's a standard two-tower network.
[00:05:25.740 --> 00:05:32.420]   On the left, this is the embedding layer for the user, which is a standard sequence of IDs
[00:05:32.420 --> 00:05:33.220]   and the user ID.
[00:05:33.220 --> 00:05:36.320]   And on the right is the embedding layer for the item IDs.
[00:05:36.320 --> 00:05:37.680]   So these are fairly standard.
[00:05:37.680 --> 00:05:42.660]   But what's new here is that they now take in content input.
[00:05:42.660 --> 00:05:44.800]   So all of these slides will be available online.
[00:05:44.800 --> 00:05:46.220]   Don't worry about it.
[00:05:46.220 --> 00:05:48.360]   I'll make it available right immediately after this.
[00:05:48.360 --> 00:05:51.960]   And to encode visual, they use ResNet.
[00:05:51.960 --> 00:05:54.940]   To encode video descriptions, they use BERT.
[00:05:55.160 --> 00:05:57.060]   And to encode audio, they use VGG-ish.
[00:05:57.060 --> 00:06:00.140]   Now the thing about, the trick is this.
[00:06:00.140 --> 00:06:05.440]   When you have this encoder models, it's very hard to backpropagate and try to update these
[00:06:05.440 --> 00:06:06.360]   encoder model embeddings.
[00:06:06.360 --> 00:06:07.680]   So what did they do?
[00:06:07.680 --> 00:06:13.080]   Well, firstly, they took all these content embeddings and then they just concatenated them together.
[00:06:13.080 --> 00:06:14.460]   I know it sounds crazy, right?
[00:06:14.460 --> 00:06:16.120]   But they just concatenated them together.
[00:06:16.120 --> 00:06:18.400]   Then they learned cluster IDs.
[00:06:18.400 --> 00:06:23.540]   So I think they shared in the paper, they had like 100 million short videos.
[00:06:23.760 --> 00:06:27.040]   And they learned just via k-means clustering, 1,000 cluster IDs.
[00:06:27.040 --> 00:06:33.280]   So that's what you see over there in the model encoder, which is in the boxes at the bottom, which is the cluster IDs.
[00:06:33.280 --> 00:06:37.580]   So above the cluster IDs, you have the non-trainable embeddings.
[00:06:37.580 --> 00:06:42.580]   Below that, you have the trainable cluster IDs, which are then all mapped to their own embedding table.
[00:06:42.640 --> 00:06:44.880]   So the trick here is this.
[00:06:44.880 --> 00:06:54.800]   The model encoder, as you train a model, the model encoder learns to map the content space via the cluster IDs, which are mapped to the embedding table, to the behavioral space.
[00:06:56.560 --> 00:06:57.660]   So the output is this.
[00:06:57.660 --> 00:07:04.140]   These semantic IDs not only outperform regular hash-based IDs on clicks and likes, right?
[00:07:04.140 --> 00:07:05.200]   Like, that's pretty standard.
[00:07:05.200 --> 00:07:16.080]   But what they were able to do was they were able to increase co-start coverage, which is, of 100 videos that you share, how many of them are new, they were able to increase it by 3.6%.
[00:07:16.080 --> 00:07:23.600]   And also increase co-start velocity, which is, okay, how many new videos were able to hit some threshold of views?
[00:07:23.600 --> 00:07:30.880]   And this, they did not share what a threshold was, but being able to increase co-start and co-start velocity by these numbers are pretty outstanding.
[00:07:30.880 --> 00:07:37.840]   So the, long story short, the benefits of semantic IDs, you can address co-start with the semantic ID itself.
[00:07:37.840 --> 00:07:40.000]   And now your recommendations understand content.
[00:07:40.580 --> 00:07:46.740]   So, later in the talk, we're going to see some amazing sharing from Pinterest and YouTube.
[00:07:46.740 --> 00:08:01.720]   And in the YouTube one, you see how they actually blend language models with semantic IDs, whereby it can actually explain why you might like the semantic ID, because it understands the semantic ID, and it's able to give human-readable explanations, and vice versa.
[00:08:01.720 --> 00:08:07.160]   Now, next question, and I'm sure everyone here has this challenge.
[00:08:07.740 --> 00:08:19.540]   The lifeblood of machine learning is data, good quality data at scale, and this is very essential for search, and of course recommendation systems, but search is actually far more important.
[00:08:19.540 --> 00:08:30.800]   You need a lot of metadata, you need a lot of query expansion, synonyms, you need spell checking, you need all sorts of metadata to attach to your search index.
[00:08:30.900 --> 00:08:32.500]   But this is very costly and high effort to get.
[00:08:32.500 --> 00:08:38.860]   In the past, we used to do it with human annotations, or maybe you can try to do it automatically, but LLMs have been outstanding at this.
[00:08:38.860 --> 00:08:44.540]   And I'm sure everyone here is sort of doing this to some extent, using LLMs for synthetic data and labels.
[00:08:44.540 --> 00:08:50.440]   But I want to share with you two examples from Spotify and Indeed.
[00:08:51.440 --> 00:08:55.060]   Now, the Indeed paper, I really like it a lot.
[00:08:55.060 --> 00:09:00.760]   So, the problem that they were trying to face is that they were sending job recommendations to users via email.
[00:09:00.760 --> 00:09:04.220]   But some of these job recommendations were bad.
[00:09:04.220 --> 00:09:06.460]   They were just not a good fit for the user, right?
[00:09:06.460 --> 00:09:10.840]   So, they had poor user experience, and then users lost trust in the job recommendations.
[00:09:10.840 --> 00:09:16.300]   Imagine, and how they would indicate that they lost trust was that these job recommendations are not a good fit for me.
[00:09:16.400 --> 00:09:17.200]   I'm just going to unsubscribe.
[00:09:17.200 --> 00:09:23.100]   Now, the moment a user unsubscribes from your feed or for your newsletter, it's very, very, very hard to get them back.
[00:09:23.100 --> 00:09:24.020]   Almost impossible.
[00:09:24.020 --> 00:09:29.580]   So, while they had explicit negative feedback, thumbs up and thumbs down, this was very sparse.
[00:09:29.580 --> 00:09:31.320]   How often would you actually give thumbs down feedback?
[00:09:31.320 --> 00:09:32.340]   Very sparse.
[00:09:32.340 --> 00:09:34.440]   And implicit feedback is often imprecise.
[00:09:34.440 --> 00:09:34.940]   What do I mean?
[00:09:34.940 --> 00:09:40.340]   If you get some recommendations, but you actually don't act on it, is it because you didn't like it?
[00:09:40.340 --> 00:09:41.840]   Or is it because it's not the right time?
[00:09:41.840 --> 00:09:46.740]   Or maybe your wife works there and you don't want to work in the same company as your wife?
[00:09:46.740 --> 00:09:51.740]   So, the solution they had was a lightweight classifier to filter bad rats.
[00:09:51.740 --> 00:09:57.040]   And I'll tell you why I really like this paper from Indeed in the sense that they didn't just share their successes,
[00:09:57.040 --> 00:10:01.760]   but they shared the entire process and how they got there, and it was fraught with challenges.
[00:10:02.620 --> 00:10:07.020]   Well, of course, the first thing that makes me really like it a lot was that they started with evals.
[00:10:07.020 --> 00:10:16.020]   So, they had their experts label job recommendations and user pairs, and from the user, you have their resume data,
[00:10:16.020 --> 00:10:19.760]   you have their activity data, and they tried to see, hey, you know, is this recommendation a good fit?
[00:10:19.760 --> 00:10:25.800]   Then, they prompted open LLMs, Mistral and Lama 2.
[00:10:25.800 --> 00:10:27.460]   Unfortunately, their performance was very poor.
[00:10:27.460 --> 00:10:33.400]   So, these models couldn't really pay attention to what was in the resume and what was in the job description,
[00:10:33.400 --> 00:10:37.220]   even though they had sufficient context length, and the output was just very generic.
[00:10:37.220 --> 00:10:42.820]   So, to get it to work, they prompted GPT-4, and GPT-4 worked really well.
[00:10:42.820 --> 00:10:47.220]   Specifically, GPT-4 had like 90% precision and recall.
[00:10:47.220 --> 00:10:49.160]   However, it was very costly.
[00:10:49.160 --> 00:10:51.680]   They didn't share the actual cost, but it was too slow.
[00:10:51.680 --> 00:10:52.400]   It was 22 seconds.
[00:10:52.400 --> 00:10:55.700]   Okay, if GPT-4 is too slow, what can we do?
[00:10:56.020 --> 00:10:58.000]   Let's try GPT-3.5.
[00:10:58.000 --> 00:11:01.280]   Unfortunately, GPT-3.5 had very poor precision.
[00:11:01.280 --> 00:11:02.740]   What does this mean?
[00:11:02.740 --> 00:11:11.140]   In the sense that of the recommendations that it said were bad, only 63% of them were actually bad.
[00:11:11.140 --> 00:11:15.640]   What this means is that they were throwing out 37% of recommendations, which is one-third.
[00:11:16.080 --> 00:11:21.560]   And for a company that tries on recommendations and people are recruiting through your recommendations,
[00:11:21.560 --> 00:11:26.840]   throwing out one-third of them that are actually good is quite a guardrail for them.
[00:11:26.840 --> 00:11:27.940]   This was their key metric here.
[00:11:27.940 --> 00:11:32.160]   And also, so what they did then is they fine-tuned GPT-2.5.
[00:11:33.160 --> 00:11:34.740]   So you can see the entire journey, right?
[00:11:34.740 --> 00:11:38.040]   Open models, GPT-4, GPT-3, now fine-tuning GPT-2.5.
[00:11:38.040 --> 00:11:41.540]   GPT-2.5 got the precision they wanted, 0.3 precision.
[00:11:41.540 --> 00:11:44.920]   And you know it's one quarter of GPT-4's cost and latency, right?
[00:11:44.920 --> 00:11:46.820]   But unfortunately, it was still too slow.
[00:11:46.820 --> 00:11:48.760]   It was about 6.7 seconds.
[00:11:48.760 --> 00:11:51.140]   And this would not work in an online filtering system.
[00:11:51.420 --> 00:11:57.780]   So therefore, what they did was they distilled a lightweight classifier on the fine-tuned GPT-2.5 labels.
[00:11:57.780 --> 00:12:06.860]   And this lightweight classifier was able to achieve very high performance, specifically 0.86 AUCROC.
[00:12:06.860 --> 00:12:11.200]   I mean, the numbers may not make sense to you, but suffice to say that in an industrial setting, this is pretty good.
[00:12:11.200 --> 00:12:14.740]   And of course, they didn't mention the latency, but it was good enough for real-time filtering.
[00:12:14.740 --> 00:12:16.480]   I think less than 200 milliseconds or something.
[00:12:18.280 --> 00:12:22.640]   So the outcome of this was that they were able to reduce bad recommendations.
[00:12:22.640 --> 00:12:25.460]   They were able to cut out bad recommendations by about 20%.
[00:12:25.460 --> 00:12:32.840]   So initially, they had hypothesized that by cutting down recommendations, even though they were bad, you will get fewer subscriptions.
[00:12:32.840 --> 00:12:34.680]   It's just like sending out links, right?
[00:12:34.680 --> 00:12:35.960]   You might have links that are clickbait.
[00:12:35.960 --> 00:12:37.620]   Even though they are bad, people just click on it.
[00:12:37.620 --> 00:12:42.360]   And they thought that even if we cut out recommendations, even if they were bad, we would get lower application rates.
[00:12:42.360 --> 00:12:43.840]   But this was not the case.
[00:12:43.840 --> 00:12:50.640]   In fact, because the recommendations were now better, application rate actually went up by 4%.
[00:12:50.640 --> 00:12:52.920]   And unsubscribe rate went down by 5%.
[00:12:52.920 --> 00:12:53.880]   That's quite a lot.
[00:12:53.880 --> 00:12:57.960]   So essentially, what this means is that in recommendations, quantity is not everything.
[00:12:57.960 --> 00:12:59.480]   Quality makes a big difference.
[00:12:59.480 --> 00:13:02.080]   And quality here moves the needle quite a bit by 5%.
[00:13:02.080 --> 00:13:05.380]   That example I want to share with you is Spotify.
[00:13:06.140 --> 00:13:09.860]   So who here knows that Spotify has podcasts and audiobooks?
[00:13:09.860 --> 00:13:11.520]   Oh, okay.
[00:13:11.520 --> 00:13:15.120]   I guess you guys are not a target audience in this use case.
[00:13:15.120 --> 00:13:17.620]   So Spotify is really known for song and artists.
[00:13:17.620 --> 00:13:20.260]   And a lot of their users just search for songs and artists.
[00:13:20.260 --> 00:13:21.800]   And they are very good at that.
[00:13:21.800 --> 00:13:29.540]   But when they started introducing podcasts and audiobooks, how would you help your users know that, you know, these new items are available?
[00:13:30.000 --> 00:13:32.240]   And of course, there's a huge-ass cold start problem.
[00:13:32.240 --> 00:13:36.000]   Now it's not only cold start on item, it's now cold start on category.
[00:13:36.000 --> 00:13:40.540]   How do you start growing a new category within your service?
[00:13:40.540 --> 00:13:44.640]   And of course, exploratory search was essential to the business, right?
[00:13:44.640 --> 00:13:46.660]   For going, for expanding beyond music.
[00:13:46.660 --> 00:13:49.020]   Spotify doesn't want to just do music, songs.
[00:13:49.020 --> 00:13:50.560]   They just now want to be doing audio.
[00:13:50.800 --> 00:13:54.900]   So the solution to that is a query recommendation system.
[00:13:54.900 --> 00:14:00.360]   So how did they recommend, how first, how did they generate new queries?
[00:14:00.360 --> 00:14:07.600]   Well, they have a bunch of ideas, which is, you know, extracted from catalog titles, playlist titles, you mine it from the search logs.
[00:14:07.600 --> 00:14:11.660]   You just take the artist and then you just add cover to it.
[00:14:11.660 --> 00:14:14.020]   And this is what they use from existing data.
[00:14:14.020 --> 00:14:17.360]   Now, you might be wondering, like, where is the LLM in this?
[00:14:17.360 --> 00:14:21.660]   Well, the LLM is used to generate natural language queries.
[00:14:21.660 --> 00:14:24.840]   So this might not be sexy, but this works really well, right?
[00:14:24.840 --> 00:14:30.740]   Take whatever you have with conventional techniques that work really well and use the LLM to augment it when you need it.
[00:14:30.740 --> 00:14:32.480]   Don't use the LLM for everything at the start.
[00:14:32.480 --> 00:14:36.300]   So now they have these exploratory queries.
[00:14:38.300 --> 00:14:42.900]   When you search for something, you still get the immediate results hit, right?
[00:14:42.900 --> 00:14:50.160]   So you take all of this, you add the immediate results, and then you rank these new queries.
[00:14:50.160 --> 00:14:54.340]   So this is why when you do a search, this is the UX that you're probably going to get right now.
[00:14:54.340 --> 00:14:55.200]   I got this from a paper.
[00:14:55.200 --> 00:14:56.380]   It may have changed recently.
[00:14:56.380 --> 00:14:58.700]   So you still see the item queries at the bottom.
[00:14:59.240 --> 00:15:05.740]   But at the top, with the query recommendations, this is how Spotify informs users without having a banner.
[00:15:05.740 --> 00:15:06.740]   Now we have audiobooks.
[00:15:06.740 --> 00:15:07.580]   Now we have podcasts, right?
[00:15:07.580 --> 00:15:08.640]   You search for something.
[00:15:08.640 --> 00:15:11.320]   It actually informs you that we have these new categories.
[00:15:11.320 --> 00:15:15.460]   The benefit here is plus 9% exploratory queries.
[00:15:15.460 --> 00:15:21.960]   Essentially, one-tenth of their users will now exploring their new products.
[00:15:21.960 --> 00:15:25.520]   So imagine that one-tenth every day exploring their new products.
[00:15:25.520 --> 00:15:30.000]   How quickly would you be able to grow your new product category, right?
[00:15:30.000 --> 00:15:31.860]   It's actually 1.1 to the power of n.
[00:15:31.860 --> 00:15:33.040]   It will grow pretty fast.
[00:15:33.040 --> 00:15:38.800]   Long story short, I don't have to tell you about the benefits of LLM augmented synthetic data,
[00:15:38.800 --> 00:15:43.320]   which are high-quality data at scale on the tail queries, right?
[00:15:43.320 --> 00:15:47.280]   Even on the tail queries and the tail items, and it's far lower cost and effort
[00:15:47.280 --> 00:15:49.420]   than is even possible with human adaptation.
[00:15:49.920 --> 00:15:55.280]   So later, we also have a talk from Instacart, who will tell us about how they use LLMs
[00:15:55.280 --> 00:15:58.380]   to improve their search system.
[00:15:58.380 --> 00:16:08.740]   Now the last thing I want to share is this challenge, whereby right now, in a regular company,
[00:16:08.740 --> 00:16:14.080]   the system for ads, for recommendations, for search, they're all separate systems.
[00:16:14.080 --> 00:16:18.640]   And even for recommendations, the model for homepage recommendations,
[00:16:18.840 --> 00:16:22.600]   the model for item recommendations, the model for card, add-to-card recommendations,
[00:16:22.600 --> 00:16:24.140]   the model for the thank-you page recommendations,
[00:16:24.140 --> 00:16:26.720]   they may all be different models, right?
[00:16:26.720 --> 00:16:27.760]   So you can imagine this.
[00:16:27.760 --> 00:16:32.120]   You're going to have many, many models, but you're going to have, well,
[00:16:32.120 --> 00:16:34.140]   leadership expects you to keep the same amount of headcount.
[00:16:34.140 --> 00:16:36.500]   So then how do you try to get around this, right?
[00:16:36.500 --> 00:16:38.140]   You have duplicative engineering pipelines.
[00:16:38.320 --> 00:16:43.660]   There's a lot of maintenance costs, and improving one model doesn't naturally transfer to the
[00:16:43.660 --> 00:16:44.700]   improvement in another model.
[00:16:44.700 --> 00:16:48.860]   So the solution for this is unified models, right?
[00:16:48.860 --> 00:16:49.800]   I mean, it works for vision.
[00:16:49.800 --> 00:16:51.180]   It works for language.
[00:16:51.180 --> 00:16:52.600]   So why not recommendation systems?
[00:16:52.600 --> 00:16:53.920]   And we've been doing this for a while.
[00:16:53.920 --> 00:16:54.500]   This is not new.
[00:16:55.580 --> 00:17:01.380]   And aside, maybe the text is too small, but this is a tweet from Stripe, whereby they built
[00:17:01.380 --> 00:17:05.020]   a transformer-based payments fraud model, right?
[00:17:05.020 --> 00:17:10.340]   Even for payments, the sequence of payments, you can build a foundation model, which is transformer-based.
[00:17:12.260 --> 00:17:16.540]   So I want to share an example of the unified ranker for search and rexys and Netflix, right?
[00:17:16.540 --> 00:17:21.460]   The problem I mentioned, they have teams, they are building bespoke models for search, similar
[00:17:21.460 --> 00:17:26.540]   video recommendations, and pre-query recommendations on the search page before you ever enter a search
[00:17:26.540 --> 00:17:26.720]   query.
[00:17:26.720 --> 00:17:29.920]   High operational costs, missed opportunities from learning throughout.
[00:17:29.920 --> 00:17:36.140]   So their solution is a unified ranker, and they call it a unified contextual ranker, which
[00:17:36.140 --> 00:17:36.540]   is unicorn.
[00:17:36.540 --> 00:17:42.200]   So you can see over here at the bottom, there's the user foundation model, and in it,
[00:17:42.200 --> 00:17:44.040]   you put in a user watch history.
[00:17:44.040 --> 00:17:48.640]   And then you also have the context and relevance model, where you put in the context of the
[00:17:48.640 --> 00:17:49.620]   videos and what they've watched.
[00:17:49.620 --> 00:17:56.380]   Now, the thing about this unified model is that it takes in unified input, right?
[00:17:56.380 --> 00:18:02.280]   So now, if you are able to find a data schema where all your use cases and all your features
[00:18:02.280 --> 00:18:07.560]   can use the same input, you can adopt an approach like this, which is similar to multitask learning.
[00:18:08.300 --> 00:18:14.520]   So the input would be the user ID, the item ID, you know, the video or the drama or the series,
[00:18:14.520 --> 00:18:18.860]   the search query, if a search query exists, the country and the task.
[00:18:18.860 --> 00:18:20.620]   So of course, they have many different tasks.
[00:18:20.620 --> 00:18:24.980]   In this example, in the paper, they have three different tasks, search, pre-query, and more
[00:18:24.980 --> 00:18:25.360]   like this.
[00:18:25.880 --> 00:18:31.200]   Now, what they did then was very smart imputation of missing items.
[00:18:31.200 --> 00:18:36.980]   So for example, if you are doing an item-to-item recommendation, you're just done watching this
[00:18:36.980 --> 00:18:39.440]   video, you're going to recommend the next video, you're going to have no search query.
[00:18:39.440 --> 00:18:40.480]   How would you impute it?
[00:18:40.480 --> 00:18:44.800]   Well, you just simply use the title of the current item and try to find similar items.
[00:18:46.420 --> 00:18:52.060]   The outcome of this is that this unified model was able to match or exceed the metrics of
[00:18:52.060 --> 00:18:53.900]   their specialized models on multiple tasks.
[00:18:53.900 --> 00:18:56.040]   Think about it.
[00:18:56.040 --> 00:18:57.880]   I mean, it doesn't seem very impressive, right?
[00:18:57.880 --> 00:18:58.940]   It may not seem very impressive.
[00:18:58.940 --> 00:19:04.080]   Match or exceed, you might say we did all this work just to match, but imagine unifying all
[00:19:04.080 --> 00:19:09.280]   of it, like removing the tech debt and building a better foundation for your future iterations.
[00:19:09.280 --> 00:19:10.740]   It's going to make you iterate faster.
[00:19:12.240 --> 00:19:15.220]   The last example I want to share with you is unified embeddings at Etsy.
[00:19:15.220 --> 00:19:19.300]   So you might think that embeddings are not very sexy, but this paper from Etsy is really
[00:19:19.300 --> 00:19:23.280]   outstanding in what they share in terms of model architecture as well as their system.
[00:19:23.280 --> 00:19:30.440]   So the problem they had was how can you help users get better results from very specific
[00:19:30.440 --> 00:19:31.720]   queries or very broad queries?
[00:19:31.720 --> 00:19:34.260]   And if you know, the Etsy inventory is constantly changing.
[00:19:34.260 --> 00:19:37.400]   They don't have the same products all throughout, right?
[00:19:37.400 --> 00:19:38.220]   It's very homegrown.
[00:19:38.220 --> 00:19:41.480]   So now you might be querying for something like Mother's Day GIF.
[00:19:41.900 --> 00:19:44.980]   They would almost match very few items.
[00:19:44.980 --> 00:19:48.440]   I think very few items would have Mother's Day GIF in their description on their title,
[00:19:48.440 --> 00:19:48.680]   right?
[00:19:48.680 --> 00:19:53.500]   And you know, lexical embedding, the other problem is that knowledge-based embeddings,
[00:19:53.500 --> 00:19:56.600]   like lexical embedding retrieval, don't account for user preferences.
[00:19:56.600 --> 00:19:58.640]   So how do you try to address this?
[00:19:58.640 --> 00:20:03.580]   Their problem, how they address this is with unified embedding and retrieval.
[00:20:04.140 --> 00:20:11.000]   So if you remember, at the start of my presentation, I talked about the two-tower model, right?
[00:20:11.000 --> 00:20:13.940]   There's the user tower, and then there's the item tower.
[00:20:13.940 --> 00:20:15.720]   We will see the same pattern again.
[00:20:15.720 --> 00:20:18.620]   Over here, you see the product tower, right?
[00:20:18.620 --> 00:20:19.520]   This is the product encoder.
[00:20:20.200 --> 00:20:24.480]   So how they encode the product is that they use T5 models for text embeddings, right?
[00:20:24.480 --> 00:20:28.860]   Text item descriptions, as well as a query product log for query embeddings.
[00:20:28.860 --> 00:20:33.100]   What was the query that was made, and what was the product that was eventually clicked or purchased.
[00:20:33.100 --> 00:20:38.380]   And then over here on the left, you see the query encoder, which is the search query encoder.
[00:20:38.800 --> 00:20:49.660]   And they both share encoders for the tokens, which is actually a text token, the product category, which is a token of itself, and the user location.
[00:20:49.660 --> 00:20:55.940]   So what this means is that now your embedding is able to match user to the location of the product itself.
[00:20:55.940 --> 00:21:01.960]   And then, of course, to personalize this, they encode the user preferences via the query user scale effect.
[00:21:01.960 --> 00:21:07.380]   Essentially, what were the queries that the user searched for, what did they buy previously, all their preferences.
[00:21:08.120 --> 00:21:11.120]   Now, this is, they also shared their system architecture.
[00:21:11.120 --> 00:21:16.540]   And over here, this is the product encoder from the previous slide, and the query encoder from the previous slide.
[00:21:16.540 --> 00:21:29.460]   But what's very interesting here is that they added a quality vector, because they wanted to ensure that whatever was searched and retrieved was actually of good quality in terms of ratings, freshness, and conversion rate.
[00:21:29.460 --> 00:21:34.820]   And, you know, what they did is they just simply concatenated this quality vector to the product embedding vector.
[00:21:36.320 --> 00:21:44.460]   But when you do that for the query vector, you have to expand the product vector by the same dimension so that you can do a dot product or cosine similarity.
[00:21:44.460 --> 00:21:49.420]   So essentially, they just slapped on a constant vector for the query embedding, and it just works.
[00:21:49.420 --> 00:21:54.820]   The result, 2.6% increase in conversion across the entire site.
[00:21:54.820 --> 00:21:56.180]   That's quite crazy.
[00:21:56.880 --> 00:21:59.340]   And more than 5% increase in search purchases.
[00:21:59.340 --> 00:22:02.500]   If you search for something, the purchase rate increases by 5%.
[00:22:02.500 --> 00:22:06.600]   This is very, very, these are very, very, very good results for e-commerce.
[00:22:06.600 --> 00:22:11.800]   So the benefits of unified model, you simplify a system.
[00:22:11.800 --> 00:22:22.900]   Whatever you build to improve one side of the tower, improve your model, your unified model, also improves other use cases that use this unified model.
[00:22:23.500 --> 00:22:25.700]   That said, there may also be the alignment text.
[00:22:25.700 --> 00:22:36.060]   You may find that when you try to build this, try to compress all 12 use cases into a single unified model, you may need to split it up into maybe two or three separate unified models because that's just the alignment text.
[00:22:36.060 --> 00:22:38.520]   We're trying to get better on one task, actually makes the other task worse.
[00:22:39.600 --> 00:22:51.520]   We have a talk from LinkedIn in this afternoon blog, the last talk of the blog, and then we also have a talk from Netflix, which we'll be sharing about their unified model at the start of the next blog.
[00:22:51.520 --> 00:23:00.420]   All right, the three takeaways I have for you, think about it, consider it, semantic IDs, data augmentation, and unified models.
[00:23:02.880 --> 00:23:07.500]   And, of course, do stay tuned for the rest of the talks in this track.
[00:23:07.500 --> 00:23:08.820]   Okay, that's it.
[00:23:08.820 --> 00:23:09.340]   Thank you.
[00:23:16.340 --> 00:23:22.920]   I maybe have time for one question while we have our speakers from Pinterest.
[00:23:22.920 --> 00:23:24.660]   Come up and join us.
[00:23:24.660 --> 00:23:29.000]   Oh, you have a question?
[00:23:29.000 --> 00:23:33.100]   Oh, do you mind speaking in the mic, please?
[00:23:35.500 --> 00:23:48.960]   I read your very long paper that you wrote on recommendation systems and what's available today, but you didn't mention the Genrec or HST you work for Metis paper, and I was just curious why you left that out.
[00:23:48.960 --> 00:23:50.440]   I didn't deliberately left that out.
[00:23:50.440 --> 00:23:56.760]   I think there were so many papers that I just didn't have time, and I just time boxed myself.
[00:23:56.760 --> 00:24:02.920]   I was like, okay, you're going to be done with this in two weeks, and then two weeks is up, that's all I have, so ship it.
[00:24:03.620 --> 00:24:04.180]   That's all.
[00:24:04.180 --> 00:24:05.600]   Yes, another question, please.
[00:24:05.600 --> 00:24:27.860]   I feel like I have read in anecdotal blog posts about how part of what people might say is some of the decline in Google search quality is a move away from explicit ranking factors and sort of an easily auditable, like, ultimate ranking algorithm to something more black box and using more of those techniques.
[00:24:27.860 --> 00:24:39.620]   And I guess I was curious if you had an opinion on whether that seems likely to be the case or whether that is just, you know, noise and not actually influencing the quality of the search results.
[00:24:40.020 --> 00:24:40.860]   Yeah, that's a good question.
[00:24:40.860 --> 00:24:45.700]   Unfortunately, I don't have any insider information on why that might happen.
[00:24:45.700 --> 00:24:48.260]   I think we do have some Google folks here.
[00:24:48.260 --> 00:24:54.580]   Maybe you can ask them, but honestly, I haven't realized this, and I haven't even experienced this, the degradation.
[00:24:55.020 --> 00:25:10.020]   I haven't realized this, and I haven't realized this, but I haven't realized this, and I haven't realized this, and I haven't realized that this, and I haven't realized this, but I haven't realized that this is the same.
[00:25:10.020 --> 00:25:24.780]   Okay.
[00:25:24.780 --> 00:25:24.780]   Okay.
[00:25:24.780 --> 00:25:24.780]   Okay.
[00:25:24.780 --> 00:25:24.780]   Okay.
[00:25:24.780 --> 00:25:25.780]   Okay.
[00:25:25.780 --> 00:25:26.780]   Okay.
[00:25:26.780 --> 00:25:56.760]   Thank you.
[00:25:56.760 --> 00:26:26.740]   Thank you.
[00:26:26.740 --> 00:26:56.720]   Thank you.
[00:26:56.720 --> 00:27:26.700]   Thank you.
[00:27:26.700 --> 00:27:34.700]   Thank you everyone for your patience.
[00:27:34.700 --> 00:27:38.900]   Next, we have Han and Mukunsu, machine learning engineers from Pinterest.
[00:27:39.800 --> 00:27:56.300]   They'll be sharing with us about how they integrated LLM to enhance relevant scoring at Pinterest, how they combine search queries with multi-modal context. And this multi-modal context includes visual captions, link-based text, and user-curated signals.
[00:27:56.800 --> 00:28:13.300]   Thanks for the introduction. Hi, everyone. Thanks for joining the talk today. We're super excited to be here and share some of the learnings we have from integrating the LLM into Pinterest search.
[00:28:13.800 --> 00:28:20.800]   My name is Han and today I'll be presenting with Mukunda and we are both machine learning engineers from search relevance team at Pinterest.
[00:28:20.800 --> 00:28:32.800]   So start with a brief introduction to Pinterest. Pinterest is a visual discovery platform where pinners can come to find inspiration to create a life they love.
[00:28:32.800 --> 00:28:56.800]   And there are three main discovery services on Pinterest, the home fee, the related things, and search. Today's talk will be focusing on search and where the user can type in their queries and find useful inspiring content based on their information need. And we'll share how we lab with LLM to improve the search relevance.
[00:28:56.800 --> 00:29:19.800]   Here are some key statistics for Pinterest search. Every month we handled over 6 billion searches with billions of things to search from covering topics from recipe, home decor, travel, fashion, and beyond. And at Pinterest, search is remotely global and multilingual.
[00:29:19.800 --> 00:29:34.800]   We support over 45 languages and reaching fingers in more than 100 countries. These numbers highlight the importance of search at Pinterest and why we are investing in search relevance to improve user experience.
[00:29:34.800 --> 00:30:02.800]   So this is an overview of how Pinterest search work at the back end. So it's similar to many recommendation systems and industry. It has query understanding, retrieval, re-ranking, and the blending stage. And finally produced relevant and engagement search feeds. And in today's talk, we'll be focusing on the semantic relevance model that happens in
[00:30:02.800 --> 00:30:30.800]   The semantic relevance model that happens at the re-ranking stage. And share about how we use LLM to improve the search relevance on the search feed. Okay. So here's our search relevance model, which is essentially a classification model. Given a search query and a pin, the model will predict how much the pin is relevant to this search query.
[00:30:30.800 --> 00:30:54.800]   And to measure this, we use a five point scale. And to measure this, we use a five point scale, ranging from the most relevant to most irrelevant. All right. Now we are going to share some key learnings we have from using the LLM to improve search, Pinterest search relevance. And here are four main takeaways that we would like to go into more details.
[00:30:54.800 --> 00:30:59.800]   Lesson one. Lesson one. LLM are good at relevance prediction.
[00:30:59.800 --> 00:31:22.800]   So before I present the results, let me first give a quick overview of the model architecture that we are using. We contain the query and the pin text together and pass them into a LLM to get an embedding. So this is called cross-encoder structure.
[00:31:22.800 --> 00:31:50.800]   Where we can better capture the interaction between the query and the pin. And then we feed the embedding from LLM into an MLP layer to produce a five dimensional vector which corresponds to the five relevance levels. And during training, we fine tune some open source LLM using Pinterest internal data and to better adapt the model to our Pinterest content.
[00:31:50.800 --> 00:32:18.800]   And here I'd like to share some results to demonstrate that the usefulness of LLM. And as a baseline, we use search stage, which is a Pinterest in house content and the query embedding. And so if you look at the table, you can see that the LLM has substantially improved the performance of the relevance prediction.
[00:32:18.800 --> 00:32:46.800]   And as we use more advanced LLM's and increase the model size, the performance keeps improving. And for example, the 8 billion model gives 12% of improvement over the multilingual bird-based model and 20% of improvement over the search stage embedding model. So the lesson here is that LLM's, they are quite good at relevance prediction.
[00:32:46.800 --> 00:33:14.800]   All right, lesson two. The vision language model generated captions and user actions can be quite useful for content annotations. So to use LLM for search for relevance prediction, we need to use a text representation of each pin. And here I listed several features that we use for the user
[00:33:14.800 --> 00:33:26.800]   For the user curated board that the pin has been saved to or the queries that led to less than a second, like a 500, 400 millisecond latency at best.
[00:33:26.800 --> 00:33:38.800]   There are three levels that we can pull in order to make the model more efficient and improve the throughput and reduce the latency for these models.
[00:33:38.800 --> 00:33:50.800]   So the first step is to use the model. And then we can use the model to make the model more efficient and then we can use the model to make the model more efficient.
[00:33:50.800 --> 00:34:02.800]   We can use the model to make the model more efficient. And then we can use the model to make the model more efficient and then we can use the model to make the model more efficient.
[00:34:02.800 --> 00:34:14.800]   So we can use the model to make the model more efficient and then we can use the model to make the model more efficient and then we can use the model to make the model more efficient.
[00:34:14.800 --> 00:34:26.800]   And one of the recipes here is that we need to do the distillation step by step. And that means that we go with, for example, 8B model, then 3B model and then 1B model.
[00:34:26.800 --> 00:34:33.800]   So we slowly decrease the size of the model. And we distill over and over from the previous model.
[00:34:33.800 --> 00:34:43.800]   And that recipe shows to be much more effective rather than basically directly going from 150B model to 1B model.
[00:34:43.800 --> 00:34:58.800]   Same thing for pruning. So pruning is a mathematical optimization problem. You want to either reduce the number of hits in the transformers, you can reduce the number of MLPs.
[00:34:58.800 --> 00:35:03.800]   Overall, these transformers models proven to be very, very redundant in terms of keeping the information.
[00:35:03.800 --> 00:35:15.800]   So we can start pruning and removing some of these layers or reduce basically the precision for each of the activations and parameters.
[00:35:15.800 --> 00:35:23.800]   However, again, if you do the pruning very aggressively at the beginning, your performance would significantly suffer.
[00:35:23.800 --> 00:35:32.800]   So the recipe here is also do the gradual pruning. What we do is that we start pruning the model, very small pruning to the model.
[00:35:32.800 --> 00:35:41.800]   We distill to the smaller model and we do it over and over again. More pruning, more distillation, more pruning, more distillation.
[00:35:41.800 --> 00:35:51.800]   And as you can see from this plot, doing the gradual pruning can be as effective as basically no information loss.
[00:35:51.800 --> 00:36:00.800]   Whereas if you just basically do the aggressive pruning at the beginning, you can have up to 1% reduction in the model quality.
[00:36:00.800 --> 00:36:09.800]   Another level is quantization. Going to lower precision, we are leveraging FB8 for activation model parameters.
[00:36:09.800 --> 00:36:17.800]   However, doing just FB8 in all the layers has the performance of the model or the quality of the model significantly.
[00:36:17.800 --> 00:36:20.800]   So now basically your tool would be to do mixed precision.
[00:36:20.800 --> 00:36:28.800]   And one of the important aspects when it comes to ranking and recommendations and overall prediction tasks is you want the model,
[00:36:28.800 --> 00:36:32.800]   the prediction or the probability of the model to have a very good precision.
[00:36:32.800 --> 00:36:37.800]   So the LM head at the end of the language model has to be in FP32.
[00:36:37.800 --> 00:36:43.800]   If you do it in FP16, BF16 or FP8, what happens is that the numbers collapse.
[00:36:43.800 --> 00:36:50.800]   And you don't have a very good calibration on top of that and you cannot distinguish between different items recommended.
[00:36:50.800 --> 00:36:53.800]   Last part is sparsification.
[00:36:53.800 --> 00:36:57.800]   We can sparsify basically the attentions.
[00:36:57.800 --> 00:37:01.800]   The most expensive part of the transformers is attention scores.
[00:37:01.800 --> 00:37:03.800]   And we can leverage sparsification.
[00:37:03.800 --> 00:37:06.800]   Not every item needs to attend to every item.
[00:37:06.800 --> 00:37:11.800]   And when you know your task and you know this recommendation, these are the items that you want to -- in the history,
[00:37:11.800 --> 00:37:15.800]   you can sparsify and not have every item attend to each other.
[00:37:15.800 --> 00:37:18.800]   And same goes with when you are recommending the items.
[00:37:18.800 --> 00:37:23.800]   Instead of recommending one item, you can recommend 50 items, 500 items at the same time.
[00:37:23.800 --> 00:37:26.800]   But you want to make sure that these items are not attending to each other.
[00:37:26.800 --> 00:37:37.800]   So you sparsify the attention scores for the output and for the query.
[00:37:37.800 --> 00:37:44.800]   If you put everything together, we can see that basically we can have a significant reduction in the latency.
[00:37:44.800 --> 00:37:53.800]   What we have done is that in four or five of our release, one release after the other, we were able to reduce the latency by 7x.
[00:37:53.800 --> 00:38:00.800]   And at the same time increasing the throughput, which is basically the number of queries that we can handle by one GPU by 30x.
[00:38:00.800 --> 00:38:04.800]   So we are improving basically the amount of work that the GPU is doing.
[00:38:04.800 --> 00:38:13.800]   At the same time, we are reducing the latency that each query is sent.
[00:38:13.800 --> 00:38:23.800]   These are some of basically technical reports and papers that we published during our journey to share with the community, basically, our lesson learned.
[00:38:23.800 --> 00:38:28.800]   And that's the end of our talk.
[00:38:28.800 --> 00:38:31.800]   So we have some time also to answer some questions.
[00:38:31.800 --> 00:38:32.800]   Thank you.
[00:38:32.800 --> 00:38:37.800]   .
[00:38:37.800 --> 00:38:41.800]   Thank you. Great talk.
[00:38:41.800 --> 00:38:42.800]   One question.
[00:38:42.800 --> 00:38:44.800]   How did you measure that it doesn't lose generalization power?
[00:38:44.800 --> 00:38:46.800]   Obviously, you've done a lot of fine tuning.
[00:38:46.800 --> 00:38:51.800]   And you mentioned it works for four or five tasks instead of task-specific models.
[00:38:51.800 --> 00:38:53.800]   How do you know it's going to work for the next five tasks?
[00:38:53.800 --> 00:38:54.800]   That's a good question.
[00:38:54.800 --> 00:38:59.800]   So we have a lot of -- I mean, the answer overall is having a very comprehensive benchmarking set.
[00:38:59.800 --> 00:39:03.800]   We have something around like 50 to 60 benchmarking.
[00:39:03.800 --> 00:39:04.800]   Some of them are internal.
[00:39:04.800 --> 00:39:05.800]   Some of them are external.
[00:39:05.800 --> 00:39:09.800]   For example, we leverage IFEVAT to make sure that the model still follows a very good instruction.
[00:39:09.800 --> 00:39:16.800]   And as Maziar mentioned, some of the tasks are never being part of our training data.
[00:39:16.800 --> 00:39:24.800]   And that's how we are measuring basically digitalization to the new domain within the use cases, for example.
[00:39:24.800 --> 00:39:26.800]   Thanks for the job.
[00:39:26.800 --> 00:39:31.800]   I'm wondering what a small listing website can use out of the box.
[00:39:31.800 --> 00:39:35.800]   Have you heard of NLWeb, which is launched recently by Microsoft?
[00:39:35.800 --> 00:39:39.800]   If yes, what are your views on that as a recommendation system?
[00:39:39.800 --> 00:39:40.800]   NLWeb.
[00:39:40.800 --> 00:39:41.800]   No, I haven't actually heard of it.
[00:39:41.800 --> 00:39:42.800]   No, okay, okay.
[00:39:42.800 --> 00:39:43.800]   Sorry about that.
[00:39:43.800 --> 00:39:50.800]   Anything you -- for smaller ones listing websites, a real listed listing website has like thousands of real listed listings.
[00:39:50.800 --> 00:39:55.800]   What are the out-of-the-box recommendation models that people can start using?
[00:39:55.800 --> 00:40:00.800]   I mean, that's the -- I wish that such a model would exist.
[00:40:00.800 --> 00:40:04.800]   I don't really -- I mean, that's why I think we started this work.
[00:40:04.800 --> 00:40:09.800]   We were trying to see if we can actually make it a foundation model so that you can actually solve those kinds of problems.
[00:40:09.800 --> 00:40:16.800]   I think there's a lot of potential for this to be able to serve a lot of the use cases that are beyond the bigger companies.
[00:40:16.800 --> 00:40:17.800]   But definitely I don't know any --
[00:40:17.800 --> 00:40:20.800]   I think you should check out NLWeb one.
[00:40:20.800 --> 00:40:21.800]   Okay.
[00:40:21.800 --> 00:40:22.800]   I'll look at that.
[00:40:22.800 --> 00:40:23.800]   Okay.
[00:40:23.800 --> 00:40:26.800]   Thank you for the great talk.
[00:40:26.800 --> 00:40:35.800]   On the slide where you mentioned you have a multi-item scoring, I'm curious, like, what does that effectively mean?
[00:40:35.800 --> 00:40:42.800]   Does it mean that you need to do multi-step decoding or it's just one step or just processing the logics for multiple items?
[00:40:42.800 --> 00:40:43.800]   What does it --
[00:40:43.800 --> 00:40:44.800]   It's a multi-step.
[00:40:44.800 --> 00:40:51.800]   We don't want to basically -- we didn't want to go to the, for example, complication of speculative decoding or basically the decoding aspect.
[00:40:51.800 --> 00:40:53.800]   We wanted to have everything at the prefill.
[00:40:53.800 --> 00:40:54.800]   Okay.
[00:40:54.800 --> 00:40:57.800]   So what we did was basically all the items are being sequenced.
[00:40:57.800 --> 00:41:01.800]   All the recommended items or potential candidates are sequenced together.
[00:41:01.800 --> 00:41:02.800]   Mm-hmm.
[00:41:02.800 --> 00:41:05.800]   But we also wanted to avoid them to attend to each other.
[00:41:05.800 --> 00:41:06.800]   Mm-hmm.
[00:41:06.800 --> 00:41:10.800]   So we leveraged basically what we call it like a 4D attention mask.
[00:41:10.800 --> 00:41:17.800]   And we developed a special kernel actually in the SGLang and VLLM to be able to do that.
[00:41:17.800 --> 00:41:25.800]   And now when you have up to 500 items in your query segment, those items don't attend to each other.
[00:41:25.800 --> 00:41:29.800]   They only attend to the historical user and user profile information.
[00:41:29.800 --> 00:41:30.800]   Okay.
[00:41:30.800 --> 00:41:31.800]   Thank you.
[00:41:31.800 --> 00:41:32.800]   Hey.
[00:41:32.800 --> 00:41:33.800]   Great talk.
[00:41:33.800 --> 00:41:37.800]   So a user history means many things, right?
[00:41:37.800 --> 00:41:41.800]   So like there is all of the jobs that they've applied to are in the job postings.
[00:41:41.800 --> 00:41:43.800]   There are so many entities and so on.
[00:41:43.800 --> 00:41:46.800]   The context of the model can get quite large.
[00:41:46.800 --> 00:41:47.800]   How did you manage that?
[00:41:47.800 --> 00:41:51.800]   Did you compress it or were there parts that you focused on?
[00:41:51.800 --> 00:41:52.800]   Yeah.
[00:41:52.800 --> 00:41:55.800]   So we actually experimented with a lot of things.
[00:41:55.800 --> 00:42:04.800]   We experimented with the rack system so that basically when you have a query we try to figure out what are the most closest items in your history to bring it up.
[00:42:04.800 --> 00:42:10.800]   We also experimented with chronical orders and some sort of weight decayed on the chronical orders.
[00:42:10.800 --> 00:42:16.800]   It turns out that for majority of applications that we have actually chronical order is good enough.
[00:42:16.800 --> 00:42:19.800]   And that kind of makes sense because the recommendation systems are very biased to the freshness.
[00:42:19.800 --> 00:42:20.800]   Yeah.
[00:42:20.800 --> 00:42:23.800]   So the more recent user activity helps.
[00:42:23.800 --> 00:42:29.800]   One of the biggest challenge is actually this has now become more like a traditional problem.
[00:42:29.800 --> 00:42:33.800]   How do you balance the distribution of your positive and negative within the context?
[00:42:33.800 --> 00:42:38.800]   And I think that's become something that more like an ML engineering effort to figure out.
[00:42:38.800 --> 00:42:39.800]   Okay.
[00:42:39.800 --> 00:42:40.800]   Do I want more positive or negative?
[00:42:40.800 --> 00:42:44.800]   Like how much information I need to put in the context?
[00:42:44.800 --> 00:42:45.800]   Okay.
[00:42:45.800 --> 00:42:46.800]   Yeah.
[00:42:46.800 --> 00:42:47.800]   I can add one more thing to this.
[00:42:47.800 --> 00:42:48.800]   Sure.
[00:42:48.800 --> 00:42:49.800]   There's also another complication.
[00:42:49.800 --> 00:42:54.800]   When you go to the serving of these models, you don't want to break the KV caching or something that you're using in the serving.
[00:42:54.800 --> 00:43:00.800]   So it's going to be a little bit more complicated, more cumbersome to do something that's smarter than just putting the chronological order.
[00:43:00.800 --> 00:43:02.800]   So that's something that needs to be designed.
[00:43:02.800 --> 00:43:04.800]   So it's not something that's very obvious.
[00:43:04.800 --> 00:43:05.800]   Yeah, absolutely.
[00:43:05.800 --> 00:43:06.800]   One more question.
[00:43:06.800 --> 00:43:09.800]   You guys did so many experiments, tried out so many things.
[00:43:09.800 --> 00:43:11.800]   How's your entire system set up?
[00:43:11.800 --> 00:43:16.800]   Because I'm assuming that you say quantization, but you must have tried different forms of quantization and whatnot.
[00:43:16.800 --> 00:43:22.800]   How do you set up the system in such a way that you can try out multiple experiments and see what works best?
[00:43:22.800 --> 00:43:24.800]   Can you talk a bit about that?
[00:43:24.800 --> 00:43:25.800]   Yeah.
[00:43:25.800 --> 00:43:26.800]   So I'll just touch a bit on that one.
[00:43:26.800 --> 00:43:31.800]   I think the one thing that we hold a very high bar for the one was automation.
[00:43:31.800 --> 00:43:34.800]   So our system is very automated.
[00:43:34.800 --> 00:43:41.800]   To the extent that when you're running experimentation, actually the result of the experiment is being pushed automatically into the Excel sheet.
[00:43:41.800 --> 00:43:46.800]   And now when you have such an automated system, now basically the developers are very efficient in terms of it.
[00:43:46.800 --> 00:43:48.800]   I just want to figure out different quantization.
[00:43:48.800 --> 00:43:54.800]   So you just change the quantization parameters and everything else happens end to end.
[00:43:54.800 --> 00:43:59.800]   So I think automation is the key if you want to basically really optimize for these models.
[00:43:59.800 --> 00:44:02.800]   So did you build all of that automation in-house or did you...?
[00:44:02.800 --> 00:44:03.800]   Yes.
[00:44:03.800 --> 00:44:04.800]   Most of them.
[00:44:04.800 --> 00:44:06.800]   I mean we leveraged, for example, lightning, VLL, MSG like.
[00:44:06.800 --> 00:44:12.800]   We leveraged basically a lot of open source tools, but we make sure that they are integrated
[00:44:12.800 --> 00:44:16.800]   very well with each other and optimize basically the entire flow.
[00:44:16.800 --> 00:44:17.800]   Okay.
[00:44:17.800 --> 00:44:18.800]   Thank you.
[00:44:18.800 --> 00:44:19.800]   Thank you.
[00:44:19.800 --> 00:44:20.800]   Thank you.
[00:44:20.800 --> 00:44:21.800]   Thank you again, Hamad Mazah.
[00:44:21.800 --> 00:44:22.800]   Thank you.
[00:44:22.800 --> 00:44:23.800]   So we'll come back after lunch at 2:00.
[00:44:23.800 --> 00:44:24.800]   So I'll see you guys back here.
[00:44:24.800 --> 00:44:25.800]   Thank you.
[00:44:25.800 --> 00:44:26.800]   Thank you.
[00:44:26.800 --> 00:44:27.800]   Thank you.
[00:44:27.800 --> 00:44:27.800]   Thank you.
[00:44:27.800 --> 00:44:27.800]   Thank you.
[00:44:27.800 --> 00:44:28.800]   Thank you.
[00:44:28.800 --> 00:44:29.800]   Thank you.
[00:44:29.800 --> 00:44:30.800]   Thank you.
[00:44:30.800 --> 00:44:31.800]   Thank you.
[00:44:31.800 --> 00:44:31.800]   Thank you.
[00:44:31.800 --> 00:44:32.800]   Thank you.
[00:44:32.800 --> 00:44:33.800]   Thank you.
[00:44:33.800 --> 00:44:33.800]   Thank you.
[00:44:33.800 --> 00:44:34.900]   Thank you.
[00:44:34.900 --> 00:45:04.880]   Thank you.
[00:45:04.880 --> 00:45:34.860]   Thank you.
[00:45:34.860 --> 00:46:04.840]   Thank you.
[00:46:04.840 --> 00:46:34.820]   Thank you.
[00:46:34.820 --> 00:47:04.800]   Thank you.
[00:47:04.800 --> 00:47:34.780]   Thank you.
[00:47:34.780 --> 00:48:04.760]   Thank you.
[00:48:04.760 --> 00:48:34.740]   Thank you.
[00:48:34.740 --> 00:49:04.720]   Thank you.
[00:49:04.720 --> 00:49:34.700]   Thank you.
[00:49:34.700 --> 00:50:04.680]   Thank you.
[00:50:04.680 --> 00:50:34.660]   Thank you.
[00:50:34.660 --> 00:51:04.640]   Thank you.
[00:51:04.640 --> 00:51:34.620]   Thank you.
[00:51:34.620 --> 00:52:04.600]   Thank you.
[00:52:04.600 --> 00:52:34.580]   Thank you.
[00:52:34.580 --> 00:53:04.560]   Thank you.
[00:53:04.560 --> 00:53:34.540]   Thank you.
[00:53:34.540 --> 00:54:04.520]   Thank you.
[00:54:04.520 --> 00:54:34.500]   Thank you.
[00:54:34.500 --> 00:55:04.480]   Thank you.
[00:55:04.480 --> 00:55:34.460]   Thank you.
[00:55:34.460 --> 00:56:04.440]   Thank you.
[00:56:04.440 --> 00:56:34.420]   Thank you.
[00:56:34.420 --> 00:57:04.400]   Thank you.
[00:57:04.400 --> 00:57:34.380]   Thank you.
[00:57:34.380 --> 00:58:04.360]   Thank you.
[00:58:04.360 --> 00:58:34.340]   Thank you.
[00:58:34.340 --> 00:59:04.320]   Thank you.
[00:59:04.320 --> 00:59:34.300]   Thank you.
[00:59:34.300 --> 01:00:04.280]   Thank you.
[01:00:04.280 --> 01:00:34.260]   Thank you.
[01:00:34.260 --> 01:01:04.240]   Thank you.
[01:01:04.240 --> 01:01:34.220]   Thank you.
[01:01:34.220 --> 01:02:04.200]   Thank you.
[01:02:04.200 --> 01:02:34.180]   Thank you.
[01:02:34.180 --> 01:03:04.160]   Thank you.
[01:03:04.160 --> 01:03:34.140]   Thank you.
[01:03:34.140 --> 01:04:04.120]   Thank you.
[01:04:04.120 --> 01:04:34.100]   Thank you.
[01:04:34.100 --> 01:05:04.080]   Thank you.
[01:05:04.080 --> 01:05:34.060]   Thank you.
[01:05:34.060 --> 01:06:04.040]   Thank you.
[01:06:04.040 --> 01:06:34.020]   Thank you.
[01:06:34.020 --> 01:07:04.000]   Thank you.
[01:07:04.000 --> 01:07:33.980]   Thank you.
[01:07:33.980 --> 01:08:03.960]   Thank you.
[01:08:03.960 --> 01:08:33.940]   Thank you.
[01:08:33.940 --> 01:09:03.920]   Thank you.
[01:09:03.920 --> 01:09:33.900]   Thank you.
[01:09:33.900 --> 01:10:03.880]   Thank you.
[01:10:03.880 --> 01:10:33.860]   Thank you.
[01:10:33.860 --> 01:11:03.840]   Thank you.
[01:11:03.840 --> 01:11:33.820]   Thank you.
[01:11:33.820 --> 01:12:03.800]   Thank you.
[01:12:03.800 --> 01:12:33.780]   Thank you.
[01:12:33.780 --> 01:13:03.760]   Thank you.
[01:13:03.760 --> 01:13:33.740]   Thank you.
[01:13:33.740 --> 01:14:03.720]   Thank you.
[01:14:03.720 --> 01:14:33.700]   Thank you.
[01:14:33.700 --> 01:15:03.680]   Thank you.
[01:15:03.680 --> 01:15:33.660]   Thank you.
[01:15:33.660 --> 01:16:03.640]   Thank you.
[01:16:03.640 --> 01:16:33.620]   Thank you.
[01:16:33.620 --> 01:17:03.600]   Thank you.
[01:17:03.600 --> 01:17:33.580]   Thank you.
[01:17:33.580 --> 01:18:03.560]   Thank you.
[01:18:03.560 --> 01:18:33.540]   Thank you.
[01:18:33.540 --> 01:19:03.520]   Thank you.
[01:19:03.520 --> 01:19:33.500]   Thank you.
[01:19:33.500 --> 01:20:03.480]   Thank you.
[01:20:03.480 --> 01:20:33.460]   Thank you.
[01:20:33.460 --> 01:21:03.440]   Thank you.
[01:21:03.440 --> 01:21:33.420]   Thank you.
[01:21:33.420 --> 01:22:03.400]   Thank you.
[01:22:03.400 --> 01:22:33.380]   Thank you.
[01:22:33.380 --> 01:23:03.360]   Thank you.
[01:23:03.360 --> 01:23:33.340]   Thank you.
[01:23:33.340 --> 01:24:03.320]   Thank you.
[01:24:03.320 --> 01:24:33.300]   Thank you.
[01:24:33.300 --> 01:25:03.280]   Thank you.
[01:25:03.280 --> 01:25:33.260]   Thank you.
[01:25:33.260 --> 01:26:03.240]   Thank you.
[01:26:03.240 --> 01:26:33.220]   Thank you.
[01:26:33.220 --> 01:27:03.200]   Thank you.
[01:27:03.200 --> 01:27:33.180]   Thank you.
[01:27:33.180 --> 01:28:03.160]   Thank you.
[01:28:03.160 --> 01:28:33.140]   Thank you.
[01:28:33.140 --> 01:29:03.120]   Thank you.
[01:29:03.120 --> 01:29:33.100]   Thank you.
[01:29:33.100 --> 01:30:03.080]   Thank you.
[01:30:03.080 --> 01:30:33.060]   Thank you.
[01:30:33.060 --> 01:31:03.040]   Thank you.
[01:31:03.040 --> 01:31:33.020]   Thank you.
[01:31:33.020 --> 01:32:03.000]   Thank you.
[01:32:03.000 --> 01:32:32.980]   Thank you.
[01:32:32.980 --> 01:33:02.960]   Thank you.
[01:33:02.960 --> 01:33:32.940]   Thank you.
[01:33:32.940 --> 01:34:02.920]   Thank you.
[01:34:02.920 --> 01:34:32.900]   Thank you.
[01:34:32.900 --> 01:35:02.880]   Thank you.
[01:35:02.880 --> 01:35:32.860]   Thank you.
[01:35:32.860 --> 01:36:02.840]   Thank you.
[01:36:02.840 --> 01:36:32.820]   Thank you.
[01:36:32.820 --> 01:37:02.800]   Thank you.
[01:37:02.800 --> 01:37:32.780]   Thank you.
[01:37:32.780 --> 01:38:02.760]   Thank you.
[01:38:02.760 --> 01:38:32.740]   Thank you.
[01:38:32.740 --> 01:39:02.720]   Thank you.
[01:39:02.720 --> 01:39:32.700]   Thank you.
[01:39:32.700 --> 01:40:02.680]   Thank you.
[01:40:02.680 --> 01:40:32.660]   Thank you.
[01:40:32.660 --> 01:41:02.640]   Thank you.
[01:41:02.640 --> 01:41:32.620]   Thank you.
[01:41:32.620 --> 01:42:02.600]   Thank you.
[01:42:02.600 --> 01:42:32.580]   Thank you.
[01:42:32.580 --> 01:43:02.560]   Thank you.
[01:43:02.560 --> 01:43:32.540]   Thank you.
[01:43:32.540 --> 01:44:02.520]   Thank you.
[01:44:02.520 --> 01:44:32.500]   Thank you.
[01:44:32.500 --> 01:45:02.480]   Thank you.
[01:45:02.480 --> 01:45:32.460]   Thank you.
[01:45:32.460 --> 01:46:02.440]   Thank you.
[01:46:02.440 --> 01:46:32.420]   Thank you.
[01:46:32.420 --> 01:47:02.400]   Thank you.
[01:47:02.400 --> 01:47:32.380]   Thank you.
[01:47:32.380 --> 01:48:02.360]   Thank you.
[01:48:02.360 --> 01:48:32.340]   Thank you.
[01:48:32.340 --> 01:49:02.320]   Thank you.
[01:49:02.320 --> 01:49:32.300]   Thank you.
[01:49:32.300 --> 01:50:02.280]   Thank you.
[01:50:02.280 --> 01:50:32.260]   Thank you.
[01:50:32.260 --> 01:51:02.240]   Thank you.
[01:51:02.240 --> 01:51:32.220]   Thank you.
[01:51:32.220 --> 01:52:02.200]   Thank you.
[01:52:02.200 --> 01:52:32.180]   Thank you.
[01:52:32.180 --> 01:53:02.160]   Thank you.
[01:53:02.160 --> 01:53:32.140]   Thank you.
[01:53:32.140 --> 01:54:02.120]   Thank you.
[01:54:02.120 --> 01:54:32.100]   Thank you.
[01:54:32.100 --> 01:55:02.080]   Thank you.
[01:55:02.080 --> 01:55:32.060]   Thank you.
[01:55:32.060 --> 01:56:02.040]   Thank you.
[01:56:02.040 --> 01:56:32.020]   Thank you.
[01:56:32.020 --> 01:57:02.000]   Thank you.
[01:57:02.000 --> 01:57:31.980]   Thank you.
[01:57:31.980 --> 01:58:01.960]   Thank you.
[01:58:01.960 --> 01:58:31.940]   Thank you.
[01:58:31.940 --> 01:59:01.920]   Thank you.
[01:59:01.920 --> 01:59:31.900]   Thank you.
[01:59:31.900 --> 02:00:01.880]   Thank you.
[02:00:01.880 --> 02:00:31.860]   Thank you.
[02:00:31.860 --> 02:01:01.840]   Thank you.
[02:01:01.840 --> 02:01:31.820]   Thank you.
[02:01:31.820 --> 02:02:01.800]   Thank you.
[02:02:01.800 --> 02:02:31.780]   Thank you.
[02:02:31.780 --> 02:03:01.760]   Thank you.
[02:03:01.760 --> 02:03:31.740]   Thank you.
[02:03:31.740 --> 02:04:01.720]   Thank you.
[02:04:01.720 --> 02:04:31.700]   Thank you.
[02:04:31.700 --> 02:05:01.680]   Thank you.
[02:05:01.680 --> 02:05:31.660]   Thank you.
[02:05:31.660 --> 02:06:01.640]   Thank you.
[02:06:01.640 --> 02:06:31.620]   Thank you.
[02:06:31.620 --> 02:07:01.600]   Thank you.
[02:07:01.600 --> 02:07:31.580]   Thank you.
[02:07:31.580 --> 02:08:01.560]   Thank you.
[02:08:01.560 --> 02:08:31.540]   Thank you.
[02:08:31.540 --> 02:09:01.520]   Thank you.
[02:09:01.520 --> 02:09:31.500]   Thank you.
[02:09:31.500 --> 02:10:01.480]   Thank you.
[02:10:01.480 --> 02:10:31.460]   Thank you.
[02:10:31.460 --> 02:11:01.440]   Thank you.
[02:11:01.440 --> 02:11:31.420]   Thank you.
[02:11:31.420 --> 02:12:01.400]   Thank you.
[02:12:01.400 --> 02:12:31.380]   Thank you.
[02:12:31.380 --> 02:13:01.360]   Thank you.
[02:13:01.360 --> 02:13:31.340]   Thank you.
[02:13:31.340 --> 02:14:01.320]   Thank you.
[02:14:01.320 --> 02:14:31.300]   Thank you.
[02:14:31.300 --> 02:15:01.280]   Thank you.
[02:15:01.280 --> 02:15:31.260]   Thank you.
[02:15:31.260 --> 02:16:01.240]   Thank you.
[02:16:01.240 --> 02:16:31.220]   Thank you.
[02:16:31.220 --> 02:17:01.200]   Thank you.
[02:17:01.200 --> 02:17:31.180]   Thank you.
[02:17:31.180 --> 02:18:01.160]   Thank you.
[02:18:01.160 --> 02:18:31.140]   Thank you.
[02:18:31.140 --> 02:19:01.120]   Thank you.
[02:19:01.120 --> 02:19:31.100]   Thank you.
[02:19:31.100 --> 02:20:01.080]   Thank you.
[02:20:01.080 --> 02:20:31.060]   Thank you.
[02:20:31.060 --> 02:21:01.040]   Thank you.
[02:21:01.040 --> 02:21:31.020]   Thank you.
[02:21:31.020 --> 02:22:01.000]   Thank you.
[02:22:01.000 --> 02:22:30.980]   Thank you.
[02:22:30.980 --> 02:23:00.960]   Thank you.
[02:23:00.960 --> 02:23:30.940]   Thank you.
[02:23:30.940 --> 02:24:00.920]   Thank you.
[02:24:00.920 --> 02:24:30.900]   Thank you.
[02:24:30.900 --> 02:25:00.880]   Thank you.
[02:25:00.880 --> 02:25:30.860]   Thank you.
[02:25:30.860 --> 02:26:00.840]   Thank you.
[02:26:00.840 --> 02:26:30.820]   Thank you.
[02:26:30.820 --> 02:27:00.800]   Thank you.
[02:27:00.800 --> 02:27:30.780]   Thank you.
[02:27:30.780 --> 02:28:00.760]   Thank you.
[02:28:00.760 --> 02:28:30.740]   Thank you.
[02:28:30.740 --> 02:29:00.720]   Thank you.
[02:29:00.720 --> 02:29:30.700]   Thank you.
[02:29:30.700 --> 02:30:00.680]   Thank you.
[02:30:00.680 --> 02:30:30.660]   Thank you.
[02:30:30.660 --> 02:31:00.640]   Thank you.
[02:31:00.640 --> 02:31:30.620]   Thank you.
[02:31:30.620 --> 02:32:00.600]   Thank you.
[02:32:00.600 --> 02:32:30.580]   Thank you.
[02:32:30.580 --> 02:33:00.560]   Thank you.
[02:33:00.560 --> 02:33:30.540]   Thank you.
[02:33:30.540 --> 02:34:00.520]   Thank you.
[02:34:00.520 --> 02:34:30.500]   Thank you.
[02:34:30.500 --> 02:35:00.480]   Thank you.
[02:35:00.480 --> 02:35:30.460]   Thank you.
[02:35:30.460 --> 02:36:00.440]   Thank you.
[02:36:00.440 --> 02:36:30.420]   Thank you.
[02:36:30.420 --> 02:37:00.400]   Thank you.
[02:37:00.400 --> 02:37:30.380]   Thank you.
[02:37:30.380 --> 02:38:00.360]   Thank you.
[02:38:00.360 --> 02:38:30.340]   Thank you.
[02:38:30.340 --> 02:39:00.320]   Thank you.
[02:39:00.320 --> 02:39:30.300]   Thank you.
[02:39:30.300 --> 02:40:00.280]   Thank you.
[02:40:00.280 --> 02:40:30.260]   Thank you.
[02:40:30.260 --> 02:41:00.240]   Thank you.
[02:41:00.240 --> 02:41:30.220]   Thank you.
[02:41:30.220 --> 02:42:00.200]   Thank you.
[02:42:00.200 --> 02:42:30.180]   Thank you.
[02:42:30.180 --> 02:43:00.160]   Thank you.
[02:43:00.160 --> 02:43:30.140]   Thank you.
[02:43:30.140 --> 02:44:00.120]   Thank you.
[02:44:00.120 --> 02:44:30.100]   Thank you.
[02:44:30.100 --> 02:45:00.080]   Thank you.
[02:45:00.080 --> 02:45:30.060]   Thank you.
[02:45:30.060 --> 02:46:00.040]   Thank you.
[02:46:00.040 --> 02:46:30.020]   Thank you.
[02:46:30.020 --> 02:47:00.000]   Thank you.
[02:47:00.000 --> 02:47:29.980]   Thank you.
[02:47:29.980 --> 02:47:59.960]   Thank you.
[02:47:59.960 --> 02:48:29.940]   Thank you.
[02:48:29.940 --> 02:48:59.920]   Thank you.
[02:48:59.920 --> 02:49:29.900]   Thank you.
[02:49:29.900 --> 02:49:59.880]   Thank you.
[02:49:59.880 --> 02:50:29.860]   Thank you.
[02:50:29.860 --> 02:50:59.840]   Thank you.
[02:50:59.840 --> 02:51:29.820]   Thank you.
[02:51:29.820 --> 02:51:59.800]   Thank you.
[02:51:59.800 --> 02:52:29.780]   Thank you.
[02:52:29.780 --> 02:52:59.760]   Thank you.
[02:52:59.760 --> 02:53:29.740]   Thank you.
[02:53:29.740 --> 02:53:59.720]   Thank you.
[02:53:59.720 --> 02:54:29.700]   Thank you.
[02:54:29.700 --> 02:54:59.680]   Thank you.
[02:54:59.680 --> 02:55:29.660]   Thank you.
[02:55:29.660 --> 02:55:59.640]   Thank you.
[02:55:59.640 --> 02:56:29.620]   Thank you.
[02:56:29.620 --> 02:56:59.600]   Thank you.
[02:56:59.600 --> 02:57:29.580]   Thank you.
[02:57:29.580 --> 02:57:59.560]   Thank you.
[02:57:59.560 --> 02:58:29.540]   Thank you.
[02:58:29.540 --> 02:58:59.520]   Thank you.
[02:58:59.520 --> 02:59:29.500]   Thank you.
[02:59:29.500 --> 02:59:59.480]   Thank you.
[02:59:59.480 --> 03:00:29.460]   Thank you.
[03:00:29.460 --> 03:00:59.440]   Thank you.
[03:00:59.440 --> 03:01:29.420]   Thank you.
[03:01:29.420 --> 03:01:59.400]   Thank you.
[03:01:59.400 --> 03:02:29.380]   Thank you.
[03:02:29.380 --> 03:02:59.360]   Thank you.
[03:02:59.360 --> 03:03:29.340]   Thank you.
[03:03:29.340 --> 03:03:59.320]   Thank you.
[03:03:59.320 --> 03:04:29.300]   Thank you.
[03:04:29.300 --> 03:04:59.280]   Thank you.
[03:04:59.280 --> 03:05:29.260]   Thank you.
[03:05:29.260 --> 03:05:59.240]   Thank you.
[03:05:59.240 --> 03:06:29.220]   Thank you.
[03:06:29.220 --> 03:06:59.200]   Thank you.
[03:06:59.200 --> 03:07:29.180]   Thank you.
[03:07:29.180 --> 03:07:59.160]   Thank you.
[03:07:59.160 --> 03:08:29.140]   Thank you.
[03:08:29.140 --> 03:08:59.120]   Thank you.
[03:08:59.120 --> 03:09:29.100]   Thank you.
[03:09:29.100 --> 03:09:59.080]   Thank you.
[03:09:59.080 --> 03:10:29.060]   Thank you.
[03:10:29.060 --> 03:10:59.040]   Thank you.
[03:10:59.040 --> 03:11:29.020]   Thank you.
[03:11:29.020 --> 03:11:59.000]   Thank you.
[03:11:59.000 --> 03:12:28.980]   Thank you.
[03:12:28.980 --> 03:12:58.960]   Thank you.
[03:12:58.960 --> 03:13:28.940]   Thank you.
[03:13:28.940 --> 03:13:58.920]   Thank you.
[03:13:58.920 --> 03:14:28.900]   Thank you.
[03:14:28.900 --> 03:14:58.880]   Thank you.
[03:14:58.880 --> 03:15:28.860]   Thank you.
[03:15:28.860 --> 03:15:58.840]   Thank you.
[03:15:58.840 --> 03:16:28.820]   Thank you.
[03:16:28.820 --> 03:16:58.800]   Thank you.
[03:16:58.800 --> 03:17:28.780]   Thank you.
[03:17:28.780 --> 03:17:58.760]   Thank you.
[03:17:58.760 --> 03:18:28.740]   Thank you.
[03:18:28.740 --> 03:18:58.720]   Thank you.
[03:18:58.720 --> 03:19:28.700]   Thank you.
[03:19:28.700 --> 03:19:58.680]   Thank you.
[03:19:58.680 --> 03:20:28.660]   Thank you.
[03:20:28.660 --> 03:20:58.640]   Thank you.
[03:20:58.640 --> 03:21:28.620]   Thank you.
[03:21:28.620 --> 03:21:58.600]   Thank you.
[03:21:58.600 --> 03:22:28.580]   Thank you.
[03:22:28.580 --> 03:22:58.560]   Thank you.
[03:22:58.560 --> 03:23:28.540]   Thank you.
[03:23:28.540 --> 03:23:58.520]   Thank you.
[03:23:58.520 --> 03:24:28.500]   Thank you.
[03:24:28.500 --> 03:24:58.480]   Thank you.
[03:24:58.480 --> 03:25:28.460]   Thank you.
[03:25:28.460 --> 03:25:58.440]   Thank you.
[03:25:58.440 --> 03:26:28.420]   Thank you.
[03:26:28.420 --> 03:26:58.400]   Thank you.
[03:26:58.400 --> 03:27:28.380]   Thank you.
[03:27:28.380 --> 03:27:58.360]   Thank you.
[03:27:58.360 --> 03:28:28.340]   Thank you.
[03:28:28.340 --> 03:28:58.320]   Thank you.
[03:28:58.320 --> 03:29:28.300]   Thank you.
[03:29:28.300 --> 03:29:58.280]   Thank you.
[03:29:58.280 --> 03:30:28.260]   Thank you.
[03:30:28.260 --> 03:30:58.240]   Thank you.
[03:30:58.240 --> 03:31:28.220]   Thank you.
[03:31:28.220 --> 03:31:58.200]   Thank you.
[03:31:58.200 --> 03:32:28.180]   Thank you.
[03:32:28.180 --> 03:32:58.160]   Thank you.
[03:32:58.160 --> 03:33:28.140]   Thank you.
[03:33:28.140 --> 03:33:58.120]   Thank you.
[03:33:58.120 --> 03:34:28.100]   Thank you.
[03:34:28.100 --> 03:34:58.080]   Thank you.
[03:34:58.080 --> 03:35:28.060]   Thank you.
[03:35:28.060 --> 03:35:58.040]   Thank you.
[03:35:58.040 --> 03:36:28.020]   Thank you.
[03:36:28.020 --> 03:36:58.000]   Thank you.
[03:36:58.000 --> 03:37:27.980]   Thank you.
[03:37:27.980 --> 03:37:57.960]   Thank you.
[03:37:57.960 --> 03:38:27.940]   Thank you.
[03:38:27.940 --> 03:38:57.920]   Thank you.
[03:38:57.920 --> 03:39:27.900]   Thank you.
[03:39:27.900 --> 03:39:57.880]   Thank you.
[03:39:57.880 --> 03:40:27.860]   Thank you.
[03:40:27.860 --> 03:40:57.840]   Thank you.
[03:40:57.840 --> 03:41:27.820]   Thank you.
[03:41:27.820 --> 03:41:57.800]   Thank you.
[03:41:57.800 --> 03:42:27.780]   Thank you.
[03:42:27.780 --> 03:42:57.760]   Thank you.
[03:42:57.760 --> 03:43:27.740]   Thank you.
[03:43:27.740 --> 03:43:57.720]   Thank you.
[03:43:57.720 --> 03:44:27.700]   Thank you.
[03:44:27.700 --> 03:44:57.680]   Thank you.
[03:44:57.680 --> 03:45:27.660]   Thank you.
[03:45:27.660 --> 03:45:57.640]   Thank you.
[03:45:57.640 --> 03:46:27.620]   Thank you.
[03:46:27.620 --> 03:46:57.600]   Thank you.
[03:46:57.600 --> 03:47:27.580]   Thank you.
[03:47:27.580 --> 03:47:57.560]   Thank you.
[03:47:57.560 --> 03:48:27.540]   Thank you.
[03:48:27.540 --> 03:48:57.520]   Thank you.
[03:48:57.520 --> 03:49:27.500]   Thank you.
[03:49:27.500 --> 03:49:57.480]   Thank you.
[03:49:57.480 --> 03:50:27.460]   Thank you.
[03:50:27.460 --> 03:50:57.440]   Thank you.
[03:50:57.440 --> 03:51:27.420]   Thank you.
[03:51:27.420 --> 03:51:57.400]   Thank you.
[03:51:57.400 --> 03:52:27.380]   Thank you.
[03:52:27.380 --> 03:52:57.360]   Thank you.
[03:52:57.360 --> 03:53:27.340]   Thank you.
[03:53:27.340 --> 03:53:57.320]   Thank you.
[03:53:57.320 --> 03:54:27.300]   Thank you.
[03:54:27.300 --> 03:54:57.280]   Thank you.
[03:54:57.280 --> 03:55:27.260]   Thank you.
[03:55:27.260 --> 03:55:57.240]   Thank you.
[03:55:57.240 --> 03:56:27.220]   Thank you.
[03:56:27.220 --> 03:56:57.200]   Thank you.
[03:56:57.200 --> 03:57:27.180]   Thank you.
[03:57:27.180 --> 03:57:57.160]   Thank you.
[03:57:57.160 --> 03:58:27.140]   Thank you.
[03:58:27.140 --> 03:58:57.120]   Thank you.
[03:58:57.120 --> 03:59:27.100]   Thank you.
[03:59:27.100 --> 03:59:57.080]   Thank you.
[03:59:57.080 --> 04:00:27.060]   Thank you.
[04:00:27.060 --> 04:00:57.040]   Thank you.
[04:00:57.040 --> 04:01:27.020]   Thank you.
[04:01:27.020 --> 04:01:57.000]   Thank you.
[04:01:57.000 --> 04:02:26.980]   Thank you.
[04:02:26.980 --> 04:02:56.960]   Thank you.
[04:02:56.960 --> 04:03:26.940]   Thank you.
[04:03:26.940 --> 04:03:56.920]   Thank you.
[04:03:56.920 --> 04:04:26.900]   Thank you.
[04:04:26.900 --> 04:04:56.880]   Thank you.
[04:04:56.880 --> 04:05:26.860]   Thank you.
[04:05:26.860 --> 04:05:56.840]   Thank you.
[04:05:56.840 --> 04:06:26.820]   Thank you.

