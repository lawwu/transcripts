
[00:00:00.000 --> 00:00:21.000]   I have all.
[00:00:21.000 --> 00:00:29.000]   Yeah, I said now I understand why you're looking up like this.
[00:00:29.000 --> 00:00:37.000]   I will move you down to my level. There we go.
[00:00:37.000 --> 00:00:39.000]   Alrighty Hello everybody.
[00:00:39.000 --> 00:00:45.000]   Hi Wayne, how are you doing good. How are you doing, I feel a little better today.
[00:00:45.000 --> 00:00:58.000]   Yeah, the fever has gone away, I hardly ever get home here anymore because we filled our house with air purifiers, which do a great job but something got past them yesterday and I just.
[00:00:58.000 --> 00:01:13.000]   So now I feel like a bit flat after a day of feeling bad you know the next day you kind of like, yeah, you know, apl will cheer me up in the company of you folks.
[00:01:13.000 --> 00:01:26.000]   Do you have any recommendations on air purifiers I know there's like the Dyson formaldehyde ones and molecule and all this kind of stuff but I haven't seen any do I of course I do.
[00:01:26.000 --> 00:01:29.000]   I'm all about air quality.
[00:01:29.000 --> 00:01:43.000]   So, there's a basically if you Google for like, let me try to think.
[00:01:43.000 --> 00:01:57.000]   That tells you the clean air delivery rate that you'll need basically to get a certain number of air changes per hour, which is a CH.
[00:01:57.000 --> 00:02:16.000]   And like if you aim for, I don't know like five to eight air changes per hour is being pretty good, then you just type in your room size into one of those online CDR calculators clean air delivery rate calculators and it'll tell you what's the idea you need.
[00:02:16.000 --> 00:02:25.000]   I think it's just a case of buying air purifier that has that CIDR and and a HIPAA HP a filter.
[00:02:25.000 --> 00:02:35.000]   It's like, it couldn't be less high tech. It's literally like a piece of woven cloth, which with a fan that blows air through it.
[00:02:35.000 --> 00:02:38.000]   That's what an air purifier is.
[00:02:38.000 --> 00:02:48.000]   So, I got this thing called the, the you it's like a sense like I was interested to know air quality and I discovered the CO2 was way too high just because closed windows and things.
[00:02:48.000 --> 00:03:05.000]   And so, definitely that's easy right you have to ventilate there's no solution, other than scrubbing. Yes, you need it, you need. Yeah, so I, I had, I went through that last year, or the year before with the wildfires in California.
[00:03:05.000 --> 00:03:21.000]   It was up all the windows and everything and, you know, the process I was worried about like oh is that going to be bad and I bought a CO2 monitor and I discovered our CO2 was like 1800, you know when the maximum recommended.
[00:03:21.000 --> 00:03:30.000]   Yeah, you get headaches and you feel like an idiot, and so ever since then I've been pretty careful about CO2.
[00:03:30.000 --> 00:03:55.000]   That that's separate of course you know you can have perfectly good CO2 but still bad air quality if there's one thing that I have is quite high T box that are unpredictable like so I don't know if it's the sensor figure out.
[00:03:55.000 --> 00:04:04.000]   Okay, I was just gonna say I don't know if anyone has any experience with that because I haven't been able to figure it out I've been collecting data for months now and I can't really figure out any clear correlation with the T box.
[00:04:04.000 --> 00:04:13.000]   But they sometimes are quite high and I suspect it affects you know sleep and things like that so I do know there's some sensors on the market so I just don't know if that's something you already looked into.
[00:04:13.000 --> 00:04:23.000]   Yeah, I mean, I've got air purifiers which have gas and particle sensors on them.
[00:04:23.000 --> 00:04:37.000]   And so then they have an auto mode where they'll go, go harder if there's more stuff. I don't find they seem to correlate with my hay fever though honestly so my method of setting the fan level is if I start getting hay fever I turn it up.
[00:04:37.000 --> 00:04:41.000]   I don't find the auto seems to work that well for me.
[00:04:41.000 --> 00:05:05.000]   Okay, yeah, that's definitely been a life changer for me is getting plain air in my house that's basically the first bad hay fever I've had in like 18 months, and it used to, you know, be like the single biggest impact I reckon on my quality of life was really crap all the time.
[00:05:05.000 --> 00:05:13.000]   That's a bit of a side, interesting aside, nonetheless.
[00:05:13.000 --> 00:05:26.000]   Any interesting API discoveries since yesterday your questions or anything else.
[00:05:26.000 --> 00:05:28.000]   Really, it's fine.
[00:05:28.000 --> 00:05:32.000]   It's remarkably hard to do simple things.
[00:05:32.000 --> 00:05:36.000]   Yeah, well I mean we just started right so that's.
[00:05:36.000 --> 00:05:41.000]   Yeah, post shockingly hard to load.
[00:05:41.000 --> 00:05:43.000]   I posted.
[00:05:43.000 --> 00:05:57.000]   I posted the forms of basic kind of genetic algorithm, which was pretty cool but I saw that I think I think basic is a is not a fair description I mean compared to where, at least I'm up to.
[00:05:57.000 --> 00:06:14.000]   It looks pretty sophisticated feel like there's a lot that can be done to transform it into a more kind of array based solution then.
[00:06:14.000 --> 00:06:24.000]   Well that'll be an interesting project for us all to try to help with I think yeah I mean we're not close to knowing all the glyphs that you're using yet.
[00:06:24.000 --> 00:06:27.000]   I think we've got some catching up to do.
[00:06:27.000 --> 00:06:37.000]   My, my goal, my goal is to implement connect for I've implemented it in so many languages and it seems a good enough problem that is non trivial.
[00:06:37.000 --> 00:06:41.000]   Yeah. So like with an AI that you play against.
[00:06:41.000 --> 00:06:43.000]   Yeah yeah yeah just mini max.
[00:06:43.000 --> 00:06:51.000]   Okay, kind of implementation there's a good gaggle competition competition on that one going on since a while, which is fun.
[00:06:51.000 --> 00:06:58.000]   I think I could try flooding in a genetic algorithm to try to optimize it as well that'd be cool. Yes.
[00:06:58.000 --> 00:07:12.000]   But just like the simple the board and simple. Yeah, how to best represent the array of the board is already hard. Yeah, I'm not even at a point of thinking about doing anything yet.
[00:07:12.000 --> 00:07:14.000]   Oh, I just press the wrong button.
[00:07:14.000 --> 00:07:17.000]   I just had a question from topic about.
[00:07:17.000 --> 00:07:19.000]   I'm sorry.
[00:07:19.000 --> 00:07:37.000]   Oh, I was just gonna say I spent a lot of time the last day, trying to figure out how to load images in the APL just to get the pixel values and it was a lot harder.
[00:07:37.000 --> 00:07:40.000]   No.
[00:07:40.000 --> 00:07:52.000]   No, and I asked on the discord. If there was any kind of beginner friendly ways to load it and I got a lot of resources that I had no luck deciphering.
[00:07:52.000 --> 00:08:06.000]   Is that on the APL discord dialogue conference that they're having coming up that this is a hot topic that they're going to discuss image processing. Yeah.
[00:08:06.000 --> 00:08:07.000]   Awesome.
[00:08:07.000 --> 00:08:19.000]   I wanted to ask, we'll be talking about complex numbers which are super cool. I noticed, they're supported in in torch and pytorch is it is it like deep learning uses. Oh yes, what is that absolutely, absolutely.
[00:08:19.000 --> 00:08:32.000]   Yeah, I mean apart from anything else there are there an input format for, you know, for audio for example, we would often represent as kind of magnitude and phase.
[00:08:32.000 --> 00:08:47.000]   And we don't normally have to worry about it, but you can optimize convolutions using Fourier transforms, you know, and using complex representation.
[00:08:47.000 --> 00:09:02.000]   And that's kind of handled for us by Cootie and then nowadays but yeah, you know, inputs and outputs as complex numbers is certainly a thing and also if you've got layers that represent
[00:09:02.000 --> 00:09:19.000]   some sort of more like, you know, the activations you hope might kind of represent some, something from your domain, they might, you know, be represented well as complex numbers you might have lost functions based on that or.
[00:09:19.000 --> 00:09:21.000]   Yeah.
[00:09:21.000 --> 00:09:31.000]   The only time I've used them in pytorch is for audio, but I know other folks use them for other things.
[00:09:31.000 --> 00:09:49.000]   I saw that Adam, who actually works at dialogue, and I think he's the guy in arraycast who said he's like used APO his whole life answered some of our questions.
[00:09:49.000 --> 00:10:00.000]   Okay, so once. Okay, so if you use I'm on Mac, not on Windows, but on Windows. Once you've removed some docked windows you can click session save.
[00:10:00.000 --> 00:10:04.000]   You can right click on the language bar and hide caption.
[00:10:04.000 --> 00:10:08.000]   Once you've got boxing on you can save your session.
[00:10:08.000 --> 00:10:20.000]   And yes, I've already saw in the forum to get back ticks with the in browser back to space. So, that was good to get it on to answer some of our questions.
[00:10:20.000 --> 00:10:34.000]   And then the other thing I wanted to mention is that.
[00:10:34.000 --> 00:10:46.000]   Was him did some really nice notes which I finally got a note around her reading.
[00:10:46.000 --> 00:10:52.000]   And so I get actually highly recommend them so they're linked from the lesson one forum.
[00:10:52.000 --> 00:10:54.000]   So thanks for doing that was him.
[00:10:54.000 --> 00:10:57.000]   Am I pronouncing your name right.
[00:10:57.000 --> 00:11:05.000]   Yeah. Oh, where's what what where is the name from your South Africa right.
[00:11:05.000 --> 00:11:14.000]   So, funny enough, I'm in Sydney at the moment. No way, my parents, but I'm originally from South Africa.
[00:11:14.000 --> 00:11:17.000]   And the name is Arabic.
[00:11:17.000 --> 00:11:26.000]   Cool. Welcome to Australia, better than a time zone for you. How long are you here for until the end of next month actually.
[00:11:26.000 --> 00:11:30.000]   It's a nice long time. Great. Yeah.
[00:11:30.000 --> 00:11:40.000]   If you say hi in the forum if you want to meet up with any fast AI people I'm sure there's, I know there's a bunch of people in, in Sydney.
[00:11:40.000 --> 00:11:43.000]   Yeah, these are great notes. Thank you so much.
[00:11:43.000 --> 00:11:49.000]   I love that you've got the juggling notation. Has you come across juggling notation before we discussed it.
[00:11:49.000 --> 00:11:56.000]   Not at all. It's interesting isn't it, it's like it was game changing, apparently.
[00:11:56.000 --> 00:12:03.000]   And Aaron Hughes PhD. I don't know how you pronounce this name.
[00:12:03.000 --> 00:12:11.000]   You might know, do you know how you pronounce this I guess this is a Chinese name. I mean I know it's not opinion but it's
[00:12:11.000 --> 00:12:17.000]   No. Okay.
[00:12:17.000 --> 00:12:23.000]   I thought for APL today.
[00:12:23.000 --> 00:12:43.000]   Oh, good. There's a link here some thank you. By the way, for those of you who hadn't noticed, at least when I remember or when Serato reminds me, I click on the make wiki, which means that anybody can click edit on these posts.
[00:12:43.000 --> 00:12:49.000]   And so thank you for those of you who have been adding stuff to them.
[00:12:49.000 --> 00:13:03.000]   And thinking like in terms of stuff that's going to help us understand more of the documentation and do more things I think there's two main things I wanted to cover today which is left arrow and row.
[00:13:03.000 --> 00:13:08.000]   And basically,
[00:13:08.000 --> 00:13:19.000]   do they call it left arrow they do. Okay, cool. So left arrow, which is left square bracket is used to assign names to variables.
[00:13:19.000 --> 00:13:26.000]   So, a is three.
[00:13:26.000 --> 00:13:34.000]   So, obviously, in a lot of languages, we would use equals for that.
[00:13:34.000 --> 00:13:42.000]   But, you know, a statement like x equals x plus one is not a mathematically same statement.
[00:13:42.000 --> 00:13:50.000]   So I'm glad APL does not use equals to mean that. So in other languages, we have to say equals equals to mean that.
[00:13:50.000 --> 00:13:58.000]   And I know this is something, you know, the kids I teach found quite confusing we're doing when we're doing Python.
[00:13:58.000 --> 00:14:02.000]   So very strange meaning of equals.
[00:14:02.000 --> 00:14:12.000]   So you can absolutely do that, you know, if you've got something called x you can rebind it to its previous value plus one.
[00:14:12.000 --> 00:14:14.000]   I mean, let's try it.
[00:14:14.000 --> 00:14:18.000]   A plus one.
[00:14:18.000 --> 00:14:21.000]   Okay.
[00:14:21.000 --> 00:14:29.000]   So if you, if you add a plus sign before that a plus a arrow a plus one.
[00:14:29.000 --> 00:14:33.000]   It'll actually print it out for you.
[00:14:33.000 --> 00:14:35.000]   As well.
[00:14:35.000 --> 00:14:50.000]   I mean that makes sense doesn't it right because we learned that monadic plus is conjugate now that won't work for a complex number because it will actually give you the conjugate but yeah this is going to return the conjugate of everything to the right.
[00:14:50.000 --> 00:14:54.000]   So assignment is returning its.
[00:14:54.000 --> 00:15:00.000]   The assigned value and then taking the conjugate of it will as a result printed out.
[00:15:00.000 --> 00:15:04.000]   I think.
[00:15:04.000 --> 00:15:08.000]   I think this might be better left attack.
[00:15:08.000 --> 00:15:14.000]   That's because that's actually always monadic function same.
[00:15:14.000 --> 00:15:22.000]   So, if I replace this with that.
[00:15:22.000 --> 00:15:37.000]   And I think you can also, when you start nesting these assignments, these assignments can be, you could create a new variable as part of, you can create a left arrow.
[00:15:37.000 --> 00:15:50.000]   B is left arrow B plus one, A plus one so you can you can actually nest them. Yes, I think if you do left arrow and then the box I forget what it's called an assignment in the box.
[00:15:50.000 --> 00:15:54.000]   This quad, which is, is that an L.
[00:15:54.000 --> 00:15:57.000]   Yes, yeah.
[00:15:57.000 --> 00:16:01.000]   I think if you assign them to that.
[00:16:01.000 --> 00:16:09.000]   That's what they do in the dog usually the mnemonic is you're kind of like saving to the screen.
[00:16:09.000 --> 00:16:14.000]   Got it. So that's a special thing to assign to.
[00:16:14.000 --> 00:16:21.000]   Yeah, a lot of the IO operations are handled by quad.
[00:16:21.000 --> 00:16:27.000]   Great.
[00:16:27.000 --> 00:16:55.000]   Now the other interesting thing, which is happening is that Isaac has started creating a website for the study group, which is not quite up and running yet.
[00:16:55.000 --> 00:17:06.000]   Did you do the settings pages that GitHub pages, then GitHub pages branch and all that.
[00:17:06.000 --> 00:17:11.000]   Yeah, I think we could just probably do that now so let me.
[00:17:11.000 --> 00:17:17.000]   While I remember to get poor.
[00:17:17.000 --> 00:17:31.000]   And then, yeah, we should be. So for those of you that don't know GitHub has a very nice feature called GitHub pages, which basically turns a repo into a website.
[00:17:31.000 --> 00:17:37.000]   And to use it.
[00:17:37.000 --> 00:17:47.000]   You basically go to pages, and you say sources this branch.
[00:17:47.000 --> 00:17:54.000]   And in theory I should now be able to click on this.
[00:17:54.000 --> 00:17:56.000]   We may need to.
[00:17:56.000 --> 00:18:03.000]   So I can check what's going on by switching to that branch.
[00:18:03.000 --> 00:18:06.000]   Okay, so there's definitely something there.
[00:18:06.000 --> 00:18:21.000]   I can do a little after I accepted the settings and pages I had to make a small commit to the first time, I've noticed that to remove one character return from here.
[00:18:21.000 --> 00:18:28.000]   And
[00:18:28.000 --> 00:18:40.000]   I can vaguely hear. How are you talking I can vaguely hear your ghostly distant voice. Can you hear me now. Oh, there you are. That sounds great. Yeah, it's it's the site is up actually, it's ready.
[00:18:40.000 --> 00:18:50.000]   Fastai.github.io/APLstudy. Something I like to do is when I go here is I copy this.
[00:18:50.000 --> 00:18:57.000]   And then I go into settings and paste it here.
[00:18:57.000 --> 00:19:03.000]   And that way anybody on my page, including me can jump to the website.
[00:19:03.000 --> 00:19:07.000]   I really wish they knew that automatically. Yeah.
[00:19:07.000 --> 00:19:11.000]   Look at that. Okay.
[00:19:11.000 --> 00:19:19.000]   Thank you Isaac, this is beautiful.
[00:19:19.000 --> 00:19:27.000]   There it all is.
[00:19:27.000 --> 00:19:41.000]   So, oh, this is cool. I didn't notice the this thing here automatically pops open the. So this is quarter, which is what nb dev two will be using, which is full of neat tricks.
[00:19:41.000 --> 00:19:51.000]   So a lot of a lot of quarters commands are really well designed. Yeah, it really is.
[00:19:51.000 --> 00:19:56.000]   It's from our studio JJ Liz company and everything he's done has been great.
[00:19:56.000 --> 00:20:00.000]   He's hired a lot of great people as well.
[00:20:00.000 --> 00:20:05.000]   And he's been super helpful.
[00:20:05.000 --> 00:20:11.000]   I think we need some image of some APL thing.
[00:20:11.000 --> 00:20:14.000]   That'd be nice.
[00:20:14.000 --> 00:20:16.000]   It's very cool image there.
[00:20:16.000 --> 00:20:18.000]   All right, well that was easy.
[00:20:18.000 --> 00:20:22.000]   Yeah, all the images are the quarter defaults.
[00:20:22.000 --> 00:20:36.000]   Anybody wants to do a PR which uploads an image of I don't know, a cool formula or picture of Isaac with a little lambda on his head or whatever, you know, all be good.
[00:20:36.000 --> 00:20:37.000]   So the way.
[00:20:37.000 --> 00:20:43.000]   Yeah, so the way this works is,
[00:20:43.000 --> 00:20:46.000]   as I say basically,
[00:20:46.000 --> 00:20:56.000]   I like to do it and it works pretty easily is if you have a branch called GH pages than any HTML, etc. in that branch just ends up as your website.
[00:20:56.000 --> 00:21:00.000]   So here's index.html and that's the website.
[00:21:00.000 --> 00:21:12.000]   And now the way that's being created is there's a thing called GitHub actions, which is basically something that will automatically run some code for you when you do things on GitHub.
[00:21:12.000 --> 00:21:17.000]   You can use HTML files, of course, because all the cool kids use your more files.
[00:21:17.000 --> 00:21:24.000]   And so you say, okay, well, when should this run and it's going to run when you push to master.
[00:21:24.000 --> 00:21:26.000]   Okay, what happens when you push to master?
[00:21:26.000 --> 00:21:30.000]   Well, it's going to run a job called deploy,
[00:21:30.000 --> 00:21:32.000]   which will run on Ubuntu.
[00:21:32.000 --> 00:21:38.000]   So they've got like every major OS with lots of releases, which will check out this repo.
[00:21:38.000 --> 00:21:43.000]   So you can run this script.
[00:21:43.000 --> 00:21:47.000]   Run this command.
[00:21:47.000 --> 00:21:54.000]   And then run this action, which is deployed to GitHub pages.
[00:21:54.000 --> 00:21:59.000]   And I'm guessing I was actually basically borrowed this from the process.
[00:21:59.000 --> 00:22:02.000]   It looks similar.
[00:22:02.000 --> 00:22:08.000]   Yeah, yeah, I took this from your fast category repository and there's some minor changes, but roughly the same.
[00:22:08.000 --> 00:22:23.000]   Yeah, so fast Kaggle I just I just did nb process new and the process is the current name of what will be nb dev to hopefully within three weeks or so.
[00:22:23.000 --> 00:22:35.000]   And as you might have noticed, one nice thing about this is that, you know, we have a
[00:22:35.000 --> 00:22:41.000]   Why is this in a separate folder, by the way, Isaac, was that necessary for some reason, or
[00:22:41.000 --> 00:22:44.000]   I don't think so. That was the that was how it.
[00:22:44.000 --> 00:22:51.000]   The, the default create website porto function did and I didn't structure.
[00:22:51.000 --> 00:22:56.000]   Anyway, yeah, so we've got a notebook here.
[00:22:56.000 --> 00:23:06.000]   And that notebook has been auto converted into a post, which is nice. So once you've got this set up,
[00:23:06.000 --> 00:23:17.000]   you can start authoring technical blog posts with notebooks really easily, particularly because if you hit dot.
[00:23:17.000 --> 00:23:23.000]   I thought if you hit dot, yeah, it's meant to be dot. Nevermind.
[00:23:23.000 --> 00:23:33.000]   You can open up the notebook in github.dev, which is basically a slimmed down online version of VS code.
[00:23:33.000 --> 00:23:40.000]   And so I can start editing straight away.
[00:23:40.000 --> 00:23:51.000]   I assume that they won't have the APL kernel installed, but I'm not sure you can even run Python, can you?
[00:23:51.000 --> 00:23:59.000]   But you can certainly edit the markdown and move cells around and stuff.
[00:23:59.000 --> 00:24:03.000]   Or you could just put markdown files in there.
[00:24:03.000 --> 00:24:15.000]   All right, so that's.
[00:24:15.000 --> 00:24:27.000]   In fact, let's go ahead and make this a bit simpler while we're here. Otherwise, I might go a bit crazy.
[00:24:27.000 --> 00:24:46.000]   All right.
[00:24:46.000 --> 00:24:56.000]   So if we move all that into the parent.
[00:24:56.000 --> 00:25:07.000]   Then we should be able to remove that.
[00:25:07.000 --> 00:25:11.000]   Yes, OK, we can add this to this document more.
[00:25:11.000 --> 00:25:22.000]   So get ignore is the file which contains a list of all the things that weren't that get well by default ignore.
[00:25:22.000 --> 00:25:40.000]   So dot quarter. And if you ended up with it, if you end with a slash, it means it's a directory. OK.
[00:25:40.000 --> 00:25:45.000]   All right.
[00:25:45.000 --> 00:25:53.000]   Let's move all that.
[00:25:53.000 --> 00:26:14.000]   OK, so we should also add that IPY and the checkpoints to our get ignore.
[00:26:14.000 --> 00:26:20.000]   Let's check. So then underscore quarter dot YAML is where it's kind of defined.
[00:26:20.000 --> 00:26:31.000]   So this doesn't need to be dot slash anymore.
[00:26:31.000 --> 00:26:36.000]   Can you think of anything else I might need to change off the top of your head?
[00:26:36.000 --> 00:26:44.000]   Isaac. Thank you. Thank you. Got everything.
[00:26:44.000 --> 00:26:50.000]   What does freeze do? Is that different to execute false?
[00:26:50.000 --> 00:26:56.000]   I'm not sure, to be honest, the game that was a default setting.
[00:26:56.000 --> 00:27:00.000]   I see.
[00:27:00.000 --> 00:27:10.000]   All right. So get status will tell us how we're doing here. Oh, yeah. And I was going to add IPY and B. Check points.
[00:27:10.000 --> 00:27:26.000]   Dot I and the check. So I think that is that means it's not going to re-render or rerun file unless the unless it's changed.
[00:27:26.000 --> 00:27:39.000]   Makes sense. All right. So we've renamed some things. We've deleted one thing. We've modified one thing. That sounds good.
[00:27:39.000 --> 00:27:50.000]   Oh, I haven't got this set up yet. That's fine.
[00:27:50.000 --> 00:28:04.000]   All right. So get commit minus a M. So I will add everything that's not yet added. And M means I'm going to put a message right here.
[00:28:04.000 --> 00:28:17.000]   I thought I'd already done that. Oh, that's right. I added that one character.
[00:28:17.000 --> 00:28:27.000]   Great.
[00:28:27.000 --> 00:28:44.000]   And so now we should be able to go to BASTai.github.io/aplstudy. And it's still working.
[00:28:44.000 --> 00:28:46.000]   How about that?
[00:28:46.000 --> 00:28:54.000]   And so something that's useful to know is your GitHub actions when they run.
[00:28:54.000 --> 00:29:00.000]   Oh, it didn't work. They get logged here.
[00:29:00.000 --> 00:29:06.000]   And so when it breaks, you get across.
[00:29:06.000 --> 00:29:13.000]   OK, quarter render is going to change. So that's just no that's not going to need anything anymore. So we'll change our.
[00:29:13.000 --> 00:29:18.000]   I mean, so, you know, just something else to show you. We don't have to like switch to the terminal.
[00:29:18.000 --> 00:29:24.000]   We can just go to GitHub workflows and click on here and click on edit.
[00:29:24.000 --> 00:29:31.000]   And just edit it directly if we want to. And that by default uses the current directory, I believe.
[00:29:31.000 --> 00:29:44.000]   You can just go ahead and commit that.
[00:29:44.000 --> 00:29:51.000]   And I don't know why we have architecture here. I think it defaults to x64. Doesn't it have all?
[00:29:51.000 --> 00:30:02.000]   Yes, you don't need that.
[00:30:02.000 --> 00:30:09.000]   And then something else you don't need is this pipe is used in YAML to do a multi line thing.
[00:30:09.000 --> 00:30:15.000]   And since we only have one line here, we don't need that either.
[00:30:15.000 --> 00:30:20.000]   But your screen has so much vertical space now.
[00:30:20.000 --> 00:30:25.000]   But it's split in half, so it doesn't really.
[00:30:25.000 --> 00:30:29.000]   So I still have reason to complain about vertical space.
[00:30:29.000 --> 00:30:33.000]   Besides which, that's an important part of my personality.
[00:30:33.000 --> 00:30:39.000]   So that worked. That's good.
[00:30:39.000 --> 00:30:49.000]   And so after it updates, then the GitHub pages bot will actually put that up on our website.
[00:30:49.000 --> 00:30:51.000]   Okay.
[00:30:51.000 --> 00:31:10.000]   Great. So this, this is called a raw cell, which is executed for us, and you can create a raw cell by pressing during this menu.
[00:31:10.000 --> 00:31:17.000]   And things that are between three dashes are called YAML front matter. YAML is yet another markup language.
[00:31:17.000 --> 00:31:25.000]   And basically, this is much of key value things in YAML.
[00:31:25.000 --> 00:31:29.000]   And yeah, this is where we basically put the information we want.
[00:31:29.000 --> 00:31:43.000]   The title is actually not needed because it will pick it up automatically from an h1, or to put it another way, the h1 is needed because it will come automatically from the title.
[00:31:43.000 --> 00:31:56.000]   Great. Nice position, put my name here since I'm writing it at the moment.
[00:31:56.000 --> 00:32:05.000]   All right.
[00:32:05.000 --> 00:32:12.000]   Something I find really helpful is I use this thing called collapsible headings.
[00:32:12.000 --> 00:32:17.000]   And so I just take control shift left and which as you can see it closes everything up.
[00:32:17.000 --> 00:32:25.000]   And then you can basically press right arrow to jump to the end of a section or to open a section so that's left, right.
[00:32:25.000 --> 00:32:30.000]   And if you're already at the start of the section you press left again it'll close it up.
[00:32:30.000 --> 00:32:35.000]   I find it really helpful for zipping around quickly.
[00:32:35.000 --> 00:32:39.000]   As you can see.
[00:32:39.000 --> 00:32:47.000]   All right, so we started talking about precedence yesterday.
[00:32:47.000 --> 00:33:03.000]   Yeah, I don't think there's too much more to say about precedence.
[00:33:03.000 --> 00:33:16.000]   There's a section called like expressions of which part of that is about precedence and then the other thing we put in here is about functions.
[00:33:16.000 --> 00:33:30.000]   Okay, so in Python, or indeed in math, in math you would write a function like this you'd say f of x is, you know, whatever.
[00:33:30.000 --> 00:33:40.000]   Or in Python you would say define a function which takes x and it returns two times x.
[00:33:40.000 --> 00:33:48.000]   Or you could create a lambda in function f is a function which takes x and returns to x.
[00:33:48.000 --> 00:33:57.000]   So these are all ways you can define functions in math or these two are two ways you can define functions in Python.
[00:33:57.000 --> 00:34:06.000]   They all have something in common, which is that you're telling you're telling the reader in the case of math and the interpreter in the case of Python.
[00:34:06.000 --> 00:34:13.000]   What's the name of the thing that you're passing in, and you could pass in more than one thing.
[00:34:13.000 --> 00:34:15.000]   Right.
[00:34:15.000 --> 00:34:17.000]   Apl is different.
[00:34:17.000 --> 00:34:23.000]   Apl has decided for you what names you're going to call things.
[00:34:23.000 --> 00:34:29.000]   So to create a function in apl, it's just assigning something to a symbol.
[00:34:29.000 --> 00:34:39.000]   Right. So rather than saying, oh, I'm going to turn my apl thingy on.
[00:34:39.000 --> 00:34:48.000]   Which means I just turn on my bookmark bar, which I thought I need a shortcut key to that I don't shift command me.
[00:34:48.000 --> 00:34:49.000]   Let's try that again.
[00:34:49.000 --> 00:34:54.000]   Command shift.
[00:34:54.000 --> 00:34:57.000]   All right.
[00:34:57.000 --> 00:35:10.000]   So we can assign a scalar or a list or the result of an expression with possibly various other functions in.
[00:35:10.000 --> 00:35:11.000]   Right. Whatever.
[00:35:11.000 --> 00:35:18.000]   Or we can assign a function and to create a function in apl, you use curly brackets.
[00:35:18.000 --> 00:35:21.000]   So curly brackets means this is a function.
[00:35:21.000 --> 00:35:26.000]   And then inside the function, you say what you want to do and you don't have to name the parameters.
[00:35:26.000 --> 00:35:27.000]   They already have names.
[00:35:27.000 --> 00:35:34.000]   If you have one parameter, it's going to get called Omega, which is W.
[00:35:34.000 --> 00:35:38.000]   So here's a times two function.
[00:35:38.000 --> 00:35:42.000]   And to pass the one parameter.
[00:35:42.000 --> 00:35:45.000]   You just check it on the right.
[00:35:45.000 --> 00:35:50.000]   OK.
[00:35:50.000 --> 00:35:58.000]   What if you want to create a function called G, which does something times two plus something else?
[00:35:58.000 --> 00:36:04.000]   Then a second parameter will always be called Alpha.
[00:36:04.000 --> 00:36:09.000]   Now, the second parameter goes on the left.
[00:36:09.000 --> 00:36:16.000]   So this will be this becomes Omega. So it'll be four times two, eight plus three is eleven.
[00:36:16.000 --> 00:36:17.000]   That's not right.
[00:36:17.000 --> 00:36:18.000]   Oh, sorry.
[00:36:18.000 --> 00:36:19.000]   It's going to be this.
[00:36:19.000 --> 00:36:20.000]   This happens first.
[00:36:20.000 --> 00:36:21.000]   Yeah.
[00:36:21.000 --> 00:36:22.000]   Yeah. Thank you.
[00:36:22.000 --> 00:36:27.000]   So it'll be two plus three is five times four is twenty.
[00:36:27.000 --> 00:36:28.000]   OK.
[00:36:28.000 --> 00:36:29.000]   Great.
[00:36:29.000 --> 00:36:36.000]   As you can see, I'm still not thinking apl yet.
[00:36:36.000 --> 00:36:44.000]   That's, I think, all there is to know about functions at this stage until we get to operators.
[00:36:44.000 --> 00:36:47.000]   Actually.
[00:36:47.000 --> 00:36:49.000]   We should do operators first.
[00:36:49.000 --> 00:36:50.000]   Maybe.
[00:36:50.000 --> 00:36:52.000]   Do we know that's not.
[00:36:52.000 --> 00:36:58.000]   I think that's enough.
[00:36:58.000 --> 00:37:01.000]   So.
[00:37:01.000 --> 00:37:02.000]   What happened?
[00:37:02.000 --> 00:37:06.000]   We had more than two variable.
[00:37:06.000 --> 00:37:07.000]   Good luck.
[00:37:07.000 --> 00:37:10.000]   You don't.
[00:37:10.000 --> 00:37:14.000]   You can have zero.
[00:37:14.000 --> 00:37:16.000]   One or two.
[00:37:16.000 --> 00:37:24.000]   I guess, like, basically, I have a feeling it can do unpacking.
[00:37:24.000 --> 00:37:28.000]   It can you can do some pattern matching.
[00:37:28.000 --> 00:37:39.000]   Yeah. So you could pass the list and then unpack it.
[00:37:39.000 --> 00:37:43.000]   Or destructuring, as I think some people call it.
[00:37:43.000 --> 00:37:49.000]   I guess we should keep that here because that's actually quite interesting.
[00:37:49.000 --> 00:37:57.000]   Can you pass in the function above as into the equation function.
[00:37:57.000 --> 00:38:02.000]   Can you pass the function about what you mean?
[00:38:02.000 --> 00:38:05.000]   Can you put the F inside the G function?
[00:38:05.000 --> 00:38:06.000]   Oh, yeah, absolutely.
[00:38:06.000 --> 00:38:11.000]   F and G are now like just the same as plus minus whatever.
[00:38:11.000 --> 00:38:14.000]   They're just apl functions that you can do whatever with.
[00:38:14.000 --> 00:38:42.000]   So, yeah, so we could H is equal to two plus F of omega.
[00:38:42.000 --> 00:38:44.000]   So that's something that I like, right?
[00:38:44.000 --> 00:38:50.000]   Because all the apl glyphs, at least the ones that are functions,
[00:38:50.000 --> 00:38:54.000]   are either unary, monadic, or binary, dyadic.
[00:38:54.000 --> 00:38:58.000]   And they always, you know, if they're monadic, the thing goes on the right.
[00:38:58.000 --> 00:39:00.000]   And if they're dyadic, then they're infix.
[00:39:00.000 --> 00:39:03.000]   And the functions you create are exactly the same.
[00:39:03.000 --> 00:39:07.000]   And you can create uni-code function names if you want to.
[00:39:07.000 --> 00:39:28.000]   So you can create your own very apl-ish looking functions if you wish.
[00:39:28.000 --> 00:39:51.000]   Okay.
[00:39:51.000 --> 00:39:57.000]   So when we use the word array, we're using it to mean the same thing that numpy calls arrays
[00:39:57.000 --> 00:40:00.000]   and that PyTorch calls tensors.
[00:40:00.000 --> 00:40:13.000]   So they're, you know, n-dimensional, regularly shaped bunches of things.
[00:40:13.000 --> 00:40:23.000]   And in PyTorch, we call the rank of a tensor, the number of dimensions that it has.
[00:40:23.000 --> 00:40:27.000]   So a vector would be one-dimensional.
[00:40:27.000 --> 00:40:30.000]   The matrix would be two-dimensional.
[00:40:30.000 --> 00:40:34.000]   A scalar would be zero-dimensional.
[00:40:34.000 --> 00:40:38.000]   So it'd be helpful to know how to create things.
[00:40:38.000 --> 00:40:44.000]   So we know how to create scalars.
[00:40:44.000 --> 00:40:45.000]   You just type 'men'.
[00:40:45.000 --> 00:40:47.000]   We know how to create vectors.
[00:40:47.000 --> 00:40:54.000]   So rank one arrays, you type them with spaces.
[00:40:54.000 --> 00:40:57.000]   So something's got to be helpful explaining this.
[00:40:57.000 --> 00:41:05.000]   Well, actually, first of all, be to learn about iota.
[00:41:05.000 --> 00:41:17.000]   You can also, as an earlier step, if you wanted to teach the row, you can actually use the row to reshape and give it a one or a zero to broadcast it.
[00:41:17.000 --> 00:41:19.000]   Yeah.
[00:41:19.000 --> 00:41:22.000]   Yeah, absolutely.
[00:41:22.000 --> 00:41:24.000]   Okay. Yeah, let's do it that way.
[00:41:24.000 --> 00:41:32.000]   Thanks.
[00:41:32.000 --> 00:41:34.000]   Oh, we can just type it in.
[00:41:34.000 --> 00:41:35.000]   Let's just type it in.
[00:41:35.000 --> 00:41:44.000]   So let's just create something.
[00:41:44.000 --> 00:41:54.000]   And let's use our trick now that we've learned it.
[00:41:54.000 --> 00:42:05.000]   Okay, so display a list we assigned to A.
[00:42:05.000 --> 00:42:08.000]   And we're going to have to do this backwards, but I think that's fine.
[00:42:08.000 --> 00:42:17.000]   Diatic first.
[00:42:17.000 --> 00:42:20.000]   So let's look it up.
[00:42:20.000 --> 00:42:25.000]   And we are going to get to learn a song today.
[00:42:25.000 --> 00:42:28.000]   That's the good news.
[00:42:28.000 --> 00:42:31.000]   In fact, we're starting to see some of the song here.
[00:42:31.000 --> 00:42:34.000]   That's cool.
[00:42:34.000 --> 00:42:47.000]   I guess we should mention strings, actually, because they do use them in the documentation a lot.
[00:42:47.000 --> 00:42:56.000]   I don't know what they call numbers and strings and arrays.
[00:42:56.000 --> 00:43:03.000]   What's the term for those things, things that aren't functions.
[00:43:03.000 --> 00:43:09.000]   I'm going to call them basic objects for now, but if anybody learns what they're actually meant to be called, let me know.
[00:43:09.000 --> 00:43:16.000]   In the box, they say it's a language element. Is it supposed to call all these symbols as elements?
[00:43:16.000 --> 00:43:20.000]   Yeah, that's right. But I'm trying to talk about things that aren't those.
[00:43:20.000 --> 00:43:38.000]   I'm trying to talk about numbers, arrays, and strings, which is none of these things.
[00:43:38.000 --> 00:43:43.000]   We'll figure it out.
[00:43:43.000 --> 00:43:53.000]   So strings.
[00:43:53.000 --> 00:43:56.000]   I'm not sure there's much more to say about strings.
[00:43:56.000 --> 00:44:08.000]   What does the language reference say if I search for string?
[00:44:08.000 --> 00:44:25.000]   I'm not quite sure what order they think they're showing this in, but it's definitely not the most helpful one.
[00:44:25.000 --> 00:44:32.000]   I see. They don't call them strings.
[00:44:32.000 --> 00:44:41.000]   Maybe this is considered a list of characters.
[00:44:41.000 --> 00:44:43.000]   I suspect it is, actually.
[00:44:43.000 --> 00:44:48.000]   I found another blog post that calls them character vectors and scalars.
[00:44:48.000 --> 00:44:53.000]   Oh, right, because I think this is different, right?
[00:44:53.000 --> 00:45:02.000]   So we're about to get slightly ahead of ourselves, but this tells us the shape.
[00:45:02.000 --> 00:45:04.000]   OK, so that's weird, right?
[00:45:04.000 --> 00:45:27.000]   So I don't think we should do strings yet until we do row, because they don't make sense until we can look at shapes.
[00:45:27.000 --> 00:45:36.000]   OK, all right, so we've got a list.
[00:45:36.000 --> 00:45:49.000]   So we can turn that into a matrix using dyadic row,
[00:45:49.000 --> 00:45:58.000]   which is called reshape.
[00:45:58.000 --> 00:46:26.000]   OK, this is just called row.
[00:46:26.000 --> 00:46:29.000]   Let's see what I did with my heading levels here.
[00:46:29.000 --> 00:46:32.000]   So that's two. Oh, yeah, that's three.
[00:46:32.000 --> 00:46:39.000]   OK, that's four. Great.
[00:46:39.000 --> 00:46:44.000]   So that's reshape.
[00:46:44.000 --> 00:46:51.000]   And so that is, I think it's the same as what NumPy calls it, reshape.
[00:46:51.000 --> 00:46:55.000]   Yes, same as NumPy, reshape.
[00:46:55.000 --> 00:47:01.000]   So the shape of an array is basically like how many columns and rows and whatever does it have.
[00:47:01.000 --> 00:47:11.000]   So if we want to do three rows of two columns, we can reshape our array, as you see.
[00:47:11.000 --> 00:47:14.000]   One thing that threw me off, OK.
[00:47:14.000 --> 00:47:30.000]   I was just going to say at this point, like, or maybe at the very top of this, we should say, boxing style equals max.
[00:47:30.000 --> 00:47:36.000]   Did I do that? I'll start boxing on style equals max.
[00:47:36.000 --> 00:47:42.000]   Your style dash max, I think. Dash style equals max. Yeah, actually, I can see it in the background there.
[00:47:42.000 --> 00:47:46.000]   OK, great. So.
[00:47:46.000 --> 00:47:57.000]   There we go.
[00:47:57.000 --> 00:48:07.000]   Slow. OK.
[00:48:07.000 --> 00:48:12.000]   So I think Isaac wrote something on the forum about this.
[00:48:12.000 --> 00:48:17.000]   So anywhere you see an arrow, that means this is like a dimension that exists. Right.
[00:48:17.000 --> 00:48:28.000]   There's no arrow here. So this is considered like infinitely thin. So think of this as a vector, not as a one height.
[00:48:28.000 --> 00:48:31.000]   It was a matrix with one row. This is a vector.
[00:48:31.000 --> 00:48:36.000]   I was talking to my daughter about this yesterday and she found this very confusing. She's like, well, it does have height.
[00:48:36.000 --> 00:48:46.000]   So say like, OK, it does on the screen, but this is a representation on the screen of an abstract mathematical object that doesn't have height.
[00:48:46.000 --> 00:48:56.000]   And it's just that if I drew it infinitely thin, you know, it's like, Claire, you wouldn't be able to read it and you would think that wasn't very helpful, which she agreed was true.
[00:48:56.000 --> 00:49:01.000]   Or else this thing here has two arrows. This actually has three rows and two columns.
[00:49:01.000 --> 00:49:05.000]   And then the sprinkle means that it's got numbers in.
[00:49:05.000 --> 00:49:13.000]   There's two other options. It could have a mixture of things with some strings and stuff in, or it could even have other arrays in.
[00:49:13.000 --> 00:49:16.000]   They would get different symbols.
[00:49:16.000 --> 00:49:25.000]   So I think perhaps one of the more interesting ones to look at is what happens if we have one row with six.
[00:49:25.000 --> 00:49:32.000]   And so now it does not look the same, right? No arrow. Arrow. So this is a matrix.
[00:49:32.000 --> 00:49:40.000]   So the shape.
[00:49:40.000 --> 00:49:46.000]   Is whatever is on whatever you would put on the left hand side to create that thing.
[00:49:46.000 --> 00:49:51.000]   I assume it's going to be called shape, but I suppose I should check.
[00:49:51.000 --> 00:50:02.000]   Shape of. OK, shape of.
[00:50:02.000 --> 00:50:09.000]   So, for example.
[00:50:09.000 --> 00:50:22.000]   Let's call this. Matrix.
[00:50:22.000 --> 00:50:28.000]   OK, and so if we then get.
[00:50:28.000 --> 00:50:32.000]   The shape of a.
[00:50:32.000 --> 00:50:38.000]   It's. A single dimension of length six.
[00:50:38.000 --> 00:50:42.000]   Or else the shape of match matrix.
[00:50:42.000 --> 00:50:45.000]   Is two rows by three columns.
[00:50:45.000 --> 00:50:52.000]   Yes, the question. Yeah, I may have missed this. What is the writing to the box thing do again?
[00:50:52.000 --> 00:50:56.000]   It's just printing it in a more nice way for us.
[00:50:56.000 --> 00:51:04.000]   So what I mean is I'll write it to the box that prints it out on the screen.
[00:51:04.000 --> 00:51:10.000]   No, it doesn't. If I remove it.
[00:51:10.000 --> 00:51:12.000]   Because I'm assigning.
[00:51:12.000 --> 00:51:16.000]   It doesn't display it. Oh, because you're assigning. OK.
[00:51:16.000 --> 00:51:23.000]   So you just kind of adding chaining the assignment to sign it to the screen as well.
[00:51:23.000 --> 00:51:27.000]   And this box is open auction like.
[00:51:27.000 --> 00:51:33.000]   Yeah, that that's a but that's a function called quad.
[00:51:33.000 --> 00:51:44.000]   Which I think does a lot of things.
[00:51:44.000 --> 00:51:49.000]   I think this is squad is the same name squad.
[00:51:49.000 --> 00:51:51.000]   Nevermind.
[00:51:51.000 --> 00:51:56.000]   It's a good question.
[00:51:56.000 --> 00:52:00.000]   I don't know.
[00:52:00.000 --> 00:52:03.000]   I didn't think so.
[00:52:03.000 --> 00:52:06.000]   No squad is used for indexing.
[00:52:06.000 --> 00:52:15.000]   OK, so maybe quad is like not a language element and it's some weird special thing.
[00:52:15.000 --> 00:52:36.000]   What if I search for it.
[00:52:36.000 --> 00:52:49.000]   Yeah, it's a variable which communicates between the user's terminal and APL depends on whether it's been assigned a reference but it's assigned the array is displayed.
[00:52:49.000 --> 00:52:58.000]   OK, so it's a special magic variable.
[00:52:58.000 --> 00:53:09.000]   So these are something on these creating and reshaping matrices that cause some fusion for me, but I didn't realize I had a bug.
[00:53:09.000 --> 00:53:24.000]   You can actually reshape to any size. So if you have four numbers and you reshape it to a three by three, it'll just look through it'll use the first your four numbers plus the first two in the array to make sex.
[00:53:24.000 --> 00:53:31.000]   And then you'll just do it in your podcast and kind of weird ways.
[00:53:31.000 --> 00:53:41.000]   I'm sorry I just wondering, did we, we've got something here called functions and assignment but I don't actually see if we ever did normal assignment.
[00:53:41.000 --> 00:53:48.000]   Because I don't think we did. Oh, okay well that'd be the right place to talk about quad.
[00:53:48.000 --> 00:53:51.000]   That seems like a bit of an oversight.
[00:53:51.000 --> 00:54:04.000]   So let's pop it.
[00:54:04.000 --> 00:54:21.000]   So actually, I guess we can do a function, an anonymous function without assignment. So that's a function and therefore we can apply it to something.
[00:54:21.000 --> 00:54:32.000]   And that's the same as first assigning it to F and then calling F on the thing.
[00:54:32.000 --> 00:54:39.000]   Okay, assignments. Okay, so we can go a equals three.
[00:54:39.000 --> 00:54:41.000]   A.
[00:54:41.000 --> 00:54:45.000]   And then this is the same thing.
[00:54:45.000 --> 00:54:49.000]   But with printing.
[00:54:49.000 --> 00:54:56.000]   And we can assign a list.
[00:54:56.000 --> 00:55:02.000]   Let's see if the box still own the value three.
[00:55:02.000 --> 00:55:19.000]   I guess I could check here. It said that there was some special thing when you reference it. So, no, it doesn't. It's not a normal variable it's a weird special thing.
[00:55:19.000 --> 00:55:24.000]   When you reference it a price displayed and input is requested.
[00:55:24.000 --> 00:55:34.000]   There's things after it as well like IO and stuff to change the way things work.
[00:55:34.000 --> 00:55:41.000]   All right.
[00:55:41.000 --> 00:55:57.000]   So that means we can do. We've got a row of our matrix. We've got a row of A. We could do also things like row of three.
[00:55:57.000 --> 00:56:07.000]   And this is special. This is a scalar.
[00:56:07.000 --> 00:56:09.000]   I believe.
[00:56:09.000 --> 00:56:11.000]   Although it's printing out.
[00:56:11.000 --> 00:56:13.000]   Well, this is a scalar.
[00:56:13.000 --> 00:56:19.000]   Oh, no, this is not a scalar. This is just this is like the empty set. This is nothing at all.
[00:56:19.000 --> 00:56:28.000]   Which I think there's a symbol for.
[00:56:28.000 --> 00:56:36.000]   It might not count as a as one of the last three. I think they called zill today.
[00:56:36.000 --> 00:56:49.000]   Just one moment.
[00:56:49.000 --> 00:56:55.000]   Yeah, sorry said again.
[00:56:55.000 --> 00:57:01.000]   That it's one of the last three zill day, or something, the old day.
[00:57:01.000 --> 00:57:06.000]   It's a numeric constant. Okay.
[00:57:06.000 --> 00:57:13.000]   Let's see if that displays the same way.
[00:57:13.000 --> 00:57:15.000]   It is. Okay.
[00:57:15.000 --> 00:57:21.000]   And the shape of that is zero, I think.
[00:57:21.000 --> 00:57:26.000]   How do you enter that.
[00:57:26.000 --> 00:57:31.000]   To check the shape. How do you how do you type his order. I just pasted it.
[00:57:31.000 --> 00:57:35.000]   It's the back take the right curly brackets.
[00:57:35.000 --> 00:57:40.000]   Okay, how did you find that as a matter of interest.
[00:57:40.000 --> 00:57:48.000]   It's kind of far right of your keyboard up at the top.
[00:57:48.000 --> 00:57:49.000]   Three from the right.
[00:57:49.000 --> 00:57:58.000]   Oh, well found. I see empty numeric vector. Great.
[00:57:58.000 --> 00:58:05.000]   So interestingly the rank of zero day is not zero day.
[00:58:05.000 --> 00:58:12.000]   It's actually an array containing zero.
[00:58:12.000 --> 00:58:23.000]   So this brings us to the song, which is that if I so given that row of Matt is two three.
[00:58:23.000 --> 00:58:35.000]   That means row of row of Matt is two right because it's like this is a list of one dimensional array rank one array containing two elements.
[00:58:35.000 --> 00:58:40.000]   So this is row of two three.
[00:58:40.000 --> 00:58:56.000]   So row of that is one and because row of zero day is this row of row of that.
[00:58:56.000 --> 00:59:01.000]   Is one and row of row of row of that is one.
[00:59:01.000 --> 00:59:14.000]   And actually let's go higher dimensional. We can do bigger ones.
[00:59:14.000 --> 00:59:22.000]   We can say give me two faces each with two rows each with three columns.
[00:59:22.000 --> 00:59:26.000]   This is like a kind of a rectangular prism if you like.
[00:59:26.000 --> 00:59:37.000]   And that's how they display it changed along the lines.
[00:59:37.000 --> 00:59:41.000]   Just run this again.
[00:59:41.000 --> 00:59:47.000]   And you'll see it's created two matrices that kind of you can think of them as stacked on top of each other.
[00:59:47.000 --> 00:59:50.000]   So this is the rank three tensor.
[00:59:50.000 --> 00:59:57.000]   It's when it ran out of numbers from a it just went back to the start.
[00:59:57.000 --> 01:00:01.000]   So you can use row as repeat.
[01:00:01.000 --> 01:00:09.000]   So for example if I use a scalar is just a matrix of ones.
[01:00:09.000 --> 01:00:22.000]   So let's call this C for cube.
[01:00:22.000 --> 01:00:32.000]   And so we can get this on that matrix thing.
[01:00:32.000 --> 01:00:37.000]   Does the thing on the margin of it mean anything to you like this one here.
[01:00:37.000 --> 01:00:41.000]   No no like the one above it you know this one here.
[01:00:41.000 --> 01:00:48.000]   Yeah yeah this has got this has got two. There's actually two dimensions happening here.
[01:00:48.000 --> 01:00:53.000]   There's this dimension and there's this dimension.
[01:00:53.000 --> 01:00:58.000]   So ideally if we had a 3D display they would be on top of each other.
[01:00:58.000 --> 01:01:06.000]   But we don't. So just print some with a space between and it puts two kind of dimension lines here to tell us.
[01:01:06.000 --> 01:01:13.000]   This is actually representing two separate axes because this is two faces by two rows by three columns.
[01:01:13.000 --> 01:01:24.000]   I see. OK so each arrow is kind of a dimension in exactly exactly.
[01:01:24.000 --> 01:01:34.000]   Yeah so we could do row of row of row of C and so row of row of row of anything ends up being one.
[01:01:34.000 --> 01:01:40.000]   And so that gives us our first and possibly only APL song.
[01:01:40.000 --> 01:01:49.000]   APL row row Richard Storman.
[01:01:49.000 --> 01:01:52.000]   There we go.
[01:01:52.000 --> 01:02:00.000]   Oh there is actually a dialogue poetry section that's important.
[01:02:00.000 --> 01:02:13.000]   And here's the one about row which Claire and I have now learned by heart row row row of X always equals one row is dimension row row rank APL is fun.
[01:02:13.000 --> 01:02:19.000]   So yeah row row row of anything gives us one row of something is the dimension.
[01:02:19.000 --> 01:02:29.000]   So row so tells us how many rows by columns or whatever it's I would call it a shape dimension row of row of something.
[01:02:29.000 --> 01:02:33.000]   So row of row of something tells you the tensor rank.
[01:02:33.000 --> 01:02:37.000]   So that's why that poem.
[01:02:37.000 --> 01:02:47.000]   One above it's pretty good too.
[01:02:47.000 --> 01:02:58.000]   There you go. There's an MP3 recording of an APL song.
[01:02:58.000 --> 01:03:07.000]   So to wrap up let's do Iota which is a nice easy one.
[01:03:07.000 --> 01:03:12.000]   So Iota is just the same as range basically.
[01:03:12.000 --> 01:03:21.000]   Iota four it's the same as range except it starts at one rather than zero by default.
[01:03:21.000 --> 01:03:23.000]   You can change that.
[01:03:23.000 --> 01:03:36.000]   I believe you can say quad IO zero or something like that to change like so it starts at zero instead of one.
[01:03:36.000 --> 01:03:41.000]   I kind of like just going to leave it in the default otherwise it's just going to get confusing.
[01:03:41.000 --> 01:03:47.000]   If you haven't found it yet one of the really cool things about Iota is you can range in multiple dimensions.
[01:03:47.000 --> 01:03:59.000]   So if you do Iota to two.
[01:03:59.000 --> 01:04:07.000]   Yeah so it's creating basically all of the coordinates to kind of index into a multidimensional structure I guess.
[01:04:07.000 --> 01:04:16.000]   So here's it's so this is like the Cartesian product of the set of one two with a set one two three.
[01:04:16.000 --> 01:04:27.000]   And so now we've got arrays and arrays and so you can change the symbols changed.
[01:04:27.000 --> 01:04:39.000]   So to create our matrix an easier way to create the matrix would have been to just go two three row of Iota six.
[01:04:39.000 --> 01:04:52.000]   So Iota six is one two three four five six and then two three of that is the matrix.
[01:04:52.000 --> 01:04:59.000]   All right. So let's close it.
[01:04:59.000 --> 01:05:01.000]   I had a question.
[01:05:01.000 --> 01:05:19.000]   With Iota like you know how like in Python we have like a start stop and step. Is there something similar with Iota. No, it's not. But you don't really need it right because like let's say I want to step by two.
[01:05:19.000 --> 01:05:25.000]   That's easy enough, you know, or if I want to start one more than that.
[01:05:25.000 --> 01:05:28.000]   That's easy enough, you know.
[01:05:28.000 --> 01:05:39.000]   So I think that's why we don't really need it. Okay.
[01:05:39.000 --> 01:05:45.000]   Okay.
[01:05:45.000 --> 01:05:49.000]   Where is it? Here it is. Okay.
[01:05:49.000 --> 01:06:10.000]   Monadic Iota means index generator. Okay, so that's why it's called index generator because these are the indices of all of the locations in a two by three array.
[01:06:10.000 --> 01:06:18.000]   Index generator.
[01:06:18.000 --> 01:06:23.000]   Okay.
[01:06:23.000 --> 01:06:28.000]   And then dyadic.
[01:06:28.000 --> 01:06:57.000]   Okay, let's just check the help for index generators to see if we missed anything. Okay, so R equals Iota y, you pass it a scalar or a vector of non-negative numbers and you get back in the America Ray, the set of all possible coordinates, which is exactly what we thought.
[01:06:57.000 --> 01:07:11.000]   Okay. Oh, so that's interesting. So I think one special thing is Iota zero, which is another way of getting that yoga thing.
[01:07:11.000 --> 01:07:15.000]   That's the empty set.
[01:07:15.000 --> 01:07:27.000]   Okay, so the dyadic version is index of.
[01:07:27.000 --> 01:07:41.000]   And this won't make any sense really until we've got strings. So let's do strings first.
[01:07:41.000 --> 01:07:51.000]   Okay, so strings are basically.
[01:07:51.000 --> 01:08:05.000]   Vector arrays, sorry, character, character, vector, characters and character vectors.
[01:08:05.000 --> 01:08:11.000]   That's a character vector and that's a character.
[01:08:11.000 --> 01:08:19.000]   And so now we should be able to understand their example.
[01:08:19.000 --> 01:08:36.000]   So I've noticed the examples when I click on like the name of like the dyadic version, for example, the examples tend to be more complicated than the one in the overall summary just to warn you.
[01:08:36.000 --> 01:08:40.000]   So I'm going to use the simpler ones.
[01:08:40.000 --> 01:08:50.000]   Okay, so index of takes this list, this array and tells you the index of each of these things.
[01:08:50.000 --> 01:08:57.000]   And so remember, this is a list of three letters. I believe it's identical. Let's see.
[01:08:57.000 --> 01:09:11.000]   Actually, it's true. Here's ACF and here's a list containing ACNF. Yeah, they're the same thing.
[01:09:11.000 --> 01:09:17.000]   So that's interesting.
[01:09:17.000 --> 01:09:26.000]   Yeah, so that is a single character.
[01:09:26.000 --> 01:09:41.000]   This is a list of characters, and this is just a little syntactic shortcut for creating a list of characters and lists of characters appear with no space between them when it outputs them, but they are still just lists of characters.
[01:09:41.000 --> 01:09:53.000]   I believe if you put a character on the right hand side that's not in the left like the Z, it will give you one more than the total link.
[01:09:53.000 --> 01:09:54.000]   Oh, good.
[01:09:54.000 --> 01:10:02.000]   11 is there but it's not actually in the list. Thanks.
[01:10:02.000 --> 01:10:11.000]   So then an interesting example they have is if what what if you've got a higher ranked matrix.
[01:10:11.000 --> 01:10:19.000]   So here they're saying, oh, let's assume I've already got a matrix with this in it, because they're assuming we don't know how to create one, we might get confused.
[01:10:19.000 --> 01:10:42.000]   So now that we do, let's go ahead and create one. So I've got a matrix and they used three rows of two columns of iota six.
[01:10:42.000 --> 01:10:59.000]   Okay. And so then they said, given that what if we do this.
[01:10:59.000 --> 01:11:03.000]   Now what's that doing.
[01:11:03.000 --> 01:11:12.000]   The first occurrence of sub arrays in Y, which match major cells of X.
[01:11:12.000 --> 01:11:15.000]   Okay, so this is an important concept.
[01:11:15.000 --> 01:11:24.000]   I don't know the difference between a sub array and a major cell yet, but the idea is, okay, so why is the thing on the right X is the thing on the left.
[01:11:24.000 --> 01:11:44.000]   So here's why. So it's going to try to find this. What do they call it this. It's going to try to find this sub array in the major cells of X so this they're going to treat this as a row and trying to find which row contains that in it.
[01:11:44.000 --> 01:11:48.000]   And the answer is row three.
[01:11:48.000 --> 01:12:02.000]   It doesn't work if you put 135 or something, but we'll find it, I guess. So that doesn't work. I'm pretty sure it's not going to because that's not considered a major cell.
[01:12:02.000 --> 01:12:14.000]   Yeah. So the major cells of this so it's rose so if you wanted to do this you'd have to transpose it first, and there is a transpose operator.
[01:12:14.000 --> 01:12:16.000]   There's.
[01:12:16.000 --> 01:12:31.000]   You could probably do like, I think something that's missing in the dialogue docs is the simplest possible versions of things. So let's just say let's find the number three in the list 13654.
[01:12:31.000 --> 01:12:38.000]   Now why is, oh, wrong way around.
[01:12:38.000 --> 01:12:42.000]   In the list of this, find the number three.
[01:12:42.000 --> 01:12:51.000]   Okay.
[01:12:51.000 --> 01:12:57.000]   Are we done.
[01:12:57.000 --> 01:13:00.000]   We made good progress. I think so too.
[01:13:00.000 --> 01:13:03.000]   Thanks gang.
[01:13:03.000 --> 01:13:17.000]   Vectors lists and arrays the same term in APL. No, an array is like a NumPy array so an array can be any shape. So a vector is a rank one array.
[01:13:17.000 --> 01:13:20.000]   A matrix is a rank two array.
[01:13:20.000 --> 01:13:23.000]   A scalar is a rank zero array.
[01:13:23.000 --> 01:13:26.000]   I don't know what we call rank three arrays but.
[01:13:26.000 --> 01:13:33.000]   It's the same as what PyTorch causes tensor.
[01:13:33.000 --> 01:13:35.000]   Thank you.
[01:13:35.000 --> 01:13:40.000]   Although one difference is a PyTorch tensor can't contain tensors.
[01:13:40.000 --> 01:13:50.000]   But I think a NumPy array can contain arrays so it's probably more like NumPy than PyTorch.
[01:13:50.000 --> 01:13:53.000]   All right, thanks everyone. That was cool.
[01:13:53.000 --> 01:13:57.000]   We all let something happen. Bye. Thank you.
[01:13:57.000 --> 01:13:58.000]   Take care, everybody.
[01:13:58.000 --> 01:13:59.000]   See ya.

