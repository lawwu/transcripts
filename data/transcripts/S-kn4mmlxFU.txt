
[00:00:00.000 --> 00:00:06.240]   Okay, so I'm gonna talk about, let me get this video out of the way, okay, I'm gonna
[00:00:06.240 --> 00:00:13.760]   talk about GitHub actions and machine learning workflows. There you go. Okay, so
[00:00:13.760 --> 00:00:18.460]   a little bit about me. I won't repeat too much, but I'm currently a machine
[00:00:18.460 --> 00:00:24.760]   learning engineer at GitHub. I've been there for about two years. Before this, I was at
[00:00:24.760 --> 00:00:30.720]   Airbnb on the machine learning team, and then before that, I was at DataRobot
[00:00:30.720 --> 00:00:36.400]   building machine learning tools. It's a software as a service company. Before
[00:00:36.400 --> 00:00:40.480]   that, I was doing consulting. Some interesting projects that I've done
[00:00:40.480 --> 00:00:48.060]   recently. So as Lucas mentioned, one is called CodeSearchNet, which is, it's a
[00:00:48.060 --> 00:00:55.000]   project that we ended up open sourcing, and what we're trying to do is learn
[00:00:55.000 --> 00:01:00.840]   representations of code using deep learning, and one of the
[00:01:00.840 --> 00:01:05.440]   downstream tasks that we want to accomplish with that is semantic search
[00:01:05.440 --> 00:01:11.080]   of code, and actually that's a really cool, we partnered with
[00:01:11.080 --> 00:01:15.280]   Weights and Biases, so they have a really cool product called Benchmarks.
[00:01:15.280 --> 00:01:24.080]   I'll actually show that real fast. There we go. So there's a really cool thing, the
[00:01:24.080 --> 00:01:30.160]   Benchmarks, if you haven't seen it, I highly recommend it, and there's a bunch
[00:01:30.160 --> 00:01:36.960]   of different benchmarks. Like if you go to the benchmarks, okay, we don't have to
[00:01:36.960 --> 00:01:43.240]   look at all the benchmarks, but so Weights and Biases can host sort of its benchmark
[00:01:43.240 --> 00:01:47.920]   for you, and you get kind of a leaderboard just like Kaggle, but
[00:01:47.920 --> 00:01:52.440]   then also you get to see all of the runs and the details of the runs in a very
[00:01:52.440 --> 00:01:56.840]   transparent way, and with all the model artifacts and all the files, so it's
[00:01:56.840 --> 00:02:01.800]   actually really cool. So like the CodeSearchNet project, there's a
[00:02:01.800 --> 00:02:06.440]   GitHub repo associated with it, but it's really interesting in two respects.
[00:02:06.440 --> 00:02:12.040]   So we open source a large corpus of code, and it's a parallel corpus of code in
[00:02:12.040 --> 00:02:16.160]   natural language, so it's two million pairs of functions and methods with
[00:02:16.160 --> 00:02:23.600]   their associated doc strings or comments, and the idea is can we learn a
[00:02:23.600 --> 00:02:28.160]   representation of code that aligns with natural language so that we can use that,
[00:02:28.160 --> 00:02:32.440]   you know, in things like search. I won't go into too much detail, but definitely
[00:02:32.440 --> 00:02:38.280]   check it out. It's, again, it's a really cool project that we collaborated with
[00:02:38.280 --> 00:02:43.880]   Weights and Biases. And then actually another project that I worked on recently
[00:02:43.880 --> 00:02:48.760]   that doesn't have much to do with machine learning or deep learning, but
[00:02:48.760 --> 00:02:55.720]   it's still relevant to this conversation, is FastPages. So FastPages is an open
[00:02:55.720 --> 00:02:59.600]   source project that I'll show you a little bit later that allows you to blog
[00:02:59.600 --> 00:03:02.960]   with Jupyter notebooks, and it's automated completely with GitHub Actions,
[00:03:02.960 --> 00:03:09.840]   and so, yeah, those are some things. Okay, so I'm gonna jump right
[00:03:09.840 --> 00:03:14.820]   into it. So GitHub Actions. So the reason I want, like, I just want to say, the
[00:03:14.820 --> 00:03:20.600]   reason I want to talk about this is I think a lot of times, you know, when we're
[00:03:20.600 --> 00:03:24.960]   doing machine learning projects, it involves a lot of software engineering,
[00:03:24.960 --> 00:03:31.920]   like DevOps stuff even, or, you know, other, like, adjacent stuff, and I think it's
[00:03:31.920 --> 00:03:39.120]   really interesting to hear, kind of, what are some tools that can help. So, so, like,
[00:03:39.120 --> 00:03:44.720]   let me first talk about what GitHub Actions is. So on the surface, GitHub
[00:03:44.720 --> 00:03:50.520]   Actions look like another CI/CD tool. So you may have seen these on GitHub if you
[00:03:50.520 --> 00:03:56.000]   haven't used them. Probably many people have. So things like Travis, CircleCI,
[00:03:56.000 --> 00:04:01.480]   Jenkins, whatever it might be. And, like, you know, you've seen probably these, like,
[00:04:01.480 --> 00:04:05.680]   checks. Like, when you do unit tests or integration tests, you have some tests on
[00:04:05.680 --> 00:04:11.200]   your code, and they help you maintain quality of your software. So GitHub
[00:04:11.200 --> 00:04:19.200]   Actions, on the surface, looks like it can be the replacement for that, and, and
[00:04:19.200 --> 00:04:23.000]   actually, GitHub Actions is really interesting because it has some
[00:04:23.000 --> 00:04:27.880]   additional features which are important, and that kind of make it easier for data
[00:04:27.880 --> 00:04:34.440]   scientists as well to, to add additional tools to, like, their workflow. So, so the
[00:04:34.440 --> 00:04:41.440]   main feature that GitHub Actions has is allow you to trigger events, trigger on
[00:04:41.440 --> 00:04:47.520]   any GitHub event, and then inspect the metadata of those events. That's one of
[00:04:47.520 --> 00:04:54.280]   the big features. So, like, what is a GitHub event? So before GitHub Actions,
[00:04:54.280 --> 00:05:01.600]   you could subscribe to webhooks on GitHub. So there's all kinds of events on
[00:05:01.600 --> 00:05:06.120]   GitHub. You can see, like, this really long list. I highlighted in red some of the
[00:05:06.120 --> 00:05:11.200]   ones that may be interesting. But things like, basically, anything you do on GitHub
[00:05:11.200 --> 00:05:18.000]   can trigger an event. So commenting on an issue, or making a pull request, or
[00:05:18.000 --> 00:05:24.240]   starring a repo, 4k repo, whatever it might be, will trigger an event, and that
[00:05:24.240 --> 00:05:31.880]   event will emit a payload that you can subscribe to. So this is an example of a
[00:05:31.880 --> 00:05:41.160]   payload when you edit an issue. So, basically, like, JSON, and it has a bunch
[00:05:41.160 --> 00:05:48.920]   of metadata about what happened on GitHub. So this is just, like, background.
[00:05:48.920 --> 00:05:54.480]   And so GitHub Actions allows you to read this metadata and, like, respond to it. So
[00:05:54.480 --> 00:05:58.680]   someone makes a comment on the on an issue of a certain kind, for example, you
[00:05:58.680 --> 00:06:04.960]   can, like, automatically respond to that in a very easy way. You might be wondering,
[00:06:04.960 --> 00:06:08.440]   like, how does this relate to machine learning at all? I'm
[00:06:08.440 --> 00:06:15.240]   getting to it, I promise. Okay. So I'm going to do -- I'm going to create a GitHub
[00:06:15.240 --> 00:06:21.080]   Action really quickly to, like, give you a taste of what it is. Hopefully this
[00:06:21.080 --> 00:06:25.400]   doesn't go wrong. I haven't really ever done live coding before, so we'll just
[00:06:25.400 --> 00:06:33.280]   pray that nothing happens. Okay. So I'm just going to create a new directory, just
[00:06:33.280 --> 00:06:43.520]   so you know that I'm not cheating. And I'm just going to, you know, I'm going to
[00:06:43.520 --> 00:06:52.160]   make this a Git repository, and I'm going to make this into a GitHub repo. And on
[00:06:52.160 --> 00:06:58.240]   GitHub, so you'll see it here. So this is the repo I have. And so to create a GitHub
[00:06:58.240 --> 00:07:03.240]   Action, so what I want to do with this demo is I want to create an Action that
[00:07:03.240 --> 00:07:09.480]   responds to you if you open an issue. And, again, I promise this is all related,
[00:07:09.480 --> 00:07:13.080]   like, somehow to machine learning. Just bear with me. I just want to, like, kind
[00:07:13.080 --> 00:07:19.680]   of clue you in into what Actions is. So the way you make a GitHub Action is you
[00:07:19.680 --> 00:07:25.240]   have a GitHub folder, and inside the .github folder, you have a workflows
[00:07:25.240 --> 00:07:35.840]   folder, like that. And so I'm going to open, oh yeah, and then, so, like, let's call
[00:07:35.840 --> 00:07:40.040]   this, you have to have a YAML file. So there's a YAML file in the .github
[00:07:40.040 --> 00:07:49.920]   workflows folder that, so we'll call it demo.yaml. Okay, and I'll just open this
[00:07:49.920 --> 00:08:02.280]   file. My IDE. So demo.yaml. And so, okay, so with all the YAML files, they can be
[00:08:02.280 --> 00:08:08.200]   kind of scary. What I like to do is I like to start with, like, the YAML file
[00:08:08.200 --> 00:08:13.280]   that's already out there somewhere and just use it as a template. Just because,
[00:08:13.280 --> 00:08:19.520]   you know, it's not like programming. It's basically use a template. So I have this
[00:08:19.520 --> 00:08:26.760]   thing in my, that looked like it was hand wavy, but I kind of copy and paste this
[00:08:26.760 --> 00:08:30.960]   thing and start from there. You can use any GitHub Action you want. I highly
[00:08:30.960 --> 00:08:34.240]   recommend just starting with something. And so I'll tell you, like, what's going
[00:08:34.240 --> 00:08:40.400]   on here. So, like, you name your workflow something, and then this on thing is
[00:08:40.400 --> 00:08:46.000]   where you, like, specify the event. In this case, like, I want to, like, do
[00:08:46.000 --> 00:08:53.520]   something on an issue comment. So if I go here and I say, okay, actions docs, and I
[00:08:53.520 --> 00:08:59.520]   want to, let's say, I want to look at events that can trigger workflows. I'm
[00:08:59.520 --> 00:09:04.320]   kind of going through this fast, but, you know, don't worry. I just want to give
[00:09:04.320 --> 00:09:10.560]   you a taste for what it looks like. So there's this issues event. And so, like, I
[00:09:10.560 --> 00:09:14.880]   want to trigger this when the issue is opened. So I'm kind of going to just copy
[00:09:14.880 --> 00:09:20.000]   this thing here. I'm going to come back here, and I'm going to, like, just use
[00:09:20.000 --> 00:09:25.760]   that. Now, the thing with YAML is you have to, the indentation is very finicky,
[00:09:25.760 --> 00:09:29.920]   very specific, so you have to be consistent. So I'm going to say this is issue
[00:09:29.920 --> 00:09:38.960]   open event. And so let me make my ID a little bit wider here. Okay. And so this is
[00:09:38.960 --> 00:09:44.000]   all just, like, boilerplate stuff. I don't really need that. This is the name of
[00:09:44.000 --> 00:09:50.240]   the thing. So this is the name, so this jobs thing is sort of, you don't really,
[00:09:50.240 --> 00:09:56.160]   it's not really relevant in this example. This is just any name you want. You name
[00:09:56.160 --> 00:10:02.720]   your job. This is the runtime, the operating system in which the arbitrary code is
[00:10:02.720 --> 00:10:08.080]   going to run in. And so, and all of this is just boilerplate. I just have it here
[00:10:08.080 --> 00:10:11.120]   just to kind of help me, but it doesn't really matter.
[00:10:11.120 --> 00:10:17.120]   >> Can you make it a little bigger? >> Oh, sorry. Yeah. Sorry. Okay. Oops.
[00:10:17.120 --> 00:10:21.120]   Okay. Hopefully that's bigger. >> Could you make it a little bigger?
[00:10:21.120 --> 00:10:24.120]   >> Yeah, sure. Let me. >> Thank you.
[00:10:24.120 --> 00:10:27.120]   >> Is that better? >> Yeah, that's better.
[00:10:27.120 --> 00:10:31.120]   >> Okay. Okay. So this is, again, this is the YAML file. I'll try to go through
[00:10:31.120 --> 00:10:39.120]   this quickly. So I'm just going to, like, delete some stuff here, because, again,
[00:10:39.120 --> 00:10:45.120]   I'm just running with a template. And what I want to do is, in this case,
[00:10:45.120 --> 00:10:50.120]   actually, let's leave one thing here. I'm going to leave, so there's a lot of
[00:10:50.120 --> 00:10:56.120]   syntax that is, like, unique to GitHub Actions. And it takes some time to learn
[00:10:56.120 --> 00:11:00.120]   it. Like, these docs are very, like, detailed. There's a lot of things you can
[00:11:00.120 --> 00:11:08.120]   do and things like that. One thing that is really interesting is, so I mentioned,
[00:11:08.120 --> 00:11:16.120]   every time a GitHub Action is triggered, this payload is emitted. And you can,
[00:11:16.120 --> 00:11:22.120]   so, for example, there is a variable called GitHub event. And that has the full
[00:11:22.120 --> 00:11:30.120]   payload, which is that JSON thing. And so, this basically, so this step, I'm
[00:11:30.120 --> 00:11:36.120]   running a bash command, and I'm, you know, this variable payload, and I'm taking
[00:11:36.120 --> 00:11:41.120]   this special variable that's part of GitHub Actions, and I'm going to show it, just
[00:11:41.120 --> 00:11:45.120]   for demonstration purposes. And then there's this other thing here. So this is one
[00:11:45.120 --> 00:11:53.120]   of the key features of Actions, is you can host Actions for other people to use. So
[00:11:53.120 --> 00:12:04.120]   I'm going to, so, let's see. There it is. So this thing, so I don't know any
[00:12:04.120 --> 00:12:09.120]   more about GitHub, but that's okay. Like, there's a people, this is an official
[00:12:09.120 --> 00:12:14.120]   GitHub Action that allows me to create a comment. And it uses the, you know, I
[00:12:14.120 --> 00:12:19.120]   barely understand, like, what is going on here, and that's the point. So I can use
[00:12:19.120 --> 00:12:25.120]   this step here, and that's what I'm doing. I'm referencing this prepackaged
[00:12:25.120 --> 00:12:37.120]   comment that I used, and basically, I'm, you know, I have that here. And so, next
[00:12:37.120 --> 00:12:46.120]   thing, so when, so, these are going to run in order, and so, I'm just going to
[00:12:46.120 --> 00:12:56.120]   do this. And I know I'm going through this really fast. I just don't, I know that
[00:12:56.120 --> 00:13:01.120]   it's kind of probably too fast to actually understand what is going on, but I just
[00:13:01.120 --> 00:13:09.120]   want to pique your interest. And hopefully, like, give you a flavor of how it
[00:13:09.120 --> 00:13:14.120]   works. So, this, okay, so, I want to, this, this workflow that I saved is going to
[00:13:14.120 --> 00:13:19.120]   be triggered with an issue. So, let's open an issue, it doesn't really matter what I
[00:13:19.120 --> 00:13:23.120]   say, and let's see if it triggers the action. Probably 50% chance I did
[00:13:23.120 --> 00:13:28.120]   something wrong. I don't know. Hopefully, it works. So, you can click in actions,
[00:13:28.120 --> 00:13:35.120]   and then it will go through these steps. So, let's see, like, what it did real
[00:13:35.120 --> 00:13:42.120]   fast. So, see payload. Okay. So, you can see this payload. Let me zoom in. Oops,
[00:13:42.120 --> 00:13:50.120]   going in the wrong direction. You can see the payload, which is kind of that JSON
[00:13:50.120 --> 00:13:54.120]   file that I talked about that has all the metadata of what triggered this event,
[00:13:54.120 --> 00:13:58.120]   which is opening an issue. So, you can see the action is open and all this
[00:13:58.120 --> 00:14:05.120]   information about the issue. And then you can parse that and kind of go from there.
[00:14:05.120 --> 00:14:11.120]   And then you see, you know, this comment event was triggered, which hopefully
[00:14:11.120 --> 00:14:19.120]   works. So, let's go back to the issue and see if it worked. And, yeah, GitHub
[00:14:19.120 --> 00:14:23.120]   actions, like, did that. So, this is very hello world. Again, I just want to pique
[00:14:23.120 --> 00:14:27.120]   your interest. So, you might be wondering, okay, like, whatever, like, how is it
[00:14:27.120 --> 00:14:34.120]   going to work for ML? Okay. So, let me show, like, a quick demo of kind of what
[00:14:34.120 --> 00:14:42.120]   it could look like. So, let's say you have, okay, so, this is a very common
[00:14:42.120 --> 00:14:48.120]   problem. Like, you open a PR, and you make some change to a model. In this case,
[00:14:48.120 --> 00:14:52.120]   this is very simplified, like, I'm changing the size of embedding. And just
[00:14:52.120 --> 00:14:58.120]   imagine I'm opening a PR. And a lot of times, you know, in code review, you want
[00:14:58.120 --> 00:15:03.120]   your colleagues to know whether or not this PR should be merged. Like, what's the
[00:15:03.120 --> 00:15:09.120]   impact of these changes to the model? And that's always not clear a lot of times
[00:15:09.120 --> 00:15:16.120]   from PR. So, it would be cool if somehow you could automate this. So, kind of
[00:15:16.120 --> 00:15:21.120]   using the same approach that I talked about before, just like you can make
[00:15:21.120 --> 00:15:25.120]   actions respond to comments and issues, you can make actions respond to comments
[00:15:25.120 --> 00:15:32.120]   and PRs. So, in this case, I've orchestrated something, run full test. This run
[00:15:32.120 --> 00:15:37.120]   full test will trigger a GitHub action to run. And what that will do is it will
[00:15:37.120 --> 00:15:41.120]   take the Docker, there's a Docker file in this repo, and it will take the code in
[00:15:41.120 --> 00:15:47.120]   this PR. It will build the Docker container, and it will push it to the registry,
[00:15:47.120 --> 00:15:52.120]   which is what's happening here. I sped this up just so that you can see this
[00:15:52.120 --> 00:15:57.120]   without getting bored. It does take some time to, like, you know, push this thing.
[00:15:57.120 --> 00:16:03.120]   And also record this, because I didn't want to do this live, because every time I
[00:16:03.120 --> 00:16:09.120]   do something goes wrong, internet connection or something else. But what's
[00:16:09.120 --> 00:16:14.120]   happening here is pushing the Docker container, and then it's running this
[00:16:14.120 --> 00:16:19.120]   machine learning pipeline on the infrastructure of my choice. In this case, I'm
[00:16:19.120 --> 00:16:26.120]   using Argo, which is a cloud native workflow system for machine learning. And
[00:16:26.120 --> 00:16:30.120]   what's happening here is, like, we're going to have a preprocessing step and a
[00:16:30.120 --> 00:16:34.120]   training step. Very simple. Again, this is sort of hello, world. You know, this is
[00:16:34.120 --> 00:16:39.120]   an external system. This is not running in actions. Actions just deferred to this
[00:16:39.120 --> 00:16:48.120]   system. And what you can see is, like, okay, it's running. And then eventually
[00:16:48.120 --> 00:16:53.120]   it's going to complete. So you have preprocessing, then there's going to be,
[00:16:53.120 --> 00:16:58.120]   like, a training step that you might have. Again, like, there's logs. And, you
[00:16:58.120 --> 00:17:03.120]   know, this is not unique to CI/CD. I'm just giving you an idea how this works.
[00:17:03.120 --> 00:17:07.120]   Notice how all the context for what is happening is dropped into the PR
[00:17:07.120 --> 00:17:11.120]   automatically. So all your colleagues can look and see what's happening. So,
[00:17:11.120 --> 00:17:16.120]   like, when the model run is complete, what we do is we have a weights and biases
[00:17:16.120 --> 00:17:21.120]   action, which is really cool. And what it does is it fetches all the runs for
[00:17:21.120 --> 00:17:27.120]   this SHA, and it brings it back into the PR. And it says, okay, these are the
[00:17:27.120 --> 00:17:32.120]   metrics that we have. And then along with the run ID, which is really
[00:17:32.120 --> 00:17:40.120]   interesting. And so, you know, we can be confident that we tested this for --
[00:17:40.120 --> 00:17:45.120]   you know, this test relates to the, like, code that's not stale in this PR for
[00:17:45.120 --> 00:17:51.120]   this SHA. And then we also can bring back other runs that we might have in
[00:17:51.120 --> 00:17:55.120]   weights and biases for, like, baselines and things like that. This is weights
[00:17:55.120 --> 00:18:00.120]   and biases. I'm sure a lot of people have seen this on this call. But this,
[00:18:00.120 --> 00:18:05.120]   you know, again, like, you can embed whatever links you want, and you can
[00:18:05.120 --> 00:18:10.120]   expect the runs you want. And, you know, weights and biases, obviously, is
[00:18:10.120 --> 00:18:16.120]   really cool for showing all the context and all, like, the artifacts that are
[00:18:16.120 --> 00:18:24.120]   associated with your model. And so, in this case, we have a candidate model
[00:18:24.120 --> 00:18:33.120]   here. We have baseline. And so -- and we can verify, like, the SHA there
[00:18:33.120 --> 00:18:37.120]   matches the SHA that's in the table. Let me actually fast-forward a little
[00:18:37.120 --> 00:18:42.120]   bit. Kind of go through this a little bit faster. Okay. So, let's say you
[00:18:42.120 --> 00:18:47.120]   want to deploy the model. So, you might say, okay, like, I'm ready to deploy
[00:18:47.120 --> 00:18:52.120]   one of these models or test the model in another way or do some kind of, you
[00:18:52.120 --> 00:18:58.120]   know, binary, you know, smoke test. And so, in this case, I have another
[00:18:58.120 --> 00:19:03.120]   chatops, chat command, deploy, and then the name of the run ID here. And then
[00:19:03.120 --> 00:19:08.120]   I have this -- another action goes out and fetches that model artifact from
[00:19:08.120 --> 00:19:15.120]   weights and biases. And then -- and then pushes it to a model serving --
[00:19:15.120 --> 00:19:20.120]   like, a model serving function. In this case, I'm using Google Cloud
[00:19:20.120 --> 00:19:26.120]   functions, which is just lambda. But basically, like, I'm using it to, you
[00:19:26.120 --> 00:19:30.120]   know, serve, like, an inference -- a container that does inference. And then
[00:19:30.120 --> 00:19:36.120]   so, again, like, you have -- and this just shows the dashboard where Google
[00:19:36.120 --> 00:19:41.120]   Cloud Functions is running. So, this is really cool. Like, with GitHub
[00:19:41.120 --> 00:19:45.120]   Actions, you have in a PR a very transparent display of sort of
[00:19:45.120 --> 00:19:49.120]   everything that happens in a machine learning workflow. And it's kind of,
[00:19:49.120 --> 00:19:52.120]   like, a way that you can test models. And that's really -- that's really
[00:19:52.120 --> 00:19:57.120]   interesting. I see a lot of people struggling with that. You know, when
[00:19:57.120 --> 00:20:02.120]   they open PRs. And then going back to a PR and trying to figure out why was
[00:20:02.120 --> 00:20:06.120]   this merged or where -- you know, where was the problem. And this gives you a
[00:20:06.120 --> 00:20:14.120]   way to sort of orchestrate some really interesting things. Okay. So, I went
[00:20:14.120 --> 00:20:18.120]   really fast. Again, there's no way you can learn everything about GitHub
[00:20:18.120 --> 00:20:23.120]   Actions or even necessarily understand how it works in only 20 minutes or so. I
[00:20:23.120 --> 00:20:29.120]   don't expect that. I just wanted to give you an idea and pique your interest in
[00:20:29.120 --> 00:20:35.120]   some of this. So, okay. Let me -- let me talk a little bit about -- I
[00:20:35.120 --> 00:20:39.120]   mentioned that there's a weights and biases action. Like, what does that
[00:20:39.120 --> 00:20:43.120]   mean? Like, how does -- what is that -- what is that even -- like, how does that
[00:20:43.120 --> 00:20:52.120]   look? So, there's a lot going on behind the scenes. So, when I had that comment
[00:20:52.120 --> 00:20:58.120]   in the PR that fetched the runs from weights and biases, it went out and it
[00:20:58.120 --> 00:21:03.120]   queried weights and biases API and it got all the relevant runs for that PR and it
[00:21:03.120 --> 00:21:08.120]   dropped it in as a markdown table. So, that involves a lot of work. Like, you
[00:21:08.120 --> 00:21:11.120]   know, there's a fair amount of code involved with doing that and kind of
[00:21:11.120 --> 00:21:14.120]   orchestrating that. And you might not want to rewrite all that stuff. And you
[00:21:14.120 --> 00:21:18.120]   don't have to. So, the cool thing about Actions is I can create a prepackaged
[00:21:18.120 --> 00:21:22.120]   action and then serve it to the community. So, that's what we've done, for
[00:21:22.120 --> 00:21:25.120]   example, weights and biases. So, like, this is how it looks in the workflow. If
[00:21:25.120 --> 00:21:29.120]   you remember that YAML file that I quickly went through at the beginning,
[00:21:29.120 --> 00:21:35.120]   blazing fast speed. This is kind of the idea. So, you know, like -- so,
[00:21:35.120 --> 00:21:39.120]   actually, PR comments and issue comments are the same thing, because in GitHub,
[00:21:39.120 --> 00:21:44.120]   issues and PRs are the same thing. I know it's confusing, but just trust me. So,
[00:21:44.120 --> 00:21:49.120]   the issue comment will also be triggered from a PR comment. And, you know, you
[00:21:49.120 --> 00:21:54.120]   can have a comment like get runs, and then this is the interface of the weights
[00:21:54.120 --> 00:22:01.120]   and biases prepackaged action. So, these are the inputs. These are some inputs,
[00:22:01.120 --> 00:22:05.120]   some of them optional that you can specify that will help you get runs that you're
[00:22:05.120 --> 00:22:12.120]   looking for. And so, I won't go into too much detail, but you kind of get an idea.
[00:22:12.120 --> 00:22:16.120]   So, like, in weights and biases, you have tags. You also have certain metrics
[00:22:16.120 --> 00:22:20.120]   that you might want to see. So, this helps you specify what information you want
[00:22:20.120 --> 00:22:24.120]   to get back. There's obviously a weights and biases API key that you might need.
[00:22:24.120 --> 00:22:28.120]   And then this, like, SHA might help you filter runs that, you know, for
[00:22:28.120 --> 00:22:35.120]   particular SHAs. That's just a high-level idea. Again, it's not -- you can follow
[00:22:35.120 --> 00:22:43.120]   these links and sort of dig in more if you're interested. Okay. There's another
[00:22:43.120 --> 00:22:52.120]   thing that is enabled by GitHub Actions. It's fast pages. So, oops. Let me do the
[00:22:52.120 --> 00:23:00.120]   next one. And that's fast pages. So, fast pages -- so, if you ever wondered how
[00:23:00.120 --> 00:23:05.120]   you could blog with Jupyter notebooks, like, turn -- like, wouldn't it be nice if
[00:23:05.120 --> 00:23:10.120]   you could write a Jupyter notebook and then turn it into a blog post? I tried to
[00:23:10.120 --> 00:23:14.120]   do that, like, before fast pages, I tried to do that myself, and it's kind of
[00:23:14.120 --> 00:23:19.120]   complicated. Like, it was -- you know, has some convergence scripts, converges to
[00:23:19.120 --> 00:23:24.120]   building around with, like, hiding cells and formatting and all kinds of stuff, you
[00:23:24.120 --> 00:23:29.120]   know, getting in the way. And so, GitHub Actions was a way that we -- so, we
[00:23:29.120 --> 00:23:37.120]   partnered with fast AI. And we created fast pages, the way to allow people to
[00:23:37.120 --> 00:23:43.120]   quickly and easily write blogs with Jupyter notebooks, but also with markdown and
[00:23:43.120 --> 00:23:48.120]   Word documents, if you really want to. So, let me kind of demonstrate, just
[00:23:48.120 --> 00:23:54.120]   because it's relevant, how that works. So, let me go to fast pages. See, here we
[00:23:54.120 --> 00:24:00.120]   go. That's my history. So, this is how you get started. Let me zoom out so we can
[00:24:00.120 --> 00:24:05.120]   see. So, this is the fast pages repo. The way you get started is you use a
[00:24:05.120 --> 00:24:12.120]   template. So, I'm going to say fast pages demo. And then you create a
[00:24:12.120 --> 00:24:22.120]   template. So, I'm going to get started from this template. Okay. Then -- okay.
[00:24:22.120 --> 00:24:27.120]   So, what happens now is GitHub Actions will actually -- and you can do this -- if
[00:24:27.120 --> 00:24:31.120]   you have an open source, like, some kind of project, you can kind of emulate what
[00:24:31.120 --> 00:24:36.120]   I'm doing here, and I'm going to show you in a second. So, what's going to happen
[00:24:36.120 --> 00:24:43.120]   is PR is going to be opened on this repo automatically, because it detected that I
[00:24:43.120 --> 00:24:47.120]   forked it via a template. And it's going to -- we're going to do, like, some of the
[00:24:47.120 --> 00:24:52.120]   setup. So, the idea is, like, this is going to become, like, a GitHub pages site.
[00:24:52.120 --> 00:24:56.120]   But you have to do a lot of configuration to make it work for me, because the name
[00:24:56.120 --> 00:25:01.120]   of the repo changed. Obviously, the org changed. It's not fast.ai anymore. It's my
[00:25:01.120 --> 00:25:07.120]   name. And, like, it has to, like, configure it for, like, everything I need. And so,
[00:25:07.120 --> 00:25:11.120]   pull request is open automatically. And that was created -- this is created with
[00:25:11.120 --> 00:25:16.120]   GitHub Actions. So, you see GitHub Actions, like, made this PR, changing a whole
[00:25:16.120 --> 00:25:20.120]   bunch of things here, getting rid of all kinds of stuff and changing stuff. You see
[00:25:20.120 --> 00:25:24.120]   that it's changed from fast.ai to my name, blah, blah, blah, all this stuff. And
[00:25:24.120 --> 00:25:29.120]   changing all kinds of stuff in the repo that, you know, basically, it's a
[00:25:29.120 --> 00:25:34.120]   boilerplate, but you need it to work. And then it walks you through the setup
[00:25:34.120 --> 00:25:45.120]   steps. Very easy. For demo purposes, I can show that real fast. See if I can work
[00:25:45.120 --> 00:25:54.120]   with very small space here. Okay. So, I'm not afraid of getting hacked, because
[00:25:54.120 --> 00:26:01.120]   I'm going to delete this after I'm done. So, not a big deal. So, I'm going to just
[00:26:01.120 --> 00:26:05.120]   follow -- so, there's some instructions here. I'm going to follow it real quick,
[00:26:05.120 --> 00:26:13.120]   just to kind of let you know. So, the instructions say I have to call it that. And
[00:26:13.120 --> 00:26:24.120]   that is a secret. And then it says -- let me go back to the PR. And then it says I
[00:26:24.120 --> 00:26:34.120]   need to add the deploy key here. So, that's, like, the not secret part. So, I'm
[00:26:34.120 --> 00:26:39.120]   going to put that here, and then I'm going to call it fast pages. Doesn't really
[00:26:39.120 --> 00:26:47.120]   matter what I call it. Okay. And then it's wanting me to authenticate. That's fine.
[00:26:47.120 --> 00:26:52.120]   And then I've done everything that it wants me to in this PR. Again, this is
[00:26:52.120 --> 00:27:00.120]   orchestrated with GitHub Actions. I'm going to go ahead and merge it. And then you
[00:27:00.120 --> 00:27:12.120]   should see that -- so, you see that now my site should be getting built. And so,
[00:27:12.120 --> 00:27:17.120]   just a little bit about fast pages. It's built on this project called NB dev, which
[00:27:17.120 --> 00:27:23.120]   for the Jupyter fans out there, it allows you to build entire libraries with
[00:27:23.120 --> 00:27:28.120]   Jupyter. You can do all your coding in Jupyter without leaving an IDE. I know it
[00:27:28.120 --> 00:27:32.120]   sounds ridiculous, but it's kind of cool. Like, it's -- actually, you should try
[00:27:32.120 --> 00:27:36.120]   it, just to get the experience, just to see, like, what it's about, if you don't --
[00:27:36.120 --> 00:27:41.120]   if that sounds preposterous. But actually, it actually adds a lot of features to
[00:27:41.120 --> 00:27:47.120]   Jupyter, such as allowing you to hide cells and add all kinds of cool metadata and
[00:27:47.120 --> 00:27:55.120]   all this stuff. So, fast pages sort of has all that stuff. And so, this -- as you
[00:27:55.120 --> 00:28:04.120]   can see, this is, like, building my site. It's almost done. Let me refresh it,
[00:28:04.120 --> 00:28:09.120]   because I see some screen artifacts happening here. And when it's done,
[00:28:09.120 --> 00:28:17.120]   eventually what happens is, you know, it will be available on this page. We can
[00:28:17.120 --> 00:28:22.120]   come back to this in a second. I don't want to waste too much time. But that gives
[00:28:22.120 --> 00:28:27.120]   you an idea. Let me show you, like, a working version of fast pages. I'm just
[00:28:27.120 --> 00:28:34.120]   going to cut out the -- so, this is fast pages, is what it looks like. You know,
[00:28:34.120 --> 00:28:38.120]   you have notebook blog posts. Again, you don't have to write any HTML. This just
[00:28:38.120 --> 00:28:42.120]   converts your notebooks as they are. I'm not going to go through this. This just
[00:28:42.120 --> 00:28:46.120]   shows you all the different features. And, you know, you can have, like, in your
[00:28:46.120 --> 00:28:53.120]   blog post, you can have your, you know, interactive charts, which is cool. And
[00:28:53.120 --> 00:28:58.120]   then all kinds of other stuff, like GIFs, animated GIFs, and, you know, whatever,
[00:28:58.120 --> 00:29:04.120]   Tweety cards and all the other YouTube videos or whatever. All kinds of features.
[00:29:04.120 --> 00:29:10.120]   So, I go back here. At some point, it should have worked. Let's see. And, yeah,
[00:29:10.120 --> 00:29:14.120]   it does. So, this is my site. This is the one I just created, fast pages demo.
[00:29:14.120 --> 00:29:18.120]   You can see now I have a GitHub page. It's fully automated. And all you have to do
[00:29:18.120 --> 00:29:23.120]   is save a Jupyter notebook into this notebooks folder, and you can create a new
[00:29:23.120 --> 00:29:28.120]   page. Or you can delete ones if you don't like the ones that are the demo pages.
[00:29:28.120 --> 00:29:37.120]   Okay. So, that was kind of a lightning tour of GitHub Actions. I hope that was
[00:29:37.120 --> 00:29:43.120]   interesting. That kind of jogged some ideas or maybe something new. You might be
[00:29:43.120 --> 00:29:48.120]   wondering, like, okay, what do I do with Actions? Can I do anything? I think
[00:29:48.120 --> 00:29:53.120]   there's a lot of opportunities for ML people, data science people, to have
[00:29:53.120 --> 00:29:58.120]   interesting Actions for the community that's around data science. So, I'll
[00:29:58.120 --> 00:30:05.120]   mention a few. One is model serving. I think there's some interesting workflows
[00:30:05.120 --> 00:30:12.120]   that you could use maybe to make things that perhaps serve models via, like, a
[00:30:12.120 --> 00:30:17.120]   GitHub workflow. And then also, like, you could do some more interesting things
[00:30:17.120 --> 00:30:24.120]   with notebooks. So, you know, you could have some things that clean up notebooks,
[00:30:24.120 --> 00:30:28.120]   convert them via the nbdev library that I talked about earlier. There's actually
[00:30:28.120 --> 00:30:33.120]   this really cool project called Paper Mill that will run notebooks for you
[00:30:33.120 --> 00:30:39.120]   programmatically. There's this other site. I'll just mention it real fast. So,
[00:30:39.120 --> 00:30:45.120]   this is actually a Fast Pages site, COVID-19 dashboards. It actually updates
[00:30:45.120 --> 00:30:49.120]   all of these dashboards. I call them dashboards. They're really blog posts,
[00:30:49.120 --> 00:30:54.120]   because that's what Fast Pages is. It updates it programmatically with Paper
[00:30:54.120 --> 00:31:02.120]   Mill. So, that's really interesting. And it does that every six hours or so. And
[00:31:02.120 --> 00:31:07.120]   it's triggered via a cron. So, in addition to any GitHub event, you can trigger
[00:31:07.120 --> 00:31:13.120]   GitHub actions to just run periodically via a cron event. But, anyways, also,
[00:31:13.120 --> 00:31:18.120]   and other things are additional CI/CD integration, like the one I showed. I
[00:31:18.120 --> 00:31:23.120]   showed one flavor of CI/CD in the demo that I showed, the recorded demo. But
[00:31:23.120 --> 00:31:28.120]   there's a lot of other sort of ways you can do that and maybe other tools that
[00:31:28.120 --> 00:31:35.120]   you can integrate with that and other things. So, that's the end of my kind of
[00:31:35.120 --> 00:31:41.120]   lightning talk about actions and how it might be relevant to ML. I'll stop
[00:31:41.120 --> 00:31:49.120]   sharing my screen now. >> Thanks. Thanks, Amal. Do we have questions? If you
[00:31:49.120 --> 00:31:53.120]   have any questions, please either use the Q&A button at the bottom of your
[00:31:53.120 --> 00:32:00.120]   screen, or you can just ask us in the chat. >> So, there was a question about
[00:32:00.120 --> 00:32:06.120]   the first half of the talk. So, Jack M wants to know, so, when I set up a few
[00:32:06.120 --> 00:32:10.120]   actions on one of my repos to check spelling and links, it would be ideal for
[00:32:10.120 --> 00:32:14.120]   it to run on pull requests from forked repos. However, when a PR is submitted,
[00:32:14.120 --> 00:32:18.120]   GitHub action fails to fetch because it's unauthorized because it's forked. Any
[00:32:18.120 --> 00:32:23.120]   thoughts on workarounds for this? Only commentary I can find online is that
[00:32:23.120 --> 00:32:31.120]   GitHub doesn't want to allow this due to potential malicious use. >> Yeah. If
[00:32:31.120 --> 00:32:36.120]   you're coming -- like, okay, it was a pull request from a fork. Because you can
[00:32:36.120 --> 00:32:41.120]   have secrets in your GitHub actions and we don't want to leak those to anybody,
[00:32:41.120 --> 00:32:49.120]   the random people, then we lock it down. And so, the way that -- there are ways
[00:32:49.120 --> 00:32:56.120]   that you can get around that. So, I would have to share my screen and tell you
[00:32:56.120 --> 00:33:01.120]   and show you, but we don't have enough time. One way that I would go around
[00:33:01.120 --> 00:33:06.120]   that is I actually make a comment on the PR, and that way I'm triggering an
[00:33:06.120 --> 00:33:16.120]   event that is -- if I'm triggering an event, then I can then run something that
[00:33:16.120 --> 00:33:22.120]   has all the permissions. So, like, you know, in the fast pages repo, I have a
[00:33:22.120 --> 00:33:27.120]   special command called backslash preview, and that kicks off, like, it builds the
[00:33:27.120 --> 00:33:33.120]   website and it drops a link to preview. I don't know if that makes sense, but
[00:33:33.120 --> 00:33:41.120]   hopefully that helps. >> And then there's another question. Charles, you didn't
[00:33:41.120 --> 00:33:50.120]   get the ones in QA, right? >> Yeah. So, one from Mani. Can we build fast pages
[00:33:50.120 --> 00:33:57.120]   and host it via GitHub pages? Is there an end-to-end process or there is some
[00:33:57.120 --> 00:34:01.120]   hand-holding or manual interventions required? >> Yeah, that's what fast pages
[00:34:01.120 --> 00:34:07.120]   is. You just -- as soon as you use -- you do that template that I showed, it
[00:34:07.120 --> 00:34:12.120]   publishes the fast pages for you automatically. It's built for fast pages. It's
[00:34:12.120 --> 00:34:22.120]   built for GitHub pages. >> Cool. Do people have any other questions? I'm going
[00:34:22.120 --> 00:34:30.120]   to give you five seconds. All right. Thank you so much. That was really, really
[00:34:30.120 --> 00:34:37.120]   good. And just -- we'll put this recording, if you missed any of the details, we'll
[00:34:37.120 --> 00:34:43.120]   put the recording on YouTube also. Hamel is on Twitter. Hamel, what's your Twitter
[00:34:43.120 --> 00:34:50.120]   ID? >> Yeah, sorry. My Twitter is my first name, last name, concatenated
[00:34:50.120 --> 00:34:52.600]   together. That's my Twitter handle.

