
[00:00:00.000 --> 00:00:04.240]   This is a hidden feature of Python that I recently came across,
[00:00:04.240 --> 00:00:09.920]   the chaining of comparison operators that is not available in almost any mainstream programming
[00:00:09.920 --> 00:00:14.640]   language. I think it's elegant and intuitive and doesn't make any sense to me why it's not
[00:00:14.640 --> 00:00:19.920]   available in most languages. So what is it? Say we assign the values 2 and 3 to x and y,
[00:00:19.920 --> 00:00:26.000]   and then look at a single statement that includes several comparison operators chained together,
[00:00:26.000 --> 00:00:33.040]   1 less than x less than y less than 4. In Python this evaluates to true. The way Python evaluates
[00:00:33.040 --> 00:00:37.600]   the statement is the same way that we would intuitively or mathematically look at the
[00:00:37.600 --> 00:00:46.800]   statement, which is as a chain of binary comparison operators. 1 is less than x and x is less than y
[00:00:46.800 --> 00:00:54.000]   and y is less than 4, which again evaluates to true. Now you can use any comparison operator,
[00:00:54.000 --> 00:00:58.880]   less than, greater than, less than or equal to, greater than or equal to, and mix and mash them
[00:00:58.880 --> 00:01:04.720]   together in a single arbitrarily long chain of comparison operators. Now if we change the
[00:01:04.720 --> 00:01:09.600]   original statement to include a greater than operator as the last comparison, then the entire
[00:01:09.600 --> 00:01:16.720]   statement returns false because y which is equal to 3 is not greater than 4. And then finally again
[00:01:16.720 --> 00:01:22.720]   we can flip the 4 and the y to make the statement return true because all the individual comparisons
[00:01:22.720 --> 00:01:30.240]   are true. 1 is less than x which is equal to 2, x is less than 4, and 4 is greater than y,
[00:01:30.240 --> 00:01:37.200]   y being equal to 3. Now this feature is available in a few other languages, not many, like Perl 6
[00:01:37.200 --> 00:01:44.080]   or Reiku, I think it's been renamed to, not sure how to pronounce it, and Julia. And as shown here
[00:01:44.080 --> 00:01:49.680]   it's also a first class citizen in some functional languages like Scheme, Common Lisp, and Closure,
[00:01:50.560 --> 00:01:55.200]   with the added constraint that the chaining of the operator includes only the same operator,
[00:01:55.200 --> 00:01:59.280]   so you can't mix and match. So shown here the greatest language of all time which is Lisp,
[00:01:59.280 --> 00:02:07.360]   the equals operator applied to a list of numbers, 3 and 3 returns true, 3 and 5 returns false,
[00:02:07.360 --> 00:02:14.080]   all 3s returns true, all 3s except one of them being 5 returns false. So again that's chaining
[00:02:14.080 --> 00:02:20.000]   the equality comparison operator across the entire list. And the same is true for the less than
[00:02:20.000 --> 00:02:26.960]   operator applied to the entire list. Below 3 less than 5 is true, and then a long sequence returning
[00:02:26.960 --> 00:02:32.960]   true if it's in strictly increasing order, and false if it's not in strictly increasing order.
[00:02:32.960 --> 00:02:37.840]   I put some links in the description. One of the more interesting ones is in the
[00:02:37.840 --> 00:02:42.720]   Software Engineering Stack Exchange which discusses from a semi-philosophical perspective
[00:02:42.720 --> 00:02:47.280]   why most mainstream languages do not include this feature. You should check out some of the answers
[00:02:47.280 --> 00:02:52.240]   on that page. But to summarize some of the discussion, the reason to do it is despite the
[00:02:52.240 --> 00:02:56.800]   initial intuition about this feature being difficult to implement, it's actually very easy
[00:02:56.800 --> 00:03:04.880]   to implement. And as I said it's a mathematically intuitive and just elegant statement which I think
[00:03:04.880 --> 00:03:11.520]   makes it one of the best hidden features, at least to me, of Python. In the discussion the reasons
[00:03:11.520 --> 00:03:17.440]   that come up not to do it is fundamentally just laziness in that its importance versus other
[00:03:17.440 --> 00:03:23.200]   features is quite low, and it doesn't seem to be the kind of feature that pops up as an intuitive
[00:03:23.200 --> 00:03:30.640]   first feature to implement when the language is first born. And as with certain other features
[00:03:30.640 --> 00:03:35.920]   this can potentially break backward compatibility if this kind of chaining operators was allowed
[00:03:35.920 --> 00:03:41.840]   previously, syntactically speaking, meaning it was allowed but it didn't do the intuitive thing,
[00:03:41.840 --> 00:03:46.640]   it can certainly break in quite painful ways backward compatibility. But still, as I said
[00:03:46.640 --> 00:03:51.760]   in the previous video, list comprehensions I think is the best feature of Python, and the
[00:03:51.760 --> 00:03:57.760]   chaining of comparison operators I think is the best hidden feature, or not well-known feature,
[00:03:57.760 --> 00:04:04.560]   of Python. Quick shout out to ExpressVPN. Click their link in the description. It's the best way
[00:04:04.560 --> 00:04:10.000]   to support the podcast I host and these videos that I make. If you enjoy these, subscribe,
[00:04:10.000 --> 00:04:12.720]   and remember, try to learn something new every day.
[00:04:13.360 --> 00:04:13.440]   you
[00:04:14.160 --> 00:04:14.240]   you
[00:04:14.240 --> 00:04:14.740]   you
[00:04:15.620 --> 00:04:15.700]   you
[00:04:15.700 --> 00:04:16.200]   you
[00:04:17.160 --> 00:04:17.240]   you
[00:04:17.240 --> 00:04:17.740]   you
[00:04:18.300 --> 00:04:18.380]   you
[00:04:19.340 --> 00:04:19.420]   you
[00:04:19.420 --> 00:04:19.920]   you
[00:04:20.880 --> 00:04:20.960]   you
[00:04:20.960 --> 00:04:21.460]   you
[00:04:21.460 --> 00:04:21.960]   you
[00:04:21.960 --> 00:04:22.460]   you
[00:04:22.460 --> 00:04:22.960]   you
[00:04:22.960 --> 00:04:23.460]   you
[00:04:23.460 --> 00:04:23.960]   you
[00:04:23.960 --> 00:04:24.460]   you
[00:04:24.460 --> 00:04:24.960]   you
[00:04:24.960 --> 00:04:25.460]   you
[00:04:25.460 --> 00:04:25.960]   you
[00:04:25.960 --> 00:04:26.460]   you
[00:04:26.460 --> 00:04:26.960]   you
[00:04:26.960 --> 00:04:27.460]   you
[00:04:27.460 --> 00:04:27.960]   you
[00:04:27.960 --> 00:04:28.460]   you
[00:04:28.460 --> 00:04:38.460]   [BLANK_AUDIO]

