
[00:00:00.040 --> 00:00:22.240]   so thank you everyone we have a very full room today so we'll get started with the repo here in
[00:00:22.240 --> 00:00:26.360]   a second there is a QR code here and then in a couple other slides that all link to the same
[00:00:26.360 --> 00:00:34.400]   place will be using a Python notebook and we'll be doing graph rag with some real data using Neo4j so
[00:00:34.400 --> 00:00:40.760]   it'll be myself I'm Zach and then we have Andreas or ABK in the back who will be helping and then we
[00:00:40.760 --> 00:00:50.040]   have Michael hunger somewhere else in the room who can help answer questions and and Tomaj as well
[00:00:50.040 --> 00:00:58.920]   hello Tomaj back there in the base who can help answer questions as well as we go through so this is an
[00:00:58.920 --> 00:01:03.900]   interactive section session we have only two hours so we're asking to save the big questions to the
[00:01:03.900 --> 00:01:09.480]   end but basically we'll be popping back and forth between the slides and then between hands-on work
[00:01:09.480 --> 00:01:14.580]   inside of a notebook so if you do get stuck with anything raise your hand we'll come over and try to
[00:01:14.580 --> 00:01:20.100]   help you through and try to stick to our schedule as well with around 10 to 15 minutes per each
[00:01:20.100 --> 00:01:25.800]   section and there's about five sections for us to walk through so before we start there's two things
[00:01:25.800 --> 00:01:32.820]   we want to do if you haven't done them already the first thing is we want to create a blank Neo4j graph
[00:01:32.820 --> 00:01:41.340]   data science sandbox this is going to be at sandbox.neo4j.com so basically what you're going to do if I go ahead and click this link
[00:01:41.340 --> 00:01:50.520]   you might have to create an account really quickly on this page and then you're going to click for data science here and then it's going to be this if you can see
[00:01:50.520 --> 00:01:59.100]   this blank graph data science thing here so you're going to click on that blank sandbox graph data science
[00:01:59.100 --> 00:02:10.940]   and then your that will create an instance for you and it should come up with username and password that you're going to use inside of the notebook so this will be the database that we'll use throughout the course
[00:02:10.940 --> 00:02:24.040]   the next thing that you're going to do is go to the notebook so the notebook is going to be in this link and also by the way this QR code so I'll go back to that in just a second if you missed it
[00:02:24.040 --> 00:02:34.720]   but before that I just want to show you this GitHub repository and it's gen AI workshop is the notebook so what you're going to want to do is you're going to want to go to this notebook
[00:02:34.720 --> 00:02:46.780]   and then you're going to want to click open in Colab this will require a Google account if you don't have a Google account you can use VS code or you can run it locally that's fine
[00:02:46.780 --> 00:02:58.880]   but then when you go in if you are using Google Colab the internet is a little bit slow so it might take a while for it to load here hopefully once everyone gets settled it will go a little bit faster
[00:02:58.880 --> 00:03:11.780]   but basically what will happen is you just want to go to the top menu and you're basically going to go like file and you're going to save a copy and drive just so that you have the ability to edit it
[00:03:11.780 --> 00:03:19.200]   so you go file and then you say save a copy and drive and then it will create another copy for you
[00:03:19.200 --> 00:03:28.420]   so I'm going to go back to the slide and I'll give everyone a little while to get that all set up
[00:03:28.420 --> 00:03:31.760]   actually too while we're waiting on that
[00:03:31.760 --> 00:03:37.340]   15 people can still sit in the front if you don't want to stand in the back so feel free
[00:03:37.340 --> 00:03:38.340]   yes
[00:03:38.340 --> 00:03:47.180]   it might be a good idea for you to start running the notebook cells so especially the first cell the pip install
[00:03:47.180 --> 00:03:56.440]   just because that might take a little while if when you just start that might it's probably the longest running cell in the whole notebook is just loading all the requirements for today
[00:03:56.440 --> 00:04:19.500]   so to say again create your sandbox blank sandbox at blank sandbox gds graph data science and then you're going to open that notebook create a copy of it or have it locally and then start running that pip install cell right here
[00:04:19.500 --> 00:04:28.500]   okay so what happens i did the blank sandbox instead of the blank data science sandbox
[00:04:28.500 --> 00:04:35.460]   i did the blank sandbox instead of the blank data science sandbox
[00:04:35.460 --> 00:04:50.460]   that one will maybe work but what i'd recommend doing is just terminating that instance so if you go to the um if you go to the screen once it's there just uh press terminate there's like a garbage can icon
[00:04:50.460 --> 00:04:59.460]   and then go and create a graph uh data science sandbox yeah blank it's blank sandbox dash graph data science is the one we want
[00:04:59.460 --> 00:05:19.460]   so the main difference is actually that the graph data science sandbox has a little bit more of memory so as we're doing some more involved operations it's just faster to complete so the regular blank one should still work but it will take longer so the graph data science one will just be faster so it runs with a little bit more memory
[00:05:19.460 --> 00:05:26.460]   yeah i know it's we need to work on that it's a little bit tricky
[00:05:26.460 --> 00:05:36.460]   alrighty so um i'll leave this here is there can i get a show of hands of how many people have the notebook set up
[00:05:36.460 --> 00:05:46.460]   okay so we're pretty good um is there is there anyone who still needs to stay on this pr code
[00:05:46.460 --> 00:06:15.460]   okay we'll go ahead and move on um so i'm gonna do like my general spiel that i normally do i think for a lot of us this is gonna be review um we're gonna be talking a lot about retrieval augmented generation today um and for those who are you know unfamiliar right retrieval augmented generation is just when you have this step in the middle when you're communicating with a large language model where instead of sort of like in a chat gpt like way where you're just sending
[00:06:15.460 --> 00:06:22.460]   a question and getting a response back you're going to have that LLM application go and pull relevant data through some query
[00:06:22.460 --> 00:06:31.460]   um that it can then use to reduce hallucinations provide more domain specific context enable better traceability etc
[00:06:31.460 --> 00:06:49.460]   and when we talk about graph powered retrieval augmented generation and we'll use the word graph rag kind of throughout this course is we're talking about the combination of three things that we're gonna look at today so that's gonna be vector search which i'm sure a lot of you are already fairly familiar with
[00:06:49.460 --> 00:07:08.460]   knowledge graph traversals which is going to be traversing over structured data in addition to the vector search and then we're gonna do some cool things with graph data science so we're actually gonna create a new type of embedding a graph embedding and we're gonna use that that vector to do some very interesting things for recommendations with structured data
[00:07:08.460 --> 00:07:37.460]   um and today so um everyone does chat bots which chat bots are wonderful i wanted to do something a little bit different today um so we're actually going to do an example of using a large language model to construct an email um sort of like a recommendation recommendation type of email um and this is going to be for clothing so imagine um someone's looking for something like a halter neck top right how do you choose what to buy
[00:07:37.460 --> 00:07:58.460]   why well you need a list of things that are available in your online store you need to match that specifically for that specific customer right which different customers might have different preferences um and then you might want to have other recommendations to pair with that item like maybe a pair of pants um or a hat or other accessories and things of that nature
[00:07:58.460 --> 00:08:27.460]   and so what we're going to do is sort of build an AI fashion assistance so to speak to help scale this um so we're going to use real world data from a Kaggle competition from H&M um and we're going to do some search and retrieval we're going to add some context for personalization a small recommendation engine and we're going to wrap that into sort of an LLM chain inside of LANG chain to show you how to generate that response um and the idea behind this right is again we're combining sort of this
[00:08:27.460 --> 00:08:56.460]   we're combining sort of this knowledge graph which provides this context and this enrichment with the large language model giving that reasoning and that creativity and sort of the we're giving some liberty to the large language model to kind of take what's in the knowledge graph based on the customer's purchase behavior and other textual data and vectors um and and kind of say use your creativity to put something together for this customer basically um and while we're doing sort of a fashion recommendation thing here this same process could
[00:08:56.460 --> 00:09:08.460]   could work for different types of support agents um or a lot of different types of internal search and customer experience use cases um and this is what we're going to build today um um what's that
[00:09:08.460 --> 00:09:10.460]   we're going to be sharing the deck
[00:09:10.460 --> 00:09:16.460]   deck is in the github repo i need to it's not the most it's not exactly the one that i have here but i'll update it tonight
[00:09:16.460 --> 00:09:28.460]   pdf pdf the pdf of the workshop slides is in the repo yep yep yep um so this is what we're going to build
[00:09:28.460 --> 00:09:34.460]   today it's a little gradio app um where basically we're going to enter in some customer information their id
[00:09:34.460 --> 00:09:40.460]   a time of year um and some of the things they're interested in and we're going to generate an email that provides
[00:09:40.460 --> 00:09:46.460]   various recommendations to that customer so imagine you're trying to create targeted marketing content or
[00:09:46.460 --> 00:09:51.980]   whatever it may be this is sort of an example of how to do that and these are the specific technologies
[00:09:51.980 --> 00:09:57.500]   we'll be using um so we're going to use open ai for the language model we could of course substitute that
[00:09:57.500 --> 00:10:04.620]   out um with vertex ai or gemini or whatever we wanted to there we have lane chain that we're using to
[00:10:04.620 --> 00:10:09.500]   orchestrate everything so that's going to be creating the vector stores and also the large language model
[00:10:09.500 --> 00:10:15.740]   chain we're using colab obviously and then gradio just to kind of show you an example of a very simple
[00:10:15.740 --> 00:10:23.500]   ui that you can put on top of that just for demonstration purposes and this is going to be how we're splitting
[00:10:23.500 --> 00:10:29.020]   the course up um so basically there's this journey that we're going to follow we're going to start
[00:10:29.020 --> 00:10:33.820]   with building our graph that's going to be built inside of that sandbox instance that you just made
[00:10:33.820 --> 00:10:38.860]   after that we're going to be showing you how to do some very simple vector search
[00:10:38.860 --> 00:10:45.660]   then we're going to explore how to integrate knowledge graph traversal patterns into that to
[00:10:45.660 --> 00:10:49.420]   better personalize the retrieval data so not just based on
[00:10:50.300 --> 00:10:55.660]   sort of text similarity but also on similarity based on co-purchasing behavior
[00:10:55.660 --> 00:11:00.220]   and then when we get to recommendations we're actually going to use an unsupervised machine
[00:11:00.220 --> 00:11:06.220]   learning model to generate graph embeddings and we're going to use k nearest neighbor there to
[00:11:06.220 --> 00:11:10.540]   locate other recommendations that we can make inside of the graph and then we're going to put that
[00:11:10.540 --> 00:11:16.860]   all together inside of an llm chain to show you how you can use that to create a better more curated
[00:11:16.860 --> 00:11:18.140]   response with the language model
[00:11:18.140 --> 00:11:22.300]   alrighty so that was a lot
[00:11:22.300 --> 00:11:25.820]   i'll go ahead and get started with graph building
[00:11:25.820 --> 00:11:32.780]   again the way this will work is i'll spend a little bit of time in slides just talking about what we're
[00:11:32.780 --> 00:11:37.500]   going to do then we're going to hop over to the notebook and we we're going to run through those
[00:11:37.500 --> 00:11:43.900]   cells you you might already be running through those cells because i know a lot of us we it's going to be
[00:11:43.900 --> 00:11:49.260]   pretty easy to just sort of click through there's not actually a lot of hands-on coding you need to do
[00:11:49.260 --> 00:11:51.980]   but we're going to walk through that anyway so
[00:11:51.980 --> 00:11:59.020]   this is the data model that we're going to use a reminder right that we're working inside of a graph database
[00:11:59.020 --> 00:12:06.620]   which means that everything that we're working with is natively represented as nodes and relationships inside of a graph
[00:12:06.620 --> 00:12:13.020]   so we have these entities we have customers and articles and then products so basically what this
[00:12:13.020 --> 00:12:19.500]   graph is telling us is a sample of customers that exists different purchases that they made of articles
[00:12:19.500 --> 00:12:25.020]   of clothing so think of these like the halter tops the jeans the boots you know all the accessories
[00:12:25.020 --> 00:12:37.020]   a variant of so an article is a variant of a product in the sense that you can have a certain style of jeans but they can be you know have different color patterns different sizes etc
[00:12:37.020 --> 00:12:42.780]   so the product is sort of like the product and then the article is like the variant of that product
[00:12:43.500 --> 00:12:49.660]   we also have each department that the article is sold in we're not going to use that department
[00:12:49.660 --> 00:12:52.700]   node very much though in this specific workshop
[00:12:55.260 --> 00:13:04.620]   and of course all of these things can have properties associated with them so we have for example the customer id to uniquely identify a customer
[00:13:04.620 --> 00:13:12.300]   for articles we have product we have color and different design patterns and then for the product we have sort of the description of the product
[00:13:12.300 --> 00:13:16.300]   the garment group that is in the type of the product and the name of the product etc
[00:13:19.580 --> 00:13:26.700]   so again i think we've we've all done this step hopefully by now so i will go ahead and
[00:13:26.700 --> 00:13:30.140]   enter into our notebook
[00:13:30.140 --> 00:13:37.980]   so hopefully everyone can see this this was the first cell that we wanted to run before just because
[00:13:37.980 --> 00:13:43.260]   it takes a while if you haven't run the first cell for pip install please go ahead and do that now
[00:13:43.260 --> 00:13:49.340]   once you've run that go ahead and just kind of keep going down here run the
[00:13:49.900 --> 00:13:57.100]   import this just gets us all the libraries we need and now here's the part where we're going to have to
[00:13:57.100 --> 00:14:01.420]   inject some things here so when you made that sandbox instance
[00:14:01.420 --> 00:14:07.020]   i'll actually go to my i have to log out and go to a different account here
[00:14:10.700 --> 00:14:20.300]   you should get connection details
[00:14:20.300 --> 00:14:24.780]   so if i go and i just click this and i go to connection details so please don't use mine
[00:14:24.780 --> 00:14:32.780]   so we're not fighting on the same database um but copy copy the bolt url here um and you're going to go
[00:14:32.780 --> 00:14:38.060]   back into your uh workshop code and you're going to put that here for your neo4j uri is going to be that
[00:14:38.060 --> 00:14:45.660]   bolt connection the password as well is going to be um is going to be this one right here the password
[00:14:46.380 --> 00:14:51.820]   and then you're going to keep the username as neo4j so you don't have to change either of these two
[00:14:51.820 --> 00:14:54.940]   we're going to keep the llm as gpt4o
[00:14:54.940 --> 00:15:02.860]   and then for the open ai key if you have your own please please do use that if you don't
[00:15:02.860 --> 00:15:08.620]   if you click on this link uh it'll take you to a workshop key that we'll keep live for a little
[00:15:08.620 --> 00:15:14.060]   bit that you can use um to run through the workshop and so basically you're just going to copy it in
[00:15:14.060 --> 00:15:19.260]   kind of like i've done here um and you're going to give that a run and then this next cell is just if
[00:15:19.260 --> 00:15:24.860]   you wanted to do it the proper way and have a separate environments file which you can skip or you can do
[00:15:24.860 --> 00:15:33.420]   that if you want um uh but that uh is not necessary so once you've run that we get down to the knowledge
[00:15:33.420 --> 00:15:38.140]   graph building section and we've already talked about the graph we're going to import and basically
[00:15:38.140 --> 00:15:45.340]   what you're going to do is you're going to connect to neo4j so this is our graph data science client we
[00:15:45.340 --> 00:15:51.340]   have multiple different drivers and different wrappers around those drivers to connect to the database
[00:15:51.340 --> 00:15:56.140]   i'm using graph data science for this just to simplify things it's basically you're just going to hand
[00:15:56.140 --> 00:16:01.340]   it the uri the username and the password and that'll get you connected and there's some warnings there
[00:16:01.340 --> 00:16:08.620]   that we're going to get rid of and then if you can run this cell successfully right after it this gds debug
[00:16:08.620 --> 00:16:13.020]   that means you're connected and you're good to go so you're connected to a blank database
[00:16:13.020 --> 00:16:20.860]   once that is run there's one cell here that i have for pretty much loading
[00:16:20.860 --> 00:16:27.580]   90 of the data so you're going to go ahead and run this um what this is doing is i've gone ahead and
[00:16:27.580 --> 00:16:34.300]   there's another notebook inside of this repository that's prepared these csvs so there's uh five csvs
[00:16:34.300 --> 00:16:42.620]   here um there's department product article uh customer and transaction um and so most of these are
[00:16:42.620 --> 00:16:46.940]   self-explanatory the department is the department node the product is the product node article is the
[00:16:46.940 --> 00:16:52.620]   article node etc customer the customer node and then transactions are all the purchase transactions
[00:16:52.620 --> 00:16:59.020]   between customers and articles um so the if you were to dig into this code and because we only have two
[00:16:59.020 --> 00:17:03.740]   hours i mean we can spend all our time talking about this but i decided uh not to so we can we can get to
[00:17:03.740 --> 00:17:09.900]   more of the vector stuff um this is going to create uniqueness constraints which are going to be useful for
[00:17:09.900 --> 00:17:16.620]   for querying later um in neo4j so it's just a general best practice um and then if i go there's basically
[00:17:16.620 --> 00:17:22.780]   two functions here one for loading the nodes and the next for the relationships um if you were doing this
[00:17:22.780 --> 00:17:29.740]   sort of in a non-automated setting um this is kind of what the cipher looks like so just like um
[00:17:29.740 --> 00:17:41.020]   um so just like in sql how you or for rdbms you have sql for graphs um and for neo4j specifically you have
[00:17:41.020 --> 00:17:47.580]   cipher so what this code is doing that i have above is basically for loading the different nodes it's
[00:17:47.580 --> 00:17:54.700]   generating this cipher so you see it says use this cipher query unwind merge set so that's the actual code
[00:17:54.700 --> 00:18:00.140]   behind the scenes right the cipher code that's being run to load this data um so if you are interested
[00:18:00.140 --> 00:18:05.500]   in how to load more data into neo4j you can take a look at that um and we have other graph academy
[00:18:05.500 --> 00:18:11.420]   resources as well if if you wanted to dig into that piece um in more detail around just how to model data
[00:18:11.420 --> 00:18:24.140]   and how to load data into a graph um and then we'll stop there and i think we're at 15 minutes now so we can
[00:18:24.140 --> 00:18:32.620]   probably do um i'd say five to ten minutes and we can wait for people to catch up as a quick show
[00:18:32.620 --> 00:18:41.420]   of hands how many people have made it through the loading awesome okay that's really good um and then
[00:18:41.420 --> 00:18:51.580]   michael and tomaj
[00:18:53.580 --> 00:19:23.020]   so instead of this um yeah so actually so don't
[00:19:23.020 --> 00:19:27.500]   you don't you've got the credentials as well okay so instead of uh
[00:19:27.500 --> 00:19:29.500]   single sign on there's user name password
[00:19:29.500 --> 00:19:31.500]   just add the password
[00:19:31.500 --> 00:19:37.500]   you see it says we're leaving it
[00:19:37.500 --> 00:19:43.500]   so this is like the built-in cipher query
[00:19:43.500 --> 00:19:51.980]   so one thing that's going to be doing is click on this database icon there
[00:19:51.980 --> 00:19:55.980]   it should end up looking for
[00:19:55.980 --> 00:20:01.980]   it looks like it might be blank still
[00:20:01.980 --> 00:20:10.460]   so it's going to be in the middle of the database so it's going to be in the middle of the database
[00:20:10.460 --> 00:20:12.460]   so it's going to be in the middle of the database so it's going to be in the middle of the database
[00:20:12.460 --> 00:20:14.460]   so it's going to be in the middle of the database so it's going to be in the middle of the database
[00:20:14.460 --> 00:20:16.460]   so it's going to be in the middle of the database so it's going to be in the middle of the database
[00:20:16.460 --> 00:20:22.940]   it's going to be in the middle of the database so it's going to be in the middle of the database
[00:20:22.940 --> 00:20:24.940]   so it's going to be in the middle of the database
[00:20:24.940 --> 00:20:29.420]   it's going to be in the middle of the database so it's going to be in the middle of the database
[00:20:29.420 --> 00:20:31.420]   so it's going to be in the middle of the database
[00:20:31.420 --> 00:20:33.420]   and it's going to be in the middle of the database
[00:20:33.420 --> 00:20:35.420]   so it's going to be in the middle of the database
[00:20:35.420 --> 00:20:37.420]   so it's going to be in the middle of the database
[00:20:37.420 --> 00:20:39.420]   so it's going to be in the middle of the database
[00:20:39.420 --> 00:20:41.420]   so it's going to be in the middle of the database
[00:20:41.420 --> 00:20:43.420]   so it's going to be in the middle of the database
[00:20:43.420 --> 00:20:45.420]   so it's going to be in the middle of the database
[00:20:45.420 --> 00:20:47.420]   so it's going to be in the middle of the database
[00:20:47.420 --> 00:20:49.420]   so it's going to be in the middle of the database
[00:20:49.420 --> 00:20:51.420]   so it's going to be in the middle of the database
[00:20:51.420 --> 00:20:53.420]   so it's going to be in the middle of the database
[00:20:53.420 --> 00:20:53.420]   so it's going to be in the middle of the database
[00:20:53.420 --> 00:20:59.900]   it's going to be in the middle of the database
[00:20:59.900 --> 00:21:01.900]   so it's going to be in the middle of the database
[00:21:01.900 --> 00:21:03.900]   so it's going to be in the middle of the database
[00:21:03.900 --> 00:21:05.900]   so it's going to be in the middle of the database
[00:21:05.900 --> 00:21:07.900]   so it's going to be in the middle of the database
[00:21:07.900 --> 00:21:09.900]   so it's going to be in the middle of the database
[00:21:09.900 --> 00:21:11.900]   so it's going to be in the middle of the database
[00:21:11.900 --> 00:21:13.900]   so it's going to be in the middle of the database
[00:21:13.900 --> 00:21:15.900]   so it's going to be in the middle of the database
[00:21:15.900 --> 00:21:17.900]   so it's going to be in the middle of the database
[00:21:17.900 --> 00:21:19.900]   so it's going to be in the middle of the database
[00:21:19.900 --> 00:21:21.900]   so it's going to be in the middle of the database
[00:21:21.900 --> 00:21:28.380]   so
[00:21:28.380 --> 00:21:34.860]   it's going to be in the middle of the database
[00:21:34.860 --> 00:21:36.860]   so it's going to be in the middle of the database
[00:21:36.860 --> 00:21:38.860]   so it's going to be in the middle of the database
[00:21:38.860 --> 00:21:40.860]   so it's going to be in the middle of the database
[00:21:40.860 --> 00:21:42.860]   so it's going to be in the middle of the database
[00:21:42.860 --> 00:21:44.860]   so it's going to be in the middle of the database
[00:21:44.860 --> 00:21:51.340]   so it's going to be in the middle of the database
[00:21:51.340 --> 00:21:53.340]   so it's going to be in the middle of the database
[00:21:53.340 --> 00:21:55.340]   so it's going to be in the middle of the database
[00:21:55.340 --> 00:21:57.340]   so it's going to be in the middle of the database
[00:21:57.340 --> 00:21:59.340]   so it's going to be in the middle of the database
[00:21:59.340 --> 00:22:05.820]   so it's going to be in the middle of the database
[00:22:05.820 --> 00:22:07.820]   so it's going to be in the middle of the database
[00:22:07.820 --> 00:22:09.820]   so it's going to be in the middle of the database
[00:22:09.820 --> 00:22:11.820]   so it's going to be in the middle of the database
[00:22:11.820 --> 00:22:18.300]   so it's going to be in the middle of the database
[00:22:18.300 --> 00:22:22.300]   so it's going to be in the middle of the database
[00:22:22.300 --> 00:22:24.300]   so it's going to be in the middle of the database
[00:22:24.300 --> 00:22:26.300]   so it's going to be in the middle of the database
[00:22:26.300 --> 00:22:28.300]   so it's going to be in the middle of the database
[00:22:28.300 --> 00:22:29.840]   and it's going to be in the middle of the database
[00:22:29.840 --> 00:22:31.040]   so it's going to be in the middle of the database
[00:22:31.040 --> 00:22:32.040]   so it's going to be in the middle of the database
[00:22:32.040 --> 00:22:33.040]   so it's going to be in the middle of the database
[00:22:33.040 --> 00:22:34.040]   so it's going to be in the middle of the database
[00:22:34.040 --> 00:22:35.100]   so it's going to be in the middle of the database
[00:22:35.100 --> 00:22:36.080]   so it's going to be in the middle of the database
[00:22:36.080 --> 00:22:37.040]   so it's going to be in the middle of the database
[00:22:37.040 --> 00:22:37.840]   so it's going to be in the middle of the database
[00:22:37.840 --> 00:22:38.840]   so it's going to be in the middle of the database
[00:22:38.840 --> 00:22:40.040]   so it's going to be in the middle of the database
[00:22:40.040 --> 00:22:42.040]   so it's going to be in the middle of the database
[00:22:42.040 --> 00:22:43.040]   so it's going to be in the middle of the database
[00:22:43.040 --> 00:22:44.040]   so it's going to be in the middle of the database
[00:22:44.040 --> 00:22:44.960]   so it's going to be in the middle of the database
[00:22:44.960 --> 00:22:48.700]   so it's going to be in the middle of the database
[00:22:48.700 --> 00:22:49.860]   so it's going to be in the middle of the database
[00:22:49.860 --> 00:22:51.700]   so it's going to be in the middle of the database
[00:22:51.700 --> 00:22:52.700]   so it's going to be in the middle of the database
[00:22:52.700 --> 00:22:53.700]   so it's going to be in the middle of the database
[00:22:53.700 --> 00:22:54.700]   so it's going to be in the middle of the database
[00:22:54.700 --> 00:22:56.700]   so it's going to be in the middle of the database
[00:22:56.700 --> 00:22:57.700]   so it's going to be in the middle of the database
[00:22:57.700 --> 00:22:58.700]   so it's going to be in the middle of the database
[00:22:58.700 --> 00:23:00.700]   so it's going to be in the middle of the database
[00:23:00.700 --> 00:23:02.700]   so it's going to be in the middle of the database
[00:23:02.700 --> 00:23:03.700]   so it's going to be in the middle of the database
[00:23:03.700 --> 00:23:05.700]   so it's going to be in the middle of the database
[00:23:05.700 --> 00:23:06.700]   so it's going to be in the middle of the database
[00:23:06.700 --> 00:23:07.700]   so it's going to be in the middle of the database
[00:23:07.700 --> 00:23:09.760]   so it's going to be in the middle of the database
[00:23:09.760 --> 00:23:10.760]   so it's going to be in the middle of the database
[00:23:10.760 --> 00:23:11.800]   so it's going to be in the middle of the database
[00:23:11.800 --> 00:23:12.800]   so it's going to be in the middle of the database
[00:23:12.800 --> 00:23:13.800]   so it's going to be in the middle of the database
[00:23:13.800 --> 00:23:14.800]   so it's going to be in the middle of the database
[00:23:14.800 --> 00:23:15.860]   so it's going to be in the middle of the database
[00:23:15.860 --> 00:23:16.800]   so it's going to be in the middle of the database
[00:23:16.800 --> 00:23:17.400]   so it's going to be in the middle of the database
[00:23:17.400 --> 00:23:18.800]   so it's going to be in the middle of the database
[00:23:18.800 --> 00:23:19.800]   so it's going to be in the middle of the database
[00:23:19.800 --> 00:23:21.800]   so it's going to be in the middle of the database
[00:23:21.800 --> 00:23:22.800]   so it's going to be in the middle of the database
[00:23:22.800 --> 00:23:23.800]   so it's going to be in the middle of the database
[00:23:23.800 --> 00:23:24.800]   so it's going to be in the middle of the database
[00:23:24.800 --> 00:23:27.900]   so it's going to be in the middle of the database
[00:23:27.900 --> 00:23:29.240]   so it's going to be in the middle of the database
[00:23:29.240 --> 00:23:29.900]   so it's going to be in the middle of the database
[00:23:29.900 --> 00:23:30.860]   so it's going to be in the middle of the database
[00:23:30.860 --> 00:23:31.800]   so it's going to be in the middle of the database
[00:23:31.800 --> 00:23:32.860]   so it's going to be in the middle of the database
[00:23:32.860 --> 00:23:33.860]   so it's going to be in the middle of the database
[00:23:33.860 --> 00:23:34.860]   so it's going to be in the middle of the database
[00:23:34.860 --> 00:23:35.860]   so it's going to be in the middle of the database
[00:23:35.860 --> 00:23:36.860]   so it's going to be in the middle of the database
[00:23:36.860 --> 00:23:37.860]   so it's going to be in the middle of the database
[00:23:37.860 --> 00:23:38.860]   so it's going to be in the middle of the database
[00:23:38.860 --> 00:23:39.860]   so it's going to be in the middle of the database
[00:23:39.860 --> 00:23:40.860]   so it's going to be in the middle of the database
[00:23:40.860 --> 00:23:41.860]   so it's going to be in the middle of the database
[00:23:41.860 --> 00:23:45.920]   so it's going to be in the middle of the database
[00:23:45.920 --> 00:23:46.920]   so it's going to be in the middle of the database
[00:23:46.920 --> 00:23:48.920]   and it's going to be in the middle of the database
[00:23:48.920 --> 00:23:50.920]   so it's going to be in the middle of the database
[00:23:50.920 --> 00:23:51.920]   so it's going to be in the middle of the database
[00:23:51.920 --> 00:23:53.920]   so it's going to be in the middle of the database
[00:23:53.920 --> 00:23:54.920]   so it's going to be in the middle of the database
[00:23:54.920 --> 00:23:55.920]   so it's going to be in the middle of the database
[00:23:55.920 --> 00:23:56.920]   so it's going to be in the middle of the database
[00:23:56.920 --> 00:23:58.920]   so it's going to be in the middle of the database
[00:23:58.920 --> 00:23:59.920]   so it's going to be in the middle of the database
[00:23:59.920 --> 00:24:00.920]   so it's going to be in the middle of the database
[00:24:00.920 --> 00:24:01.920]   so it's going to be in the middle of the database
[00:24:01.920 --> 00:24:03.920]   so it's going to be in the middle of the database
[00:24:03.920 --> 00:24:05.920]   so it's going to be in the middle of the database
[00:24:05.920 --> 00:24:09.020]   so it's going to be in the middle of the database
[00:24:09.020 --> 00:24:10.980]   so it's going to be in the middle of the database
[00:24:10.980 --> 00:24:12.980]   so it's going to be in the middle of the database
[00:24:12.980 --> 00:24:14.980]   so it's going to be in the middle of the database
[00:24:14.980 --> 00:24:15.980]   so it's going to be in the middle of the database
[00:24:15.980 --> 00:24:16.980]   so it's going to be in the middle of the database
[00:24:16.980 --> 00:24:17.980]   so it's going to be in the middle of the database
[00:24:17.980 --> 00:24:18.980]   so it's going to be in the middle of the database
[00:24:18.980 --> 00:24:19.980]   so it's going to be in the middle of the database
[00:24:19.980 --> 00:24:20.980]   so it's going to be in the middle of the database
[00:24:20.980 --> 00:24:21.980]   so it's going to be in the middle of the database
[00:24:21.980 --> 00:24:22.980]   so it's going to be in the middle of the database
[00:24:22.980 --> 00:24:23.980]   so it's going to be in the middle of the database
[00:24:23.980 --> 00:24:25.980]   so it's going to be in the middle of the database
[00:24:25.980 --> 00:24:26.980]   so it's going to be in the middle of the database
[00:24:26.980 --> 00:24:33.500]   does anybody else need some help
[00:24:33.500 --> 00:24:36.220]   that I can tell Tomaj to help with
[00:24:36.220 --> 00:24:40.120]   everyone's good
[00:24:40.120 --> 00:24:44.420]   so there might still be some people
[00:24:44.420 --> 00:24:46.280]   having network connectivity issues
[00:24:46.280 --> 00:24:48.260]   we've seen a couple different variations on that
[00:24:48.260 --> 00:24:49.600]   we'll try to help figure those out
[00:24:49.600 --> 00:24:50.300]   and get that sorted
[00:24:50.300 --> 00:24:52.560]   I think we can maybe
[00:24:52.560 --> 00:24:53.200]   okay
[00:24:53.200 --> 00:24:54.920]   awesome
[00:24:54.920 --> 00:25:11.000]   oh
[00:25:11.000 --> 00:25:12.020]   it's crowd
[00:25:12.020 --> 00:25:13.120]   it's the stupid
[00:25:13.120 --> 00:25:18.420]   by the way I have to say
[00:25:18.420 --> 00:25:19.340]   you're all pretty good
[00:25:19.340 --> 00:25:20.520]   for such a big room
[00:25:20.520 --> 00:25:22.180]   everyone being on top of things
[00:25:22.180 --> 00:25:23.080]   I'm really impressed
[00:25:23.080 --> 00:25:24.140]   so well done everyone
[00:25:24.140 --> 00:25:25.680]   what's the software they installed on that
[00:25:25.680 --> 00:25:27.680]   yes
[00:25:27.680 --> 00:25:30.720]   fun security software on my laptop
[00:25:30.720 --> 00:25:33.420]   preventing me from connecting USB devices
[00:25:33.420 --> 00:25:35.580]   so hopefully it's there
[00:25:35.580 --> 00:25:37.100]   if it disappears again let me know
[00:25:37.100 --> 00:25:39.900]   one thing that I wanted to point out
[00:25:39.900 --> 00:25:41.020]   someone had a good question
[00:25:41.020 --> 00:25:42.760]   about what we were loading
[00:25:42.760 --> 00:25:44.380]   so there is
[00:25:44.380 --> 00:25:46.240]   there's a couple things that we do
[00:25:46.240 --> 00:25:48.180]   kind of at the end of this block
[00:25:48.180 --> 00:25:49.180]   one of them is
[00:25:49.180 --> 00:25:50.580]   I'm going to create a fake
[00:25:50.580 --> 00:25:51.940]   sort of dummy URL
[00:25:51.940 --> 00:25:53.660]   because it wasn't included in the data
[00:25:53.660 --> 00:25:54.720]   so we'll use that to help
[00:25:54.720 --> 00:25:57.080]   the LLM will basically provide a link to the product
[00:25:57.080 --> 00:25:58.260]   which won't be a real link
[00:25:58.260 --> 00:26:01.780]   but you can imagine substituting a real link into the database
[00:26:01.780 --> 00:26:04.000]   so we're just creating a new URL property for that
[00:26:04.000 --> 00:26:06.380]   and then this thing here is creating
[00:26:06.380 --> 00:26:10.020]   it's basically taking other properties that were in the database
[00:26:10.020 --> 00:26:11.520]   so when we looked at the product
[00:26:11.520 --> 00:26:14.380]   and we'll see what these fields actually look like in a second
[00:26:14.380 --> 00:26:16.440]   but there's a product name
[00:26:16.440 --> 00:26:16.920]   a type
[00:26:16.920 --> 00:26:17.420]   a group
[00:26:17.420 --> 00:26:18.100]   a description
[00:26:18.100 --> 00:26:18.800]   all this stuff
[00:26:18.800 --> 00:26:22.120]   and this statement here is just creating a new text property
[00:26:22.120 --> 00:26:25.340]   to kind of squish all of that together in one place
[00:26:25.340 --> 00:26:26.620]   and we're going to use that
[00:26:26.620 --> 00:26:28.420]   for our upcoming vector search
[00:26:28.420 --> 00:26:29.260]   so we're going to index that
[00:26:29.260 --> 00:26:31.500]   so that's why we're creating this one text property
[00:26:31.500 --> 00:26:33.980]   so just wanted to mention that really quickly
[00:26:33.980 --> 00:26:38.380]   before we move on to our text section
[00:26:38.380 --> 00:26:45.820]   so now we're going to start talking about vector search
[00:26:45.820 --> 00:26:49.080]   and we're going to do some initial search and retrieval
[00:26:49.080 --> 00:26:52.620]   so when we think about what embeddings are
[00:26:52.620 --> 00:26:54.580]   and I'm assuming a lot of people in this room
[00:26:54.580 --> 00:26:56.720]   are already quite familiar
[00:26:56.720 --> 00:26:57.480]   right
[00:26:57.480 --> 00:27:00.660]   but an embedding is basically a type of data compression
[00:27:00.660 --> 00:27:02.580]   that takes some messy data
[00:27:02.580 --> 00:27:04.160]   like text, images, or audio
[00:27:04.160 --> 00:27:06.540]   and it puts it into a compact format
[00:27:06.540 --> 00:27:08.060]   that's machine learning friendly
[00:27:08.060 --> 00:27:08.680]   right
[00:27:08.680 --> 00:27:12.400]   and so these are going to be most often numeric vectors
[00:27:12.400 --> 00:27:14.960]   or arrays with hundreds or thousands of elements
[00:27:14.960 --> 00:27:18.300]   and they preserve information such that similar items
[00:27:18.300 --> 00:27:20.520]   have proportionately similar embedding vectors
[00:27:20.520 --> 00:27:23.460]   and this similarity is going to be measured mathematically
[00:27:23.460 --> 00:27:26.620]   using something like cosine or Euclidean or etc
[00:27:26.620 --> 00:27:30.180]   and another thing that I want to mention is we will
[00:27:30.180 --> 00:27:32.340]   and maybe I'll save it a little bit for the end
[00:27:32.340 --> 00:27:35.640]   but just like you can embed audio text and videos
[00:27:35.640 --> 00:27:37.980]   you can also embed graph structures
[00:27:37.980 --> 00:27:41.240]   and so when you have co-purchase relationships in a graph
[00:27:41.240 --> 00:27:43.380]   or you're trying to do entity linking in a graph
[00:27:43.380 --> 00:27:44.320]   or anything like that
[00:27:44.320 --> 00:27:47.540]   that can become very valuable for then using downstream
[00:27:47.540 --> 00:27:49.200]   in vector search
[00:27:49.200 --> 00:27:57.880]   yes yep we will walk through that
[00:27:57.880 --> 00:28:03.680]   so similarity for something like a text embedding is referring to semantic similarity
[00:28:03.680 --> 00:28:08.960]   so the meaning behind a text sequence for a graph embedding right similarity can mean similar in position
[00:28:08.960 --> 00:28:11.920]   or structure inside of a graph and that can have semantic meaning too
[00:28:11.920 --> 00:28:22.080]   and right now what we'll be using vector search for is just on text embeddings and later when we get to recommendations is when we're going to use graph embeddings
[00:28:22.080 --> 00:28:26.480]   and specifically node embeddings that we're going to use there inside of vector search
[00:28:26.480 --> 00:28:47.880]   so talking a little bit about just what's inside of neo4j so neo4j has multiple indices and you can use these in combination with each other so we have things like range indices which is just a general kind of index that can do range comparisons and equality comparisons on numbers and dates and things like that
[00:28:47.880 --> 00:29:02.720]   point indices which are geospatial or I guess point space indices right text indices and full text indices so we have a full text index that's backed by Lucene for example that is tokenization analyzers
[00:29:02.720 --> 00:29:17.580]   and today what we're going to be focusing on primarily are vector indices and our vector index uses HNSW hierarchical navigable small world yes there we go for approximate nearest neighbor search
[00:29:17.580 --> 00:29:44.980]   And so a lot of this might be review for the folks in this room right but the idea behind this is that if we have some product some text about a product and let's say a search prompt on the right here for a halter neck top we can start to identify things that might be more similar to that using that embedding vector right and sort of the semantic similarity inside of that space
[00:29:44.980 --> 00:30:01.880]   And right and right and right and that semantic similarity can be measured by either in Euclidean distance right or cosine distance and like I said before we're using HNSW to perform approximate nearest neighbor search or we will be here in just a second
[00:30:01.880 --> 00:30:11.580]   So we're going to start you know let me just go ahead and jump into the notebooks I think it'll be easier to do live so
[00:30:11.580 --> 00:30:15.280]   Male Speaker 2: I have a question before we're going to ask
[00:30:15.280 --> 00:30:24.280]   for those who are not familiar with Neo4j, how to visualize a node for me. We have created something that's not clear.
[00:30:24.280 --> 00:30:40.580]   Yes, so right when we're done with the vector indexing I will go into browser which is one of our tools for visualization and we can take a look at that but basically if you go into this page here I can go to open.
[00:30:40.580 --> 00:30:49.280]   Male Speaker 2: Open and then it will take me basically into the browser tool. This is going to take a while because of the internet lag and we can visualize in there.
[00:30:49.280 --> 00:30:59.280]   If you're willing to bear with me in creating a vector index first because I want to just go over that very quickly and then we can go into the visualization portion.
[00:30:59.280 --> 00:31:11.980]   Male Speaker 2: But yes, we will very soon be visualizing the data. What I wanted to do first though was just kind of get it, get our index set up and just show you how to do some searching.
[00:31:11.980 --> 00:31:28.680]   Male Speaker 2: So basically what we're going to do with our data. We're specifically going to match the product nodes. So if you remember we have that product node which is a variant of an article and the way that this is going to work.
[00:31:28.680 --> 00:31:37.380]   Male Speaker 2: You can call embedding models externally too but what we're going to do here is basically match the product where it has a detailed description.
[00:31:37.380 --> 00:31:59.380]   Male Speaker 2: So basically some of these products don't have complete information so we're just going to take the ones that have complete information and then all this thing is doing is it's using this code gen.ai vector encode batch to on the server side create embeddings and then set that embedding property on a property called text embedding.
[00:31:59.380 --> 00:32:21.380]   Male Speaker 2: We're using OpenAI for this. There's a few other models that we can use here or a few other API providers rather. By default this is using text embedding ADA or ADA but you could also use Vertex.ai here as well as Azure OpenAI or AWS Bedrock.
[00:32:21.380 --> 00:32:27.380]   Male Speaker 2: And then you can also just generate your own embeddings externally and ingest them for any other type of model.
[00:32:27.380 --> 00:32:37.380]   Male Speaker 2: So if you go ahead and give this a run it will start creating your embeddings and then the cell after that is going to create your vector index.
[00:32:37.380 --> 00:32:55.380]   Male Speaker 2: So this isn't creating an index all this is doing is basically populating in batch a text embedding property and then after you create that this cell down here if you run that is going to create your vector index.
[00:32:55.380 --> 00:32:59.380]   Male Speaker 2: We're going to set it ahead of time to use cosine as a similarity function.
[00:32:59.380 --> 00:33:09.380]   Male Speaker 2: And then you're just this next call is just to wait for it to come online since once you set it it just takes a little bit of while for it to index all the data and become available for querying.
[00:33:09.380 --> 00:33:10.380]   Male Speaker 2: Yes.
[00:33:10.380 --> 00:33:23.380]   Male Speaker 2: Can you just clarify the difference between generating the embedding, which is the semantic of the text, right? Versus creating the vector index and what's that?
[00:33:23.380 --> 00:33:41.380]   Male Speaker 2: Right, so when you're doing the embedding generation, all you're doing is you're taking this text field that I talked about earlier, you're sending it to OpenAI to say, hey embed this, you take that back and then you set that as a property.
[00:33:41.380 --> 00:33:59.380]   Male Speaker 2: So all this cell is doing is basically making these vector array properties inside of the node and then the vector index actually sets the index to make that searchable.
[00:33:59.380 --> 00:34:06.380]   Male Speaker 2: Once you've gotten that done, we can do a couple examples of search.
[00:34:06.380 --> 00:34:12.380]   Male Speaker 2: And again, this is sort of just using Cypher here and you can do this externally as well.
[00:34:12.380 --> 00:34:21.380]   Male Speaker 2: But in this cell, I'm taking a search prompt that is very simple, just denim jeans, and then I'm passing it to this function, which is running Cypher.
[00:34:21.380 --> 00:34:28.380]   Male Speaker 2: All this is doing actually is just encoding, so basically it's just creating the query vector, right?
[00:34:28.380 --> 00:34:34.380]   So if I were to just encode denim jeans, this is the query vector that that creates.
[00:34:34.380 --> 00:34:43.380]   And then if you take that query and you go to the next cell here, what this will do is it will do that same encoding.
[00:34:43.380 --> 00:34:48.380]   Male Speaker 2: So this is the first part of the query that we just ran, which is creates a query vector.
[00:34:48.380 --> 00:34:52.380]   And then inside of Cypher, I say, call database index vector query nodes.
[00:34:52.380 --> 00:34:56.380]   And I say, hit this index that we just created.
[00:34:56.380 --> 00:35:02.380]   Give me the top 10 with that query vector and yield the node as product and the score.
[00:35:02.380 --> 00:35:07.380]   And then give me some fields like the product text and the product code, et cetera.
[00:35:07.380 --> 00:35:11.380]   And so when you run that, it should hopefully give you some results that look something like this.
[00:35:11.380 --> 00:35:13.380]   Male Speaker 2: And this is returning different products.
[00:35:13.380 --> 00:35:21.380]   So you see all of these are denim jeans or denim products, or they should at least be jeans and/or denim, right?
[00:35:21.380 --> 00:35:24.380]   I think all jeans are technically denim, maybe not.
[00:35:24.380 --> 00:35:30.380]   But you see here we have the product descriptions and the product text that it brought back.
[00:35:30.380 --> 00:35:36.380]   So you can see all the descriptions and that's basic vector search inside of Neo4j.
[00:35:36.380 --> 00:35:37.380]   Male Speaker 2: Um, yeah.
[00:35:37.380 --> 00:35:38.380]   Male Speaker 2: Sure.
[00:35:38.380 --> 00:35:39.380]   Male Speaker 2: I have a question.
[00:35:39.380 --> 00:35:40.380]   Male Speaker 2: Yes.
[00:35:40.380 --> 00:35:57.380]   Male Speaker 2: Do you guys, do you build the,
[00:35:57.380 --> 00:35:58.380]   Male Speaker 2: Do we build it on every node?
[00:35:58.380 --> 00:36:15.380]   Male Speaker 2: Well, we build the index and then every node has a property.
[00:36:15.380 --> 00:36:18.380]   So it's built on top of all those properties, right?
[00:36:18.380 --> 00:36:20.380]   Male Speaker 2: Maybe I don't understand.
[00:36:20.380 --> 00:36:24.380]   Male Speaker 2: Maybe I don't understand.
[00:36:24.380 --> 00:36:25.380]   It's one index.
[00:36:25.380 --> 00:36:27.380]   Male Speaker 2: Well, HNSW is a total graph, right?
[00:36:27.380 --> 00:36:28.380]   Male Speaker 2: That's right.
[00:36:28.380 --> 00:36:29.380]   Male Speaker 2: Yes.
[00:36:29.380 --> 00:36:30.380]   Male Speaker 2: I don't understand.
[00:36:30.380 --> 00:36:34.380]   Male Speaker 2: Yeah, this, so our graph representation is not the HNSW graph representation.
[00:36:34.380 --> 00:36:35.380]   Male Speaker 2: Right.
[00:36:35.380 --> 00:36:37.380]   Male Speaker 2: I'm just trying to understand the scale.
[00:36:37.380 --> 00:36:40.380]   Male Speaker 2: If you put an HNSW, you know we're talking graph graph.
[00:36:40.380 --> 00:36:49.380]   Male Speaker 2: HNSW don't graph for every node in your graph, or is it one HNSW for the entire?
[00:36:49.380 --> 00:36:52.380]   Male Speaker 2: Wouldn't it be one HNSW for every index?
[00:36:52.380 --> 00:36:53.380]   Male Speaker 2: Yeah.
[00:36:53.380 --> 00:36:54.380]   Male Speaker 2: Yeah.
[00:36:54.380 --> 00:36:55.380]   Male Speaker 2: Yeah.
[00:36:55.380 --> 00:36:57.380]   Male Speaker 2: I'm not familiar, but are you talking about a leucine index?
[00:36:57.380 --> 00:36:58.380]   Male Speaker 2: Leucine.
[00:36:58.380 --> 00:36:59.380]   Male Speaker 2: We are using a leucine index on the back end.
[00:36:59.380 --> 00:37:00.380]   Male Speaker 2: .
[00:37:00.380 --> 00:37:01.380]   Male Speaker 2: Yeah.
[00:37:01.380 --> 00:37:02.380]   Male Speaker 2: Yeah, this is a leucine implementation.
[00:37:02.380 --> 00:37:03.380]   Male Speaker 2: Yeah.
[00:37:03.380 --> 00:37:04.380]   Male Speaker 2: .
[00:37:04.380 --> 00:37:05.380]   Male Speaker 2: Other question?
[00:37:05.380 --> 00:37:06.380]   Male Speaker 2: Yes.
[00:37:06.380 --> 00:37:07.380]   Male Speaker 2: If I already have embeddings, would it be easier to check the block group?
[00:37:07.380 --> 00:37:08.380]   Male Speaker 2: Yeah.
[00:37:08.380 --> 00:37:09.380]   If you do, I have…
[00:37:09.380 --> 00:37:10.380]   Male Speaker 2: If you met the size of index.
[00:37:10.380 --> 00:37:11.380]   Male Speaker 2: Yes.
[00:37:11.380 --> 00:37:12.380]   Male Speaker 2: Well, yes.
[00:37:12.380 --> 00:37:26.380]   If you already have embeddings, so I commented this out.
[00:37:26.380 --> 00:37:31.380]   I haven't run this block for a while, but basically, this is just showing, you know,
[00:37:31.380 --> 00:37:35.380]   how you can create, like, you know, use open AI embeddings here.
[00:37:35.380 --> 00:37:40.380]   I'm using LaneChain in particular, but this is a workflow where you have embeddings external,
[00:37:40.380 --> 00:37:43.380]   right, and then you can import them into Neo4j.
[00:37:43.380 --> 00:37:44.380]   Male Speaker 2: And thank you.
[00:37:44.380 --> 00:37:48.380]   Same question for vector database.
[00:37:48.380 --> 00:38:03.380]   Male Speaker 2: So there's multiple different ways to do it.
[00:38:03.380 --> 00:38:09.380]   If you have your vector index inside of Neo4j, that can make certain things more efficient.
[00:38:09.380 --> 00:38:15.380]   But there's certain situations for scale where using something like LaneChain or another orchestration
[00:38:15.380 --> 00:38:21.380]   framework, for example, you can query your vector data inside of your chosen vector database,
[00:38:21.380 --> 00:38:24.380]   and then do your graph traversal stuff in Neo4j, right?
[00:38:24.380 --> 00:38:25.380]   Yes.
[00:38:25.380 --> 00:38:30.380]   Male Speaker 2: Why do I need a graph database?
[00:38:30.380 --> 00:38:35.380]   Male Speaker 2: We're going to get to that in a second.
[00:38:35.380 --> 00:38:43.380]   Male Speaker 2: It's why do you need a graph database if you're already using vector search.
[00:38:43.380 --> 00:38:46.380]   And so what we're going to explore today is there's a couple different things.
[00:38:46.380 --> 00:38:52.380]   One of them is using structured data or data that's been structured inside the graph to better
[00:38:52.380 --> 00:38:57.380]   sort of personalize or make the responses more relevant for a large language model for search.
[00:38:57.380 --> 00:39:00.380]   And then we're also going to do some things with graph embeddings, which is a different type
[00:39:00.380 --> 00:39:07.380]   of embedding that we can create inside of this database.
[00:39:07.380 --> 00:39:25.380]   Male Speaker 2: Yes. We do that here. There's an example of that. We'll do KNN and we'll show you how to draw relationships for that. Yes.
[00:39:25.380 --> 00:39:46.380]   Male Speaker 2: So it's a good question and we should definitely have a longer conversation afterward, but the advantage -- there's a few different advantages.
[00:39:46.380 --> 00:39:51.380]   Male Speaker 2: We have index free adjacency and we have very performant like multi-hop patterns.
[00:39:51.380 --> 00:39:56.380]   So you'll see some of the patterns in here are very complicated and it's easier to do inside of a graph.
[00:39:56.380 --> 00:40:01.380]   First for just writing the code to do it, but then also the performance on it will be better.
[00:40:01.380 --> 00:40:04.380]   And so there's -- and there's a very flexible schema.
[00:40:04.380 --> 00:40:08.380]   So it's very robust in terms of being able to change and pivot things around very quickly.
[00:40:08.380 --> 00:40:09.380]   Male Speaker 2: Yep.
[00:40:09.380 --> 00:40:11.380]   Male Speaker 2: I have one more.
[00:40:11.380 --> 00:40:22.380]   Male Speaker 2: Not yet. Not yet.
[00:40:22.380 --> 00:40:29.380]   All righty. So I'm going to -- I'm going to move on a little bit here.
[00:40:29.380 --> 00:40:35.380]   This next part of the vector search portion, I'm going to just integrate LangChain into the mix.
[00:40:35.380 --> 00:40:41.380]   Male Speaker 2: So basically the reason I'm going to start using LangChain here is because when we get to the LLM portion,
[00:40:41.380 --> 00:40:45.380]   it'll just be a natural fit where we'll create a chain for this.
[00:40:45.380 --> 00:40:50.380]   But all we're doing here is we're going to create a vector store using Neo4j vector.
[00:40:50.380 --> 00:40:55.380]   So this is part of the LangChain vector stores.
[00:40:55.380 --> 00:40:59.380]   Again, instantiate an open AI embedding model.
[00:40:59.380 --> 00:41:03.380]   We're just going to use the default with 1536 as the default size.
[00:41:03.380 --> 00:41:09.380]   And then you see we can create a LangChain vector store from index with that embedding model
[00:41:09.380 --> 00:41:13.380]   and our same credentials and the index name that we created earlier.
[00:41:13.380 --> 00:41:20.380]   And when we do that, basically what this will allow us to do is start running from our search prompt,
[00:41:20.380 --> 00:41:21.380]   which is denim jeans.
[00:41:21.380 --> 00:41:25.380]   We're going to be able to run the results through this vector store here.
[00:41:25.380 --> 00:41:28.380]   So this is what we're going to be using throughout the rest of the notebook.
[00:41:28.380 --> 00:41:32.380]   Instead of just using our cipher, our query language directly,
[00:41:32.380 --> 00:41:36.380]   we're going to be using LangChain, which gets this done under the hood for us.
[00:41:36.380 --> 00:41:38.380]   So that's that.
[00:41:38.380 --> 00:41:41.380]   And you can see it brings back the different documents with the product descriptions
[00:41:41.380 --> 00:41:44.380]   and the representative URL and all the metadata.
[00:41:44.380 --> 00:41:49.380]   And if you want it to be in a pretty data frame so it's easier to see,
[00:41:49.380 --> 00:41:54.380]   you can run that to kind of get the, to get the view we had before.
[00:41:54.380 --> 00:41:55.380]   And this should match what we were doing earlier.
[00:41:55.380 --> 00:42:01.380]   And of course you can try yourself with your own prompt.
[00:42:01.380 --> 00:42:06.380]   So if you were to type in something else here,
[00:42:06.380 --> 00:42:11.380]   you can see it'll bring back, right, a result that's relevant to that.
[00:42:11.380 --> 00:42:16.380]   So I typed in oversized sweaters and it will bring back different oversized sweaters.
[00:42:23.380 --> 00:42:28.380]   All righty. So how many people were able to get through the vector search section?
[00:42:28.380 --> 00:42:30.380]   If you just raise your hands.
[00:42:30.380 --> 00:42:31.380]   Okay.
[00:42:31.380 --> 00:42:32.380]   Good.
[00:42:32.380 --> 00:42:33.380]   Very fast class.
[00:42:33.380 --> 00:42:34.380]   Okay.
[00:42:34.380 --> 00:42:37.380]   Anyone having trouble, struggling, need help?
[00:42:37.380 --> 00:42:42.380]   One person over there.
[00:42:51.380 --> 00:43:18.380]   Can I ask one more question?
[00:43:18.380 --> 00:43:19.380]   Yep.
[00:43:19.380 --> 00:43:25.380]   So, like, if you're using one Lucy, how do you determine how many Lucy indices
[00:43:25.380 --> 00:43:26.380]   do you need?
[00:43:26.380 --> 00:43:29.380]   Do you pre-compute that on your side?
[00:43:29.380 --> 00:43:30.380]   Because the user has to get it out?
[00:43:30.380 --> 00:43:34.380]   Because PHSSW can only take out the property if it is.
[00:43:34.380 --> 00:43:39.380]   So right now you, I might not fully understand your question.
[00:43:39.380 --> 00:43:44.380]   When you create, you basically instantiate an index for one or a set of properties.
[00:43:44.380 --> 00:43:47.380]   That can be on a node or it can be on a relationship, right?
[00:43:47.380 --> 00:43:52.380]   So if I make one index to cover, you know, the property of text, that's one index.
[00:43:52.380 --> 00:43:56.380]   I could create another index to cover, like, a product description or another name or something,
[00:43:56.380 --> 00:43:57.380]   right, if I wanted to.
[00:43:57.380 --> 00:44:04.380]   But that's, there's nothing that would, you know, so it would be like it's one index at a time, right?
[00:44:04.380 --> 00:44:06.380]   Does that, is that getting towards you or is that totally off?
[00:44:06.380 --> 00:44:09.380]   Let's say we have, like, billions of documents and we're going to .
[00:44:09.380 --> 00:44:14.380]   So you said you're using Lucy, right?
[00:44:14.380 --> 00:44:15.380]   Right.
[00:44:15.380 --> 00:44:16.380]   So Lucy is .
[00:44:16.380 --> 00:44:19.380]   So each Lucy index takes 50 gigs of data.
[00:44:19.380 --> 00:44:21.380]   What do you do on your side?
[00:44:21.380 --> 00:44:22.380]   I'm just curious.
[00:44:22.380 --> 00:44:24.380]   What do you do on your side so it doesn't puke?
[00:44:24.380 --> 00:44:27.380]   Because after 50 gigs, there's diminishing returns.
[00:44:27.380 --> 00:44:28.380]   Right.
[00:44:28.380 --> 00:44:30.380]   Are you, like, automatically auto-sharding it?
[00:44:30.380 --> 00:44:31.380]   Like, what are you doing to make sure --
[00:44:31.380 --> 00:44:34.380]   There are, there are ways to federate the database.
[00:44:34.380 --> 00:44:38.380]   Like, you could, you could create different shards based off of metadata values.
[00:44:38.380 --> 00:44:45.380]   But we're, that's stuff that we're, like, currently building on and experimenting with.
[00:44:45.380 --> 00:44:51.380]   And for very, very large, like, if you, if you truly had, like, tens of billions of documents,
[00:44:51.380 --> 00:44:54.380]   you can also integrate with your vector store of choice, right?
[00:44:54.380 --> 00:45:01.380]   And then just basically you substitute out the vector retrieval call with, for that vector database
[00:45:01.380 --> 00:45:04.380]   and then you can use Neo4j for doing a lot of the graph traversals.
[00:45:04.380 --> 00:45:07.380]   But it's one of those things where we're continually improving.
[00:45:07.380 --> 00:45:14.380]   So, we're coming out with new features to handle that sort of stuff.
[00:45:14.380 --> 00:45:19.380]   All right.
[00:45:19.380 --> 00:45:23.380]   So, let's start with semantic search with graph patterns.
[00:45:23.380 --> 00:45:31.380]   So, this is going to be, basically, building on top of vector search where we start to work with structured data.
[00:45:31.380 --> 00:45:36.380]   So, when we think about Neo4j and semantic search, there's sort of multiple layers.
[00:45:36.380 --> 00:45:42.380]   So, the first part is vector similarity search, which we just went over, which is just finding relevant documents.
[00:45:42.380 --> 00:45:49.380]   After that, there's graph pattern matching, which is basically saying, hey, can I find entities associated to these documents?
[00:45:49.380 --> 00:45:52.380]   And the sort of patterns in that connective data.
[00:45:52.380 --> 00:46:02.380]   And then we have the more data science and machine learning part on top of it, where we can improve search relevance and do other things by running graph algorithms like embeddings, right?
[00:46:02.380 --> 00:46:10.380]   So, when we think about semantic search patterns with graph, there's connections that we have based on purchase behavior.
[00:46:10.380 --> 00:46:21.380]   So, basically, given that you have one person who purchases relatively the same things as another person in this graph, you can start to make inferences about what they might want to purchase next, right?
[00:46:21.380 --> 00:46:26.380]   So, this is sort of like if you've ever dealt with collaborative filtering or sort of those types of patterns.
[00:46:26.380 --> 00:46:30.380]   This is a very common recommendation pattern that we can do with structured data.
[00:46:30.380 --> 00:46:39.380]   And when we go back to the graph, we'll start exploring the data set now in a little bit more detail with visualizations.
[00:46:39.380 --> 00:46:47.380]   So, what I want you to do, and I don't have these calls saved, but I'll go ahead and copy them over.
[00:46:47.380 --> 00:46:58.380]   Basically, you're going to go back to your browsing window, and you're going to open your blank instance.
[00:46:58.380 --> 00:47:05.380]   So, I'm going to click open, and hopefully, that'll work.
[00:47:05.380 --> 00:47:11.380]   And if not, I might actually start hot spotting myself.
[00:47:11.380 --> 00:47:16.380]   Yeah.
[00:47:16.380 --> 00:47:45.380]   It took me like a minute to refresh the page.
[00:47:45.380 --> 00:47:48.380]   It took me like a minute to refresh the page.
[00:47:48.380 --> 00:47:49.380]   It took me like a minute to refresh the page.
[00:47:49.380 --> 00:47:50.380]   It took me like a minute to refresh the page.
[00:47:50.380 --> 00:47:51.380]   It took me like a minute to refresh the page.
[00:47:51.380 --> 00:47:52.380]   It took me like a minute to refresh the page.
[00:47:52.380 --> 00:47:53.380]   It took me like a minute to refresh the page.
[00:47:53.380 --> 00:47:54.380]   It took me like a minute to refresh the page.
[00:47:54.380 --> 00:47:55.380]   It took me like a minute to refresh the page.
[00:47:55.380 --> 00:47:56.380]   It took me like a minute to refresh the page.
[00:47:56.380 --> 00:47:57.380]   It took me like a minute to refresh the page.
[00:47:57.380 --> 00:47:58.380]   It took me like a minute to refresh the page.
[00:47:58.380 --> 00:47:59.380]   It took me like a minute to refresh the page.
[00:47:59.380 --> 00:48:00.380]   It took me like a minute to refresh the page.
[00:48:00.380 --> 00:48:01.380]   It took me like a minute to refresh the page.
[00:48:01.380 --> 00:48:02.380]   It took me like a minute to refresh the page.
[00:48:02.380 --> 00:48:03.380]   It took me like a minute to refresh the page.
[00:48:03.380 --> 00:48:11.380]   It took me like a minute to refresh the page.
[00:48:11.380 --> 00:48:13.380]   It took me like a minute to refresh the page.
[00:48:13.380 --> 00:48:14.380]   It took me like a minute to refresh the page.
[00:48:14.380 --> 00:48:15.380]   It took me like a minute to refresh the page.
[00:48:15.380 --> 00:48:16.380]   It took me like a minute to refresh the page.
[00:48:16.380 --> 00:48:17.380]   Yeah, I'm hot spotting.
[00:48:17.380 --> 00:48:18.380]   All right.
[00:48:18.380 --> 00:48:19.380]   Thanks.
[00:48:19.380 --> 00:48:23.380]   I'm on the, I think I'm on the Wi-Fi.
[00:48:23.380 --> 00:48:24.380]   All righty.
[00:48:24.380 --> 00:48:29.380]   So basically what I did is I just entered into something called browser from our sandbox.
[00:48:29.380 --> 00:48:33.380]   So again, you just go here, or I guess I'm back to this window now.
[00:48:33.380 --> 00:48:37.380]   You go here and you press open and then you can either do the SSO sign on
[00:48:37.380 --> 00:48:39.380]   or you can use your username and password.
[00:48:39.380 --> 00:48:42.380]   And so once I'm here, I'm going to copy.
[00:48:42.380 --> 00:48:45.380]   If you go back to the notebook, you can copy these calls.
[00:48:45.380 --> 00:48:50.380]   This is just Cypher that you can put in to help visualize the data that we've ingested.
[00:48:50.380 --> 00:48:53.380]   So this will give me my schema, right?
[00:48:53.380 --> 00:48:58.380]   You won't have this relationship yet, but what you should have is these four nodes,
[00:48:58.380 --> 00:49:01.380]   which you can get rid of this window.
[00:49:01.380 --> 00:49:04.380]   We'll give you an idea of your data model.
[00:49:04.380 --> 00:49:06.380]   That should reflect what we have in that picture inside of the notebook.
[00:49:06.380 --> 00:49:11.380]   We have our articles, our products, our departments, and our customers.
[00:49:11.380 --> 00:49:14.380]   Excuse me.
[00:49:14.380 --> 00:49:19.380]   And then if we go back to our notebook, I'm going to pull a sample of that data
[00:49:19.380 --> 00:49:21.380]   just so you can see the graph.
[00:49:21.380 --> 00:49:27.380]   So this Cypher statement here is just saying, hey, get me all the products,
[00:49:27.380 --> 00:49:31.380]   match all of the articles that are variants of those products,
[00:49:31.380 --> 00:49:34.380]   and then all the customers that purchase those articles.
[00:49:34.380 --> 00:49:39.380]   And I'm just going to return all of that and I'm going to limit it to 150 results.
[00:49:39.380 --> 00:49:41.380]   And so if I do that, what's going to happen?
[00:49:41.380 --> 00:49:44.380]   And again, the Wi-Fi is kind of hurting me right now.
[00:49:44.380 --> 00:49:47.380]   I'll get this pretty graph.
[00:49:47.380 --> 00:49:49.380]   So this is a sample of the data that we loaded.
[00:49:49.380 --> 00:49:54.380]   So customers are in orange, articles are in blue, and products are in red.
[00:49:54.380 --> 00:49:57.380]   So what you'll start to see, right, is we have these customers.
[00:49:57.380 --> 00:49:59.380]   Some of them make multiple purchases.
[00:49:59.380 --> 00:50:03.380]   So here's a customer making multiple purchases.
[00:50:03.380 --> 00:50:07.380]   Make that a little bit bigger so you can see when I go to purchase,
[00:50:07.380 --> 00:50:10.380]   it should have a transaction date, a price, all that sort of stuff.
[00:50:10.380 --> 00:50:14.380]   Here's my customer with the customer ID and some metadata about the customer.
[00:50:14.380 --> 00:50:16.380]   And then here's my article.
[00:50:16.380 --> 00:50:20.380]   And my article is a variant of a product.
[00:50:20.380 --> 00:50:24.380]   So what we've done so far is if you go down here,
[00:50:24.380 --> 00:50:27.380]   we've created, right, this text field for every product.
[00:50:27.380 --> 00:50:29.380]   That's what the text description looks like.
[00:50:29.380 --> 00:50:31.380]   And then we've created this text embedding.
[00:50:31.380 --> 00:50:33.380]   This is our OpenAI embedding that we have here.
[00:50:33.380 --> 00:50:39.380]   And if we zoom out, the graph structure that I was talking about before in slides,
[00:50:39.380 --> 00:50:40.380]   we start to see that.
[00:50:40.380 --> 00:50:44.380]   So you start to see that you have these customers that are co-purchasing things,
[00:50:44.380 --> 00:50:45.380]   right, at different times.
[00:50:45.380 --> 00:50:48.380]   And so we can start leveraging that graph structure.
[00:50:48.380 --> 00:50:52.380]   And we can use that graph structure to start informing our search and our LLM
[00:50:52.380 --> 00:50:54.380]   how to return better responses.
[00:50:54.380 --> 00:51:00.380]   So for example, what I'm going to do is I'm going to feed it a specific customer ID.
[00:51:00.380 --> 00:51:06.380]   So all this does is it basically caches this parameter for this specific customer ID.
[00:51:06.380 --> 00:51:09.380]   So I can use that in later query calls.
[00:51:09.380 --> 00:51:11.380]   So I'm going to go ahead and put that in.
[00:51:11.380 --> 00:51:18.380]   And then I am going to take this query here.
[00:51:18.380 --> 00:51:24.380]   And basically what this query is just going to do is tell me the history of this specific customer,
[00:51:24.380 --> 00:51:25.380]   their purchase history.
[00:51:25.380 --> 00:51:27.380]   So I'm going to go back here.
[00:51:27.380 --> 00:51:30.380]   And I'm going to say, hey, get me the customer with that ID.
[00:51:30.380 --> 00:51:33.380]   And then get me all the things that they purchased.
[00:51:33.380 --> 00:51:36.380]   And then all of the product categories that those were in basically.
[00:51:36.380 --> 00:51:39.380]   And just return some metadata about that.
[00:51:39.380 --> 00:51:41.380]   So I'm going to go ahead and give that a run.
[00:51:41.380 --> 00:51:45.380]   And it will tell me this person purchased the specific product names right here.
[00:51:45.380 --> 00:51:48.380]   The product type that they belong to, et cetera.
[00:51:48.380 --> 00:51:50.380]   And the description of those products.
[00:51:50.380 --> 00:51:57.380]   And then the cool part about graph is I can basically start taking.
[00:51:57.380 --> 00:51:59.380]   I can pull the latest purchase history.
[00:51:59.380 --> 00:52:03.380]   And then I can start making recommendations off of that latest purchase history.
[00:52:03.380 --> 00:52:06.380]   So there's lots of more complicated and fancy ways to do this.
[00:52:06.380 --> 00:52:13.380]   But the basic idea here, right, is that if I go with this, I can pull the latest purchases.
[00:52:13.380 --> 00:52:14.380]   So similar to what we did before.
[00:52:14.380 --> 00:52:16.380]   Just say, hey, take this customer.
[00:52:16.380 --> 00:52:18.380]   Get everything they purchased.
[00:52:18.380 --> 00:52:21.380]   Get sort of the max date as the latest purchases.
[00:52:21.380 --> 00:52:23.380]   And then I'm going to do this long query here.
[00:52:23.380 --> 00:52:29.380]   And basically what this long match statement is saying is say, hey, take this customer.
[00:52:29.380 --> 00:52:33.380]   Take their latest purchases, right?
[00:52:33.380 --> 00:52:36.380]   Look at other customers that purchased the same thing.
[00:52:36.380 --> 00:52:38.380]   And then look at what they purchased, right?
[00:52:38.380 --> 00:52:39.380]   That's what it's saying.
[00:52:39.380 --> 00:52:47.380]   So it's like, right, if ABK, if I buy the same things as ABK does, I can say, right, which, okay, thumbs up, right?
[00:52:47.380 --> 00:52:52.380]   Okay, and then I can basically say, well, for me, look at what ABK has purchased
[00:52:52.380 --> 00:52:54.380]   and a few other people that have similar purchasing behaviors.
[00:52:54.380 --> 00:52:57.380]   And is there anything there that I haven't bought yet?
[00:52:57.380 --> 00:52:59.380]   That's basically what this query is doing.
[00:52:59.380 --> 00:53:04.380]   So when you run this query, what you'll see is you'll start to get these different sweaters and everything.
[00:53:04.380 --> 00:53:06.380]   And this will change for every customer.
[00:53:06.380 --> 00:53:13.380]   And so the idea here is that this structured data that can feed us this, you see here,
[00:53:13.380 --> 00:53:15.380]   you have these common purchase scores.
[00:53:15.380 --> 00:53:22.380]   This is basically scoring the amount of times that you had common purchases between customers
[00:53:22.380 --> 00:53:24.380]   and then like sort of the next thing that they buy.
[00:53:24.380 --> 00:53:31.380]   So for example, eight other, there's been eight other common purchases between people that have bought this
[00:53:31.380 --> 00:53:33.380]   and between something that this particular customer has bought.
[00:53:33.380 --> 00:53:37.380]   And so these top, go ahead.
[00:53:37.380 --> 00:53:39.380]   You can imagine this as your peer group, right?
[00:53:39.380 --> 00:53:43.380]   So the people that are like you, that buy the same stuff or interested in the same stuff.
[00:53:43.380 --> 00:53:44.380]   So that's your peer group.
[00:53:44.380 --> 00:53:48.380]   You just look what else has your peer group bought that you haven't bought yet, right?
[00:53:48.380 --> 00:53:50.380]   So that's kind of what is behind that.
[00:53:50.380 --> 00:53:51.380]   Yes, exactly.
[00:53:51.380 --> 00:53:54.380]   And these are the top ring things in the peer group.
[00:53:54.380 --> 00:53:57.380]   So this specific sweater, this T-shirt.
[00:53:57.380 --> 00:54:03.380]   Say slowly again what the common purchase score means in plain language.
[00:54:03.380 --> 00:54:04.380]   Yep.
[00:54:04.380 --> 00:54:09.380]   And let me look at it again just to make sure I have it right here.
[00:54:09.380 --> 00:54:18.380]   So we're basically counting the number of paths between the number of co-purchase paths.
[00:54:18.380 --> 00:54:24.380]   So basically this customer, when we go out and look at what other people have bought in that peer group basically,
[00:54:24.380 --> 00:54:27.380]   how many times has that item been bought in that peer group?
[00:54:27.380 --> 00:54:28.380]   Does that make sense?
[00:54:28.380 --> 00:54:31.380]   Okay, so it's the score attached to an item.
[00:54:31.380 --> 00:54:32.380]   Yes.
[00:54:32.380 --> 00:54:34.380]   It says high score means lots of people have bought it.
[00:54:34.380 --> 00:54:35.380]   Yes, exactly.
[00:54:35.380 --> 00:54:36.380]   Thank you.
[00:54:36.380 --> 00:54:37.380]   Yep.
[00:54:37.380 --> 00:54:39.380]   Is that clear for everyone?
[00:54:39.380 --> 00:54:44.380]   How does it, sorry, how does it know it's a peer group?
[00:54:44.380 --> 00:54:47.380]   Peer group being that it's sort of the local graph structure.
[00:54:47.380 --> 00:55:00.380]   So what I'm doing right is I'm basically, if I look at this graph, I'm basically going like I'm starting at a specific customer.
[00:55:00.380 --> 00:55:02.380]   Then I'm looking at the article.
[00:55:02.380 --> 00:55:04.380]   And then I'm looking at everyone that bought this.
[00:55:04.380 --> 00:55:07.380]   And then I'm going out one more hop, right, to see everything they bought.
[00:55:07.380 --> 00:55:11.380]   And then I'm going to count up how many times those purchases appear.
[00:55:11.380 --> 00:55:21.380]   And the more purchases there are, the more likely it is, right, that that individual customer is likely to like that product just based on the common purchase behaviors in the graph.
[00:55:21.380 --> 00:55:22.380]   Does that make sense?
[00:55:22.380 --> 00:55:32.380]   So in this case then, the customer that you were just pointing out, the, well, yeah, before you scrolled away.
[00:55:32.380 --> 00:55:33.380]   Oh, sorry.
[00:55:33.380 --> 00:55:35.380]   I'm just, I want to make sure I understand the graph.
[00:55:35.380 --> 00:55:44.380]   So you picked that one random customer and you said you go one hop away from, so yeah, so assuming that person.
[00:55:44.380 --> 00:55:49.380]   Then that blue product, I guess, so that's the one they bought.
[00:55:49.380 --> 00:55:58.380]   And then the one to your left, I suppose, that would, or I guess right, whatever, the next, the closest blue dot, that's another product.
[00:55:58.380 --> 00:55:59.380]   Yep.
[00:55:59.380 --> 00:56:03.380]   Because there are links between, oh my goodness.
[00:56:03.380 --> 00:56:04.380]   Yes.
[00:56:04.380 --> 00:56:05.380]   There's lots of products, right?
[00:56:05.380 --> 00:56:12.380]   So it's basically going bought this, this person bought that, and then for all of, see, and there's a lot of interconnected relationships too.
[00:56:12.380 --> 00:56:17.380]   And then it, and then yes, for all of that, and then go out one more purchase relationship.
[00:56:17.380 --> 00:56:23.380]   So you're basically going out and then you're saying, okay, how many times do these other blue nodes show up?
[00:56:23.380 --> 00:56:24.380]   Right.
[00:56:24.380 --> 00:56:25.380]   Okay.
[00:56:25.380 --> 00:56:30.380]   And the more that they show up inside of that graph, the more shared purchasing behavior you have.
[00:56:30.380 --> 00:56:31.380]   Yeah.
[00:56:31.380 --> 00:56:32.380]   Yeah.
[00:56:32.380 --> 00:56:33.380]   So it's basically just counting that.
[00:56:33.380 --> 00:56:36.380]   You could write the query to go out further if you wanted to.
[00:56:36.380 --> 00:56:37.380]   You could.
[00:56:37.380 --> 00:56:38.380]   You could build it.
[00:56:38.380 --> 00:56:39.380]   Yeah.
[00:56:39.380 --> 00:56:42.380]   And, and part of the machine learning piece does that automatically.
[00:56:42.380 --> 00:56:44.380]   So, but yes.
[00:56:44.380 --> 00:56:45.380]   Can I ask a question about time window?
[00:56:45.380 --> 00:56:57.380]   So, for example, here you are considering like, you know, the person, no matter if it's one month or one year, that's one transaction.
[00:56:57.380 --> 00:56:59.380]   Versus if I'm considering window, right?
[00:56:59.380 --> 00:57:02.380]   One month versus one year versus one way.
[00:57:02.380 --> 00:57:05.380]   Is there a way like, you know, to make this?
[00:57:05.380 --> 00:57:06.380]   Yeah.
[00:57:06.380 --> 00:57:10.380]   So you notice, let me get out of this view.
[00:57:10.380 --> 00:57:16.380]   If I go up to the query that I just made here and maybe I went through this a little bit too fast.
[00:57:16.380 --> 00:57:22.380]   But you should see in here I'm saying, I'm just going on max date.
[00:57:22.380 --> 00:57:27.380]   But you could filter the date to say like TDAT, which is the purchase date variable.
[00:57:27.380 --> 00:57:38.380]   You could say, do that for only the last week or only the last two weeks or whatever filter was relevant for that.
[00:57:38.380 --> 00:57:49.380]   And so that's basically the idea that we're going to use to provide additional, we're actually going to do a graph post filtering pattern with vector search.
[00:57:49.380 --> 00:57:55.380]   So what we're going to do is if you, if you come back to the notebook and you go down and run.
[00:57:55.380 --> 00:57:57.380]   So this is, here's the query, right?
[00:57:57.380 --> 00:58:02.380]   So basically what we're doing is we're going to instantiate another vector store.
[00:58:02.380 --> 00:58:08.380]   Except here what we're going to do is we're going to say, we're going to put a retrieval query at the end.
[00:58:08.380 --> 00:58:12.380]   So what this is going to do is it's going to do vector search like before.
[00:58:12.380 --> 00:58:16.380]   But then after it does the vector search, it's going to try to match for that customer.
[00:58:16.380 --> 00:58:20.380]   It's going to create that sort of peer group, that local graph.
[00:58:20.380 --> 00:58:25.380]   And then it's going to score, well, how many times does that product show up?
[00:58:25.380 --> 00:58:29.380]   So this matches maybe almost backwards, making it probably a little bit hard to read, right?
[00:58:29.380 --> 00:58:37.380]   But it's the same query that we have before where we take the customer ID and then we go sort of one or I guess two hops.
[00:58:37.380 --> 00:58:41.380]   But really we're saying, okay, get me that peer group where we go to the article.
[00:58:41.380 --> 00:58:48.380]   We look at all the purchases, the common purchases between customers and then we compute that same score.
[00:58:48.380 --> 00:58:56.380]   And there's some multiplication here that I do basically to combine the vector search score with the, what we're calling the purchase or the co-purchase score here.
[00:58:56.380 --> 00:59:05.380]   But basically what this does is it now allows me to pass a customer ID into the search result.
[00:59:05.380 --> 00:59:15.380]   And then when I do similarity search with that, it will start sorting things by basically this purchase score.
[00:59:15.380 --> 00:59:19.380]   So now instead of getting, because denim jeans is like this really generic thing, right?
[00:59:19.380 --> 00:59:27.380]   So different customers, and we'll see when we run the app later, if you plug in different customer IDs, this result is going to be different.
[00:59:27.380 --> 00:59:29.380]   It's personalized now to this customer.
[00:59:29.380 --> 00:59:34.380]   So basically with vector search, we're now using this post-filtering pattern in the graph.
[00:59:34.380 --> 00:59:36.380]   And we can also do a pre-filtering pattern.
[00:59:36.380 --> 00:59:41.380]   but we're using a filtering pattern, right, to now rescore these things.
[00:59:41.380 --> 00:59:49.380]   So now, okay, we're just returning, for example, these different denim items, which are much more relevant for this specific customer.
[00:59:49.380 --> 00:59:54.380]   Yes.
[00:59:54.380 --> 00:59:57.380]   Can you explain the difference between search score and purchase score?
[00:59:57.380 --> 00:59:58.380]   Yes.
[00:59:58.380 --> 01:00:00.380]   Let me see what I did here.
[01:00:00.380 --> 01:00:05.380]   So search score is basically just the vector score that came back from the cosine similarity.
[01:00:05.380 --> 01:00:11.380]   So when you're doing similarity between two vectors, right, for the text description, that's going to be your search score.
[01:00:11.380 --> 01:00:17.380]   Purchase score is going to be what we were showing before, which is showing the popularity inside of the peer group.
[01:00:17.380 --> 01:00:23.380]   And then I'm just multiplying them together to create a combined score here, but there's different ways that you can do that.
[01:00:23.380 --> 01:00:30.380]   So are you going to use this product as a way of ranking those results?
[01:00:30.380 --> 01:00:31.380]   Yes.
[01:00:31.380 --> 01:00:36.380]   So if you look down here, these results are now ranked differently, and it's actually different from the query we ran before.
[01:00:36.380 --> 01:00:39.380]   So we ran the same search prompt with denim jeans.
[01:00:39.380 --> 01:00:43.380]   But here you can see we get like Rachel HW denim.
[01:00:43.380 --> 01:00:46.380]   We get Jade HW damn skinny and all this sort of stuff.
[01:00:46.380 --> 01:01:03.380]   If you look at what we ran before, if I were to scroll up to the top here, this one, you'll see that these are different.
[01:01:03.380 --> 01:01:05.380]   These are actually different.
[01:01:05.380 --> 01:01:06.380]   These are different.
[01:01:06.380 --> 01:01:07.380]   It's a different ordering.
[01:01:07.380 --> 01:01:08.380]   There's some similarities here.
[01:01:08.380 --> 01:01:11.380]   Like this is number three where it was number one below.
[01:01:11.380 --> 01:01:17.380]   But the idea is that you're sort of re-ranking this right now that you're personalizing it to this specific customer.
[01:01:17.380 --> 01:01:24.380]   And this gets really powerful as you get more and more structured co-purchasing data, right?
[01:01:24.380 --> 01:01:25.380]   Yes.
[01:01:25.380 --> 01:01:28.380]   Why are there a bunch of purchase scores zeroes?
[01:01:28.380 --> 01:01:32.380]   Because there's going to be, if you, it's an optional match.
[01:01:32.380 --> 01:01:40.380]   So if you notice, the sort of literal reason is that this is an optional match.
[01:01:40.380 --> 01:01:48.380]   But the other reason too is that there could be a situation where they're searching for something that isn't bought in their peer group yet.
[01:01:48.380 --> 01:01:53.380]   So this is just organized so that even if you didn't catch anything in the graph structure,
[01:01:53.380 --> 01:01:57.380]   you would still have a way to return results based on the vector scoring.
[01:01:57.380 --> 01:01:59.380]   Yeah.
[01:01:59.380 --> 01:02:00.380]   Yes.
[01:02:00.380 --> 01:02:23.380]   And it will, and it will try to see if there are, if anyone else has bought anything of that nature.
[01:02:23.380 --> 01:02:24.380]   Right?
[01:02:24.380 --> 01:02:25.380]   And if they have, then it will, it will help reorder the ranking.
[01:02:25.380 --> 01:02:26.380]   Yeah.
[01:02:26.380 --> 01:02:43.380]   And you could do it the other way around too where basically, and we have another app and I might take it to our booth where you could do the graph traversal first.
[01:02:43.380 --> 01:02:44.380]   Right?
[01:02:44.380 --> 01:02:48.380]   So like if you, if you had a scale problem that was, you know, very large.
[01:02:48.380 --> 01:02:53.380]   So one of the, one of the ways we can scale is through basically, hey, I would do the graph search first.
[01:02:53.380 --> 01:02:56.380]   And then after that, I can do the, the vector search.
[01:02:56.380 --> 01:03:09.380]   So, whatever you are getting in this, how is that different from like, like, the recommendations for products that you may have to say?
[01:03:09.380 --> 01:03:13.380]   You have a separate system competing with batch recommendations for you.
[01:03:13.380 --> 01:03:28.380]   Oh, people can't hear.
[01:03:28.380 --> 01:03:34.380]   So the question, the question was, why can't you use like an external batch recommendation?
[01:03:34.380 --> 01:03:37.380]   So you potentially could.
[01:03:37.380 --> 01:03:42.380]   What you're getting here is basically as this data is updated in real time in a transactional store.
[01:03:42.380 --> 01:03:43.380]   Right?
[01:03:43.380 --> 01:03:45.380]   You're going to be able to re-query it.
[01:03:45.380 --> 01:03:48.380]   So you're getting everything kind of in real time.
[01:03:48.380 --> 01:03:49.380]   Right?
[01:03:49.380 --> 01:03:54.380]   So if you're doing rag and you want answers to be, you know, adjusted for what people had just purchased.
[01:03:54.380 --> 01:03:55.380]   Right?
[01:03:55.380 --> 01:03:58.380]   This would be a way to accomplish that inside of a graph database.
[01:03:58.380 --> 01:04:00.380]   And then there's a lot of flexibility.
[01:04:00.380 --> 01:04:04.380]   You can change the way this query is, you know, you can shorten the time period.
[01:04:04.380 --> 01:04:09.380]   You could create a different type of traversal to go more than one hop out, et cetera.
[01:04:09.380 --> 01:04:10.380]   And I don't know.
[01:04:10.380 --> 01:04:12.380]   There's just so many of you who have a question.
[01:04:12.380 --> 01:04:13.380]   Oh, okay.
[01:04:13.380 --> 01:04:14.380]   Go ahead.
[01:04:14.380 --> 01:04:15.380]   Okay.
[01:04:15.380 --> 01:04:16.380]   Sorry.
[01:04:16.380 --> 01:04:18.380]   I'm hiding in the corner over here.
[01:04:18.380 --> 01:04:21.380]   I was wondering if you could speak more about combining the scores.
[01:04:21.380 --> 01:04:26.380]   It seems like just multiplying them together is a good way to get started.
[01:04:26.380 --> 01:04:28.380]   But is there a better theory there?
[01:04:28.380 --> 01:04:33.380]   Or it seems like something that have pitfalls, you know, to just multiply the two scores together.
[01:04:33.380 --> 01:04:34.380]   You don't know.
[01:04:34.380 --> 01:04:35.380]   Are they normalized?
[01:04:35.380 --> 01:04:36.380]   What's the distribution between them?
[01:04:36.380 --> 01:04:38.380]   Like how are you going to achieve the results?
[01:04:38.380 --> 01:04:39.380]   Yeah.
[01:04:39.380 --> 01:04:40.380]   That's true.
[01:04:40.380 --> 01:04:41.380]   Yeah.
[01:04:41.380 --> 01:04:43.380]   So again, this is just an example to get you started.
[01:04:43.380 --> 01:04:52.380]   I suppose like you could maintain a rank ordering where you say, hey, rank by like the search
[01:04:52.380 --> 01:04:57.380]   score first and then rank by the vector score, which would be kind of independent of scale.
[01:04:57.380 --> 01:05:01.380]   But yeah, there's a few different ways you can do it.
[01:05:01.380 --> 01:05:05.380]   This was just a quick way for me to put it together and I could probably do it better.
[01:05:05.380 --> 01:05:08.380]   But yes.
[01:05:08.380 --> 01:05:13.380]   And you know, with these systems, it's always good to have labeled data and sort of figure out how you can fine tune things.
[01:05:13.380 --> 01:05:20.380]   So like, you know, in a production system, you would have recommendations and whether or not those recommendations were successful.
[01:05:20.380 --> 01:05:24.380]   And then you can try different methodologies and see which ones get the best historic score too.
[01:05:24.380 --> 01:05:25.380]   For normalization.
[01:05:25.380 --> 01:05:26.380]   Just one second.
[01:05:26.380 --> 01:05:27.380]   One second.
[01:05:27.380 --> 01:05:28.380]   One second.
[01:05:28.380 --> 01:05:29.380]   One second.
[01:05:29.380 --> 01:05:30.380]   One second.
[01:05:30.380 --> 01:05:31.380]   You gotta .
[01:05:31.380 --> 01:05:32.380]   Thank you.
[01:05:32.380 --> 01:05:33.380]   Yes.
[01:05:33.380 --> 01:05:34.380]   Please.
[01:05:34.380 --> 01:05:35.380]   Maybe a follow up.
[01:05:35.380 --> 01:05:36.380]   Right?
[01:05:36.380 --> 01:05:37.380]   If I thought of...
[01:05:37.380 --> 01:05:41.380]   If I had this problem in front the first time, I would probably gone filtering.
[01:05:41.380 --> 01:05:50.380]   So filtering on the graph relations and then filtering on a fixed threshold on the semantic matching.
[01:05:50.380 --> 01:05:59.380]   Can you speak to how you would think about doing it my way versus computing scores like this and multiplying them?
[01:05:59.380 --> 01:06:00.380]   Yeah.
[01:06:00.380 --> 01:06:02.380]   So you're saying filtering.
[01:06:02.380 --> 01:06:04.380]   So basically you would do the graph pattern first.
[01:06:04.380 --> 01:06:05.380]   Excuse me.
[01:06:05.380 --> 01:06:06.380]   Yeah.
[01:06:06.380 --> 01:06:10.380]   I would restrict the graph to only the subgraph that matches these patterns.
[01:06:10.380 --> 01:06:11.380]   Yes.
[01:06:11.380 --> 01:06:18.380]   And then they're filtered to only the articles that have a similarity score of all threshold.
[01:06:18.380 --> 01:06:19.380]   Yep.
[01:06:19.380 --> 01:06:20.380]   Returned out.
[01:06:20.380 --> 01:06:21.380]   Yep.
[01:06:21.380 --> 01:06:24.380]   You could do it that way.
[01:06:24.380 --> 01:06:30.380]   And in fact, we have a demo of exactly, I think, something very close to what you're describing.
[01:06:30.380 --> 01:06:36.380]   The issue is for this course, like if there's a chance that whatever you put inside of the graph,
[01:06:36.380 --> 01:06:42.380]   inside of that local graph could have a cold start problem, right, where it might not very well match the vector search.
[01:06:42.380 --> 01:06:45.380]   So it is a way of doing it.
[01:06:45.380 --> 01:06:51.380]   It just might end up that you could be over restricting, right, to a local area of the graph that might not have,
[01:06:51.380 --> 01:06:53.380]   in this case, good denim jeans, for example.
[01:06:53.380 --> 01:06:55.380]   But you could do it that way.
[01:06:55.380 --> 01:07:00.380]   You could also do a filtering where, like you said, for example, give me...
[01:07:00.380 --> 01:07:05.380]   I guess you could do vector search filtering first and then filter down to the graph.
[01:07:05.380 --> 01:07:10.380]   And then if there was nothing in the graph, default to the vector search, right, results in the scores there.
[01:07:10.380 --> 01:07:12.380]   So you could do it that way too.
[01:07:12.380 --> 01:07:16.380]   Any intuition on to, you know, what you expect to work best?
[01:07:16.380 --> 01:07:20.380]   These filtering steps or multiplying into one score?
[01:07:20.380 --> 01:07:24.380]   I think multiplying into one score is a good way to...
[01:07:24.380 --> 01:07:26.380]   It's just a way for me to get started.
[01:07:26.380 --> 01:07:29.380]   And some of it will depend on the scale of your graph, right?
[01:07:29.380 --> 01:07:30.380]   So if you...
[01:07:30.380 --> 01:07:36.380]   The more sort of purchase transactions you have, the more well-connected the graph is going to be.
[01:07:36.380 --> 01:07:41.380]   And the better you're going to be able to, you know, sort of match things almost like with a pre-filtering pattern,
[01:07:41.380 --> 01:07:44.380]   where you just restrict to that area of the graph first.
[01:07:44.380 --> 01:07:49.380]   When it's a little bit more sparse, then you're going to probably not have that same reliability.
[01:07:49.380 --> 01:07:59.380]   And you're going to need to either do an optional match or some post-filtering pattern where you make sure not to over-filter things.
[01:07:59.380 --> 01:08:00.380]   Yep.
[01:08:00.380 --> 01:08:01.380]   Just two real quick.
[01:08:01.380 --> 01:08:05.380]   I wasn't going to ask you about scoring, but since there's been a couple.
[01:08:05.380 --> 01:08:09.380]   Normalization, a typical way to do it is reciprocal ring fusion.
[01:08:09.380 --> 01:08:11.380]   Is that available here?
[01:08:11.380 --> 01:08:15.380]   Not that specific one, no.
[01:08:15.380 --> 01:08:18.380]   We have some normalization.
[01:08:18.380 --> 01:08:19.380]   We have...
[01:08:19.380 --> 01:08:20.380]   It's the graph data science library.
[01:08:20.380 --> 01:08:26.380]   There are some normalization functions, but they're not going to normalize things at query time in the way you're thinking.
[01:08:26.380 --> 01:08:27.380]   Okay, yeah.
[01:08:27.380 --> 01:08:28.380]   Yeah.
[01:08:28.380 --> 01:08:34.380]   Okay, and then the other one is just, and if I'm getting ahead of myself, just tell me and I'll be quiet.
[01:08:34.380 --> 01:08:41.380]   But everything we've done so far, it seems like creating the peer group, you can do that with a graph database, right?
[01:08:41.380 --> 01:08:43.380]   Infer relationships.
[01:08:43.380 --> 01:08:52.380]   But what part of this is actually the knowledge graph part of it, which is infer unknown relationships based on unsupervised understandings?
[01:08:52.380 --> 01:08:53.380]   Have we gotten to that yet?
[01:08:53.380 --> 01:08:55.380]   Yeah, so we'll get to some of that in a little bit.
[01:08:55.380 --> 01:08:56.380]   Yes.
[01:08:56.380 --> 01:08:58.380]   So I will, we'll get through, we'll get through to that.
[01:08:58.380 --> 01:09:03.380]   By the way, there are also some empty chairs here if someone wants to sit down.
[01:09:03.380 --> 01:09:04.380]   Thanks.
[01:09:04.380 --> 01:09:04.380]   Any other questions?
[01:09:04.380 --> 01:09:04.380]   Otherwise, you probably need to progress.
[01:09:04.380 --> 01:09:16.380]   By the way, we also have a really big booth with really comfy chairs over there.
[01:09:16.380 --> 01:09:24.380]   So you can always come the next two days and ask Zach and Andreas and Tomas and me many more questions.
[01:09:24.380 --> 01:09:25.380]   Right, so.
[01:09:25.380 --> 01:09:29.380]   And we have swag at the store's booth as well, so.
[01:09:29.380 --> 01:09:30.380]   Awesome.
[01:09:30.380 --> 01:09:31.380]   Thank you, Michael.
[01:09:31.380 --> 01:09:32.380]   Alrighty.
[01:09:32.380 --> 01:09:42.380]   So now we're going to start augmenting semantic search for knowledge graph inference.
[01:09:42.380 --> 01:09:45.380]   So this will get a little bit into what you were talking about.
[01:09:45.380 --> 01:09:54.380]   There's a lot more, so I didn't like, we have a whole knowledge graph builder where we build relationships from unstructured data that we're not doing in this course.
[01:09:54.380 --> 01:09:58.380]   But we do have it at our booth.
[01:09:58.380 --> 01:10:07.380]   So basically, this is where we're going to start using the graph data science portion of Neo4j.
[01:10:07.380 --> 01:10:14.380]   So, we have this thing called graph data science inside of our product.
[01:10:14.380 --> 01:10:21.380]   And basically, what it does is it offers various graph algorithms to you and this special workspace and data representation.
[01:10:21.380 --> 01:10:28.380]   So you can effectively create a projection of part of your graph in sort of this sparse matrix representation.
[01:10:28.380 --> 01:10:31.380]   And that allows you to run a lot of algorithms very efficiently.
[01:10:31.380 --> 01:10:37.380]   So things like path finding, centrality, community detection, different machine learning algorithms,
[01:10:37.380 --> 01:10:43.380]   and of course embeddings and K&N similarity, which is what we're going to talk about here.
[01:10:43.380 --> 01:10:47.380]   With a lot of focus on this graph embedding piece.
[01:10:47.380 --> 01:10:55.380]   This is a customer who created a very nice sort of periodic table of all of our algorithms for reference.
[01:10:55.380 --> 01:10:57.380]   But there's a lot of different areas, right?
[01:10:57.380 --> 01:11:00.380]   So there's a lot of things that we aren't going to get to talk about here.
[01:11:00.380 --> 01:11:10.380]   So things like community detection, path finding, centrality, topological link prediction, and directed acyclical graph algorithms.
[01:11:10.380 --> 01:11:13.380]   But we are going to talk about similarity in embeddings.
[01:11:13.380 --> 01:11:24.380]   So basically, a node embedding works just like any other embedding except it's for a graph where the things you're embedding are nodes in a graph.
[01:11:24.380 --> 01:11:28.380]   So this is a picture of a very small graph.
[01:11:28.380 --> 01:11:31.380]   I think it's Zach's Karate Club is the name of the graph.
[01:11:31.380 --> 01:11:35.380]   And it's basically the relationships between different people in a karate club.
[01:11:35.380 --> 01:11:41.380]   But the idea is that I can take this graph and I can turn it into a set of vectors.
[01:11:41.380 --> 01:11:44.380]   And in this case, it's a 2D vector, which is a 2D representation.
[01:11:44.380 --> 01:11:47.380]   We're going to create longer vectors for the notebook.
[01:11:47.380 --> 01:11:55.380]   But the idea here, right, is that the yellow nodes that are similar in the graph in the sense that they're really close in the graph
[01:11:55.380 --> 01:12:00.380]   are going to be really close in the embedding space and the orange nodes and the green nodes and the blue nodes, etc.
[01:12:00.380 --> 01:12:02.380]   So that's the idea of what we're doing.
[01:12:02.380 --> 01:12:09.380]   We're basically embedding what we call homophily, which is basically this fancy term for like the locality inside of the graph structure.
[01:12:09.380 --> 01:12:15.380]   And once we do that embedding, what we're going to be able to do is start inferring relationships.
[01:12:15.380 --> 01:12:23.380]   So someone mentioned being able to do sort of inference beforehand so calculations are available at query time.
[01:12:23.380 --> 01:12:26.380]   And we're going to use k-nearest-neighbor for this.
[01:12:26.380 --> 01:12:30.380]   So basically this is happening outside of an index.
[01:12:30.380 --> 01:12:36.380]   What we're going to be doing is creating graph embeddings, specifically on the articles.
[01:12:36.380 --> 01:12:44.380]   And then we're going to be inferring these k-nearest neighbors between them based on k and n, which is this semi-supervised or unsupervised algorithm.
[01:12:44.380 --> 01:12:46.380]   And you can do this for a lot of different things.
[01:12:46.380 --> 01:12:52.380]   We are going to use co-purchase relationships for this and kind of scale that process for multiple hops.
[01:12:52.380 --> 01:12:55.380]   But you could do this for other forms of link prediction.
[01:12:55.380 --> 01:13:06.380]   For example, things like entity resolution or if you're trying to resolve, you know, maybe you have people and locations in the same graph and you're trying to resolve whether or not a person is in a specific location.
[01:13:06.380 --> 01:13:16.380]   You can use these sorts of models to start making those knowledge graph analytics and drawing those relationships.
[01:13:16.380 --> 01:13:19.380]   So let's dive into the notebook to see how that works.
[01:13:19.380 --> 01:13:20.380]   Question?
[01:13:20.380 --> 01:13:21.380]   Yes.
[01:13:21.380 --> 01:13:22.380]   You mentioned you're embedding the nodes.
[01:13:22.380 --> 01:13:25.380]   Are we essentially throwing away the edges?
[01:13:25.380 --> 01:13:27.380]   We're not embedding the edges?
[01:13:27.380 --> 01:13:34.380]   So we're doing a node embedding which is specifically focused on nodes.
[01:13:34.380 --> 01:13:43.380]   We could do different types of knowledge graph embeddings which embed like the edge and like, right, it embeds the, what is it, the head and the edge to the tail.
[01:13:43.380 --> 01:13:44.380]   Right?
[01:13:44.380 --> 01:13:48.380]   So there are those types of embeddings and there's different types of subgraph embeddings.
[01:13:48.380 --> 01:13:54.380]   For today, we are, the relationships are used to understand where nodes fit inside of that vector space.
[01:13:54.380 --> 01:13:55.380]   Right?
[01:13:55.380 --> 01:13:59.380]   In terms of clustering of, in this case, what's going to be co-purchase behavior.
[01:13:59.380 --> 01:14:00.380]   So we're not throwing them away.
[01:14:00.380 --> 01:14:01.380]   They're going to be used.
[01:14:01.380 --> 01:14:06.380]   But we, and we'll use the, yeah, you'll see as we go along.
[01:14:06.380 --> 01:14:08.380]   We'll continue to use the relationships.
[01:14:08.380 --> 01:14:10.380]   Sounds good.
[01:14:10.380 --> 01:14:17.380]   So basically, what we're going to do here is we're going to create a customers also like relationship.
[01:14:17.380 --> 01:14:25.380]   So basically, this cell, so it's going to be the first cell after you get to augmented semantic search with knowledge graph and ML.
[01:14:25.380 --> 01:14:30.380]   And if you run that cell, it's going to run our GDS algorithms.
[01:14:30.380 --> 01:14:35.380]   So I have some utilities to kind of help clear, clean things up.
[01:14:35.380 --> 01:14:40.380]   And then basically, we're going to create something called a graph projection.
[01:14:40.380 --> 01:14:45.380]   And we don't have a whole ton of time to go into detail on these in a two-hour course.
[01:14:45.380 --> 01:14:53.380]   But the basic idea, right, is that I'm going to look for these common co-purchase relationships between articles and customers.
[01:14:53.380 --> 01:15:00.380]   And then I'm going to project that as a co-purchase relationship to an in-memory graph.
[01:15:00.380 --> 01:15:06.380]   So I'm creating basically this graph that contains articles and then a weighted co-purchase relationship between them.
[01:15:06.380 --> 01:15:11.380]   After that, I'm going to run our node embedding model.
[01:15:12.380 --> 01:15:16.380]   So we have supervised models that we can use.
[01:15:16.380 --> 01:15:21.380]   But in this case, I'm going to use something called fast RP, which stands for fast random projection.
[01:15:21.380 --> 01:15:33.380]   And basically, what this is is a graph embedding that is going to use a lot of sort of this matrix multiplication with sort of this sparse random matrix.
[01:15:33.380 --> 01:15:39.380]   So the math behind it basically allows it to calculate an embedding really quickly without necessarily needing a neural network.
[01:15:40.380 --> 01:15:43.380]   So I'm going to make these embeddings 128 dimensions.
[01:15:43.380 --> 01:15:51.380]   I'm going to specify certain things like an iteration weight that will tell me how many hops to go out when looking for other similar nodes.
[01:15:51.380 --> 01:15:58.380]   And then once I create that embedding, I'm going to write GDS KNN write.
[01:15:58.380 --> 01:16:03.380]   So basically what this is going to do is it's going to find nodes with similar embeddings.
[01:16:03.380 --> 01:16:07.380]   And it's going to write a customer also likes relationship between those nodes.
[01:16:08.380 --> 01:16:15.380]   And then there's some sampling procedures that I can use inside of KNN to make it run faster, which I'm doing here.
[01:16:15.380 --> 01:16:20.380]   And then once I have that, I can write both my embeddings back to the graph.
[01:16:20.380 --> 01:16:23.380]   And in KNN, I just wrote the relationships back.
[01:16:23.380 --> 01:16:28.380]   So now we have these customer also like relationships between articles inside of the graph.
[01:16:29.380 --> 01:16:34.380]   And I get some stats when that's run telling me about whether or not it converged.
[01:16:34.380 --> 01:16:40.380]   The number of new relationships written, which is going to be generally a lot because it's doing this quadratic comparison.
[01:16:40.380 --> 01:16:43.380]   And each relationship is scored.
[01:16:44.380 --> 01:16:49.380]   I had a similarity cutoff at I think 75 and this was using cosine similarity.
[01:16:49.380 --> 01:16:55.380]   So it would be negative one to one, I think, that it was using.
[01:16:55.380 --> 01:16:59.380]   And we can visualize node embeddings as well.
[01:16:59.380 --> 01:17:04.380]   And that's interesting to do in the sense that it will tell me clusters of purchase behavior.
[01:17:05.380 --> 01:17:10.380]   So these cells that I have here, I've commented out because they take a while to run.
[01:17:10.380 --> 01:17:15.380]   But basically, this should still be able to be rendered here.
[01:17:15.380 --> 01:17:17.380]   This visual.
[01:17:18.380 --> 01:17:21.380]   And basically, what this visual will show you is you see we get these clusters.
[01:17:21.380 --> 01:17:24.380]   And basically, what I did is I took those 128 dimensional embeddings.
[01:17:24.380 --> 01:17:29.380]   And I used a TISNI, which is just a way to condense that down to a smaller space.
[01:17:29.380 --> 01:17:31.380]   And I condensed it down to a 2D space.
[01:17:31.380 --> 01:17:36.380]   And basically, what you'll see is you'll get these clusters of commonly purchased things.
[01:17:36.380 --> 01:17:41.380]   And so, this is sort of doing the multi-hop thing that you were referring to earlier,
[01:17:42.380 --> 01:17:46.380]   where now it's starting to look at, okay, well, these different clusters, right?
[01:17:46.380 --> 01:17:50.380]   These clusters represent items that are often co-purchased together.
[01:17:50.380 --> 01:17:51.380]   Baskets, right?
[01:17:51.380 --> 01:17:52.380]   Baskets, yeah.
[01:17:52.380 --> 01:17:55.380]   And yes, baskets in a sort of sense.
[01:17:55.380 --> 01:17:57.380]   Right now, it's just co-purchasing.
[01:17:57.380 --> 01:17:59.380]   But you could organize into orders inside of the graph.
[01:17:59.380 --> 01:18:01.380]   And you could do co-purchasing baskets as well.
[01:18:01.380 --> 01:18:09.380]   And so, with that information, we can start to sort of scale how we power just plain recommendation.
[01:18:10.380 --> 01:18:16.380]   So, I can create a new query here, where basically, instead of going to the vector database,
[01:18:16.380 --> 01:18:21.380]   I can just say, okay, we'll match the customers, get me everything they purchase, the articles,
[01:18:21.380 --> 01:18:26.380]   get me what else customers also like to buy, and get me the product behind that.
[01:18:26.380 --> 01:18:33.380]   So, it's similar to what we did before, except it's scaling it to sort of a, to a multi-hop pattern.
[01:18:33.380 --> 01:18:37.380]   And you can substitute other machine learning models in here if you wanted to, too.
[01:18:38.380 --> 01:18:45.380]   If you had, for example, a supervised model that you wanted to use for recommendation, that could be substituted in here to make these inferences,
[01:18:45.380 --> 01:18:48.380]   and then you all of a sudden have these customer also purchase relationships.
[01:18:48.380 --> 01:18:53.380]   You could also create a vector index for that graph embedding, which we're not doing here.
[01:18:53.380 --> 01:18:57.380]   We've sort of done the KNN beforehand, right, and we've written the relationships to the graph.
[01:18:58.380 --> 01:19:03.380]   And that allows me to do this customer also liked relationship that I can draw in the query.
[01:19:03.380 --> 01:19:06.380]   And that gives me a set of recommendations.
[01:19:06.380 --> 01:19:12.380]   Again, not necessarily based off of a search pattern, but just based off of what the customer had purchased before.
[01:19:13.380 --> 01:19:17.380]   And to your point earlier, we could create time, date, and date cutoffs, and things like that.
[01:19:17.380 --> 01:19:25.380]   So, this is basically just a way to kind of scale things with the machine learning model and leverage graph embeddings.
[01:19:26.380 --> 01:19:32.380]   So, that was it for the graph embedding and sort of the graph machine learning section.
[01:19:32.380 --> 01:19:39.380]   And again, you can use a lot of different types of machine learning models here to basically infer these relationships.
[01:19:40.380 --> 01:19:45.380]   some of which exists, like, inside of our platform through graph data science and others that you can bring in externally.
[01:19:45.380 --> 01:19:52.380]   We're at 4:48, so we have, what, 45 minutes left, a little under.
[01:19:52.380 --> 01:19:55.380]   And we haven't taken a break yet.
[01:19:55.380 --> 01:19:58.380]   I'm wondering if we should power through.
[01:19:58.380 --> 01:20:00.380]   Yeah.
[01:20:00.380 --> 01:20:02.380]   How do people keep going?
[01:20:02.380 --> 01:20:04.380]   Yeah, keep power through.
[01:20:04.380 --> 01:20:05.380]   Okay.
[01:20:05.380 --> 01:20:07.380]   Yes.
[01:20:08.380 --> 01:20:12.380]   Do you always have to recalculate it?
[01:20:12.380 --> 01:20:15.380]   Is there, like, any communication going with customers coming in?
[01:20:15.380 --> 01:20:21.380]   So, right now, you do, yes, have to recalculate the graph embedding.
[01:20:21.380 --> 01:20:30.380]   Ideally, right, if you, like, over time, if customers have been in there for a while, that graph embedding, like, well, it'll slow down how much it changes.
[01:20:30.380 --> 01:20:37.380]   We are working on things for the future that might make that easier in terms of getting things in real time.
[01:20:37.380 --> 01:20:42.380]   But right now, for calculating graph embeddings, it is something where you have to recalculate it for the graph.
[01:20:42.380 --> 01:20:46.380]   Thankfully, though, with something like FastRP, that'll work.
[01:20:46.380 --> 01:20:53.380]   I mean, we've, I've seen it work on graphs with billions of nodes and relationships, and it can calculate in, like, half an hour.
[01:20:54.380 --> 01:20:57.380]   But yes, right now, you do have to recalculate it.
[01:20:57.380 --> 01:21:10.380]   You could use other methods, too, like, averaging the neighborhood as well, for sort of, like, intermediate embeddings as well.
[01:21:11.380 --> 01:21:17.380]   So, if you didn't want to recalculate it right away, you could take, like, the average of the neighborhood and use that as, like, a stand-in embedding.
[01:21:24.380 --> 01:21:25.380]   What's that?
[01:21:25.380 --> 01:21:25.380]   Is there an apple limit?
[01:21:25.380 --> 01:21:25.380]   Is there an apple limit?
[01:21:25.380 --> 01:21:26.380]   Is there an apple limit?
[01:21:26.380 --> 01:21:27.380]   Is there an apple limit?
[01:21:27.380 --> 01:21:28.380]   Is there an apple limit?
[01:21:28.380 --> 01:21:29.380]   Is there an apple limit?
[01:21:29.380 --> 01:21:30.380]   Is there an apple limit?
[01:21:30.380 --> 01:21:31.380]   Is there an apple limit?
[01:21:31.380 --> 01:21:32.380]   Yes.
[01:21:32.380 --> 01:21:33.380]   Is there an apple limit?
[01:21:33.380 --> 01:21:33.380]   Is there an apple limit?
[01:21:33.380 --> 01:21:34.380]   Is there an apple limit?
[01:21:34.380 --> 01:21:35.380]   Is there an apple limit?
[01:21:35.380 --> 01:21:36.380]   Is there an apple limit?
[01:21:36.380 --> 01:21:37.380]   Is there an apple limit?
[01:21:37.380 --> 01:21:38.380]   Is there an apple limit?
[01:21:38.380 --> 01:21:39.380]   Is there an apple limit?
[01:21:39.380 --> 01:21:40.380]   Is there an apple limit?
[01:21:40.380 --> 01:21:41.380]   Is there an apple limit?
[01:21:41.380 --> 01:21:42.380]   Is there an apple limit?
[01:21:42.380 --> 01:21:43.380]   Is there an apple limit?
[01:21:43.380 --> 01:21:44.380]   Is there an apple limit?
[01:21:44.380 --> 01:21:45.380]   Is there an apple limit?
[01:21:45.380 --> 01:21:46.380]   Is there an apple limit?
[01:21:46.380 --> 01:21:47.380]   Is there an apple limit?
[01:21:47.380 --> 01:21:48.380]   Is there an apple limit?
[01:21:48.380 --> 01:21:49.380]   Is there an apple limit?
[01:21:49.380 --> 01:21:50.380]   Is there an apple limit?
[01:21:50.380 --> 01:21:52.380]   Is there an apple limit?
[01:21:52.380 --> 01:21:53.380]   Is there an apple limit?
[01:21:53.380 --> 01:21:54.380]   Is there an apple limit?
[01:21:54.380 --> 01:21:55.380]   Is there an apple limit?
[01:21:55.380 --> 01:21:56.380]   Is there an apple limit?
[01:21:56.380 --> 01:21:57.380]   I think you have an apple limit?
[01:21:57.380 --> 01:21:58.380]   Is there an apple limit?
[01:21:58.380 --> 01:21:59.380]   Is there an apple limit?
[01:21:59.380 --> 01:22:00.380]   Yeah.
[01:22:00.380 --> 01:22:01.380]   There's no upper limit to dimension.
[01:22:01.380 --> 01:22:17.820]   Right now, inside of this graph, we only have, let me see how many customers we have.
[01:22:17.820 --> 01:22:20.700]   So this graph only has a thousand customers, right?
[01:22:20.700 --> 01:22:25.120]   There's been other examples and demos that we have where it's like millions or tens of millions
[01:22:25.120 --> 01:22:26.440]   of customers, right?
[01:22:26.440 --> 01:22:29.820]   So the more transactions you have, the more customers and articles you have, the higher
[01:22:29.820 --> 01:22:32.200]   that dimension needs to be, right?
[01:22:32.200 --> 01:22:37.340]   For demo purposes right now, and we're working off of sandbox instances, I kept it pretty small.
[01:22:37.340 --> 01:22:42.440]   But you can expand this to 256 or keep going up in orders of two.
[01:22:42.440 --> 01:22:46.940]   I found that these generally don't need to be as big as like the text embeddings that you
[01:22:46.940 --> 01:22:50.520]   get from OpenAI because it's a smaller space, right?
[01:22:50.520 --> 01:22:54.400]   When you, even if you have billions of nodes in your graph, it's still a smaller space than
[01:22:54.400 --> 01:22:57.740]   the entire human language, right?
[01:22:57.740 --> 01:23:02.140]   So you, so they tend to be on the, tend to be smaller, but they can go up and there's no
[01:23:02.140 --> 01:23:07.140]   upper limit that we, that we inherently have inside of the product, no.
[01:23:07.140 --> 01:23:10.960]   And what is the biggest use case you have at the moment deployed?
[01:23:10.960 --> 01:23:11.960]   For embeddings?
[01:23:11.960 --> 01:23:14.880]   Graph embeddings, yes.
[01:23:14.880 --> 01:23:22.080]   I'd say entity resolution, different forms of classification, like for fraud detection,
[01:23:22.080 --> 01:23:26.640]   and then also for recommendation and things like customer segmentation where you want to
[01:23:26.640 --> 01:23:34.880]   like create clusters based on, you know, behavior or other data inside of the graph.
[01:23:34.880 --> 01:23:50.780]   Is it possible to semantically retrieve the information about the graph structure itself?
[01:23:50.780 --> 01:23:57.020]   So let's say that you have 10 different types of pants, but you want to ask a question, how
[01:23:57.020 --> 01:24:03.260]   many types of pants do you have, which is like it's not in the data itself specifically, it's
[01:24:03.260 --> 01:24:06.400]   kind of metadata about it.
[01:24:06.400 --> 01:24:07.400]   Right.
[01:24:07.400 --> 01:24:10.640]   Yes, so very good question.
[01:24:10.640 --> 01:24:14.460]   So there's different types of retrieval patterns that are better at those sorts of queries.
[01:24:14.460 --> 01:24:17.160]   So we have something called text to cipher.
[01:24:17.160 --> 01:24:22.100]   We have it, it's sort of, it's a pattern, right, where you can actually get the LLM to generate
[01:24:22.100 --> 01:24:28.280]   like the cipher query to query the data and those tend to work well for aggregation.
[01:24:28.280 --> 01:24:32.920]   So like if you were building out a more mature system, you can have like a semantic layer
[01:24:32.920 --> 01:24:34.480]   with different tools.
[01:24:34.480 --> 01:24:39.980]   And so if you knew that you had more of like an aggregation question about types of things,
[01:24:39.980 --> 01:24:44.900]   then you can send it to that tool, which can do like a text to cipher or another sort
[01:24:44.900 --> 01:24:50.380]   of a cipher snippet that was like pre-generated or template that was pre-generated.
[01:24:50.380 --> 01:24:51.380]   Does that make sense?
[01:24:51.380 --> 01:24:52.380]   Yeah.
[01:24:52.380 --> 01:24:54.700]   Have you tried using that with like function calling?
[01:24:54.700 --> 01:24:59.140]   So you don't have to like specific, know in advance that you'd like to use it, but rather
[01:24:59.140 --> 01:25:00.140]   like...
[01:25:00.140 --> 01:25:06.480]   Yes, that is something that Michael, if he's still here, has done some work on for function
[01:25:06.480 --> 01:25:07.480]   calling.
[01:25:07.480 --> 01:25:08.480]   Yeah.
[01:25:08.480 --> 01:25:09.480]   So...
[01:25:09.480 --> 01:25:20.600]   Yes, in general, you can make many of these graph operations available as functions to an LLM.
[01:25:20.600 --> 01:25:27.280]   And then basically depends on the selectivity of how you describe the function and what you
[01:25:27.280 --> 01:25:29.360]   pass in to make this available.
[01:25:29.360 --> 01:25:35.120]   So you can do this kind of embedding work, but also other graph queries can be made available
[01:25:35.120 --> 01:25:36.600]   as functions to an LLM.
[01:25:36.600 --> 01:25:37.920]   And then it just selects them.
[01:25:37.920 --> 01:25:43.520]   So for instance, get a neighborhood of a node or find a shortest path between two nodes or
[01:25:43.520 --> 01:25:47.680]   find similar nodes to this nodes using graph embeddings or whatever.
[01:25:47.680 --> 01:25:52.440]   And then you have these kind of some generic functions that you offer to the LLM. And then you could
[01:25:52.440 --> 01:26:00.440]   have also specific functions that are basically built by a subject matter expert that, for instance,
[01:26:00.440 --> 01:26:06.860]   for legal domain or for a fintech domain, they have specific graph queries that are really specific
[01:26:06.860 --> 01:26:11.440]   to that domain. And then add them as functions as well. So you can have, you know, five, ten functions
[01:26:11.440 --> 01:26:16.120]   available and then the LLM fixed ones that are necessary to answer the questions and such.
[01:26:16.120 --> 01:26:21.700]   But it should work with all the LLM models that support function callings and such.
[01:26:21.700 --> 01:26:28.060]   Yes.
[01:26:28.060 --> 01:26:30.060]   Thanks.
[01:26:30.060 --> 01:26:34.180]   If you have more questions, you can always come to talk to us in detail.
[01:26:34.180 --> 01:26:34.680]   Yes.
[01:26:34.680 --> 01:26:42.220]   So I was just trying to gain a little more intuition about the idea of graph embeddings.
[01:26:42.220 --> 01:26:44.020]   I'm pretty new to graphs in general.
[01:26:44.020 --> 01:26:48.700]   Well, it seems to me like the whole motivation for using embeddings, it's really taken off
[01:26:48.700 --> 01:26:54.160]   in the last four years or so. And it's because you've got transformers, you've got unsupervised
[01:26:54.160 --> 01:26:59.740]   pre-training where you can leverage all of, you know, the text on the internet or all of the
[01:26:59.740 --> 01:27:03.380]   images on the internet and whatnot and train these embedding models that are just general
[01:27:03.380 --> 01:27:09.520]   purpose foundation models. And this is very different from that because you're just completely
[01:27:09.520 --> 01:27:14.200]   training your embeddings or if it even is training from scratch. I'm wondering if there's like
[01:27:14.200 --> 01:27:19.660]   a deeper intuition to why you'd be using embeddings for this instead of, it almost seems like there's
[01:27:19.660 --> 01:27:24.200]   a lot of more like traditional machine learning techniques that you could be using.
[01:27:24.200 --> 01:27:28.200]   I just don't know what the state of the art is. And I'm curious what the intuition is for
[01:27:28.200 --> 01:27:30.880]   using embeddings for this.
[01:27:30.880 --> 01:27:38.340]   Yeah, I mean so embeddings here basically is helping you kind of scale these other graph
[01:27:38.340 --> 01:27:43.020]   traversals, right, to go, because when we do that embedding, what we're basically doing is
[01:27:43.020 --> 01:27:46.880]   we're taking a graph traversal that's similar to the one we went over and going multiple hops,
[01:27:46.880 --> 01:27:52.200]   right. So you're sort of taking this structure of the graph and you're scaling your ability
[01:27:52.200 --> 01:27:57.440]   to search for related things inside of the graph without having to do a cypher query every single
[01:27:57.440 --> 01:28:03.920]   time. So it's basically and it can help you also infer information that you didn't know before.
[01:28:03.920 --> 01:28:09.780]   So like in this example, right, we're making these relationships on customer also liked.
[01:28:09.780 --> 01:28:15.380]   We could also do things like say, hey, like if we had like an identity graph of people and different
[01:28:15.380 --> 01:28:21.200]   identifiers and transactions, we could start resolving people in the same household, for example, using embeddings.
[01:28:21.200 --> 01:28:28.780]   So even though it is kind of local to your graph, the idea behind embeddings is that you're able
[01:28:28.780 --> 01:28:34.020]   to infer relationships between things inside of your graph that, you know, would be very hard
[01:28:34.020 --> 01:28:37.720]   to do without some sort of machine learning or just traditional methods, if that makes sense.
[01:28:37.720 --> 01:28:40.060]   A little bit?
[01:28:40.060 --> 01:28:41.260]   Yeah.
[01:28:41.260 --> 01:28:50.260]   Yeah, because you're basically using, depending on the graph embedding you're using, you're
[01:28:50.260 --> 01:28:54.840]   basically taking the structure of the relationships and that topology and you're using it as features,
[01:28:54.840 --> 01:29:00.040]   right, to power what something should look like in a representative space. And then you can
[01:29:00.040 --> 01:29:03.840]   then use those to basically predict where links should exist inside of the graph.
[01:29:03.840 --> 01:29:18.420]   Hopefully. I don't know if it really did. I mean, it's that you're, you're providing this sort
[01:29:18.420 --> 01:29:23.420]   of intermediate representation where you can do more general purpose things with it.
[01:29:23.420 --> 01:29:24.420]   Yes.
[01:29:24.420 --> 01:29:25.420]   Is that good paraphrasing?
[01:29:25.420 --> 01:29:26.420]   Yes, I think so.
[01:29:26.420 --> 01:29:28.000]   Okay. Understood something.
[01:29:28.000 --> 01:29:36.000]   Alrighty. Awesome. So this is going to be the final step for tonight. And then we'll see,
[01:29:36.000 --> 01:29:42.740]   maybe we'll even be able to get out a little bit early and get to the reception. So we're
[01:29:42.740 --> 01:29:47.680]   now going to take what we have and we're going to start using a large language model. So we're
[01:29:47.680 --> 01:29:51.420]   basically going to use the retrievers that we were just working on and we're going to take
[01:29:51.420 --> 01:29:56.820]   them into this prompt and we're going to have a language model generate an email for us.
[01:29:56.820 --> 01:30:01.900]   So this might be a little bit hard to see, but it's also in the notebook for when we go there.
[01:30:01.900 --> 01:30:04.900]   This is the prompt that we're going to use. We're going to instruct an LLM. We're going
[01:30:04.900 --> 01:30:08.600]   to give it a name. We're going to say it works for a certain company. And we're going to tell
[01:30:08.600 --> 01:30:13.800]   it to write an engaging email to a customer to promote unsummarized products relevant to them,
[01:30:13.800 --> 01:30:19.640]   given one, the current season and time of year. And two, recent searches and interests, which is
[01:30:19.640 --> 01:30:24.280]   going to be our search prompt. And so all of sort of the red things are where we're going to inject
[01:30:24.280 --> 01:30:28.680]   things inside of the prompt. And then the rag part comes in. So we're going to tell it,
[01:30:28.680 --> 01:30:35.320]   hey, please only use the below relevant products. So there's going to be what we're calling search
[01:30:35.320 --> 01:30:40.440]   products and recommendation products, which search products is going to be based on a vector search
[01:30:40.440 --> 01:30:44.680]   combined with a graph traversal. So that will give us something that matches the customer interest.
[01:30:44.680 --> 01:30:49.240]   The recommendation products are going to leverage our graph embeddings to give us additional
[01:30:49.240 --> 01:30:53.640]   recommendations that we can add to that. So there's going to be sort of two lists that it gets.
[01:30:53.640 --> 01:30:59.560]   And there's some other instruction there to tell it to only pick a certain number from those things
[01:30:59.560 --> 01:31:03.640]   and kind of be creative with that and make sure it aligns to the current season and time of year.
[01:31:04.680 --> 01:31:08.040]   And this is kind of what it looks like. I'll just go to the end of this thing. So
[01:31:08.040 --> 01:31:14.200]   if you were to think about the chain that we're going to put together, we're going to come in with
[01:31:14.200 --> 01:31:20.520]   basically four things. That search prompt, the customer ID, the customer name and the time of year.
[01:31:20.520 --> 01:31:24.520]   The search prompt is going to go with the customer ID for the personalized search,
[01:31:24.520 --> 01:31:30.760]   which is going to be that sort of peer group pattern. The customer ID is going to go directly
[01:31:30.760 --> 01:31:35.800]   to get recommendations based off of graph embeddings. And then these four things here,
[01:31:35.800 --> 01:31:40.040]   the products that were recommended here and the customer name and the time of year are going to
[01:31:40.040 --> 01:31:45.720]   go into the prompt to then generate an answer. So we're doing basically two retrievers here.
[01:31:45.720 --> 01:31:51.800]   One for recommendations and then another for basically search results. You can think of it that way.
[01:31:54.440 --> 01:32:04.520]   All right. So let's go and dive into the notebook. So we're going to use lane chain for this.
[01:32:04.520 --> 01:32:10.680]   We're going to instantiate the LLM that's going to be based off of GPT for Omni, which we have here.
[01:32:12.280 --> 01:32:18.280]   And then we are going to recreate two retrievers. So the first retriever here is going to be for the
[01:32:18.280 --> 01:32:24.440]   personalized search. This is going to use the text embeddings and then it's going to do this sort of
[01:32:24.440 --> 01:32:30.440]   post filtering pattern with that combined score, where we do this optional match to look at the peer
[01:32:30.440 --> 01:32:36.040]   group to kind of filter those results. We're going to create another function here based off of that.
[01:32:36.040 --> 01:32:42.200]   I'll zoom into this a little bit more. Where basically we are going to take the,
[01:32:42.200 --> 01:32:49.640]   this function is just so we can pass a customer ID parameter in. So this is the KG personalized
[01:32:49.640 --> 01:32:54.680]   search function, which is going to use this retrieval pattern. And then we have a KG recommendations
[01:32:54.680 --> 01:33:00.920]   function, which is going to use that customer also liked relationship that's going to just basically
[01:33:00.920 --> 01:33:06.840]   go off of customer history. And then both of these will sort of join, it'll do some formatting for the
[01:33:06.840 --> 01:33:14.600]   documents and return them for injection into the prompt. Here's the prompt itself. So this is just the
[01:33:14.600 --> 01:33:20.920]   prompt we look at in the slide before. It mentions, you know, customer name, time of year, and then it has
[01:33:20.920 --> 01:33:27.960]   the relevant products where you put in the search products and then other recommendations generated from
[01:33:27.960 --> 01:33:34.840]   the graph embedding. And then when you create the chain, so you can see here on this chain,
[01:33:34.840 --> 01:33:41.720]   we have four inputs, right? So the search products, which again comes from the personalized search pattern,
[01:33:41.720 --> 01:33:45.880]   the recommendation products, which comes from the recommendation pattern. So there's these two
[01:33:45.880 --> 01:33:52.120]   retrievers that are supplying each of these respectively, the customer name and the time of year and the
[01:33:52.120 --> 01:33:57.880]   customer interests as well. So I guess all five of these things, right, get passed and injected into the
[01:33:57.880 --> 01:34:03.720]   that prompt, go to the LLM. This is all a LangChain expression language. This is kind of a LangChain
[01:34:03.720 --> 01:34:09.480]   thing where we have this pipe operator that's just basically taking this dictionary of things and then
[01:34:09.480 --> 01:34:16.120]   passing it to be injected into the prompt, calls the LLM, in this case GPT-4O, and then just gets outputted.
[01:34:16.120 --> 01:34:22.760]   And so if we look at what it looks like when we invoke that chain, again, using our search prompt,
[01:34:22.760 --> 01:34:30.200]   which is DenimJeans, our customer ID and then I gave it a customer name and a time of year. And the customer
[01:34:30.200 --> 01:34:34.600]   name is probably something that could be stored in a database too, which is that this data was anonymized,
[01:34:34.600 --> 01:34:42.600]   so we don't have that, we don't have that in the database itself. But anyway, what this will do, you see
[01:34:42.600 --> 01:34:48.600]   it'll give me its responses, it'll make a subject header for the email. "Hi Alex, I hope this email finds
[01:34:48.600 --> 01:34:53.080]   you well and enjoy the start of the summer. As the days get warmer, it's a perfect time to refresh your
[01:34:53.080 --> 01:34:59.160]   wardrobe." And then it will give you the denim jeans. So these are the items that came from the search
[01:34:59.160 --> 01:35:06.840]   that was personalized to this user. And you see we get a set of five jean products here. "Summer essentials
[01:35:06.840 --> 01:35:12.040]   to pair with your denim." And then this is where it uses the graph embeddings to provide those other
[01:35:12.040 --> 01:35:18.360]   recommendations down here. So it's basically, right, using a combination of this vector search to pull
[01:35:18.360 --> 01:35:25.480]   things back, personalizing it so that it becomes specific to just this user, and then adding additional
[01:35:25.480 --> 01:35:30.680]   recommendations to that as well. And of course you can change the prompt to be just the recommendations
[01:35:30.680 --> 01:35:35.560]   portion if you wanted to or just the search portion or, you know, whatever, whatever was appropriate
[01:35:35.560 --> 01:35:43.080]   for the application at hand. And if we just looked at, so basically this cell, if I run it,
[01:35:43.080 --> 01:35:51.480]   all this next cell will do is show you the prompt, the full prompt that was set to the language model.
[01:35:51.480 --> 01:35:55.960]   So if we look at this, this is basically showing you, if I were to scroll all the way to the top,
[01:35:55.960 --> 01:36:01.160]   it provides quite a few products. You can see here this is the data that it retrieved and formatted from
[01:36:01.160 --> 01:36:07.640]   the database for the relevant products, all the different garments that it selected. And then if
[01:36:07.640 --> 01:36:13.000]   I were to go down more, it would eventually bring me down to the recommendation products, which I think
[01:36:13.000 --> 01:36:22.600]   it already did here. So if I go up further, yes, relevant products. And then it should give me about 10 of
[01:36:22.600 --> 01:36:27.480]   those. And then other recommendations from the graph embeddings that go along with that going down here.
[01:36:28.520 --> 01:36:34.120]   And then it basically chose from those products to generate that given response.
[01:36:34.120 --> 01:36:49.080]   Yes. Yeah. If you look at the way those queries were written in the cells before, I think the
[01:36:49.080 --> 01:36:54.760]   first one for the search responses, I limited them to 10. And then for the recommendations, I'm actually
[01:36:54.760 --> 01:37:00.360]   passing 100. So I'm passing quite a few. But yeah, eventually, if you provide enough of them,
[01:37:00.360 --> 01:37:08.120]   you will hit a context window issue. And then, so basically, once we have that, we can run a demo app.
[01:37:08.120 --> 01:37:16.920]   So in this case, we're using Gradio. This is just some examples, preset examples for that we can use in the
[01:37:16.920 --> 01:37:23.160]   application. And this is running the application. So I'll go ahead and give it a run. And if you have it in
[01:37:23.160 --> 01:37:30.040]   your notebook, it should just give you a link that you can go to. And basically, let me make this bigger
[01:37:30.040 --> 01:37:36.600]   so it's seeable. So here's just a UI of what we had before, right? So this is the example that we ran
[01:37:36.600 --> 01:37:44.760]   earlier. So if I say submit for this specific user, it should pull back hopefully in the next 20 seconds
[01:37:44.760 --> 01:37:51.400]   or so because the internet is slow. Normally, it's around 10 to 15 seconds. Yep. And this will pull
[01:37:51.400 --> 01:37:57.160]   back the email response. And the interesting thing about this is if I took, you see this customer ID
[01:37:57.160 --> 01:38:05.240]   is like D-A-A-E. If I select a different customer ID, but the same prompt, so say it's this person.
[01:38:06.600 --> 01:38:12.440]   So I click that and then, yes, this change to this other customer. This answer should
[01:38:12.440 --> 01:38:16.680]   be different. And if it isn't different, it's because they have a very similar
[01:38:16.680 --> 01:38:24.600]   peer group and a very similar piece in the graph. But if you see HW denim and skinny jeans, and then this,
[01:38:24.600 --> 01:38:30.520]   you'll see they get a bunch of different recommendations and search patterns. So the idea here,
[01:38:30.520 --> 01:38:36.520]   right, is even though these two individuals had the same interest based on their purchase behavior
[01:38:36.520 --> 01:38:41.080]   in the graph, we're able to give them very different recommendations because they exist in very
[01:38:41.080 --> 01:38:44.760]   different parts of the graph and have different interests based on their purchase history.
[01:38:44.760 --> 01:38:50.760]   And you can play around with this. Like if I, you'll see it'll give me some summer things here. If I
[01:38:50.760 --> 01:38:58.280]   change this to like February, right, this is nothing to do with graph. This is purely an LLM thing at this
[01:38:58.280 --> 01:39:03.240]   point and I submit it. It should, the email should change to winter and then it should give you,
[01:39:03.240 --> 01:39:09.560]   instead of summer must-haves, it should give you something about winter and it should be able to select
[01:39:09.560 --> 01:39:16.120]   different products down here that should hopefully, if the LLM is doing its job correctly,
[01:39:16.120 --> 01:39:19.640]   go for more winter related items like sweaters that you see here.
[01:39:19.640 --> 01:39:27.560]   So that's the, that's the full app that kind of leverages all the things that we just went over.
[01:39:27.560 --> 01:39:31.800]   Cool. Thank you so much, everyone. This was really great.
[01:39:31.800 --> 01:39:33.160]   Thank you so much.
[01:39:33.160 --> 01:39:36.920]   Thank you so much.
[01:39:36.920 --> 01:39:50.920]   Thank you so much.

