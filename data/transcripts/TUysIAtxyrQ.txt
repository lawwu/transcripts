
[00:00:00.000 --> 00:00:13.620]   Hello everyone, thank you for joining these this session so in this session we are going to talk
[00:00:13.620 --> 00:00:21.440]   about how you can build AI agents using cloud on vertex AI so before to start let's see the
[00:00:21.440 --> 00:00:28.500]   let's set the scene so as you probably know like building a agent is a very powerful with AI agents
[00:00:28.500 --> 00:00:33.980]   you can build such a cool applications but the reality is after you start developing and you know
[00:00:33.980 --> 00:00:39.060]   prototyping agents and let's assume that you are happy with what you build it's so hard to
[00:00:39.060 --> 00:00:45.640]   productionalize these agents right and the reason are essentially three so first of all you need to
[00:00:45.640 --> 00:00:51.880]   because right now to build agent you have so many frameworks that provides you know tools that provides
[00:00:51.880 --> 00:00:57.460]   capabilities that you can that you can use to enhance your agents like the landscape is so
[00:00:57.460 --> 00:01:02.140]   fragmented so you need to figure it out how to integrate the different frameworks and different
[00:01:02.140 --> 00:01:08.940]   tools to make the system work so the other the other reason is let's assume that you are capable
[00:01:08.940 --> 00:01:14.320]   of building one agent or a multi-agent system with one framework but at the same time you want to use
[00:01:14.320 --> 00:01:21.940]   different framework together it's not easy to like make make the communication happen between these two
[00:01:21.940 --> 00:01:26.940]   different agents and then even let's assume that even if you're able to build agents create this network of agents that are capable of communicating between them it's so hard to manage them in production because you need to take care of all the operation around the agents and the relative governance so all the monitoring capabilities the logging capabilities that you need to implement on your agent they are very hard to be managed in this sense
[00:01:26.940 --> 00:01:32.820]   able to build agents, create this network of agents that are capable of
[00:01:32.820 --> 00:01:37.820]   communicating between them, it's so hard to manage them in production because you
[00:01:37.820 --> 00:01:41.280]   need to take care of all the operation around the agents and the relative
[00:01:41.280 --> 00:01:45.700]   governance. So all the monitoring capabilities, the logging capabilities
[00:01:45.700 --> 00:01:50.820]   that you need to implement on your agent, they are very hard to be managed. In this
[00:01:50.820 --> 00:01:57.600]   sense, let's imagine that you will be able to have a toolkit that will
[00:01:57.600 --> 00:02:01.440]   allows you to standardize and develop your agent in a very efficient way and
[00:02:01.440 --> 00:02:06.840]   then together with this toolkit you you get a set of protocols that will allow
[00:02:06.840 --> 00:02:12.840]   your agent to consume tool and contacts with the LLM but at the same time connect
[00:02:12.840 --> 00:02:18.480]   with other agent in a seamless way and third you will you will get an agent
[00:02:18.480 --> 00:02:23.300]   platform that will allows you to deploy at scale these agent system and you
[00:02:23.300 --> 00:02:27.960]   know manage all the operations that are around these are these new kind of
[00:02:27.960 --> 00:02:35.300]   application. So with these challenges in mind and these three you know three main
[00:02:35.300 --> 00:02:41.580]   reason that we want to address that's why we define our own agent stack on Google
[00:02:41.580 --> 00:02:46.500]   Cloud and our agent stack is composed by four main components. So the first one is
[00:02:46.500 --> 00:02:51.320]   agent development kit which is an open source code first and developer friendly
[00:02:51.320 --> 00:02:57.540]   framework that will allows you to build evaluate and deploy your agents at scale.
[00:02:57.540 --> 00:03:03.480]   But in order to announce your agent you have a you need a way to standardize the
[00:03:03.480 --> 00:03:08.460]   agent communicate with different tools as I saw you before. So to address these
[00:03:08.460 --> 00:03:13.380]   challenges of protocols one one thing that we did when we design agent development kit
[00:03:13.380 --> 00:03:22.200]   is made and is making it compatible with MCP. So probably you know what is MCP you already heard
[00:03:22.200 --> 00:03:30.200]   about it but with MCP essentially you will make the agent compatible with several tools and in general application
[00:03:30.200 --> 00:03:39.020]   you will be you will provide your contacts to your application using LLMs. On top of MCP
[00:03:39.020 --> 00:03:55.200]   so we also introduce like these vertex AI engine engine which is essentially a managed platform that has been designed to deploy, manage and scale your AI agent in production and it takes care of all those operational challenges
[00:03:55.200 --> 00:04:04.020]   and you know possible capabilities that you need in order to deploy your agent in production and
[00:04:04.020 --> 00:04:12.840]   and finally to address the challenges of allow communication between different agent build with
[00:04:12.840 --> 00:04:25.020]   different frameworks we also introduce agent to agent protocol. So which is essentially you know open source an open source protocol that will allow you to create this seamless communication and collaboration between agents in whatever framework you built. So with this stack we are so today we are going to use this stack to build
[00:04:25.020 --> 00:04:42.020]   multi-agent systems and but before to do that let me to introduce myself I'm Ivan Nardini I'm a developer advocate at Google Cloud I'm based in Sunnyvale and today I want to go through this journey with you and the journey will start with building a very simple ADK agents using cloud and then we are going to announce these agents using some
[00:04:42.020 --> 00:05:00.840]   pre-built tools and MCP and MCP and finally we will deploy the agents on agent engine.
[00:05:00.840 --> 00:05:18.840]   As a bonus we will try to cover which I will try also to show you how you can connect multiple agents using agent to agent protocol but in case we are not we will not able to do that don't worry we are going to have a live webinar at the end of the month so we will show you how to do that later.
[00:05:18.840 --> 00:05:44.840]   With that being said we want to build an agent but to build an agent we need an LLM so let me show you how you can get access to cloud models on vertex.ai so cloud models on vertex.ai are accessible through vertex.ai model garden which is essentially a centralized hub where you can discover deploy and manage a wide variety of foundational and open models including cloud.
[00:05:44.840 --> 00:06:05.840]   So on model garden you will find the latest and greatest cloud model this morning we just roll out cloud 4 so I will show you and after you simply you know feel you know you provide some credential and everything you will get access to the model and you will be able to use it through API or through the console.
[00:06:05.840 --> 00:06:09.840]   So without further ado let me show you how you can get access to cloud.
[00:06:09.840 --> 00:06:32.840]   Okay so let's switch on the yes so for people that doesn't know vertex.ai this is how the vertex.ai console looks like so you vertex.ai provide a set of services to build both the generative.ai and predictive.ai application and model garden as I said is a centralized app that provides you several models from different you know model providers including cloud.
[00:06:32.840 --> 00:06:43.840]   including entropic in fact in fact in the partner session you will find the entropic models and here you can see all the entropic models that we provide including the latest that we released this morning.
[00:06:43.840 --> 00:07:05.840]   So in order to you can use the model garden to test this model so here is the vertex.ai vertex.ai studio which is our prompt UI that you can use for test this model as you see I already select cloud 3.4.7 sonnet which is the model that we are going to use today to build our agent.
[00:07:05.840 --> 00:07:24.840]   We are already integrating cloud 4.4 with IDK so stay tuned in the coming weeks but through this UI what you can do you can test the model and you know you can start you can start interacting with it and using the API that you can get here to integrate with your application.
[00:07:24.840 --> 00:07:37.840]   So with that being said now that you know more or less how you know to get access to cloud through vertex.ai let's go back to the presentation and let's start building agents using this model.
[00:07:37.840 --> 00:07:50.840]   So in this demo we are going to build a very simple agent which is a birthday planner agent.
[00:07:50.840 --> 00:08:05.840]   So it's an agent that essentially will allow you to organize a birthday party such as in teams and you know getting the guest list and so on and you know before to start this before to build this agent you need to know some concept related to ADK.
[00:08:05.840 --> 00:08:22.840]   Just one thing I know this session is supposed to be a workshop but because of the Wi-Fi issue that you've already faced I will I know we will already give you some credits and I will share the repository with you.
[00:08:22.840 --> 00:08:29.840]   So after this session you will be able to reproduce this code I'm going to show you at home and if you have questions you can always come back to me.
[00:08:29.840 --> 00:08:36.840]   Okay with that being said these are the core concept that you need to know about ADK in order to build an agent with the agent development kit.
[00:08:36.840 --> 00:08:41.840]   First of all agent development kit provides several type of agents that you can use.
[00:08:41.840 --> 00:08:50.840]   You already pre-built some you know pattern some agenting pattern including sequential agents that you can use in order to implement your application.
[00:08:50.840 --> 00:09:03.840]   But the simplest pattern that you can find is the one that we use with the LLM agent which essentially use just an LLM to feed to you know build to use the agent to build the agents.
[00:09:03.840 --> 00:09:11.840]   And so this class represents the brain of the agent and it supports several models including Claude.
[00:09:11.840 --> 00:09:19.840]   And essentially it requires you to set the model give the agent a name, some instructions and define the tool that you want to use.
[00:09:19.840 --> 00:09:23.840]   And then after you've done this you get your agent already up and running.
[00:09:23.840 --> 00:09:26.840]   With respect of tools you know what tool is.
[00:09:26.840 --> 00:09:31.840]   It's essentially a mean that you can use to you know assign some skills to the agent.
[00:09:31.840 --> 00:09:41.840]   And ADK we provide some pre-build tools that you can use but you can also define your own tools and integrate with the framework.
[00:09:41.840 --> 00:09:43.840]   So you have the agents you have the tool.
[00:09:43.840 --> 00:09:50.840]   In ADK you have this concept of runner that puts together everything and coordinates you know execute the agents.
[00:09:50.840 --> 00:09:56.840]   So you manage the session so the conversation state along the while you're running the agents.
[00:09:56.840 --> 00:10:00.840]   And it is integrated with a very nice CLI that you can see here.
[00:10:00.840 --> 00:10:10.840]   ADK run and ADK web that will allow you to interact with the agent programmatically or you know to a web UI that I will show you later.
[00:10:10.840 --> 00:10:26.840]   And then last important thing that I want to mention you have this concept of session which essentially will allow you to store the conversation and interact with the agent in a way that you know it remembers what you what you already discussed with him before.
[00:10:26.840 --> 00:10:27.840]   Okay.
[00:10:27.840 --> 00:10:30.840]   So with that being said I told you ADK support Claude.
[00:10:30.840 --> 00:10:39.840]   How it is support Claude with two you can use Claude in two ways with ADK through the light LLM integration which is something that I will assume you are familiar with.
[00:10:39.840 --> 00:10:49.840]   Or you can use the pre-built integration that we provide as a vertex AI team using Claude and the LLM registry which is the one that I will show you today.
[00:10:49.840 --> 00:10:54.840]   It's just a nice way you know to integrate the model with the with the interface.
[00:10:54.840 --> 00:11:01.840]   So with that being said let me show you how you can build an agent using using ADK.
[00:11:01.840 --> 00:11:10.840]   So this is the repository that you will you will get once you download from once you get once you clone the repo from GitHub.
[00:11:10.840 --> 00:11:14.840]   So in the repository you will have three agents we are going to cover them today.
[00:11:14.840 --> 00:11:16.840]   And the first one as I said is the birthday planner.
[00:11:16.840 --> 00:11:21.840]   So in order to build an agent with ADK all you need to do is providing essentially three files.
[00:11:21.840 --> 00:11:24.840]   The agent.py which contains the agent logics.
[00:11:24.840 --> 00:11:30.840]   The environment variable file which contains all the environment variables that you want to use for your agent.
[00:11:30.840 --> 00:11:33.840]   And an init file as you probably are familiar with.
[00:11:33.840 --> 00:11:36.840]   So just these three files will allow you to run the agent.
[00:11:36.840 --> 00:11:42.840]   And as you can see we design ADK to be so close to software engineering best practices.
[00:11:42.840 --> 00:11:45.840]   So this is something that you should be capable of running easily.
[00:11:45.840 --> 00:11:49.840]   With that being said here you can see how you can use ADK.
[00:11:49.840 --> 00:11:56.840]   So you need to import the LLM agent a class the cloud a class which is going to represent the cloud model that we are going to use today.
[00:11:56.840 --> 00:12:04.840]   And then you can introduce you can also use some other classes related to memory the runner that already explained.
[00:12:04.840 --> 00:12:08.840]   But with that being said once you get these once you import this class.
[00:12:08.840 --> 00:12:13.840]   This is all the bullet play code that you need to write in order to create your first agent.
[00:12:13.840 --> 00:12:16.840]   So you use the LLM agent class.
[00:12:16.840 --> 00:12:17.840]   You define a name.
[00:12:17.840 --> 00:12:18.840]   The model that you want to use.
[00:12:18.840 --> 00:12:20.840]   In this case the cloud 3.7.
[00:12:20.840 --> 00:12:21.840]   The description.
[00:12:21.840 --> 00:12:23.840]   So what the agent is going to do.
[00:12:23.840 --> 00:12:25.840]   And the instruction that you want to give to the agent.
[00:12:25.840 --> 00:12:26.840]   That's it.
[00:12:26.840 --> 00:12:28.840]   Once you have this you are ready to go.
[00:12:28.840 --> 00:12:31.840]   So all you need to do is that running.
[00:12:31.840 --> 00:12:34.840]   If you want to interact with the agent in a programmatic way.
[00:12:34.840 --> 00:12:36.840]   You can run ADK run.
[00:12:36.840 --> 00:12:40.840]   And then behind the scene it will start a session with your agent.
[00:12:40.840 --> 00:12:41.840]   Oh sorry.
[00:12:41.840 --> 00:12:42.840]   I forgot one thing.
[00:12:42.840 --> 00:12:44.840]   ADK run birthday.
[00:12:44.840 --> 00:12:46.840]   And then it will run a session.
[00:12:46.840 --> 00:12:48.840]   An interactive session with your agent.
[00:12:48.840 --> 00:12:51.840]   So from here you can start interacting with your agent.
[00:12:51.840 --> 00:12:54.840]   And you can start understanding how it works.
[00:12:54.840 --> 00:12:58.840]   And so in this way you can interactively develop the agents.
[00:12:58.840 --> 00:13:02.840]   And you can improve the agent depending on the task that you are trying to achieve.
[00:13:02.840 --> 00:13:03.840]   So again.
[00:13:03.840 --> 00:13:04.840]   Three files.
[00:13:04.840 --> 00:13:05.840]   One CLI.
[00:13:05.840 --> 00:13:06.840]   And you are done.
[00:13:06.840 --> 00:13:09.840]   And you can start improving your agents.
[00:13:09.840 --> 00:13:11.840]   So let's go back to the slide.
[00:13:11.840 --> 00:13:12.840]   Okay.
[00:13:12.840 --> 00:13:13.840]   Okay.
[00:13:13.840 --> 00:13:16.840]   So let's assume that you know you clone the repo.
[00:13:16.840 --> 00:13:18.840]   You get your agent up and running.
[00:13:18.840 --> 00:13:21.840]   Let's make things a little bit more complicated.
[00:13:21.840 --> 00:13:26.840]   So we want to extend our agents in a way that it becomes a multi-agent system.
[00:13:26.840 --> 00:13:29.840]   So we have this agent that it will give us suggestion for the birthday party.
[00:13:29.840 --> 00:13:34.840]   But then once we get the birthday party we want also you know to schedule some time in our agenda.
[00:13:34.840 --> 00:13:42.840]   For example for going and buy the gift for the party or you know just setting a reminder of the birthday day.
[00:13:42.840 --> 00:13:44.840]   So how you do that?
[00:13:44.840 --> 00:13:46.840]   You do you introduce you know tools.
[00:13:46.840 --> 00:13:51.840]   And the cool thing of ADK is that we didn't want to reinvent the wheel.
[00:13:51.840 --> 00:13:56.840]   So we by day zero we introduced this integration with MCP.
[00:13:56.840 --> 00:14:04.840]   So again I'm not going to explain you what it is MCP and the difference between you know the language specific tools or the API.
[00:14:04.840 --> 00:14:11.840]   The idea is essentially with MCP you standardize the way LLM get access to the context.
[00:14:11.840 --> 00:14:14.840]   Not only LLM but also agents.
[00:14:14.840 --> 00:14:18.840]   With ADK you have two ways to use MCP.
[00:14:18.840 --> 00:14:26.840]   So you can use MCP some MCP existing server and you know integrate them as a tool with ADK.
[00:14:26.840 --> 00:14:28.840]   This is something that we are going to do today.
[00:14:28.840 --> 00:14:38.840]   So whatever MCP server is out there you can use just like you can use today already with ADK without you reinventing you know the wheel in that sense.
[00:14:38.840 --> 00:14:47.840]   Or if you have ADK and you build some tool in ADK you can use MCP to deploy this tool and interact with other agents.
[00:14:47.840 --> 00:14:53.840]   So these are the two ways that you have that you can use to leverage NCP with ADK.
[00:14:53.840 --> 00:14:59.840]   So with that being said let me show you how you can use ADK with MCP.
[00:14:59.840 --> 00:15:02.840]   So let's go back here.
[00:15:02.840 --> 00:15:05.840]   Let me exit to this agent.
[00:15:05.840 --> 00:15:07.840]   And then let's go to.
[00:15:07.840 --> 00:15:11.840]   So this is the second agent.
[00:15:11.840 --> 00:15:22.840]   So again as I said now we want to what we want to do is that we want to introduce a calendar service agent which will allow me to schedule some time in my agenda.
[00:15:22.840 --> 00:15:34.840]   And because now we have two agents the birthday one and the calendar one we want to also introduce an orchestrator which route my you know request to the right agent depending on what I want to achieve.
[00:15:34.840 --> 00:15:42.840]   So in this particular case the birthday planner is exactly the same agent that we defined before except that now I want to create an hybrid system.
[00:15:42.840 --> 00:15:52.840]   Because for example like for scheduling for some forgetting some birthday idea I can use also a very you know I can use also a different model like Gemini.
[00:15:52.840 --> 00:16:02.840]   But then I have these calendar agents that in this case we use again cloud 3.5 with an NCP server to schedule some time in my agenda.
[00:16:02.840 --> 00:16:09.840]   So in order to use an MCP server we dedicate these are the two line of codes that you need to introduce.
[00:16:09.840 --> 00:16:19.840]   So you get you you get to the MCP server that you already have out there or you already created right or deployed as a as a serverless service.
[00:16:19.840 --> 00:16:21.840]   And then you create a connection with it.
[00:16:21.840 --> 00:16:28.840]   And then what happened behind the scene when you start building your agent when you run this command and you start building your agent.
[00:16:28.840 --> 00:16:34.840]   What it does he like get all the information all the requirements to run your MCP server.
[00:16:34.840 --> 00:16:40.840]   It converts these MCP servers as a tool and they use these MCP servers as a tool of the agent.
[00:16:40.840 --> 00:16:41.840]   That's it.
[00:16:41.840 --> 00:16:50.840]   But again the cool thing what I really believe is powerful already case that it will allows me with two line of codes to integrate any kind of NCP tool that you have already.
[00:16:50.840 --> 00:16:55.840]   Once you have these MCP tool you integrate it as a tool again in the our agent and you're done.
[00:16:55.840 --> 00:17:01.840]   Same similar things so now we have the birthday agent we have the calendar agent.
[00:17:01.840 --> 00:17:03.840]   This is how the organizer look like.
[00:17:03.840 --> 00:17:10.840]   So look at how easy it is to pass multiple agents in an orchestrator like this one.
[00:17:10.840 --> 00:17:17.840]   Again you all you need to do is defining better instruction because in this case this agent is going to orchestrate a multi-agent system.
[00:17:17.840 --> 00:17:28.840]   So you will define what agent like what each agent is capable of doing and then you pass all the agent as a tool in this orchestrator.
[00:17:28.840 --> 00:17:32.840]   So again it will figure it out what agent to use depending on your request.
[00:17:32.840 --> 00:17:35.840]   Once you have done this you are good to go.
[00:17:35.840 --> 00:17:53.840]   So what we can do is that running going back here local actually let me do this let me show you this.
[00:17:53.840 --> 00:18:00.840]   So before I show you how you can interact I can spin up an agent interactive programmatically programmatically.
[00:18:00.840 --> 00:18:03.840]   But because now this system is more complicated we have three agents right.
[00:18:03.840 --> 00:18:08.840]   We want something more a little bit more solid to try to understand what is happening behind the scene.
[00:18:08.840 --> 00:18:20.840]   So in any case you have these are web UI which allows you to debug and interact interact with your region.
[00:18:20.840 --> 00:18:22.840]   So this is the web UI.
[00:18:22.840 --> 00:18:26.840]   So in this case this is how it looks like.
[00:18:26.840 --> 00:18:31.840]   So the web UI we select the agent that I want to run and this is a.
[00:18:31.840 --> 00:18:39.840]   So in this case it's like what we did before except that now we have the we have the other agents.
[00:18:39.840 --> 00:18:42.840]   We have the multi-agent system that is running behind the scene.
[00:18:42.840 --> 00:18:50.840]   And as you can see here this UI will nicely provides you a way to see what is happening behind the scene with your agent.
[00:18:50.840 --> 00:18:58.840]   So while you are running the conversation with it you will see which agent is using for doing what.
[00:18:58.840 --> 00:19:04.840]   Okay with that being said so now you know also the web UI let's go back on the on the presentation.
[00:19:04.840 --> 00:19:05.840]   Thank you.
[00:19:05.840 --> 00:19:07.840]   Thank you.
[00:19:07.840 --> 00:19:08.840]   So.
[00:19:08.840 --> 00:19:09.840]   Let's.
[00:19:09.840 --> 00:19:19.840]   For the last part of this presentation I want to show you also how you can easily deploy the agent on agent engine.
[00:19:19.840 --> 00:19:22.840]   So in order to do that.
[00:19:22.840 --> 00:19:23.840]   Let me do this.
[00:19:23.840 --> 00:19:24.840]   Yeah.
[00:19:24.840 --> 00:19:25.840]   In order to do that.
[00:19:25.840 --> 00:19:28.840]   Let me first introduce you what what is on it.
[00:19:28.840 --> 00:19:31.840]   What is why why you need an agent engine like this one.
[00:19:31.840 --> 00:19:37.840]   Essentially when when you need to deploy agent at scale in order to do that you need to figure it out a lot of complexity.
[00:19:37.840 --> 00:19:38.840]   Right.
[00:19:38.840 --> 00:19:39.840]   You need to get your agent code.
[00:19:39.840 --> 00:19:40.840]   You need to.
[00:19:40.840 --> 00:19:47.840]   You know drop the agent in a one of those services like fast API or jungle.
[00:19:47.840 --> 00:19:52.840]   You need to build your container and then you know you need to figure it out your environment to run it.
[00:19:52.840 --> 00:19:59.840]   In this case you can be a GCP environment and then you need to handle all the operation related to infrastructure.
[00:19:59.840 --> 00:20:05.840]   And at the same time you also need to monitor these agents because at the end of the day is an application right.
[00:20:05.840 --> 00:20:14.840]   So with the agent engine what you can simply deploy the agent using a metal like agent engine creates and you will get your agent up and running.
[00:20:14.840 --> 00:20:22.840]   As well as all these observability all those ability capabilities and the monitoring that you need in order to deploy your agent.
[00:20:22.840 --> 00:20:29.840]   They are directly managed by the platform itself and also all the interaction that you have with the agents.
[00:20:29.840 --> 00:20:40.840]   They are going to be automatically collected by our logging system and you will directly use them to run some evaluation in a way that you know you can keep improving your agent a long time.
[00:20:40.840 --> 00:20:51.840]   So these are like this gives you an idea of the reason why you want to consider an agent engine and this give you the picture on the overall picture of the agent of vertex agent engine.
[00:20:51.840 --> 00:21:04.840]   So in this picture as you can see agent engine is capable of integrating you know any kind of agent framework.
[00:21:04.840 --> 00:21:29.840]   You can you can do that you can use those framework as well and then whatever tools and whatever model that you want and the agent engine will take care of deploying your agents and will enable all these observability capabilities of features that you need using some cloud tools and the evaluation part is also covered by one of our services which is the vertex AI evaluation service.
[00:21:29.840 --> 00:21:40.840]   So to wrap up like the agent engine capabilities so you can deploy any agent that like you can define agent in any framework that you want.
[00:21:40.840 --> 00:21:50.840]   You can use these manager on time to deploy these agents and then you will automatically get you will automatically be able to observe the behavior of the agent call the agent at scale.
[00:21:50.840 --> 00:22:01.840]   And we the agent engine is also has an integration with another with another services that we provide on Google code which is a agent space which I'm not going to cover today.
[00:22:01.840 --> 00:22:07.840]   But just to give an idea it's the gate that will allows your agent to go in the ends of business.
[00:22:07.840 --> 00:22:12.840]   So really you know have an impact of the agents that you are going to build in an enterprise context.
[00:22:12.840 --> 00:22:20.840]   But with that being said let me jump in the last lab that we are going to cover today.
[00:22:20.840 --> 00:22:26.840]   So I already show you how you can build the agent.
[00:22:26.840 --> 00:22:34.840]   So in this last lab what I want to show you is how you can easily deploy an agent with a few line of codes.
[00:22:34.840 --> 00:22:43.840]   So in the repository you will find these are these are module that essentially will allows you to iteratively deploy your agents.
[00:22:43.840 --> 00:22:50.840]   All you need to do to deploy an agent on vertex agent engine is providing the base requirements that your agent needs in order to run.
[00:22:50.840 --> 00:22:58.840]   And then as I said we provide already a class that will allows you to create an agent and point in this case on the agent engine.
[00:22:58.840 --> 00:23:06.840]   So in this class you have your agent that you define in this case we are going to deploy the first agent the birth planner agent.
[00:23:06.840 --> 00:23:11.840]   And then here you have the requirements you can provide extra packages if you want.
[00:23:11.840 --> 00:23:21.840]   But then again few line of codes to deploy your agent in a manager in a manager service that is scalable and will allows you to open your agent to several users.
[00:23:21.840 --> 00:23:25.840]   So with that being said let me run this script.
[00:23:25.840 --> 00:23:28.840]   So first of all let me close this session.
[00:23:28.840 --> 00:23:29.840]   Clear.
[00:23:29.840 --> 00:23:32.840]   Then let me go in the repository.
[00:23:32.840 --> 00:23:37.840]   Ls.
[00:23:37.840 --> 00:23:42.840]   Ls.
[00:23:42.840 --> 00:23:45.840]   And then here I have my module.
[00:23:45.840 --> 00:23:52.840]   So in this case I do Python deploy agent.
[00:23:52.840 --> 00:23:56.840]   So what happened behind the scene is that it will start deploying my agent.
[00:23:56.840 --> 00:24:00.840]   So you can monitor the deploying on the agent directly in the vertex console.
[00:24:00.840 --> 00:24:05.840]   Now this step is going to get some time as you can imagine because it's building the image and deploying the agents.
[00:24:05.840 --> 00:24:09.840]   So let me directly jump into the UI.
[00:24:09.840 --> 00:24:13.840]   So once you once the deployment of the agent will successfully run.
[00:24:13.840 --> 00:24:18.840]   What you will do is you will get an entry in the vertex AI agent engine UI.
[00:24:18.840 --> 00:24:22.840]   And from these UI you will be able to monitor this agent.
[00:24:22.840 --> 00:24:27.840]   So the query that he receives the latency that it takes.
[00:24:27.840 --> 00:24:30.840]   So how long it takes to respond to the query.
[00:24:30.840 --> 00:24:36.840]   And you will also monitor, you know, the CPU and the memory that the agent is using.
[00:24:36.840 --> 00:24:42.840]   So you can better understand if you allocate enough resources to serve this agent at scale.
[00:24:42.840 --> 00:24:45.840]   The engine is also manage session.
[00:24:45.840 --> 00:24:47.840]   So in this case I just deployed one.
[00:24:47.840 --> 00:24:49.840]   So we don't start a session yet.
[00:24:49.840 --> 00:24:51.840]   But here you will see the session.
[00:24:51.840 --> 00:24:56.840]   And it will give you all the information that you need in order, you know, to integrate this agent in application.
[00:24:56.840 --> 00:25:01.840]   Both in a real time or streaming depending on the method that you want to use.
[00:25:01.840 --> 00:25:06.840]   And you can always check the details of the of the deployment.
[00:25:06.840 --> 00:25:08.840]   Okay, so let's go.
[00:25:08.840 --> 00:25:11.840]   So now you have also an idea of how to deploy the agent.
[00:25:11.840 --> 00:25:13.840]   Let's go back to slide.
[00:25:13.840 --> 00:25:14.840]   Thank you.
[00:25:14.840 --> 00:25:16.840]   So as I said, this was a bonus part.
[00:25:16.840 --> 00:25:17.840]   I don't think we are going to call.
[00:25:17.840 --> 00:25:18.840]   We have time to cover it.
[00:25:18.840 --> 00:25:22.840]   But what I want to tell you is that let's assume that you build your agent.
[00:25:22.840 --> 00:25:24.840]   You deploy it on agent engine, right?
[00:25:24.840 --> 00:25:28.840]   And right now we build all our agents using just ADK.
[00:25:28.840 --> 00:25:35.840]   But what if you want to deploy or build your agent, build and deploy your agent using land chain, crew AI or whatever framework.
[00:25:35.840 --> 00:25:38.840]   As I already said, agent engine support this.
[00:25:38.840 --> 00:25:45.840]   But what the main problem is that you don't have a way to connect these agents that are built with different framework together, right?
[00:25:45.840 --> 00:25:49.840]   So that's when you need a protocol to do that.
[00:25:49.840 --> 00:25:58.840]   So in a world where you are going to have multiple agents that they are built and deployed with different framework.
[00:25:58.840 --> 00:26:06.840]   There is this need to find a common language between these agents to interact and collaborate in order to achieve some task.
[00:26:06.840 --> 00:26:11.840]   And that's why as a Google Cloud, we introduce agent to agent protocol.
[00:26:11.840 --> 00:26:21.840]   So again, it's an open protocol that has been designed to enhance, to foster the agent collaboration using very simple concept that I will show you in a minute.
[00:26:21.840 --> 00:26:27.840]   But the key thing that I want to share with you is that has been already designed to be enterprise ready.
[00:26:27.840 --> 00:26:33.840]   So it has a bunch of features that will allow you to govern in a secure way your agent.
[00:26:33.840 --> 00:26:44.840]   And again, also in this case, we didn't invent the wheel because it's based on some standard protocol, HTTP, JSON-RCP, something that is common adopting in the industry.
[00:26:44.840 --> 00:26:49.840]   The concept that you need to know about 8-Way is the concept of agent skills.
[00:26:49.840 --> 00:26:53.840]   So which essentially describe the function or the capability of the agents.
[00:26:53.840 --> 00:26:58.840]   And it's like a business card of your agent with respect to other agents.
[00:26:58.840 --> 00:27:05.840]   And then you have the agent skills describe what the agent is capable of doing.
[00:27:05.840 --> 00:27:09.840]   So you manage the function that the agent has.
[00:27:09.840 --> 00:27:14.840]   And then you have the agent card that essentially is a digital business card for the agent
[00:27:14.840 --> 00:27:21.840]   with allow other agent or other application to know what are the skills of the agent and how to interact with it.
[00:27:21.840 --> 00:27:23.840]   So one is describe the agent.
[00:27:23.840 --> 00:27:27.840]   The other one describe what is the agent capable of doing to the other agents.
[00:27:27.840 --> 00:27:33.840]   And then, as before, you have an agent executor that essentially manages the communication, the request,
[00:27:33.840 --> 00:27:37.840]   and the response that this system generates between agents.
[00:27:37.840 --> 00:27:45.840]   So with these three concepts, you can build a system like this one where you will essentially have multiple agents
[00:27:45.840 --> 00:27:58.840]   written with different framework communicating between each other in order to achieve a particular and more complex task rather than the one we built today of, you know, scheduling or buying a birthday gift.
[00:27:58.840 --> 00:28:00.840]   So we are not going to cover this today.
[00:28:00.840 --> 00:28:05.840]   But again, as I said at the beginning, we are going to have a live webinar at the end of the month.
[00:28:05.840 --> 00:28:09.840]   So I will share with you the QR code.
[00:28:09.840 --> 00:28:13.840]   So just to recap, we start from these three main problems, right?
[00:28:13.840 --> 00:28:18.840]   Building agents is powerful, but there are several challenges when you want to put them in production.
[00:28:18.840 --> 00:28:20.840]   You have a fragmented landscape.
[00:28:20.840 --> 00:28:23.840]   There are some integration complexity that you need to manage.
[00:28:23.840 --> 00:28:32.840]   And even if you are capable of fixing this, you have to manage all the operational overhead that you need to handle in order to deploy these agents.
[00:28:32.840 --> 00:28:43.840]   And then that's when you want to enable, like, you want to get access to a toolkit, protocols, and engine platform that at the end it allows you to standardize the way you build your agent and scale them to production.
[00:28:43.840 --> 00:28:52.840]   And to give you this kind of tool, we put together this agentic stack using ADK, MCP, agent engine, and end way.
[00:28:52.840 --> 00:29:03.840]   It will essentially allow you to confidently build a genetic system and scale them in production as required.
[00:29:03.840 --> 00:29:04.840]   Okay.
[00:29:04.840 --> 00:29:05.840]   So, scanner alert.
[00:29:05.840 --> 00:29:08.840]   So, please get your phone out.
[00:29:08.840 --> 00:29:13.840]   I'm going to share with you some useful QR codes.
[00:29:13.840 --> 00:29:16.840]   So, the first one that I want to share with you is code.
[00:29:16.840 --> 00:29:21.840]   So, in this repository, you will find all the code related to ADK.
[00:29:21.840 --> 00:29:25.840]   So, samples, you know, getting start, everything you will find here.
[00:29:25.840 --> 00:29:28.840]   Three, two, one.
[00:29:28.840 --> 00:29:29.840]   Okay.
[00:29:29.840 --> 00:29:37.840]   And then, if you want to know how, if you want, I mean, we covered this in 30 minutes, but it can be like a one hour workshop.
[00:29:37.840 --> 00:29:42.840]   So, here you can find a webinar we are going to run together with Anthropic next month.
[00:29:42.840 --> 00:29:44.840]   And where we show also the integration with 8Way.
[00:29:44.840 --> 00:29:46.840]   So, please scan this code.
[00:29:46.840 --> 00:29:49.840]   Three, two, one.
[00:29:49.840 --> 00:29:50.840]   Okay.
[00:29:50.840 --> 00:29:51.840]   Okay.
[00:29:51.840 --> 00:29:54.840]   And then, I mean, I was fast.
[00:29:54.840 --> 00:29:58.840]   So, I assume that you have several questions.
[00:29:58.840 --> 00:30:00.840]   So, feel free to reach out.
[00:30:00.840 --> 00:30:03.840]   I'm always happy to answer your questions.
[00:30:03.840 --> 00:30:06.840]   But with that being said, I hope you enjoyed the session.
[00:30:06.840 --> 00:30:07.840]   I am just 20 seconds late.
[00:30:07.840 --> 00:30:08.840]   So, I hope you enjoyed.
[00:30:08.840 --> 00:30:09.840]   And, yeah.
[00:30:09.840 --> 00:30:12.840]   Thank you for attending this.
[00:30:12.840 --> 00:30:13.840]   attending this.
[00:30:13.840 --> 00:30:14.840]   Thank you.
[00:30:14.840 --> 00:30:15.840]   Thank you.
[00:30:15.840 --> 00:30:17.840]   Thank you.
[00:30:17.840 --> 00:30:19.840]   Thank you.
[00:30:19.840 --> 00:30:21.840]   Thank you.

