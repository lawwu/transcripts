
[00:00:00.780 --> 00:00:02.660]   - Hi, I'm Jeremy Howan.
[00:00:02.660 --> 00:00:04.160]   - Hi, I'm Jonath.
[00:00:04.160 --> 00:00:05.640]   - Hi, I'm Nate.
[00:00:05.640 --> 00:00:07.320]   - We wanted to give you a quick introduction
[00:00:07.320 --> 00:00:08.560]   here to FastHTML.
[00:00:08.560 --> 00:00:11.200]   Have a look at some of these things that we made.
[00:00:11.200 --> 00:00:13.580]   - So this first example is a chatbot that I made
[00:00:13.580 --> 00:00:16.200]   to interact with ChatGDT.
[00:00:16.200 --> 00:00:18.320]   You may need to try out a styling library
[00:00:18.320 --> 00:00:20.720]   for these beautiful looking chat bubbles.
[00:00:20.720 --> 00:00:22.160]   And this is the entire source code.
[00:00:22.160 --> 00:00:23.920]   There's no other components to it.
[00:00:23.920 --> 00:00:27.320]   - And this is an app that I made
[00:00:27.320 --> 00:00:29.880]   based off of Conway's GamerLife
[00:00:29.880 --> 00:00:32.880]   that allows multiple users
[00:00:32.880 --> 00:00:35.240]   to be able to play the game of life.
[00:00:35.240 --> 00:00:38.200]   And the backend, it uses WebSockets.
[00:00:38.200 --> 00:00:41.160]   And as you can see, the code is quite small.
[00:00:41.160 --> 00:00:43.040]   - Here's my little demo.
[00:00:43.040 --> 00:00:45.640]   It's maybe the most uninteresting one in some ways,
[00:00:45.640 --> 00:00:48.040]   but I like it 'cause it's an example of like everything.
[00:00:48.040 --> 00:00:51.280]   It's markdown, it's drag and drop.
[00:00:51.280 --> 00:00:53.520]   It's a complete custom login system.
[00:00:53.520 --> 00:00:57.600]   And that entire thing also fits onto a single screen
[00:00:57.600 --> 00:00:59.400]   of code written from scratch.
[00:00:59.840 --> 00:01:02.080]   - Other people are making cool stuff with this as well.
[00:01:02.080 --> 00:01:04.160]   If you know a bit of web programming already,
[00:01:04.160 --> 00:01:06.000]   you'll get started real fast.
[00:01:06.000 --> 00:01:09.600]   Legendary author and web programmer, Daniel Roy-Greenfield,
[00:01:09.600 --> 00:01:11.520]   said he would like to give it a try.
[00:01:11.520 --> 00:01:14.240]   And within 45 minutes of starting out with FastHTML,
[00:01:14.240 --> 00:01:15.360]   he sent me a screenshot and said,
[00:01:15.360 --> 00:01:18.520]   "Look, I've just created a complete blog system."
[00:01:18.520 --> 00:01:19.640]   There's lots of great ways
[00:01:19.640 --> 00:01:22.000]   to create web applications nowadays.
[00:01:22.000 --> 00:01:23.480]   Data scientists in particular
[00:01:23.480 --> 00:01:26.400]   love these rapid dashboarding apps
[00:01:26.400 --> 00:01:29.600]   like Radio and Streamlet.
[00:01:29.600 --> 00:01:31.640]   What we've heard though, and we found ourselves,
[00:01:31.640 --> 00:01:33.520]   is that when you're ready to go to the next level
[00:01:33.520 --> 00:01:36.160]   beyond your dashboard or proof of concept,
[00:01:36.160 --> 00:01:38.480]   things like this require rewriting from scratch
[00:01:38.480 --> 00:01:39.800]   in a totally different framework
[00:01:39.800 --> 00:01:41.760]   and learning a whole lot of new skills.
[00:01:41.760 --> 00:01:45.240]   Lots of people have created lots of fantastic
[00:01:45.240 --> 00:01:47.000]   web applications in Django.
[00:01:47.000 --> 00:01:50.120]   For example, Instagram is written in Django.
[00:01:50.120 --> 00:01:52.200]   But it's pretty complicated.
[00:01:52.200 --> 00:01:53.640]   This is the getting started,
[00:01:53.640 --> 00:01:57.880]   setting up a new project example in less than five minutes.
[00:01:57.880 --> 00:01:59.800]   One great way to write web apps
[00:01:59.800 --> 00:02:02.680]   is with something like FastAPI on the backend
[00:02:02.680 --> 00:02:06.960]   and something like React or Svelte or Vue on the front end.
[00:02:06.960 --> 00:02:10.160]   You can create nice, sophisticated apps with this,
[00:02:10.160 --> 00:02:12.720]   but there's a lot to learn,
[00:02:12.720 --> 00:02:15.440]   particularly if you don't know JavaScript
[00:02:15.440 --> 00:02:16.520]   or TypeScript already,
[00:02:16.520 --> 00:02:18.160]   and then you've got a few other things
[00:02:18.160 --> 00:02:20.360]   to learn about as well.
[00:02:20.360 --> 00:02:22.920]   I've been writing web applications for years.
[00:02:22.920 --> 00:02:26.200]   I created the framework that FastMail is built on.
[00:02:26.200 --> 00:02:29.160]   I started it over 25 years ago now.
[00:02:29.160 --> 00:02:31.000]   It's had millions of users.
[00:02:31.000 --> 00:02:34.080]   A lot of what I learned from that is now built into this.
[00:02:34.080 --> 00:02:35.040]   And ever since then,
[00:02:35.040 --> 00:02:36.640]   I've been looking for better and better ways
[00:02:36.640 --> 00:02:39.920]   to create web frameworks and to create web applications.
[00:02:39.920 --> 00:02:41.800]   I have hundreds of thousands of views
[00:02:41.800 --> 00:02:46.800]   of my tutorials on Flask, AngularJS, C#, and so forth.
[00:02:46.800 --> 00:02:50.560]   With FastHTML, this is by far the most excited
[00:02:50.560 --> 00:02:53.240]   I've ever been about web programming.
[00:02:53.240 --> 00:02:55.840]   I think it makes it so much easier,
[00:02:55.840 --> 00:02:59.280]   and I can't wait to see what you can do with it.
[00:02:59.280 --> 00:03:01.480]   So we're gonna show you how to get started
[00:03:01.480 --> 00:03:04.600]   with building that to-do web application
[00:03:04.600 --> 00:03:06.880]   to create this source code that you see here.
[00:03:06.880 --> 00:03:09.400]   - Okay, so Jeremy, where's the rest of this?
[00:03:09.400 --> 00:03:11.280]   Can you show us how to create the scaffolding
[00:03:11.280 --> 00:03:13.600]   and templates that go along with this app?
[00:03:13.600 --> 00:03:15.120]   - There is no create scaffolding.
[00:03:15.120 --> 00:03:17.240]   There is no create FastHTML app.
[00:03:17.240 --> 00:03:19.160]   You just start typing into a window.
[00:03:19.160 --> 00:03:21.040]   That's all you need, one Python file.
[00:03:21.040 --> 00:03:26.120]   - Wait, what about the front-end JavaScript code?
[00:03:26.120 --> 00:03:27.760]   - There is no front-end JavaScript code.
[00:03:27.760 --> 00:03:30.720]   You just type into one Python file.
[00:03:30.720 --> 00:03:33.000]   Let's start typing the Python file right now.
[00:03:33.000 --> 00:03:34.560]   Jono, take it away.
[00:03:34.560 --> 00:03:36.280]   - Fantastic.
[00:03:36.280 --> 00:03:38.640]   Okay, so we're in a single Python file,
[00:03:38.640 --> 00:03:40.400]   and the app here is going to define
[00:03:40.400 --> 00:03:42.280]   some different routes that we can hit.
[00:03:42.280 --> 00:03:43.480]   So you could have different routes
[00:03:43.480 --> 00:03:45.480]   for different pages, for example.
[00:03:45.480 --> 00:03:48.920]   And here we're displaying some code and running the app.
[00:03:48.920 --> 00:03:51.040]   This has got something like live reloading
[00:03:51.040 --> 00:03:51.880]   switched on by default,
[00:03:51.880 --> 00:03:55.160]   so you can see all the changes that you make in real time.
[00:03:55.160 --> 00:03:56.080]   So whenever we're building an app,
[00:03:56.080 --> 00:03:58.120]   we want to be able to show some content,
[00:03:58.120 --> 00:03:59.920]   but we don't have to type the HTML ourselves.
[00:03:59.920 --> 00:04:00.960]   We use templates.
[00:04:00.960 --> 00:04:03.280]   And so FastHTML has all of these built-in tags
[00:04:03.280 --> 00:04:04.840]   that we can use to construct
[00:04:04.840 --> 00:04:07.440]   the HTML programmatically in Python.
[00:04:07.440 --> 00:04:08.760]   Here we're creating a to-do list,
[00:04:08.760 --> 00:04:11.320]   which is the list of multiple items,
[00:04:11.320 --> 00:04:14.000]   and we're seeing if we can display that component.
[00:04:14.000 --> 00:04:16.200]   So we have this idea of nested components
[00:04:16.200 --> 00:04:17.600]   starting to merge here.
[00:04:17.600 --> 00:04:19.880]   We can create these with Python list comprehensions
[00:04:19.880 --> 00:04:23.120]   and so on, and start to build up the UI.
[00:04:23.120 --> 00:04:26.520]   So let's add a form that lets us specify new to-dos.
[00:04:26.520 --> 00:04:28.680]   And then we need a way for these UI elements
[00:04:28.680 --> 00:04:29.560]   to interact with the app.
[00:04:29.560 --> 00:04:31.520]   So rather than going to whole new pages,
[00:04:31.520 --> 00:04:33.760]   what we're going to do here is do something called HTMX,
[00:04:33.760 --> 00:04:36.160]   which plays really nicely with FastHTML.
[00:04:36.160 --> 00:04:38.680]   We trigger an event, send a message to our server,
[00:04:38.680 --> 00:04:40.080]   and then we're going to have a new route
[00:04:40.080 --> 00:04:42.800]   that responds to that, in this case, post request,
[00:04:42.800 --> 00:04:44.320]   asking us to add a new to-do.
[00:04:46.240 --> 00:04:48.720]   HTMX also lets you, doesn't refresh the whole page,
[00:04:48.720 --> 00:04:50.080]   it just updates specific parts of it,
[00:04:50.080 --> 00:04:53.000]   so that's why we have the to-do list section here.
[00:04:53.000 --> 00:04:54.880]   And we're adding to the end of it any new to-dos
[00:04:54.880 --> 00:04:56.600]   that are added by that button.
[00:04:56.600 --> 00:05:02.240]   - All right, so let's add some persistency to this app.
[00:05:02.240 --> 00:05:05.440]   So you can use any sort of database,
[00:05:05.440 --> 00:05:09.720]   but already built into FastHTML is SQLite.
[00:05:09.720 --> 00:05:13.360]   So in our Fast app, we can set where our database
[00:05:13.360 --> 00:05:16.440]   is going to be stored and some of the fields,
[00:05:16.440 --> 00:05:21.040]   as well as which one's going to be the private primary key.
[00:05:21.040 --> 00:05:24.200]   We can update our TD list to go ahead
[00:05:24.200 --> 00:05:27.560]   and go through all of the to-dos in our database.
[00:05:27.560 --> 00:05:31.920]   If we refresh that, we can see that it gets returned,
[00:05:31.920 --> 00:05:33.640]   but it doesn't get added to the database,
[00:05:33.640 --> 00:05:35.960]   so let's go ahead and insert that.
[00:05:35.960 --> 00:05:38.240]   Now, as you can see, it's getting added.
[00:05:38.240 --> 00:05:43.240]   We don't really render the returned post request,
[00:05:43.560 --> 00:05:46.880]   HTML, so let's go ahead and add a little rendering function
[00:05:46.880 --> 00:05:48.320]   that makes it a little bit prettier.
[00:05:48.320 --> 00:05:51.360]   We can make this for loop comprehension
[00:05:51.360 --> 00:05:53.480]   a little bit nicer, and as you can see,
[00:05:53.480 --> 00:05:58.480]   now we have a very beautiful rendering of the to-dos.
[00:05:58.480 --> 00:06:02.080]   - So from here, really, it's just about adding
[00:06:02.080 --> 00:06:03.120]   all the features you've won.
[00:06:03.120 --> 00:06:04.280]   You've actually, we've shown you
[00:06:04.280 --> 00:06:06.200]   all the key concepts you need to know.
[00:06:06.200 --> 00:06:09.000]   You know that you can use any HTML tag,
[00:06:09.000 --> 00:06:11.280]   but you can now create them as Python functions.
[00:06:11.280 --> 00:06:14.120]   You can compose them together to create component libraries
[00:06:14.120 --> 00:06:15.480]   for other people to use.
[00:06:15.480 --> 00:06:17.800]   You can use any CSS frameworks
[00:06:17.800 --> 00:06:19.960]   or Web Component frameworks you like.
[00:06:19.960 --> 00:06:22.520]   So here, let's go ahead and add a delete link as well.
[00:06:22.520 --> 00:06:24.080]   So when we click on the delete link,
[00:06:24.080 --> 00:06:26.080]   it's gonna call delete on the server.
[00:06:26.080 --> 00:06:28.360]   So we create a function called delete
[00:06:28.360 --> 00:06:30.560]   and just go to dos.delete.
[00:06:30.560 --> 00:06:33.280]   We'll delete the ID that we're being passed,
[00:06:33.280 --> 00:06:34.720]   and now we've got delete tags.
[00:06:34.720 --> 00:06:35.560]   There they are.
[00:06:35.560 --> 00:06:37.120]   They're done.
[00:06:37.120 --> 00:06:39.120]   You can add anything from the entirety
[00:06:39.120 --> 00:06:40.560]   of the foundations of the web.
[00:06:40.560 --> 00:06:43.600]   So for example, you could add authentication
[00:06:43.600 --> 00:06:47.840]   by taking advantage of basic auth in your web browser.
[00:06:47.840 --> 00:06:50.520]   So now we've got an authenticated web app.
[00:06:50.520 --> 00:06:52.040]   We can add a logout by using
[00:06:52.040 --> 00:06:54.160]   your browser's logout functionality.
[00:06:54.160 --> 00:06:56.080]   So all of the functionality of the web
[00:06:56.080 --> 00:06:58.680]   is here for you to use.
[00:06:58.680 --> 00:07:01.000]   All of the components that exist,
[00:07:01.000 --> 00:07:02.920]   all of the web frameworks that exist,
[00:07:02.920 --> 00:07:05.880]   all of the CSS libraries that exist,
[00:07:05.880 --> 00:07:07.080]   they're now for you.
[00:07:07.080 --> 00:07:10.480]   And you can deploy it with a single line of code
[00:07:10.480 --> 00:07:14.080]   and within a minute or so, it's done.
[00:07:14.080 --> 00:07:16.960]   - So we've all been having a ton of fun writing examples.
[00:07:16.960 --> 00:07:18.000]   Do go check out our docs.
[00:07:18.000 --> 00:07:19.720]   We're gonna keep adding more and more examples
[00:07:19.720 --> 00:07:21.080]   and documentation as we go.
[00:07:21.080 --> 00:07:22.760]   And I think you'll be able to get something there
[00:07:22.760 --> 00:07:24.560]   that you can get started with,
[00:07:24.560 --> 00:07:27.040]   and we're really looking forward to seeing what you build.
[00:07:27.040 --> 00:07:29.620]   (upbeat music)

