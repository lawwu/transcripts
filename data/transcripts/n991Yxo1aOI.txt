
[00:00:00.000 --> 00:00:19.640]   Okay, so my name is Itamar Friedman, CEO and co-founder of Codo, and I'm going to talk about,
[00:00:19.640 --> 00:00:26.320]   yeah, Vibe Coding, but more on the confidence part, and why, this is maybe surprising, why CLI
[00:00:26.320 --> 00:00:33.760]   might be the new interface leader for that, and we are soft launching a CLI tool right now,
[00:00:33.760 --> 00:00:40.080]   five minutes ago, so you can go and install it, it's soft launch, play with it, give us feedback,
[00:00:40.080 --> 00:00:46.160]   there is some capacity, and in order to verify who is in the audience, just like if you can tell me if
[00:00:46.160 --> 00:00:54.880]   you tried Cloud Code or Codec CLI, okay, and I guess if I ask about AIDEs, you would also do that,
[00:00:54.880 --> 00:01:01.840]   right, and the question is why, and I'm going to talk about it a bit, okay. So the agenda is that,
[00:01:01.840 --> 00:01:08.400]   I'm actually going to really zoom out to the Gen 3.0, what do I mean by that, and from the autocomplete
[00:01:08.400 --> 00:01:14.480]   to the multi-agent workflow, and workflows, you see it's a theme that's returning here, CLI is
[00:01:14.480 --> 00:01:20.320]   something that can support that, and how do we believe that Codo is going to be the real shift in
[00:01:20.320 --> 00:01:27.280]   software development, and like why is the CLI is the future, and you know, being able to do vibe coding
[00:01:27.280 --> 00:01:31.680]   with confidence, and eventually I'm going to connect, do zoom out again, I'm going to zoom in, zoom out,
[00:01:31.680 --> 00:01:38.240]   even with a demo, and connect the dots, and I will say what, explain a bit what is Codo, I didn't do it
[00:01:38.240 --> 00:01:45.120]   right now, and we'll do it a bit later, but that's something I'm going to cover shortly. So AI for
[00:01:45.120 --> 00:01:50.960]   developers, and I just think that most people here are developers according to the amount of hands that
[00:01:50.960 --> 00:01:56.800]   were raised, so I think like we first got some tools that we liked, AI tools, then we got some tools that we
[00:01:56.800 --> 00:02:05.600]   loved, and I'm not that sure that we actually get tools into our hands that completely become a game
[00:02:05.600 --> 00:02:12.080]   changer for us. Okay, it's maybe unpopular opinion, I'm going to elaborate a bit, so in order to do that,
[00:02:12.080 --> 00:02:17.120]   I'm going to differentiate developers between noobs and enterprise, it's a bit weird, like it's not
[00:02:17.120 --> 00:02:23.200]   necessarily juniors, like there are juniors in enterprise, right, but still, you know, like let's use
[00:02:23.200 --> 00:02:30.000]   that for a second, noobs versus enterprise, so I think gen 1.0 was the autocomplete moment, right,
[00:02:30.000 --> 00:02:36.880]   we started being able to generate writing our code and getting a few lines ahead of us, we really liked
[00:02:36.880 --> 00:02:42.720]   that, if you weren't a developer, like you couldn't really do more, right, so you needed to be a developer
[00:02:42.720 --> 00:02:49.440]   already, and then came the gen 2.0, the chat, the agentic chat, and I think like we saw even junior
[00:02:49.440 --> 00:02:54.640]   developers generating much more lines of code, maybe the seniors or the enterprise liked it,
[00:02:54.640 --> 00:03:00.320]   but also had a lot of problems with it, they need to review much more code, not necessarily high quality
[00:03:00.320 --> 00:03:07.280]   code, I hear that a lot, and I'm going to show you like 500 tweets about it, not really, but from some
[00:03:07.280 --> 00:03:13.760]   opinion leaders, and I think that the game changer moment is when we will move from chat, agentic chat,
[00:03:13.760 --> 00:03:21.600]   to actually being able to, and as a spoiler, command, command line interface, to give commands to our
[00:03:21.600 --> 00:03:27.040]   agents as if they're like team members, and they do end-to-end flow, what is an end-to-end flow is
[00:03:27.040 --> 00:03:32.160]   something I'm going to talk about a bit, and I think like you will see different players and different
[00:03:32.160 --> 00:03:38.560]   parts of this map, like I mean different tools, let's think about it again, so I think like in the
[00:03:38.560 --> 00:03:43.120]   an autocomplete moment, we saw first ID plugins, again it's not a game changer, I'm just like going
[00:03:43.120 --> 00:03:50.960]   to complete more lines of code for you, we liked it, and then let's rethink how we do coding inside
[00:03:50.960 --> 00:03:58.560]   ID, so we saw ID forks, and then what's the third wave, sometimes I hear forking people, I didn't say that,
[00:03:58.560 --> 00:04:05.120]   what I think is actually we're going to see is like AI across the STLC, okay, like being able to
[00:04:05.120 --> 00:04:14.080]   do end-to-end flows that are specific, closing a task that is specific in the STLC, but more importantly,
[00:04:14.080 --> 00:04:21.040]   using AI across the STLC, again, not only in the ID, hence, how do we do that, command line, right,
[00:04:21.040 --> 00:04:27.600]   it's one of those tools, a lot of spoilers, so I think when we had the aha moment with the
[00:04:27.600 --> 00:04:32.800]   autocomplete, the next aha moment was, you know, all the hype around vibe coding, and I'm going to touch
[00:04:32.800 --> 00:04:38.800]   about that, and I think the next thing that I think we're going to hear about is like, hey, I'm really
[00:04:38.800 --> 00:04:46.160]   doing 100x, choose a number, 10x, 50x, 100x development, and I'm doing that with confidence,
[00:04:46.160 --> 00:04:52.880]   not just like vibing through it, I think that will be a game changer moment for us, it means that we
[00:04:52.880 --> 00:04:58.640]   totally broke the way we work, we're going to get to that, so I think like, I differentiated between,
[00:04:58.640 --> 00:05:03.280]   I separated between noobs and enterprise, for example, I think for noobs, it means end-to-end means,
[00:05:03.280 --> 00:05:08.800]   for example, that you prompt and get a software, a fully managed software for you, right, we, I guess
[00:05:08.800 --> 00:05:13.920]   we're all playing with, even if you're a developer, you're doing some POVs, or some side, or being able
[00:05:13.920 --> 00:05:20.240]   to do some simple games, but then in the enterprise setup, in the heavy-duty setup, then basically,
[00:05:20.240 --> 00:05:26.240]   what means for us, like, AI cross-desk, you'll see as reliable, versatile workflows, and when I say
[00:05:26.240 --> 00:05:31.520]   workflows, we had a few sessions, amazing sessions, I'm actually, like, combining them, which is one of the
[00:05:31.520 --> 00:05:38.640]   points that were made there, like, I think a child made a point where an agent is creating workflows and
[00:05:38.640 --> 00:05:43.440]   calling them, and then there was a discussion about, like, workflows and, you know, using agent,
[00:05:43.440 --> 00:05:48.800]   et cetera, so I'm, when I say workflows, I already mean agentic workflow, let's, let's move on, like,
[00:05:48.800 --> 00:05:54.640]   workflow, agent, who cares, like, like, so it's going to be combined, and I think, like, in order to do that
[00:05:54.640 --> 00:06:02.240]   with trust, you need to be able, more importantly, is to have workflows or agents that are related to trust,
[00:06:02.240 --> 00:06:08.000]   for example, having really high-quality reviewing capabilities, really high-quality testing
[00:06:08.000 --> 00:06:14.800]   capabilities, being able to do a variety of jobs to be done that we do as developers in end-to-end-ish
[00:06:14.800 --> 00:06:20.480]   and high-quality, so that will be a game-changer. Let's be a bit more specific. As developers,
[00:06:20.480 --> 00:06:25.280]   we do a lot of things, not just write code. I took, like, four parts, which is, like, I think less than
[00:06:25.280 --> 00:06:32.000]   a half of what we do, and I think, like, basically, vibe coding was very focused on, let's, like, do
[00:06:32.000 --> 00:06:38.720]   initial planning and write code fast, like, and, you know, vibe, whatever we get, like, that implementation
[00:06:38.720 --> 00:06:45.520]   or that, we feel it and move on, but actually, in heavy-duty software, we need to do many other things.
[00:06:45.520 --> 00:06:52.160]   We need to do, for example, bug fixing, or we need to do refactoring and changing features, etc.
[00:06:52.160 --> 00:06:57.520]   We want to move fast without breaking things, so I think we need to have not the testing and the writing as
[00:06:57.520 --> 00:07:06.160]   a hand site, which you can do, like, testing and reviewing inside ID tools that are very mature, but not as a hand site,
[00:07:06.160 --> 00:07:13.360]   but rather, like, really being the red team, right, thinking as a tech lead, as reviewing code and having,
[00:07:13.360 --> 00:07:21.680]   like, fitting technology for that, so if we are able to put, like, AI in each one of those, like, parts,
[00:07:21.680 --> 00:07:28.160]   maybe then it will be a game-changer, but I think even then, like, we already have tools for code review,
[00:07:28.160 --> 00:07:33.040]   for testing, shameless plug, we're going to talk about later, that's what we do at Codo. We focus being more
[00:07:33.040 --> 00:07:35.920]   on the red team, even though we have tools for the blue, we are focused more on the red team,
[00:07:35.920 --> 00:07:40.640]   more on the red team. Still, I don't think it's a game-changer, okay, and I think, like, a first,
[00:07:40.640 --> 00:07:46.800]   like, a feeling of a game-changer, as I mentioned, not only putting AI across the SDLC, but having
[00:07:46.800 --> 00:07:54.000]   workflows across parts of the SDLC, so one semi-game-changer could be, like, if we manage to
[00:07:54.000 --> 00:07:59.840]   shift left the review and the testing, as you write code, then you also get those suggestions and get
[00:07:59.840 --> 00:08:05.360]   high-quality code that is already according to your company best practices, and you don't need to wait
[00:08:05.360 --> 00:08:12.080]   for the AI review tool to tell you that only after you pushed it, right? But I think, like, I think we have
[00:08:12.080 --> 00:08:18.560]   even a better way to do that, a bit more agentic, so let's reanalyze these four blocks, these four tasks,
[00:08:18.560 --> 00:08:25.200]   these four tasks, so I, instead of having one, like, the x-axis, now there's also y-axis, it's
[00:08:25.200 --> 00:08:30.640]   executability. If you know the v-shape in Wikipedia or whatever, where we're searching now, chat GPT,
[00:08:30.640 --> 00:08:36.720]   v-shape, software development, y-axis executability, x-axis time, so we start with planning, it's not
[00:08:36.720 --> 00:08:42.560]   executable, then we write code, in most cases, you're not doing admitted like a TDD, okay? So you write,
[00:08:42.560 --> 00:08:47.600]   you write your code, and then you write your test, and in most cases, and that's executable,
[00:08:47.600 --> 00:08:51.280]   but it's not application code, so it's a bit higher, and then, and then you do the review.
[00:08:51.280 --> 00:08:58.240]   A game changer is, like, when we actually manage to take that v and squeeze it, and, and have, like,
[00:08:58.240 --> 00:09:03.680]   different workflows and agents talking to each other, and that's why, like, I had the word MCP and A2A,
[00:09:03.680 --> 00:09:08.000]   and I'm gonna get to that later, I, I, I guess, like, if you're in this conference, you know what I'm
[00:09:08.000 --> 00:09:11.920]   talking about, that where maybe there's different agents that are talking to each other, maybe it's
[00:09:11.920 --> 00:09:17.120]   one agent using tools that are able to connect all of these, like, all at once, that, that will be a
[00:09:17.120 --> 00:09:23.680]   game changer. So to, and to some extent, what it means is that, that, like, the game changer moment is
[00:09:23.680 --> 00:09:29.520]   when we're looking at all of these steps, like, rigorously, and, and one holistic solution. If you like,
[00:09:29.520 --> 00:09:37.040]   cloud is, is mature for 10 years, and then Wiz came and said, we can't put in a security application for
[00:09:37.040 --> 00:09:44.160]   each part of the cloud, like, or each, uh, necessity of, of security. Let's build one holistic, uh, solution
[00:09:44.160 --> 00:09:49.280]   for, for, for cloud security. The same thing will happen to us in the game changing moment for, for, uh,
[00:09:49.280 --> 00:09:56.480]   intelligent software development. Zooming out back again to vibe coding with confidence, uh, it, it didn't
[00:09:56.480 --> 00:10:02.880]   happen a long time ago when Karpathy wrote about vibe coding, like, you know, really, like, I thought it's like a decade
[00:10:02.880 --> 00:10:09.200]   already in AI, uh, years, uh, and, and the interesting thing, it didn't take too much time, like, a month or two,
[00:10:09.200 --> 00:10:15.440]   uh, where, where we started, where, where we started seeing pushbacks, right? This is not me, by the way.
[00:10:15.440 --> 00:10:21.520]   Uh, and, and, uh, and, and actually just a few weeks ago, the same Karpathy came back
[00:10:22.160 --> 00:10:28.320]   and rethought vibe coding. Notice what he's saying, like, code I actually and professionally care about
[00:10:28.320 --> 00:10:34.160]   contrast vibe code. The same Karpathy, okay? And it's really interesting, I think, to analyze what he's
[00:10:34.160 --> 00:10:39.360]   saying. The first thing he's saying, okay, coded I care about, probably have a duty software, or I like
[00:10:39.360 --> 00:10:45.280]   the quality, it's maintainable. We are gonna get to that. And then he tries to offer solution. I, uh,
[00:10:45.280 --> 00:10:49.360]   I love him. I, I, I mean, like, I never met him, but, but, uh, we all saw his videos, right? Like,
[00:10:49.360 --> 00:10:54.800]   15 years ago, 10 years ago. So, uh, he's giving solution, not only, like, uh, like, being annoying,
[00:10:54.800 --> 00:10:59.680]   like, okay, no, I said by coding, no by coding anymore. So, first he's saying, the first number one is,
[00:10:59.680 --> 00:11:05.600]   is context. He's saying, like, bring context. Here, he's saying doing it manual, but that's not game
[00:11:05.600 --> 00:11:10.160]   changer if now I need to start bringing it manually. And then he's giving also two, three,
[00:11:10.160 --> 00:11:15.680]   four, five, six, seven. Like, this, this is a workflow. He's actually suggesting a workflow.
[00:11:15.680 --> 00:11:22.000]   That's one of the topics of the three talks that we had now, okay? So, now, uh, like, this is really
[00:11:22.000 --> 00:11:27.360]   important, I think. Like, how do you vibe code with confidence? You need to, like, you said, it's like,
[00:11:27.360 --> 00:11:31.840]   just vibe coding, probably you don't care about quality. You do care. You need to bring the right
[00:11:31.840 --> 00:11:37.440]   context and have workflows. And these workflows can be connected to agents, could be part of the agent,
[00:11:37.440 --> 00:11:41.680]   could be part of your flows. And that's, like, in the nine minutes or so, some, some things I'm going
[00:11:41.680 --> 00:11:46.960]   to talk about. Karpati and others are not the only one. This is just, like, from a week ago, uh, if you,
[00:11:46.960 --> 00:11:53.440]   you know, this, uh, a very, uh, great, great person, great material. He's saying, like, AI coding tools are
[00:11:53.440 --> 00:12:01.120]   so much less useful on existing large code bases, okay? He's saying that, and, and this is differently
[00:12:01.120 --> 00:12:06.480]   than compared green for greenfield work. And it's not surprising because if you have a greenfield work
[00:12:06.480 --> 00:12:12.320]   or it's a simple software, code generation is all you need, okay? Like, it's magnificent,
[00:12:12.320 --> 00:12:18.160]   the tip of the iceberg, give a prompt, you get your software. But when you're talking about enterprise,
[00:12:18.160 --> 00:12:22.720]   heavy-duty software, then there's much more than that. We all know it, right? There is a maintainability,
[00:12:22.720 --> 00:12:27.680]   testing, reviewing, et cetera. And shameless plug, well, I am the CEO of Koto, I have to say,
[00:12:27.680 --> 00:12:33.120]   we are looking at that as a holistic, like, how could we really bring a game-changer moment as if we
[00:12:33.120 --> 00:12:40.000]   look at all of this at a holistic approach? That's why, uh, we have a multi-agent, uh, architecture.
[00:12:40.000 --> 00:12:45.360]   I am not going to go over it one by one because there's one specific thing that I wanted to show.
[00:12:45.360 --> 00:12:51.920]   So, we have, uh, a tool, we have an agent that is focused on, let's call it deep research, deep ask,
[00:12:52.000 --> 00:12:58.160]   in code. And then, uh, we have a tool that is specific, that's our flagship for, for code review,
[00:12:58.160 --> 00:13:06.160]   called code merge. And then, finally, we have, uh, like, a tool that is inside IDEs that enable to shift
[00:13:06.160 --> 00:13:12.400]   left, like, bring that context, bring that, uh, bring that best, best practices that were collected
[00:13:12.400 --> 00:13:17.600]   over time. The code merge tool, the code review tool collects best practices over time. And this,
[00:13:17.600 --> 00:13:22.480]   the context that is coming from the code aware and the best practices coming for code merge,
[00:13:22.480 --> 00:13:28.480]   helping you rather whatever code generation tool you're using or using directly code tool to make
[00:13:28.480 --> 00:13:37.760]   sure that that's in high quality. But recently, like 20 minutes ago, uh, we released also a CLI tool.
[00:13:37.760 --> 00:13:43.360]   And that is meant to help you with the workflow parts. The workflow is already integrated into our
[00:13:43.360 --> 00:13:49.600]   solution, but this, like, really, uh, a workflow on steroids. There's another thing very important
[00:13:49.600 --> 00:13:54.720]   that is coming out in two months, and stay tuned, follow us, whatever, any platform that you want. I
[00:13:55.360 --> 00:14:00.880]   kind of, like, uh, didn't want to show it right now. So, CLI tool, why? I hope, like, I gave enough,
[00:14:00.880 --> 00:14:07.680]   like, hints, um, and, uh, so far. And the main reason is putting AI to work across the CLC. And I remind
[00:14:07.680 --> 00:14:12.400]   you that starting five minutes ago, you can go download it and play with it. It's a soft launch. Uh,
[00:14:12.400 --> 00:14:17.440]   we're going to announce about it more deeply, like, in, in, in a couple of weeks. So, interestingly, who,
[00:14:17.440 --> 00:14:23.360]   who, who saw Simon, like, uh, talk, like, he's magnificent? What? Some people didn't? Okay. So,
[00:14:23.360 --> 00:14:30.240]   please go, uh, go out of the room, I mean. And, uh, and then come back after and watch, uh, online later.
[00:14:30.240 --> 00:14:35.760]   And it's amazing, like, when he wanted to demonstrate something, did he open, like, one of the IDEs?
[00:14:35.760 --> 00:14:42.800]   He did not. Like, everything he did was with, with a CLI tool. Like, that's, if you are a developer,
[00:14:42.800 --> 00:14:46.640]   like, that's the idea that you can run it in the background, you can run it in different workflows,
[00:14:46.640 --> 00:14:51.600]   you can make workflows. That's part of what I'm, what I'm going to show you. And, and basically,
[00:14:51.600 --> 00:14:58.960]   with, with Codo, uh, the CLI tool, which is live, uh, live here, uh, then I can, for example, chat with
[00:14:58.960 --> 00:15:03.680]   it. And very interestingly, that is very, quite, like, there are a few tools that we talked about
[00:15:03.680 --> 00:15:08.320]   before that you can do that. But interestingly, you can call agents. For example, I can call the,
[00:15:08.320 --> 00:15:13.360]   the explain agent. It's a dedicated agent. Uh, due to lack of time, I'm not going to show that. I'm going
[00:15:13.360 --> 00:15:19.040]   to show something else. So, how does, how did we made this explain agent? You can actually,
[00:15:19.040 --> 00:15:24.960]   with Codo the agent, you can make other agents. And soon, I'm going to show you how you also create
[00:15:24.960 --> 00:15:30.320]   workflows and things like that. So, basically, I can go and ask it, if the internet works, uh, well
[00:15:30.320 --> 00:15:36.240]   enough, uh, you can go and ask it, please create an agent with this goal. And, and by the way, you can,
[00:15:36.240 --> 00:15:41.840]   uh, uh, uh, like, give much more information than what I'm doing right now. I'm asking for it to
[00:15:41.840 --> 00:15:48.000]   create a review agent. Okay? If the internet works, it's, it's going to start working. It's initializing
[00:15:48.000 --> 00:15:52.880]   MCP. It's going to search what it can do, what it cannot do. And now it's, it's going to work for,
[00:15:52.880 --> 00:15:56.720]   for a few minutes. Okay? Like, if I would ask you to do it, you would do it, take it in two hours. So,
[00:15:56.720 --> 00:16:02.960]   let's give it two minutes. Meanwhile, I'm going to, to progress and, and, uh, and tell you that the,
[00:16:02.960 --> 00:16:09.280]   I think one of the interesting things, uh, about it, it's, it's working. So, one, uh, most agents,
[00:16:09.280 --> 00:16:15.200]   like, I can't think of, of, of, of one that won't, would have tools. Uh, for example,
[00:16:15.200 --> 00:16:21.360]   the Kodo cover agent, uh, by the way, we have an open source for Kodo cover. Uh, it's a tool that
[00:16:21.360 --> 00:16:27.920]   automatically, uh, generates coverage, coverage, uh, it increases the coverage, automatically
[00:16:27.920 --> 00:16:32.320]   increases coverage, but you don't need anymore to go download this open source, et cetera.
[00:16:32.320 --> 00:16:38.480]   You just get it as part of the, uh, uh, as one of the agent. Okay? So, uh, but if you do want
[00:16:38.480 --> 00:16:43.360]   to play with the open source, et cetera, it's, it's fully open source. Okay. Back, back to my point,
[00:16:43.360 --> 00:16:48.080]   I can go and call Kodo cover, which uses different tools. For example, it uses tools related to coverage
[00:16:48.080 --> 00:16:53.440]   reports. Uh, and, and you, I can look what I can do in a command line. I can tell it dump all the logs
[00:16:53.440 --> 00:16:59.200]   somewhere, right? How do you do that with an ID plugin? You can, but you need to hack it, hack it. But
[00:16:59.200 --> 00:17:03.840]   the interesting thing, what can we do with command lines? And many here are, are developers. You can
[00:17:03.840 --> 00:17:11.200]   pipe, you can pipe, uh, uh, tools together. Agents, you can pipe, like, uh, uh, uh, workflows, et cetera.
[00:17:11.200 --> 00:17:15.920]   So I want to run Kodo code, generating code. And then I want to run the cover that, like, you know,
[00:17:15.920 --> 00:17:21.040]   increase the coverage testing. Maybe the code will generate a few tests, but I have an agent that is
[00:17:21.040 --> 00:17:25.840]   that is specializing in increasing coverage. And then I want the review agent that is now cooking
[00:17:25.840 --> 00:17:32.560]   and finished. Uh, um, and I'll go back to it in a minute if I have time. Now, this is not no agent
[00:17:32.560 --> 00:17:37.920]   to engine communication. I did a pipeline that just passed the result, but what if we can, and, and, and,
[00:17:37.920 --> 00:17:45.440]   and before I exemplified with MCP, but what if we can invent a command line for A to A? So those agents are,
[00:17:45.440 --> 00:17:51.440]   uh, uh, will run in parallel as you go and they will have some communication, uh, between them.
[00:17:51.440 --> 00:17:57.440]   So I actually have to say that yesterday we had like a 20, uh, 50, uh, like people like, like those that you had,
[00:17:57.440 --> 00:18:04.800]   uh, we, uh, uh, speakers and I asked who is using A to A? No one is using it. So it's still a way to go,
[00:18:04.800 --> 00:18:12.000]   but this is an example. Oh, yes. Come to talk to me later. So I will know one person. Okay. Thank you. So, uh, uh, uh,
[00:18:12.000 --> 00:18:17.520]   and then I'll edit all the posts. Uh, I know one person and, and, uh, and, and, and, but, but we're getting there.
[00:18:17.520 --> 00:18:22.560]   Okay. This is an example. You need multiple agents. You need A to A. You, you would want to use it if you
[00:18:22.560 --> 00:18:28.960]   want discover, discoverability between agents or handshakes. So this is a good example if you have many agents
[00:18:28.960 --> 00:18:34.480]   and you can run them in the background, et cetera. So in this case, the agent finished and I have the definition.
[00:18:34.480 --> 00:18:41.440]   Uh, I have the definition of the, of the agent, uh, over, over here. Uh, it's called merge agent and you
[00:18:41.440 --> 00:18:47.520]   can see like, like all everything, the instruction that was made for it, uh, like what tools it is,
[00:18:47.520 --> 00:18:52.480]   it is using. Uh, I'm going to add one that, uh, sometime I want to be very clear. It's there.
[00:18:52.480 --> 00:18:58.800]   And by the way, it also has like a, uh, output scheme. I'm going to remove that, move that for a second.
[00:18:58.800 --> 00:19:05.760]   Okay. And then I can go back, uh, and, and just call it, it was called merge review, uh,
[00:19:05.760 --> 00:19:13.280]   Kodo merge, uh, review agent. It was just generated a minute ago and it will review. I didn't give it
[00:19:13.280 --> 00:19:19.840]   any, you see that there's a parameter automatically created like, uh, uh, that, that, uh, uh, I, I can
[00:19:19.840 --> 00:19:25.280]   tell it what to review, et cetera, give instruction. It's very flexible, but I didn't. Uh, okay. So, uh,
[00:19:25.280 --> 00:19:30.320]   I'm almost lack of time, so I won't, uh, show you, but what I just will tell you that basically
[00:19:30.320 --> 00:19:34.800]   I can tell it to use best practices from the organization important for vibe coding with
[00:19:34.800 --> 00:19:41.360]   confidence. And I can also tell it to have some success or, or, or failure criteria to know that
[00:19:41.360 --> 00:19:46.160]   something happened well or not. For example, if it managed to get some coverage, okay, that's how you
[00:19:46.160 --> 00:19:51.200]   work with, with confidence. Um, yeah. And you can connect things to pre-commit,
[00:19:51.840 --> 00:19:56.800]   post commit, okay. And everything you can do, you can do automatically. Very interestingly,
[00:19:56.800 --> 00:20:02.800]   and, and with that, uh, almost reached the end, very, very interestingly, you can say the CLI tool
[00:20:02.800 --> 00:20:10.080]   is very lame. But notice, did you notice what, what Simon did? He used the CLI, but eventually
[00:20:10.080 --> 00:20:17.760]   checking content, he, he used different interfaces. So, you can, from the CLI itself, automatically generate
[00:20:17.760 --> 00:20:23.360]   interfaces that are fitting for your task. And one of those, for example, is an interface for,
[00:20:23.360 --> 00:20:29.760]   for code review. So, who cares anymore about IDEs when you can have flexible IDs? And with that,
[00:20:29.760 --> 00:20:34.080]   I'll finish, and I'll just tell you that I think we're going into a future where we're going to have
[00:20:34.080 --> 00:20:40.560]   swarm of agents, each one specializing and having different credential, different, uh, best, best practices,
[00:20:40.560 --> 00:20:54.320]   etc. And, uh, and, and, and it's coming really fast, 2025, 2026. Thank you.

