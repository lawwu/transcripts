
[00:00:00.000 --> 00:00:07.520]   I actually want to share my entire screen for a second. So Magistral is kind of Mistral's
[00:00:07.520 --> 00:00:13.440]   reasoning model. The interesting thing they do here is they don't want to do any distillation.
[00:00:13.440 --> 00:00:19.200]   Basically, they want to see how far can they get with like native RL without distilling from a big
[00:00:19.200 --> 00:00:24.400]   model. And then they also do a little bit of distillation. So they train one, which is Magistral
[00:00:24.400 --> 00:00:31.600]   Medium. It's trained on Mistral Medium as the base model and they just do pure RL and they kind of
[00:00:31.600 --> 00:00:37.040]   talk about how they do it, how they get the data set. The very interesting thing here is this is like
[00:00:37.040 --> 00:00:45.360]   a very large scale RL run. So what we don't see is how do you actually efficiently do large scale RL?
[00:00:45.360 --> 00:00:50.640]   So what are the challenges in that? And how do you set up your compute and data center to do this?
[00:00:50.640 --> 00:00:55.840]   Because with RL, you need like two instances of the model. You need to generate rollouts of your
[00:00:55.840 --> 00:01:01.360]   thinking. You need to verify them, which takes some time. They'll have different leads, right? Like when
[00:01:01.360 --> 00:01:07.920]   you have a rollout that's like 3000 tokens versus like 30,000, you kind of have a delta as they're
[00:01:07.920 --> 00:01:15.440]   being generated. Do you just waste time and waste GPU hours? And then as you like batch up, do your
[00:01:15.440 --> 00:01:23.040]   gradient, um, as you do like changes in weights, um, how do you resync this stuff? So Mistral is like,
[00:01:23.040 --> 00:01:28.480]   you know, we actually have to be a real research lab since we've raised billions of dollars. Uh,
[00:01:28.480 --> 00:01:32.960]   so let's do some research instead of just basic shit. And then they kind of outline like, okay,
[00:01:32.960 --> 00:01:39.520]   here's how we do a really, really good training setup for all this stuff. So that's Magistral.
[00:01:39.520 --> 00:01:46.720]   The other paper is SmallLM3. SmallLM3 just came out yesterday, I think, from HuggingFace.
[00:01:46.720 --> 00:01:53.440]   It's kind of the opposite. It's like OML style, fully open, um, where they give you everything,
[00:01:53.440 --> 00:02:01.280]   training code, full repo, dataset, um, model weights, checkpoints, base model, and struct model.
[00:02:01.280 --> 00:02:08.320]   And they kind of talk about distillation. So their, their dataset is distilled, but it's a small model
[00:02:08.320 --> 00:02:12.240]   that they get to reason. And then of course they have their fun charts, you know, they're always in
[00:02:12.240 --> 00:02:18.960]   the top left or top right corner where they want to be. And the interesting thing here is two cool
[00:02:18.960 --> 00:02:26.160]   takeaways. One is this is a paper that talks about hybrid reasoning. So they have thinking and non-thinking
[00:02:26.160 --> 00:02:33.120]   mode. And then there is a section on the bottom, which I thought was interesting where they talk
[00:02:33.120 --> 00:02:40.080]   about model merging. You don't see much about model merging, but, uh, spoiler when they, when they did
[00:02:40.080 --> 00:02:45.920]   their model merging, what did they do this for again? So they, they have this kind of preference optimization
[00:02:45.920 --> 00:02:52.480]   for reasoning and non-reasoning. And then as they start to do this training, uh, turns out that they
[00:02:52.480 --> 00:02:59.040]   kind of nerf out the long context capability. So what they did is they took some of this reasoning,
[00:02:59.040 --> 00:03:03.440]   non-reasoning checkpoint, and then they took some of the long context checkpoint that didn't get
[00:03:03.440 --> 00:03:09.040]   screwed. And then boom, they just, uh, combined them together. And now we've solved both solutions,
[00:03:09.040 --> 00:03:12.800]   which is pretty crazy. I didn't know. I didn't know model merging can just do shit like that,
[00:03:12.800 --> 00:03:19.040]   but that's pretty cool. Um, so they do that, but then they talk about everything that goes into it.
[00:03:19.040 --> 00:03:23.360]   Um, also they're pre-training, post-training, but they use a lot of other data sets.
[00:03:23.360 --> 00:03:30.640]   Some stuff that I found very weird here was like when they generate synthetic SFT data, right? So
[00:03:30.640 --> 00:03:40.800]   they're generating reasoning data sets. Uh, they, they, they use QEN 332B in reasoning mode. If anyone
[00:03:40.800 --> 00:03:48.000]   has intuition as to why they would do this instead of, my zoom is overlaying my tabs instead of, um,
[00:03:48.000 --> 00:03:57.200]   instead of using the big QEN 3, I would be curious to know, cause you know, in QEN 3, we also have
[00:03:57.200 --> 00:04:07.760]   this big 235B. So why not use 235B with active? Uh, they do use some deep seek, but yeah, interestingly
[00:04:07.760 --> 00:04:14.160]   enough in their synthetic data gen they use, they use, um, 132B, but both very good papers. Um,
[00:04:14.160 --> 00:04:20.720]   they, they, this is actually a pretty, pretty expensive paper. If the answer is compute.
[00:04:20.720 --> 00:04:28.240]   So in their blog post, they talk about how many GPU hours this is. So, uh, they're, they're pretty like
[00:04:28.240 --> 00:04:36.160]   chunky. This is not a little research preview. Like this model is trained on 48 nodes of eight H100s for 24 days.
[00:04:36.160 --> 00:04:46.000]   That's a 220k GPU hours. If you assume like $2 to $3 per GPU hour, um, that's roughly a million dollar
[00:04:46.000 --> 00:04:53.440]   train run. Not to mention a bunch of ablations, testing, synthetic data gen, salaries, like resources
[00:04:53.440 --> 00:04:59.200]   that go into this. But the training alone, like this was trained on trillions of tokens, generating those
[00:04:59.200 --> 00:05:07.280]   tokens. But the final train run, like what is this, uh, 220,000 H100 hours. That's, that's over a million
[00:05:07.280 --> 00:05:13.360]   dollar just train run alone. So not, not cheap, not cheap. Um, but yeah, cool. It's, it's a small LM that's
[00:05:13.360 --> 00:05:19.920]   a hybrid reasoner. So this paper is about hybrid reasoning. Um, this paper is about native reasoning
[00:05:19.920 --> 00:05:25.440]   without distillation. Okay. I think I'll do this one first since it's, uh, there's more substance to it.
[00:05:25.440 --> 00:05:29.280]   The other one you can kind of just read through. It's kind of a blog post. There's not much to it.
[00:05:29.280 --> 00:05:35.600]   Um, okay. I will get started. If there's any questions, anything, you know, pop in. We'll just
[00:05:35.600 --> 00:05:41.680]   interrupt me whenever it's not that deep. Okay. So Magistral, their, um, RL, they, they kind of really
[00:05:41.680 --> 00:05:49.040]   just lay out their RL pipeline. Uh, the, one of them is open source. It's Apache 2, but they don't
[00:05:49.040 --> 00:05:54.480]   give us as much. They don't give us training data. They give us like numbers around how much data they
[00:05:54.480 --> 00:05:58.720]   use, but they obviously don't give it all to us. But you know, this is still a pretty good paper for
[00:05:58.720 --> 00:06:03.760]   Mistral. Like I'm, I'm pretty, I think they're going in the right direction, learning how to do this
[00:06:03.760 --> 00:06:08.480]   from scratch as opposed to some of the other work, but you know, they are bigger. So what do we expect?
[00:06:09.040 --> 00:06:14.480]   Um, basically there's two things. So they want to show, oh, also the other takeaway of this is that
[00:06:14.480 --> 00:06:21.440]   RL on text alone works pretty well. So it's still like all this stuff generalizes. They do good
[00:06:21.440 --> 00:06:26.240]   ablations in this. They text, they test, uh, if we just do code, does it work on code and math? If we
[00:06:26.240 --> 00:06:32.240]   just do math, does it work on math and code? Um, but can we do pure RL on text without distillation on a
[00:06:32.240 --> 00:06:37.200]   small model? Yes, we can. It's interesting what we think of small models, right? Because Mistral calls
[00:06:37.200 --> 00:06:43.760]   small models 24B. Uh, five, four called small models 14B. I guess they had a little 3B section
[00:06:43.760 --> 00:06:52.880]   in there with SFT and, um, hugging face calls small models, um, three or 4B, three or 4B. Okay. Uh, let me
[00:06:52.880 --> 00:07:00.240]   make sure my screen share is sharing the right screen. It is. Okay. So, uh, basically they, they want to
[00:07:00.960 --> 00:07:07.520]   detail these few things. So one, you can do no distillation from existing models. Uh, they talk
[00:07:07.520 --> 00:07:11.600]   about the infrastructure, their design choices, which is kind of an interesting section, right? You don't
[00:07:11.600 --> 00:07:16.480]   really get anyone giving you this much detail about it. Hugging face gave us a little, but honestly, this
[00:07:16.480 --> 00:07:23.840]   gave us a much better recipe. Um, then, uh, effective way to make it multilingual. So this was another
[00:07:23.840 --> 00:07:30.720]   interesting little tidbit where they noticed that originally, uh, normally the model would start
[00:07:30.720 --> 00:07:36.800]   reasoning or outputting its response in different languages. Uh, interestingly enough, as much as this
[00:07:36.800 --> 00:07:43.680]   is Mistral, a French company, they, they didn't have French output. They had a lot of Chinese, Russian
[00:07:43.680 --> 00:07:50.560]   and stuff, but they can basically adjust their RL policy. They, they basically do GRPO with some
[00:07:50.560 --> 00:07:57.760]   modifications. One of those modifications is giving a slight reward increase for models that have, um,
[00:07:57.760 --> 00:08:04.800]   that keep their reasoning and output in, in the same language that it's guided. And then they even add
[00:08:04.800 --> 00:08:09.360]   this in the system prompt. It's like pretty interesting how you can just solve this problem
[00:08:09.360 --> 00:08:16.160]   of reasoning and outputting different languages by a little 0.1 increase in RL, uh, reward. Like it just
[00:08:16.160 --> 00:08:20.720]   shows how strong RL is, right? You just give slight, slight reward if you keep your language consistent
[00:08:20.720 --> 00:08:26.960]   and guess what? Language is now consistent, but, um, you know, interesting note there. Um, other stuff in
[00:08:26.960 --> 00:08:34.320]   the, that are like little takeaways before we go deep that I noticed, um, towards the end of this paper,
[00:08:34.320 --> 00:08:42.000]   they, they noticed something about multimodal that we might not get time to cover. So, um, eating the
[00:08:42.000 --> 00:08:49.360]   multimodal free lunch, basically, uh, all they did was they trained on a pre-trained model that has
[00:08:49.360 --> 00:08:54.720]   multimodality, right? So mistral three small and medium, they're multimodal models that have vision
[00:08:54.720 --> 00:09:02.560]   encoders, right? So they encode images into the same embedding latent space as text. Then during the RL,
[00:09:02.560 --> 00:09:08.320]   they're only trained on text data. So they're like, our intuition is that one might expect that multimodal
[00:09:08.320 --> 00:09:14.480]   performance would degrade, right? But no, actually, uh, it didn't degrade multimodal actually got even
[00:09:14.480 --> 00:09:23.120]   better. So testing on stuff like MMMU and MMMU Pro, there's no regression in most benchmarks and
[00:09:23.120 --> 00:09:30.720]   notable improvements in some. So, um, just since like the models were natively multimodal, um,
[00:09:31.360 --> 00:09:37.120]   this reasoning sort of transferred over the model transfers, it's extended thinking across all, all,
[00:09:37.120 --> 00:09:43.520]   um, modalities. Very interesting. And then this is part of their future work directions. Uh, some of
[00:09:43.520 --> 00:09:49.120]   the questions that they should work on later, uh, looking ahead, we're also excited to push the
[00:09:49.120 --> 00:09:55.840]   boundaries of RL across whole range of applications, including tool use, um, integrated multimodality,
[00:09:55.840 --> 00:10:01.840]   and agents. So they want to do multimodal reasoning down the line, um, and agents and tool use. But
[00:10:01.840 --> 00:10:08.720]   interesting little takeaway, right? Without, um, without any multimodal data, they were able to get
[00:10:08.720 --> 00:10:16.400]   better multimodal preference just by having, um, text reasoning because it's all in the same latent space
[00:10:16.400 --> 00:10:23.920]   in the end of the day. Then of course, um, they, they give, um, weights small model as open source.
[00:10:23.920 --> 00:10:30.080]   Then they, there was basically like prior to this, there was this kind of notion of for small models,
[00:10:30.080 --> 00:10:36.720]   it's not worth doing RL. You would want to always have a big model and distill and they want to challenge
[00:10:36.720 --> 00:10:43.760]   that claim. So they want to see whether RL can improve on distillation, SFT baseline of small models.
[00:10:43.760 --> 00:10:50.720]   So basically we show that, um, yes, RL is very competitive in some cases better, but harder to
[00:10:50.720 --> 00:10:55.760]   do. Um, for those that don't stick around through the whole thing, I guess the other takeaway with this
[00:10:55.760 --> 00:11:02.720]   model is how much data filtration they do. So like a distinction between the two papers, um, small LLM
[00:11:02.720 --> 00:11:09.520]   uses a lot of preexisting data sets. Mistral basically parses through and data filters everything,
[00:11:09.520 --> 00:11:18.960]   everything. So I only have, um, purple highlighting for data set stuff, but basically for math and code,
[00:11:18.960 --> 00:11:25.600]   is this just math? Yeah. So for the, for the math data set, they start with 700,000 samples. They have
[00:11:25.600 --> 00:11:31.440]   like two stages of filtering we're getting to. Getting rid of formatting stuff, they cut down 100,000. In the
[00:11:31.440 --> 00:11:38.400]   end with their difficulty filtering, they only have 5% of the data left. So they cut from 700,000 to 38,000.
[00:11:38.400 --> 00:11:43.840]   They cut 95% out. Same thing with code. Um, how much do they start with? I don't know how much they
[00:11:43.840 --> 00:11:49.200]   start with, but they cut a lot. They only use 35k code samples. So Mistral basically like, I don't know
[00:11:49.200 --> 00:11:55.600]   if all this stuff transfers over like their claims or it's just, Hey, we can do really, really good data
[00:11:55.600 --> 00:12:01.840]   set filtration, but okay. Enough, enough background yapping. Let's get into these papers. Um, I don't
[00:12:01.840 --> 00:12:07.920]   really like covering benchmarks in my paper yaps. Cause you know, you can read a number always go up.
[00:12:07.920 --> 00:12:14.720]   Benchmarks are a scam. Um, interesting stuff compared to DeepSeq. They don't need to do a cold start.
[00:12:14.720 --> 00:12:21.040]   Cold start is basically before your RL, you take a reasoning chain of thought traces, you do an SFT.
[00:12:21.040 --> 00:12:25.760]   So the model starts to understand reasoning structure. Then you do RL. Um, forget that.
[00:12:25.760 --> 00:12:34.160]   We just do, we just do straight RL. It works. Um, isn't QN3, 4B fully open source to wait? Yeah,
[00:12:34.160 --> 00:12:38.560]   quite an open source, but we don't have training code. We don't have the data set. We don't have
[00:12:38.560 --> 00:12:43.280]   all the ablations. There's a lot of that stuff. You know, uh, we need an LLM to show benchmarks for
[00:12:43.280 --> 00:12:49.920]   models that are not shown because they don't look favorable. Yes. I think that's interesting. So like
[00:12:49.920 --> 00:12:57.600]   my takeaway here as well, um, they, they, they look at like three Bs, four Bs, but you know,
[00:12:57.600 --> 00:13:01.520]   I want to see some more, I want to see seven Bs, eight Bs. I want to see the other ones that aren't
[00:13:01.520 --> 00:13:10.320]   on here. I want to see the 0.5 Bs. Um, yeah, that's, that's always useful. Okay. So RL, infra,
[00:13:10.320 --> 00:13:17.600]   performance. This is basically all the sections. So guess what? RL is back. They do GRPO. Uh, GRPO for
[00:13:17.600 --> 00:13:23.520]   those that don't know is group relative policy optimization. It's basically what deep seat said
[00:13:23.520 --> 00:13:30.400]   we can do instead of all this fancy, um, reward modeling, like policy modeling training, like good,
[00:13:30.400 --> 00:13:36.320]   all that stuff. What we basically do is we just generate a bunch of samples and then we kind of, um,
[00:13:36.560 --> 00:13:42.400]   reward based on what does best out of this like goal of optimization. So use the average award for
[00:13:42.400 --> 00:13:47.680]   multiple generations per prompt from the policy to compute a baseline for advantage calculation. So
[00:13:47.680 --> 00:13:54.240]   generate a bunch of samples, group, uh, group relative. So what's relatively the better outcome
[00:13:54.240 --> 00:14:01.520]   in that group and then reward for that. Here's GRPO in fancy math definitions. I think it's pretty useful,
[00:14:01.520 --> 00:14:08.160]   like send this section and like screenshot this into chat GPT or Claude, I guess, uh, I used to GPT and
[00:14:08.160 --> 00:14:13.280]   just have it explained through math formula. It's kind of useful to follow through. All these are like
[00:14:13.280 --> 00:14:18.480]   pretty easy functions. Once you understand what they all do, there's KL divergence penalties,
[00:14:18.480 --> 00:14:23.200]   all that stuff. They kind of get rid of that. So here's what they did. Here are the modifications to
[00:14:23.200 --> 00:14:31.120]   GRPO that they do. One, get rid of KL divergence. Um, KL divergence penalty constrains it from deviating too
[00:14:31.120 --> 00:14:37.120]   far from a reference policy. So basically we have KL divergence, so we don't, we don't like venture too
[00:14:37.120 --> 00:14:44.880]   far and kind of just generate noise. They find that with, um, GRPO this kind of happens anyway. So they get
[00:14:44.880 --> 00:14:51.840]   rid of it because KL computation incurs compute costs that's unjustified, right? Um, get rid of that for
[00:14:51.840 --> 00:14:58.160]   inference like training efficiency, not training efficiency, just efficiency of GPU usage. Okay.
[00:14:58.160 --> 00:15:05.680]   Uh, loss norm to avoid length bias. They have a loss normalization. So basically
[00:15:05.680 --> 00:15:13.280]   they normalize basically on an average length generation. So you're not penalized for being too short or too long.
[00:15:13.280 --> 00:15:21.760]   Uh, makes sense. Advantage normalization as you would expect. Okay. Uh, relaxing the trust region upper bound.
[00:15:21.760 --> 00:15:24.800]   This is basically allowing again for more, um,
[00:15:24.800 --> 00:15:30.480]   more variability and allowing for more exploration. They do a lot of that.
[00:15:30.480 --> 00:15:34.240]   Eliminating non-diverse groups. So, um,
[00:15:34.240 --> 00:15:41.760]   we filter out all groups with zero advantage. Basically if there's outputs where there's like no significant
[00:15:41.760 --> 00:15:47.360]   difference. If all answers are correct or all are wrong, we just filter them out and then net the
[00:15:47.360 --> 00:15:55.040]   reward to zero. Uh, reward shaping during training, dah, dah, dah, dah. Oh, okay. So that's, that's kind of,
[00:15:55.040 --> 00:16:01.520]   those are the four or five main changes to GRPO. Um, then it comes to reward shipping. How do they do this?
[00:16:01.520 --> 00:16:09.360]   Okay. So we have, uh, formatting. So choosing the appropriate reward is very crucial when you do RL.
[00:16:09.360 --> 00:16:14.880]   So we want our stuff to be verifiable, right? All the, all the training they do is with verifiable
[00:16:14.880 --> 00:16:20.240]   reward. So how do we verify that the output is correct? One, we have think tags and they make
[00:16:20.240 --> 00:16:24.720]   sure that there's exactly one set of think tags and then they look at the thinking in the middle. So
[00:16:25.280 --> 00:16:31.360]   your thinking should be between think and close think, and you must start with a think tag for math.
[00:16:31.360 --> 00:16:39.040]   You must end your answer in a box. Um, this follows the think tag for code. Uh, you must have one bark
[00:16:39.040 --> 00:16:45.520]   down markdown block followed by the language specification. And then, um, you know, if you
[00:16:45.520 --> 00:16:49.920]   don't do any of these, so if you're formatting is wrong, instant reward zero, you're cooked.
[00:16:49.920 --> 00:16:55.600]   Otherwise you get slight reward preference. So you learn to use it. Okay. Um, that's formatting. They
[00:16:55.600 --> 00:17:01.280]   give the whole system prompt and they talk about it quite a bit. Okay. Correctness. So math correctness,
[00:17:01.280 --> 00:17:06.960]   they use a rule-based verifier reward of 0.9 is given. If the answer is correct, making the total
[00:17:06.960 --> 00:17:12.800]   reward one, uh, as you would expect, this is the biggest portion of the reward, right? If your answer is
[00:17:12.800 --> 00:17:18.880]   correct, you're good. Uh, if your answer is in the right format, you'll have slightly more reward.
[00:17:18.880 --> 00:17:23.360]   If it's in the wrong format, you're completely cooked it to zero. Code correctness, same thing.
[00:17:23.360 --> 00:17:29.440]   Uh, they, they check if it can compile with a timeout of 10 seconds. They, they randomly, so they,
[00:17:29.440 --> 00:17:36.240]   they talk about this later in the dataset selection. Uh, they want code that has tests. If it doesn't have
[00:17:36.240 --> 00:17:42.400]   tests, they make tests. If it has tests that seem wrong, they fix the test. They randomly select,
[00:17:42.800 --> 00:17:49.840]   um, tests that are available to test it. And then, you know, if correct, you get reward. Basic RL,
[00:17:49.840 --> 00:17:56.560]   right? Um, if you're, so, so far we're at two things. Uh, formatting is a non-negotiable. If your
[00:17:56.560 --> 00:18:01.440]   formatting is wrong, your reward is directly zero. If it's correct, you get a slight reward. Answer
[00:18:01.440 --> 00:18:06.240]   correctness. If your answer is correct, you get big reward. This is kind of the main thing. Okay. Length
[00:18:06.240 --> 00:18:10.800]   penalty. They have slow, uh, they have soft length penalties. And as you would expect,
[00:18:10.800 --> 00:18:15.200]   there are penalties. You're out of distribution with length, you're cooked. Okay. Language
[00:18:15.200 --> 00:18:21.200]   consistency. This is one of those key points that they wanted to mention, right? So, um, one of the,
[00:18:21.200 --> 00:18:26.240]   one of the main things they did here is we present a simple yet effective strategy to make the model
[00:18:26.240 --> 00:18:30.640]   multilingual, where both the chain of thought and the final response are in the user language. So, how do
[00:18:30.640 --> 00:18:37.280]   they do this? Um, duh, duh, duh, duh, duh. Okay. So, a core design principle is for to reason in the
[00:18:37.280 --> 00:18:42.800]   same language as the user. We frequently observed outputs mixed in English, Chinese, and Russian.
[00:18:42.800 --> 00:18:48.560]   Uh, they were coherent, but they're not what we want, right? They're undesirable. If I ask something in
[00:18:48.560 --> 00:18:53.680]   Chinese, I don't want it to think in Russian. If I ask for English, I still want the thought traces,
[00:18:53.680 --> 00:18:57.280]   and I want to be able to read them, and I want them in English, right? I don't want them in Chinese.
[00:18:57.280 --> 00:19:04.080]   So, to prevent this, um, they translated their problems into different languages. So,
[00:19:04.080 --> 00:19:09.680]   they take 10% of the data set, translate it into French, Spanish, Italian, German, Chinese, Russian.
[00:19:09.680 --> 00:19:16.080]   Then they calculate the, when calculating the reward, they, they have a classifier that basically checks
[00:19:16.080 --> 00:19:22.640]   if all three parts are, um, in the same language. Three parts being problem, thought, and answer. So,
[00:19:23.600 --> 00:19:28.560]   does your problem, thought, and answer match its same language? They check this by, uh,
[00:19:28.560 --> 00:19:34.400]   doing, you know, normalization or moving latex code blocks. Then they do a fast text classifier. So,
[00:19:34.400 --> 00:19:40.640]   oh, shit. Um, they just check, you know, is all, are all three in the correct language? If they are,
[00:19:40.640 --> 00:19:45.200]   you get like a 0.1 reward bonus, I think. Let's double check that.
[00:19:48.320 --> 00:19:54.560]   da, da, da, da, da. Classifier. Where is it? Yeah. So, um, if the classifier indicates that all three
[00:19:54.560 --> 00:19:58.880]   parts are in the same language, so the problem, the thinking, and the answer, you get a little bit more
[00:19:58.880 --> 00:20:04.080]   reward. Similar to if your answer is boxed, you got a little bit more reward. Now, this is not as
[00:20:04.080 --> 00:20:10.640]   impactful as getting the right answer, but it is slight reward. And with enough data, um, the model starts to
[00:20:10.640 --> 00:20:15.840]   understand that, you know, I'll get rewarded for staying consistent and that just solves the problem.
[00:20:15.840 --> 00:20:21.120]   So simple solution solves reasoning and thinking in the right language. Um, little note here,
[00:20:21.120 --> 00:20:26.640]   they only translated English problems. They didn't translate like French problems to English. They
[00:20:26.640 --> 00:20:30.800]   didn't do a crazy mixture. Very simple solution. Just take 10% of your English, translate it to a few
[00:20:30.800 --> 00:20:37.040]   languages. The model has generalized that if it stays consistent, it gets rewarded. Now it stays consistent.
[00:20:37.040 --> 00:20:42.240]   Very straightforward, simple solution, but elegant and works. And this is kind of power of RL, right?
[00:20:42.240 --> 00:20:46.080]   Little reward for doing what you want and you don't need to go crazy and it just works.
[00:20:46.080 --> 00:20:52.240]   If this was like traditional pre-training or SFT, you would have to do all the languages and all these
[00:20:52.240 --> 00:20:57.760]   mixtures and keep it consistent. And like, you know, traditional ML, you have to like have good
[00:20:57.760 --> 00:21:03.520]   distribution spread, but no, it's RL. Just give little reward for consistency and it generalizes to
[00:21:03.520 --> 00:21:10.880]   be inconsistent. RL very strong. Okay. System prompt. Um, they, they know, does this cause a drop in
[00:21:10.880 --> 00:21:16.560]   reasoning performance like R1? No, it doesn't. Um, reasoning performance stays, uh, performance stays
[00:21:16.560 --> 00:21:22.720]   consistent. I think they have this in section six in the ablation. I'll, I'll bring it up later
[00:21:22.720 --> 00:21:28.720]   if you can remind me. Okay. Next section, system prompt. Um, they find that RL is quite sensitive to
[00:21:28.720 --> 00:21:33.920]   their system prompt. And then I think their system prompt is a little too overfit, but what do I know?
[00:21:33.920 --> 00:21:41.360]   I'm not mistral. So they add stuff like be as casual as you want. This increases entropy, meaning it's
[00:21:41.360 --> 00:21:46.720]   allowed to explore a little bit more and it proves, yeah, it improves exploration. Here is the system
[00:21:46.720 --> 00:21:53.680]   prompt. So, um, you know, your thinking process must follow the, the think, the template, think your thoughts,
[00:21:53.680 --> 00:22:02.640]   then provide a concise summary of your reasoning and the final answer. Uh, oh, B is casual or causal?
[00:22:02.640 --> 00:22:08.960]   Oh, causal. I see. I see. I see. I see. Um, okay. You're so a user. It's casual. It's casual. It's
[00:22:08.960 --> 00:22:14.480]   casual. You're actually right. I just, I couldn't believe it. I think causal is better. Casual just
[00:22:14.480 --> 00:22:20.240]   means be chill bro. You know, be chill bro. But yeah, be chill made it reason better. But like,
[00:22:20.240 --> 00:22:25.760]   it's interesting if that's what you want and not even just that, like here, they even ask you, like
[00:22:25.760 --> 00:22:31.840]   they, they remind it to, what is it? Write your thoughts in the same language. Right? So we thought
[00:22:31.840 --> 00:22:39.120]   RL was enough to tell it to just like, okay, stick in reasoning, stick in your language. No, we must also
[00:22:39.120 --> 00:22:44.400]   prompt it again. Uh, you know, keep your thoughts in the same language and then yeah, be casual.
[00:22:44.400 --> 00:22:51.120]   That's cool. So, okay. Um, a user will ask you to solve a task. You should first draft your thinking
[00:22:51.120 --> 00:22:55.920]   process, your inner monologue. It tells it that it's an inner monologue. I think, uh, you know,
[00:22:55.920 --> 00:23:01.520]   in the long scheme of things on billions of tokens, do we need to remind it that thinking is an inner
[00:23:01.520 --> 00:23:07.200]   monologue? I think not, but I'm clearly not a prompt engineer like them. Uh, until you have
[00:23:07.200 --> 00:23:12.640]   drawn the final answer afterwards, write a summary of your thoughts. So yeah, then, you know, I think
[00:23:12.640 --> 00:23:16.560]   we should actually read the whole thing. I shouldn't skip through this. You should use markdown and latex
[00:23:16.560 --> 00:23:22.160]   to format your response. Your thinking should be in this think tags, your thoughts or draft. Also, I
[00:23:22.160 --> 00:23:27.520]   thought this is interesting. I don't know if this is just European. Uh, normally we see and slash or not
[00:23:27.520 --> 00:23:34.400]   or slash and, but you know, this model has seen or slash and much more. So interesting little stuff.
[00:23:34.400 --> 00:23:39.840]   B is casual and as long as you want until you are confident to generate a correct answer.
[00:23:39.840 --> 00:23:46.800]   I thought this is a bit much, but what do I know? Okay. After thinking. Yeah.
[00:23:46.800 --> 00:23:54.320]   Yeah. I, I think like the way they put problem call in and then stuff, I find it like weird. Shouldn't
[00:23:54.320 --> 00:23:58.000]   the model learn that the problem comes after the tag for the user role?
[00:23:58.000 --> 00:24:05.520]   Student. Uh, I mean, this is just pretty common. I don't, I don't think it's crazy. Most, most system
[00:24:05.520 --> 00:24:10.240]   prompts have something like this. Um, I guess it could not be problem. It could be like useful
[00:24:10.240 --> 00:24:15.440]   assistant, user call in great, but I don't know. This is what they do. The other one uses chat ML, um,
[00:24:15.440 --> 00:24:22.560]   more standard prompt format, but I didn't dwell as much there. If anyone else has thoughts, let's,
[00:24:22.560 --> 00:24:28.080]   let's discuss or just take it to chat. Okay. Um, sorry, I'm going to go a little quick because this
[00:24:28.080 --> 00:24:32.560]   is quite a long paper. There's still, there's still fun stuff in here. Uh, same, same system
[00:24:32.560 --> 00:24:37.200]   prompt for math and coding. Uh, the other interesting thing note here is their reasoning is only math
[00:24:37.200 --> 00:24:46.160]   and coding. Um, yeah, that's, that's what it is. Um, but it's all text. Okay. So infrastructure,
[00:24:46.160 --> 00:24:51.360]   this is a very fun section that I don't think any other paper really covers. Here's how to do like very
[00:24:51.360 --> 00:24:59.520]   large scale, um, RL on a lot of GPUs. Sorry. I've clicked a citation. Let me come back.
[00:24:59.520 --> 00:25:09.520]   Okay. RL. So, um, we adopt the distributed RL training similar to prior works. You should read
[00:25:09.520 --> 00:25:14.800]   these works if you're interested. That coordinates three types of workers. So trainers, trainers maintain
[00:25:14.800 --> 00:25:20.320]   copy of all the model weights and perform gradient updates. Generators are kind of doing these rollouts
[00:25:20.320 --> 00:25:26.080]   that use the latest policy to return completions with log probs from the training prompt. So basically
[00:25:26.080 --> 00:25:32.800]   prompt generators are doing a bunch of rollouts for GRPO. Here's, you know, 10 outputs. Generators
[00:25:32.800 --> 00:25:38.080]   are doing inference. Trainers are doing, uh, they're, they're keeping the model weights and doing, uh,
[00:25:38.080 --> 00:25:44.000]   gradient outputs. Verifiers. Verifiers are the ones verifying the output. So this is also not like,
[00:25:44.000 --> 00:25:49.280]   you know, this is like that, um, the classifier that checks for output, checks for
[00:25:49.280 --> 00:25:55.040]   consistency, checks if code compiles, checks if test pass, checks if the output is boxed. There are
[00:25:55.040 --> 00:26:00.320]   verifiers as well. So these are kind of the three kinds of workers that they need all in sync. And this
[00:26:00.320 --> 00:26:04.880]   is not like little, you know, okay, I'm running this on like one node. I'm okay with inefficiency.
[00:26:04.880 --> 00:26:11.360]   This is like, I'm training on tens of billions of tokens. And I don't want to waste like multiple,
[00:26:11.360 --> 00:26:17.600]   multiple nodes of, um, very expensive GPUs. So how do we optimize all this? It's very interesting. They're
[00:26:17.600 --> 00:26:23.040]   completely fine with stuff being like out of sync and shit just generalizes. Okay. So challenges with
[00:26:23.040 --> 00:26:28.320]   distributed RL. Generators are a significant part of the total compute and the part that's unique to
[00:26:28.320 --> 00:26:33.520]   online RL, right? Online RL being that the model is kind of doing this self-play, right? It's generating
[00:26:33.520 --> 00:26:39.760]   and then it's being, it's being graded on the output. So you're actually doing a lot of inference.
[00:26:39.760 --> 00:26:46.080]   Generators are kind of like the inference boxes, right? Uh, their workload is highly heterogeneous and hard to
[00:26:46.080 --> 00:26:52.480]   predict as the distribution of sequence lengths is highly skewed, right? Some outputs might be short and
[00:26:52.480 --> 00:26:59.120]   concise. Some generators might be very long and then they do have stuff in RL policy that, um, has like a
[00:26:59.120 --> 00:27:06.640]   length penalty. They have stuff to keep it within a certain distribution, but then you also want it to
[00:27:06.640 --> 00:27:13.840]   explore long lengths. But point being, um, these, these things are skewed, right? So if you have
[00:27:13.840 --> 00:27:20.000]   some stuff that's waiting for an extra 20,000 tokens to be generated, are you just stalling the generator or
[00:27:20.000 --> 00:27:26.640]   are you throwing this in some batch? How are you verifying stuff as it comes in? Um, so one of the main
[00:27:26.640 --> 00:27:31.920]   components inter is to introduce no bias on the sequence length, right? You can't do this all
[00:27:31.920 --> 00:27:38.320]   sequentially because you'll have so much delay. So how do we do this? Um, a more competing goal is to
[00:27:38.320 --> 00:27:43.680]   update the generator weights as soon as possible, right? So as soon as one inference is done, just do
[00:27:43.680 --> 00:27:49.040]   another one. And we want the generators to be as on policy as possible, but we want them to operate
[00:27:49.040 --> 00:27:54.880]   without waiting for trainers. So you don't want to wait. You want to be on, on policy kind of weird
[00:27:54.880 --> 00:27:59.520]   since you're keep, so it's like this kind of lag thing. I think I should have drawn a diagram for this,
[00:27:59.520 --> 00:28:08.000]   but GG. Um, so what they do is async generators. Basically we process batches sequentially. You start
[00:28:08.000 --> 00:28:14.080]   the generators on a batch, wait for all sequences to complete, update the model weights. No, sorry.
[00:28:14.080 --> 00:28:18.640]   This is not what they do. This is what you could do. And this is why it's slow. So what you would
[00:28:18.640 --> 00:28:27.200]   expect is, okay, basically you batch out all inferences. So do all your rollouts, wait for
[00:28:27.200 --> 00:28:33.200]   them all to complete, update all model weights on both the trainers and generators, and then repeat.
[00:28:33.200 --> 00:28:39.280]   So here's kind of the lag. As the first generator is done, as your first rollout that short finishes,
[00:28:39.280 --> 00:28:44.560]   you're now waiting for, that's kind of sitting idle for the other rollouts to complete. Once they're all
[00:28:44.560 --> 00:28:52.000]   done, we send them all to verifiers to verify the output. Generators are all sitting idle. And of
[00:28:52.000 --> 00:28:57.120]   course, the trainers are all just storing weights, doing nothing. Once the verification is done, then we
[00:28:57.120 --> 00:29:01.920]   do all the back prop, check what might weights to change. Then we update the trainers. After trainers
[00:29:01.920 --> 00:29:07.600]   are updated, then we have to change those weights back to generators, even more lag. So we have to
[00:29:07.600 --> 00:29:14.400]   re-update the weights on generators. Then we do all this again sequentially. Very, very bad. You have idle
[00:29:14.400 --> 00:29:19.680]   generators, low pipeline efficiency. This is fine for a little bit of post training. It's not that deep.
[00:29:19.680 --> 00:29:25.760]   So for an entire train run, you're cooked. You're like, it's not efficient. They want to be efficient.
[00:29:25.760 --> 00:29:31.200]   So we operate generators continuously at maximum throughput without even waiting for trainers.
[00:29:31.200 --> 00:29:37.760]   Basically, this means you're always doing rollouts and you'll always gather small groups from generators,
[00:29:37.760 --> 00:29:44.720]   verify them, update trainers. After these updates, trainers send new weights via NCCL. This is like
[00:29:45.280 --> 00:29:53.760]   interconnect InfiniBand GPU to GPU weight updates and they don't even disregard in-flight sequences that
[00:29:53.760 --> 00:30:00.640]   are being generated. So there's like this push of always keep rollouts happening and then always update
[00:30:00.640 --> 00:30:06.640]   those weights. Even if you're off policy and you're using old weights, just keep using them and you might
[00:30:06.640 --> 00:30:13.440]   be slightly off. Your KVs, your KV caches, so like your old previously generated tokens will be on old
[00:30:13.440 --> 00:30:18.320]   policy, but it's okay. It doesn't matter. Just use it. It doesn't make much of a difference.
[00:30:18.320 --> 00:30:24.640]   I think everyone should like really read into this section quite a bit. If you care about distributed,
[00:30:24.640 --> 00:30:29.600]   like large-scale RL training, it's a very elegant solution that just works that they tried.
[00:30:29.600 --> 00:30:35.520]   Yeah. So they just kind of keep stuff always happening. Here's kind of a, here's kind of a good
[00:30:35.520 --> 00:30:41.040]   diagram of what's happening here. So generators are rollouts, right? So you generate a bunch of sequences of
[00:30:41.040 --> 00:30:47.360]   different lengths. This one very long, this one very short. Do they open source the code? No,
[00:30:47.360 --> 00:30:51.280]   they don't. They don't open source shit. They don't even tell us what data this is trained on,
[00:30:51.280 --> 00:30:55.840]   but small LLM does, but they don't do this same fancy stuff. Okay. And they actually don't do native
[00:30:55.840 --> 00:31:02.000]   RL from scratch. They're doing distribution. They're doing distillation, but actually that's not as
[00:31:02.000 --> 00:31:08.160]   relevant. Anyway, so long output, short output. Generators just keep shitting out generations.
[00:31:08.160 --> 00:31:15.120]   Verifiers check when they can. Here are kind of batches that happen and you compute your back prop
[00:31:15.120 --> 00:31:21.040]   and your weight updates. You do this on the fly as soon as these little mini batches get filled. Then
[00:31:21.920 --> 00:31:27.360]   with Interconnect and FiniBand, you update these generator weights. And since they're still chunking
[00:31:27.360 --> 00:31:32.320]   out stuff, you might have stuff that's a little bit off policy from previous steps, previous weights,
[00:31:32.320 --> 00:31:37.760]   but it's okay. Just keep it running and it'll all work out in the end. And very efficient,
[00:31:37.760 --> 00:31:44.000]   fast pipeline of one to four. Let's read through this again, since I think this is interesting. So
[00:31:44.000 --> 00:31:50.880]   generators continuously output completions from prompts. So your generators are always doing rollouts.
[00:31:50.880 --> 00:31:59.600]   When a completion is finished, it's sent to a verifier. So check if it's box, check the output,
[00:31:59.600 --> 00:32:07.920]   run a code compile test. If it passes or if it doesn't, you do your step three, send it to a batch
[00:32:07.920 --> 00:32:15.040]   for updates. Each sequence is sent to a different data parallel group using all this stuff. Then you
[00:32:15.040 --> 00:32:22.320]   do gradient steps. So you do your GRPO. You check what's best on policy. Then this is very interesting.
[00:32:22.320 --> 00:32:30.080]   Wait to replace mid-generation, which means that in-flight generations continue with a slightly outdated
[00:32:30.080 --> 00:32:37.440]   KV cache and we do not refresh it. If I could just keep going. Sense model resides on both GPUs and
[00:32:37.440 --> 00:32:42.640]   trainers and generators. You basically have all the weights. You have to double up the weights, right?
[00:32:42.640 --> 00:32:48.080]   So are all very expensive. It's not just like hold weights, do next token prediction. You need two sets
[00:32:48.080 --> 00:32:54.400]   of weights actually held in memory. So expensive GPU shit. But since you have all the weights on your
[00:32:54.400 --> 00:33:02.320]   trainers and your generators, you can use NCCL, which is like CUDA InfiniBand GPU to GPU transfer,
[00:33:02.320 --> 00:33:10.640]   which is much faster than like most other data transfer shits. You can use that. It's very fast.
[00:33:10.640 --> 00:33:17.280]   That works. Okay. As a solution is generated for a single prompt, it may experience multiple updates
[00:33:17.280 --> 00:33:22.720]   from the weights. So even in a single prompt, as you're doing next token generation, you'll have multiple
[00:33:22.720 --> 00:33:30.400]   weight updates to that model reflecting latest time improvements. Very, very, very, very fast stuff. I think I'm too
[00:33:30.400 --> 00:33:35.280]   hyped on this training pipeline. So I'll just continue in case people are getting lost.
[00:33:35.280 --> 00:33:43.680]   Yup. That's that section. I think if you care more, read section three of this paper, follow up in
[00:33:43.680 --> 00:33:50.560]   Discord. Okay. Data curation. They only want to use verifiable solutions. Oh, actually, I'll take a pause.
[00:33:50.560 --> 00:33:59.120]   Any questions on this stuff? Or should we move on? Okay. No questions. I hope people followed. I like that section.
[00:33:59.120 --> 00:34:15.280]   Never mind. No question. Okay. Data curation. So data curation, we, they only want to use verifiable solution.
[00:34:15.280 --> 00:34:18.480]   Oh, people, sorry. Can I ask a quick question? Yes, yes, yes. Did they mention what the, like the sort of utilization level they got on their GPUs? No, no, no. They don't talk about any of this. I think actually there's, I don't know if I'm blanking. There might be,
[00:34:18.480 --> 00:34:36.480]   uh, a note that I'm not remembering it, but I'm like 80% sure they don't. But, uh, it seems like the generators are a hundred percent utilization. Verifiers will never be full utilization. And a lot of that doesn't have to even be on GPU. Cause you have to wait for sequences, even with your batching.
[00:34:36.480 --> 00:34:56.480]   Yeah. Um, trainers doing backprop. That's just efficiency of how well they updated this GRPO stuff. Um, but no, they, they don't talk about this level of efficiency.
[00:34:56.480 --> 00:35:04.480]   Somebody in the chat also asked about learning rate, uh, or open source code for the distributed RL or the two questions I think related to this section.
[00:35:04.480 --> 00:35:19.480]   Yeah. I answered the, the code. No, Mistral doesn't give any of it, but the small LLM paper does. They give it all. They give all the checkpoints, all the, not all the checkpoints. They give some checkpoints. They give base model, instruct model, training data, all that stuff.
[00:35:19.480 --> 00:35:29.480]   Good resource to learn a more distributed RL training. Yeah. I have a, I have a link of papers I would recommend. I'll, I'll share it in discord. Just remind me cause I'll probably forget.
[00:35:29.480 --> 00:35:37.480]   But, um, that's the fun thing about this paper, but let's, let's just spend the next five minutes covering the rest of it pretty quick.
[00:35:37.480 --> 00:35:44.480]   Okay. So, um, they want verifiable stuff. They basically want math and code. Ooh, I didn't know I could do this. Very fun.
[00:35:44.480 --> 00:35:50.480]   Um, they do a lot of filtration. Here's how they filter. So this is something I brought up earlier.
[00:35:50.480 --> 00:36:00.480]   Math started with 700,000 samples. Uh, they cut 95%. This is actually pretty interesting. They train a model with RL to do filtration.
[00:36:00.480 --> 00:36:08.480]   That's the TDR of this. So as you would expect, they get rid of the basic shit, right? So filter out stuff that has wrong answers filter.
[00:36:08.480 --> 00:36:14.480]   Uh, they do a little bit of rewriting. So, uh, final answers are verifiable with a rule based system.
[00:36:14.480 --> 00:36:20.480]   They want to filter proof based multi-part problems where it's difficult to verify, uh, correctness. So get rid of shit.
[00:36:20.480 --> 00:36:26.480]   That's hard to verify. They reformulate multiple choice into statement based problems for more robust verification.
[00:36:26.480 --> 00:36:35.480]   So some rewriting, uh, two stage of filtration process. So first, um, they want stuff that's like Goldilocks difficulty, right?
[00:36:35.480 --> 00:36:44.480]   Not too easy, not too hard. So if Mr. Large can answer all of it, um, throw it away. If it can't, can't answer any of it, throw it away again.
[00:36:44.480 --> 00:36:53.480]   So sample 16 problems, 16 solutions for each problem, removing the ones that are either never solved or solved with high success rate.
[00:36:53.480 --> 00:37:03.480]   Um, then this initial set they use to train a 24 B model with this RL pipeline, getting a small model that's better than Mistral too large, right?
[00:37:03.480 --> 00:37:12.480]   So step one, use your best model, filter out shit. Step two, do a little bit of RL on a model to make it good at math.
[00:37:12.480 --> 00:37:17.480]   Then in the second stage, use this model to once again, answer the shit that was hard.
[00:37:17.480 --> 00:37:22.480]   Uh, well answer everything filter, just do inference, right? Get rid of the easy stuff again.
[00:37:22.480 --> 00:37:30.480]   Then we filter out potentially incorrect problems that have a majority of samples with the same final answer of a degree on the ground of a disagree.
[00:37:30.480 --> 00:37:35.480]   Um, so you can kind of bring back some stuff that was hard, but not hard.
[00:37:35.480 --> 00:37:43.480]   This two stage is good because, um, a single pass with the initial weaker model would have been insufficient.
[00:37:43.480 --> 00:37:53.480]   The reasoning capabilities would have caused it to discard many difficult problems that were incorrect, but this new middle model can kind of solve them.
[00:37:53.480 --> 00:38:00.480]   So kind of interesting, right? Use your big model, get rid of everything easy and hard. Train a reasoning model, use the reasoning model again.
[00:38:00.480 --> 00:38:06.480]   You can bring back some hard stuff that your hard model couldn't solve. Now you have more data, but holy shit.
[00:38:06.480 --> 00:38:12.480]   They, they filtered a lot. They got rid of 95% of the stuff. Uh, code same, same beans, right?
[00:38:12.480 --> 00:38:20.480]   So we want them to be, um, a large number of correct tests. First remove stuff without solutions and without enough tests.
[00:38:20.480 --> 00:38:30.480]   This was kind of the interesting thing. Each solution is then tested. Uh, we disregard tests with insufficient, we disregard tests with insufficient agreement.
[00:38:30.480 --> 00:38:37.480]   Um, then, uh, yeah, this two paragraph is a ton of work, right? You have to train a whole middle model.
[00:38:37.480 --> 00:38:41.480]   And I mean, you get rid of 95% of your data, kind of crazy.
[00:38:41.480 --> 00:38:49.480]   Um, on code, we want the, okay, what do we do for tests with sufficient agreement, but no successful solution.
[00:38:49.480 --> 00:38:54.480]   We assume that the test is incorrect and updated. That's just some like next level shit, right?
[00:38:54.480 --> 00:38:58.480]   I don't know if it's that next level, but basically your test is wrong. Fuck you.
[00:38:58.480 --> 00:39:04.480]   We'll make our, we'll rewrite our test. Uh, in cases where the code lacks tests, we just generate tests.
[00:39:04.480 --> 00:39:09.480]   If we are confident we can generate tests. This is like, this paragraph is also a good bit of work, right?
[00:39:09.480 --> 00:39:14.480]   Uh, finally, we, where applicable problem statements are duplicated to Python and C++.
[00:39:14.480 --> 00:39:18.480]   Then we have 35 K sets. Here's where they're like, Hey, we can't tell you everything.
[00:39:18.480 --> 00:39:24.480]   We don't tell you how many we started with. Uh, we just end with, um, with 35 K.
[00:39:24.480 --> 00:39:28.480]   Okay. Experimentation. Uh, that's, that's data section. I think it's pretty interesting.
[00:39:28.480 --> 00:39:34.480]   The math stuff is pretty cool. Okay. How far can one get with pure RL given a strong teacher model?
[00:39:34.480 --> 00:39:43.480]   Um, very basic diagram, right? So data filtering, uh, for math, phase one, phase two, phase three.
[00:39:43.480 --> 00:39:47.480]   This is kind of useless for code. Just do that training overview.
[00:39:47.480 --> 00:39:55.480]   So for MISTO3 medium for magistral medium, it's just pure RL. For MISTO3 small, you do some SFT on rollout.
[00:39:55.480 --> 00:40:00.480]   Then you do RL and then you've got magic wand over here. Here's kind of their RL stages.
[00:40:00.480 --> 00:40:04.480]   Um, length plateaus, increased completion length in the middle.
[00:40:04.480 --> 00:40:08.480]   So this is like more into that RL policy itself, right? They do multi-stages.
[00:40:08.480 --> 00:40:15.480]   So, uh, start with low length, add more length, add more challenging data, um, as you start to hit the limit.
[00:40:15.480 --> 00:40:21.480]   So it's like similar to pre-training, post-training where the analogy you can think of is for context length.
[00:40:21.480 --> 00:40:27.480]   First you do the majority of your training at like 4K context, then you do higher context, then you do higher context.
[00:40:27.480 --> 00:40:35.480]   Or for post-training, you do the majority of your SFT on regular data. Then you do a little bit of hard math and reasoning.
[00:40:35.480 --> 00:40:42.480]   Then you do SFT like the last 5% on all of your like super hard data. They do the same shit with RL.
[00:40:42.480 --> 00:40:49.480]   Um, duh, duh, duh, duh, duh. We, oh, for all their eval, um, they do temperature 0.7.
[00:40:49.480 --> 00:40:54.480]   Top-P of one, which is basically include all output distribution for math.
[00:40:54.480 --> 00:40:58.480]   And then for math, top-P of one. So include all your outputs.
[00:40:58.480 --> 00:41:08.480]   For GPQA, top-P of 0.95, which means you only use the, the like top 500 roughly, uh, output tokens.
[00:41:08.480 --> 00:41:15.480]   Um, maximum length for 4DK evals are good. I guess this, maybe I read a little bit more into this multi-stage.
[00:41:15.480 --> 00:41:18.480]   I don't know if they talked about it. I thought they did, but oh, here they do, they do.
[00:41:18.480 --> 00:41:24.480]   Um, okay. Evals. I don't care about evals on this, uh, model evals are fake news.
[00:41:24.480 --> 00:41:29.480]   You should really care about your, um, your other, your other evals.
[00:41:29.480 --> 00:41:34.480]   Okay. Your, your actual system evals. Okay. Training a model without cold start problem.
[00:41:34.480 --> 00:41:38.480]   This is basically what every, this is what DC DeepSeek said. You need cold start.
[00:41:38.480 --> 00:41:43.480]   Turns out that's fake news. Um, Fi showed that you can, you can do other stuff.
[00:41:43.480 --> 00:41:48.480]   This also shows you cannot do other stuff. So, uh, as model performance increases,
[00:41:48.480 --> 00:41:50.480]   we add harder data. Crazy.
[00:41:50.480 --> 00:41:55.480]   Harder data splits are in, are constructed by one more complicated data,
[00:41:55.480 --> 00:41:59.480]   which was filtered out earlier stage. So we saw that two stage of math, right?
[00:41:59.480 --> 00:42:04.480]   Basically that second stage where they use their smart model to generate stuff
[00:42:04.480 --> 00:42:09.480]   that the Mr. Large couldn't solve, but RL model could solve that's used in the second stage
[00:42:09.480 --> 00:42:13.480]   or just completely removing, um, or completely remove stuff.
[00:42:13.480 --> 00:42:15.480]   Uh, length doesn't stop growing.
[00:42:15.480 --> 00:42:19.480]   We increase allowed completion length and maximal completion length over time.
[00:42:19.480 --> 00:42:22.480]   Uh, this is in their RL penalty.
[00:42:22.480 --> 00:42:27.480]   So they have a RL penalty for length skewing of being too far out of distribution.
[00:42:27.480 --> 00:42:32.480]   As training progresses, they start to, um, they start to increase this.
[00:42:32.480 --> 00:42:36.480]   This is all on magistral medium. So just pure RL from, uh, SFT model.
[00:42:36.480 --> 00:42:42.480]   So basically from a useful assistant that went from next token predictor to useful chat bot,
[00:42:42.480 --> 00:42:47.480]   um, pure RL, they, they start to add harder and harder data.
[00:42:47.480 --> 00:42:49.480]   They start to allow for longer output.
[00:42:49.480 --> 00:42:55.480]   Um, generally as generation length increases, the memory associated with KV cache increases.
[00:42:55.480 --> 00:42:58.480]   So we scale down the total number of concurrent requests.
[00:42:58.480 --> 00:43:01.480]   Uh, this is something about RJ or like efficiency.
[00:43:01.480 --> 00:43:07.480]   They, they need to do better, um, better RL stuff, but they don't talk much about the training.
[00:43:07.480 --> 00:43:09.480]   I think I'm just inferring a lot from their stuff.
[00:43:09.480 --> 00:43:13.480]   I could be completely fake using this and being wrong, but that's my interpretation.
[00:43:13.480 --> 00:43:17.480]   Then the fun one, the Apache 2, um, RL with SFT bootstrapping.
[00:43:17.480 --> 00:43:21.480]   So, um, they do a cold start on SFT traces from magistral medium.
[00:43:21.480 --> 00:43:23.480]   So they take their big model.
[00:43:23.480 --> 00:43:24.480]   That's a reasoner.
[00:43:24.480 --> 00:43:25.480]   They don't use deep seek.
[00:43:25.480 --> 00:43:35.480]   They, they, they pass through, um, they basically pass through traces of, um, problems.
[00:43:35.480 --> 00:43:43.480]   They keep a mix of regular, uh, difficulty, dah, dah, dah, dah, avoid biasing towards easier problems.
[00:43:43.480 --> 00:43:47.480]   So mix of easy, hard, um, early chain of thought.
[00:43:47.480 --> 00:43:48.480]   Then they, they do SFT.
[00:43:48.480 --> 00:43:52.480]   So generate responses from reasoning model on a diverse set of prompts.
[00:43:52.480 --> 00:43:54.480]   They use, um, open data sets here.
[00:43:54.480 --> 00:43:58.480]   They use open thoughts and a code subset of open R1.
[00:43:58.480 --> 00:44:02.480]   Uh, this gives us a reasoning data set with mixed difficulty.
[00:44:02.480 --> 00:44:08.480]   We also include 10% data points of general instruction tuning to preserve non-reasoning capabilities.
[00:44:08.480 --> 00:44:13.480]   They do four epochs of training of how many samples.
[00:44:13.480 --> 00:44:15.480]   They tell us how many samples and that's somewhere here.
[00:44:15.480 --> 00:44:20.480]   Then we use this SFT checkpoint with RL.
[00:44:20.480 --> 00:44:22.480]   They do their RL thing.
[00:44:22.480 --> 00:44:27.480]   Now that knows how to kind of do, um, do this reasoning.
[00:44:27.480 --> 00:44:28.480]   Where'd it go?
[00:44:28.480 --> 00:44:31.480]   Uh, temperature of this, dah, dah, dah, dah.
[00:44:31.480 --> 00:44:32.480]   Okay.
[00:44:32.480 --> 00:44:33.480]   Benchmarks of bullshit.
[00:44:33.480 --> 00:44:35.480]   Um, benchmarks exist.
[00:44:35.480 --> 00:44:36.480]   Multilingual benchmarks.
[00:44:36.480 --> 00:44:40.480]   This was my, uh, what is this?
[00:44:40.480 --> 00:44:44.480]   We see that the model performs lower on multilingual compared to English.
[00:44:44.480 --> 00:44:49.480]   Probably because we constrained English in the language of reasoning.
[00:44:49.480 --> 00:44:50.480]   Okay.
[00:44:50.480 --> 00:44:52.480]   It's similar to that of a base model.
[00:44:52.480 --> 00:44:54.480]   I guess someone did bring up multi, multi link.
[00:44:54.480 --> 00:44:56.480]   No, someone brought up multimodal, not multilingual.
[00:44:56.480 --> 00:44:58.480]   But yeah, slightly worse multimodal.
[00:44:58.480 --> 00:44:59.480]   It's good.
[00:44:59.480 --> 00:45:00.480]   Uh, multilingual slightly cooked.
[00:45:00.480 --> 00:45:03.480]   Uh, I don't want to spend much time on benchmarks.
[00:45:03.480 --> 00:45:04.480]   So I will skip this.
[00:45:04.480 --> 00:45:08.480]   I don't think many people use these models, but very good.
[00:45:08.480 --> 00:45:09.480]   Very good paper.
[00:45:09.480 --> 00:45:11.480]   Uh, sorry for skipping, but it's good.
[00:45:11.480 --> 00:45:13.480]   Abilation is pretty fun.
[00:45:13.480 --> 00:45:16.480]   Um, cross domain generalization.
[00:45:16.480 --> 00:45:17.480]   I talked about this.
[00:45:17.480 --> 00:45:21.480]   So if you only do RL on math, can it do good on code?
[00:45:21.480 --> 00:45:22.480]   Yes, it can.
[00:45:22.480 --> 00:45:28.480]   If you only do RL on, um, code, can it do good on math?
[00:45:28.480 --> 00:45:29.480]   Yes, it can.
[00:45:29.480 --> 00:45:32.480]   So baseline was 32 on math, 22 on code.
[00:45:32.480 --> 00:45:34.480]   Only do RL on math.
[00:45:34.480 --> 00:45:35.480]   Guess what?
[00:45:35.480 --> 00:45:36.480]   Code goes up.
[00:45:36.480 --> 00:45:39.480]   Uh, baseline was, I'm cooked.
[00:45:39.480 --> 00:45:41.480]   Baseline was 32 on math.
[00:45:41.480 --> 00:45:43.480]   Only do RL on code.
[00:45:43.480 --> 00:45:44.480]   Guess what?
[00:45:44.480 --> 00:45:45.480]   Math goes up.
[00:45:45.480 --> 00:45:51.480]   Um, so shit kind of generalizes, but we only have two styles of reasoning verifiable data.
[00:45:51.480 --> 00:45:55.480]   So I don't know how much this matters, but it's cool.
[00:45:55.480 --> 00:45:56.480]   I guess it matters.
[00:45:56.480 --> 00:45:57.480]   I disagree.
[00:45:57.480 --> 00:45:58.480]   It matters.
[00:45:58.480 --> 00:46:00.480]   Um, what else?
[00:46:00.480 --> 00:46:04.480]   Are Mistral 3 small with pure RL achieve similar performance?
[00:46:04.480 --> 00:46:10.480]   Uh, as the distilled version suggests that benefits of RL are not exclusive to larger base models.
[00:46:10.480 --> 00:46:12.480]   This is one of those four points that they make.
[00:46:12.480 --> 00:46:20.480]   Um, we contribute insights to contradict existing formulas that, um, are,
[00:46:20.480 --> 00:46:25.480]   whether RL can improve upon distillation of SFT baseline.
[00:46:25.480 --> 00:46:29.480]   So if you remember for DeepSeq, what they also put out was distills.
[00:46:29.480 --> 00:46:36.480]   They used like actual logic based distillation laws and they distilled SFT.
[00:46:36.480 --> 00:46:44.480]   Um, they, they distilled the models on reasoning rollouts with SFT.
[00:46:44.480 --> 00:46:49.480]   And it had very, very good performance updates, uh, performance benchmarks.
[00:46:49.480 --> 00:46:50.480]   They're like, nah, fuck that.
[00:46:50.480 --> 00:46:52.480]   Our RL actually works pretty good too.
[00:46:52.480 --> 00:46:56.480]   And this shows that they did a Mistral 3 small with pure RL.
[00:46:56.480 --> 00:47:05.480]   So everything we talked about here was Mistral 3 small with SFT as a cold start then RL.
[00:47:05.480 --> 00:47:06.480]   But no, they actually trained one.
[00:47:06.480 --> 00:47:08.480]   That's also pure RL.
[00:47:08.480 --> 00:47:09.480]   It's pretty good.
[00:47:09.480 --> 00:47:11.480]   Um, actually, yeah, I think you're right.
[00:47:11.480 --> 00:47:14.480]   I don't think DeepSeq was logic based distillation.
[00:47:14.480 --> 00:47:18.480]   I think, uh, I don't think they could do that since that's not the same class family.
[00:47:18.480 --> 00:47:20.480]   It was just SFT based distillation.
[00:47:20.480 --> 00:47:21.480]   My bad.
[00:47:21.480 --> 00:47:27.480]   Um, but, uh, they're probably talking about the Quen, Quen logic based distillation.
[00:47:27.480 --> 00:47:30.480]   So same, same point, just Quen.
[00:47:30.480 --> 00:47:36.480]   Uh, DeepSeq was just SFT rollouts, but Quen should be logic based because Quen has same family.
[00:47:36.480 --> 00:47:38.480]   But I could also be wrong there.
[00:47:38.480 --> 00:47:39.480]   Okay.
[00:47:39.480 --> 00:47:41.480]   Uh, batching stuff.
[00:47:41.480 --> 00:47:42.480]   Skip it.
[00:47:42.480 --> 00:47:44.480]   Not enough time, but if you're interested, read it.
[00:47:44.480 --> 00:47:45.480]   Analysis.
[00:47:45.480 --> 00:47:50.480]   Um, increasing completion length is the main resource that improves performance.
[00:47:50.480 --> 00:47:52.480]   This is kind of interesting, right?
[00:47:52.480 --> 00:47:56.480]   So you must have longer, uh, completion length over time.
[00:47:56.480 --> 00:48:00.480]   Uh, the multimodal thing that I talked about for those that missed it was very interesting.
[00:48:00.480 --> 00:48:03.480]   That kind of, is this, did I skip this free lunch?
[00:48:03.480 --> 00:48:04.480]   Free lunch on multimodal.
[00:48:04.480 --> 00:48:08.480]   Um, yeah, that was interesting.
[00:48:08.480 --> 00:48:14.480]   Uh, low dimension space, uh, more fine grade rewards and code tasks, completion, dah, dah, dah, dah.
[00:48:14.480 --> 00:48:15.480]   Okay.
[00:48:15.480 --> 00:48:17.480]   Um, a length direction.
[00:48:17.480 --> 00:48:23.480]   So they do some PCA on outputs and find that length wants to go up, which is good.
[00:48:23.480 --> 00:48:25.480]   I think you can read that on your own.
[00:48:25.480 --> 00:48:27.480]   Uh, multimodal, I'll bring this up again.
[00:48:27.480 --> 00:48:30.480]   So models are natively multimodal.
[00:48:30.480 --> 00:48:38.480]   The base models that they train on, they have a vision encoder that encodes images in the same latent space.
[00:48:38.480 --> 00:48:42.480]   Reasoning happens only on text, but it's all in the same latent space.
[00:48:42.480 --> 00:48:49.480]   So one might expect that the performance of multimodal would degrade, but no, not only does it remain good, but it actually gets better.
[00:48:49.480 --> 00:48:55.480]   So mmMU, mmMU pro, uh, provision, all these go up.
[00:48:55.480 --> 00:48:57.480]   Very, very cool stuff.
[00:48:57.480 --> 00:48:59.480]   Um, what other impacts?
[00:48:59.480 --> 00:49:00.480]   Uh, function calling.
[00:49:00.480 --> 00:49:04.480]   The thing maintains and improves tool calling and instruction use.
[00:49:04.480 --> 00:49:07.480]   Um, partial reward for code data.
[00:49:07.480 --> 00:49:08.480]   This was an interesting one.
[00:49:08.480 --> 00:49:10.480]   So unsuccessful approaches.
[00:49:10.480 --> 00:49:13.480]   Uh, basically you need verification on output, right?
[00:49:13.480 --> 00:49:17.480]   So they thought, okay, what if, uh, we do partial stuff.
[00:49:17.480 --> 00:49:25.480]   So what if we can't verify the output and we want to give it a slight reward bonus for stuff where it's on the right path, but it gets the wrong output.
[00:49:25.480 --> 00:49:32.480]   So basically if you start thinking, uh, you fuck up at the end, but you're on the right path, can we give you a little bit of reward?
[00:49:32.480 --> 00:49:36.480]   No, we can't because that starts to give it false signals.
[00:49:36.480 --> 00:49:44.480]   Basically like, let's say you're thinking about how to answer a problem, like a math question, and you have good reasoning traces and you're following the stuff.
[00:49:44.480 --> 00:49:46.480]   But if you like, forget a theorem, right?
[00:49:46.480 --> 00:49:54.480]   Like let's say you forget central limit theorem and you just go down this complete opposite path, or you forget you can't divide by zero, or you forget like how to plot,
[00:49:54.480 --> 00:49:57.480]   how to plot an exponential and you're, you're doing everything right.
[00:49:57.480 --> 00:50:00.480]   You're thinking your reasoning, but you're on the complete wrong path.
[00:50:00.480 --> 00:50:03.480]   You're giving false signals and these are incorrect solutions.
[00:50:03.480 --> 00:50:05.480]   And, uh, yeah, it's actually worse.
[00:50:05.480 --> 00:50:08.480]   So for little proportional rewards, which would be great.
[00:50:08.480 --> 00:50:11.480]   That, that gives us a bunch more training data, right?
[00:50:11.480 --> 00:50:17.480]   If I don't have to use verifiable data, if I can still get little outputs from proportional rewards, uh, that would be huge.
[00:50:17.480 --> 00:50:21.480]   Cause we already have to cut 95% of our data, but it turns out this didn't work.
[00:50:21.480 --> 00:50:23.480]   I'm a little bit more bullish on this.
[00:50:23.480 --> 00:50:35.480]   I think that their approach to GRPO and how much reward they gave and the filtration, like, I think you need a better verifier on this and you can squeeze out some more performance, right?
[00:50:35.480 --> 00:50:39.480]   Uh, but then you need a good verifier on this and that.
[00:50:39.480 --> 00:50:40.480]   So I think there's still stuff.
[00:50:40.480 --> 00:50:45.480]   I think in the future we'll have like partial output verification stuff.
[00:50:45.480 --> 00:50:49.480]   You can quote me on this, uh, soon, but you need very good voter verifiers.
[00:50:49.480 --> 00:50:52.480]   Uh, I don't think that the, but like, it's the right approach, right?
[00:50:52.480 --> 00:50:54.480]   You, you basically gave it a false signal.
[00:50:54.480 --> 00:50:55.480]   You're cooked.
[00:50:55.480 --> 00:50:56.480]   Uh, entropy targeting.
[00:50:56.480 --> 00:50:58.480]   You want it to be exploratory.
[00:50:58.480 --> 00:51:03.480]   Um, RL model using open source reasoning traces.
[00:51:03.480 --> 00:51:13.480]   So they use, um, open thoughts and code subset, both improve prompt generalization, generations, da, da, da, da, da.
[00:51:13.480 --> 00:51:16.480]   Applying RL is good over SFT checkpoint.
[00:51:16.480 --> 00:51:17.480]   Good.
[00:51:17.480 --> 00:51:18.480]   Good.
[00:51:18.480 --> 00:51:18.480]   Good.
[00:51:18.480 --> 00:51:20.480]   You can do pure RL without SFT.
[00:51:20.480 --> 00:51:21.480]   What else?
[00:51:21.480 --> 00:51:22.480]   Conclusion.
[00:51:22.480 --> 00:51:23.480]   Okay.
[00:51:23.480 --> 00:51:25.480]   Uh, we look forward to the next research.
[00:51:25.480 --> 00:51:28.480]   What loss and optimization algorithms are most appropriate?
[00:51:28.480 --> 00:51:36.480]   How much gain can be unlocked by bootstrapping with its own reasoning traces or how to scale the next generation, next order of magnitude of compute?
[00:51:36.480 --> 00:51:37.480]   How do we scale this up?
[00:51:37.480 --> 00:51:43.480]   So basically I really liked that, um, that section on infrastructure.
[00:51:43.480 --> 00:51:48.480]   How do we scale this up another organ, uh, another order of magnitude?
[00:51:48.480 --> 00:51:49.480]   That's another follow up.
[00:51:49.480 --> 00:51:51.480]   That's another open question.
[00:51:51.480 --> 00:51:52.480]   Then the fun one.
[00:51:52.480 --> 00:51:57.480]   Uh, we want to push the boundaries of RL across a whole range of applications.
[00:51:57.480 --> 00:52:01.480]   They want to do RL with tool use integrated multimodality and agents.
[00:52:01.480 --> 00:52:02.480]   Uh, multimodality.
[00:52:02.480 --> 00:52:07.480]   Think about verification of images and like questions like that.
[00:52:07.480 --> 00:52:12.480]   And then agents, agents is a feature where we're hyped.
[00:52:12.480 --> 00:52:14.480]   So that's conclusion.
[00:52:14.480 --> 00:52:15.480]   Um, damn.
[00:52:15.480 --> 00:52:19.480]   I really want to go over second paper, but I was too hyped on this one.
[00:52:19.480 --> 00:52:22.480]   When I was setting programming, dah, dah, dah, dah.
[00:52:22.480 --> 00:52:23.480]   Okay.
[00:52:23.480 --> 00:52:24.480]   Any questions?
[00:52:24.480 --> 00:52:27.480]   Um, what questions do we have?
[00:52:27.480 --> 00:52:29.480]   Someone interrupt me for their questions.
[00:52:29.480 --> 00:52:33.480]   Otherwise I'm going to do a four minute, unjustice to small lm3.
[00:52:33.480 --> 00:52:34.480]   No questions.
[00:52:34.480 --> 00:52:35.480]   Small lm3.
[00:52:35.480 --> 00:52:36.480]   No questions.
[00:52:36.480 --> 00:52:37.480]   Small lm3.
[00:52:37.480 --> 00:52:39.480]   This came out of Hugging Face yesterday.
[00:52:39.480 --> 00:52:41.480]   Chonky, chunky dataset model.
[00:52:41.480 --> 00:52:42.480]   Uh, but you know, very good.
[00:52:42.480 --> 00:52:43.480]   I must shout out Hugging Face.
[00:52:43.480 --> 00:52:44.480]   It's actual research.
[00:52:44.480 --> 00:52:50.480]   Um, they did a lot of experiments, ablations, a million dollar train run.
[00:52:50.480 --> 00:52:53.480]   They train a three B that's a hybrid reasoner.
[00:52:53.480 --> 00:52:55.480]   First thing that shows us how to do good hybrid reasoning.
[00:52:55.480 --> 00:52:57.480]   Uh, pre-training is all done.
[00:52:57.480 --> 00:52:59.480]   Post-training is all done.
[00:52:59.480 --> 00:53:00.480]   11 trillion tokens.
[00:53:00.480 --> 00:53:03.480]   Soda at three B scale competitive with four B.
[00:53:03.480 --> 00:53:04.480]   I used to think this is stupid.
[00:53:04.480 --> 00:53:05.480]   Just run a four B.
[00:53:05.480 --> 00:53:09.480]   But, uh, I guess, you know, you're, you're shaving off a lot of parameters.
[00:53:09.480 --> 00:53:16.480]   You're shaving 30% of, um, your weight, which is important for edge stuff, but really uses edge stuff.
[00:53:16.480 --> 00:53:19.480]   Uh, instruction model with dual mode reasoning.
[00:53:19.480 --> 00:53:20.480]   That's new.
[00:53:20.480 --> 00:53:25.480]   Uh, basically to do this, uh, they do a mixture of thinking, no thinking.
[00:53:25.480 --> 00:53:28.480]   Is there a good paper on agentic behavior URL?
[00:53:28.480 --> 00:53:29.480]   I don't know.
[00:53:29.480 --> 00:53:31.480]   Multilingual, long context.
[00:53:31.480 --> 00:53:32.480]   Great paper, great paper.
[00:53:32.480 --> 00:53:33.480]   Well, not really a paper.
[00:53:33.480 --> 00:53:34.480]   It's just a blog post.
[00:53:34.480 --> 00:53:35.480]   I expect better.
[00:53:35.480 --> 00:53:37.480]   Um, group query attention.
[00:53:37.480 --> 00:53:38.480]   Nope.
[00:53:38.480 --> 00:53:39.480]   Intra document masking.
[00:53:39.480 --> 00:53:40.480]   Okay.
[00:53:40.480 --> 00:53:41.480]   Forget all that.
[00:53:41.480 --> 00:53:42.480]   Here's their fun nodes.
[00:53:42.480 --> 00:53:44.480]   They use a whole lot of GPUs.
[00:53:44.480 --> 00:53:48.480]   48 nodes of H one hundreds for 220,000 GPU hours.
[00:53:48.480 --> 00:53:53.480]   Uh, distributed was, oh no, I've opened stuff.
[00:53:53.480 --> 00:54:00.480]   Um, yeah, distributed data parallel and tensor parallel checkpoint saving.
[00:54:00.480 --> 00:54:01.480]   Okay.
[00:54:01.480 --> 00:54:04.480]   Uh, data mixture three phases of training.
[00:54:04.480 --> 00:54:06.480]   First phase, all web, then more math and code.
[00:54:06.480 --> 00:54:07.480]   Then even more math and code.
[00:54:07.480 --> 00:54:08.480]   Crazy, crazy.
[00:54:08.480 --> 00:54:10.480]   Uh, what data sets go into here.
[00:54:10.480 --> 00:54:11.480]   They talk about it.
[00:54:11.480 --> 00:54:15.480]   Uh, mid training, this concept of mid training context length extension.
[00:54:15.480 --> 00:54:17.480]   I think the more fun stuff is reasoning.
[00:54:17.480 --> 00:54:19.480]   When reasoning comes in and mid training.
[00:54:19.480 --> 00:54:24.480]   Um, so after extending context length, we do, we do mid training.
[00:54:24.480 --> 00:54:26.480]   They use other data sets.
[00:54:26.480 --> 00:54:29.480]   So open thoughts and Nvidia Nemo Tron post training reasoning.
[00:54:29.480 --> 00:54:33.480]   Uh, this is distilled from R1 open thoughts as well.
[00:54:33.480 --> 00:54:34.480]   35 billion tokens.
[00:54:34.480 --> 00:54:36.480]   We use chat ML template.
[00:54:36.480 --> 00:54:37.480]   Da, da, da, da, da.
[00:54:37.480 --> 00:54:38.480]   Post training.
[00:54:38.480 --> 00:54:40.480]   Um, da, da, da, da.
[00:54:40.480 --> 00:54:42.480]   Mid training, post training.
[00:54:42.480 --> 00:54:43.480]   APO.
[00:54:43.480 --> 00:54:44.480]   APO was interesting.
[00:54:44.480 --> 00:54:45.480]   Building the chat template.
[00:54:45.480 --> 00:54:46.480]   Do SFT.
[00:54:46.480 --> 00:54:47.480]   Okay.
[00:54:47.480 --> 00:54:48.480]   I don't have time for this paper.
[00:54:48.480 --> 00:54:49.480]   This is too long.
[00:54:49.480 --> 00:54:50.480]   Model merging.
[00:54:50.480 --> 00:54:51.480]   I talked about model merging.
[00:54:51.480 --> 00:54:52.480]   This was a fun one.
[00:54:52.480 --> 00:54:57.480]   APO is a way to kind of better DPO.
[00:54:57.480 --> 00:55:03.480]   It's like a play on DPO that lets it do good RL reasoning plus, um, context.
[00:55:03.480 --> 00:55:05.480]   Then we model merge by context.
[00:55:05.480 --> 00:55:10.480]   Performance is stupid, but I wanna, I wanna talk about this dual instruct reasoning model.
[00:55:10.480 --> 00:55:11.480]   This is very interesting.
[00:55:11.480 --> 00:55:16.480]   Um, I think, I think I shouldn't do this paper harm by doing it one minute.
[00:55:16.480 --> 00:55:19.480]   Maybe we get someone from hugging face to do it next time.
[00:55:19.480 --> 00:55:21.480]   Or, or we just do this one.
[00:55:21.480 --> 00:55:23.480]   It's kind of short, but yeah, you should read this.
[00:55:23.480 --> 00:55:24.480]   Um, good paper.
[00:55:24.480 --> 00:55:25.480]   Good paper.
[00:55:25.480 --> 00:55:28.480]   Ooh, small LLM pod.
[00:55:28.480 --> 00:55:29.480]   Nevermind.
[00:55:29.480 --> 00:55:31.480]   Why do paper club when we have podcast?
[00:55:31.480 --> 00:55:32.480]   Um, okay.
[00:55:32.480 --> 00:55:34.480]   I guess they're coming on podcast.
[00:55:34.480 --> 00:55:36.480]   Coming paper club important for learning.
[00:55:36.480 --> 00:55:37.480]   Okay.
[00:55:37.480 --> 00:55:43.480]   Well, maybe next time I'll do 20 minutes on this or we'll have someone join us and talk
[00:55:43.480 --> 00:55:44.480]   about this too.
[00:55:44.480 --> 00:55:45.480]   TBD.
[00:55:45.480 --> 00:55:46.480]   Okay.
[00:55:46.480 --> 00:55:48.480]   I hope my ramble of why I thought this infrastructure was cool.
[00:55:48.480 --> 00:55:50.480]   It's very interesting to me actually.
[00:55:50.480 --> 00:55:52.480]   I'm not much of an info guy.
[00:55:52.480 --> 00:55:53.480]   I don't really care about this.
[00:55:53.480 --> 00:55:58.480]   But then once I, um, I think it's, it's different when you do pre and post training and you just
[00:55:58.480 --> 00:55:59.480]   have GPU go bird.
[00:55:59.480 --> 00:56:01.480]   This is not GPU go bird.
[00:56:01.480 --> 00:56:02.480]   This is, uh, oh shit.
[00:56:02.480 --> 00:56:09.480]   We'll have a lot of like over, overhang and dead GPU inefficiency if we do stuff sequentially.
[00:56:09.480 --> 00:56:11.480]   So here's how they, here's how we do it.
[00:56:11.480 --> 00:56:13.480]   Next time we can peek into the training data.
[00:56:13.480 --> 00:56:14.480]   Yeah.
[00:56:14.480 --> 00:56:15.480]   I think training data is one aspect.
[00:56:15.480 --> 00:56:17.480]   Uh, these data sets are open.
[00:56:17.480 --> 00:56:21.480]   People have already done a lot of exploratory analysis and breakdown of them.
[00:56:21.480 --> 00:56:27.480]   But the fun thing that we can actually dig into is the, um, the training code.
[00:56:27.480 --> 00:56:30.480]   So, you know, uh, all, all this stuff is open.
[00:56:30.480 --> 00:56:33.480]   I will probably, oh no, we're cooked.
[00:56:33.480 --> 00:56:38.480]   I'll probably just, uh, throw all this in cloud code and we can, we can yap around with it if
[00:56:38.480 --> 00:56:39.480]   we want.
[00:56:39.480 --> 00:56:43.480]   But yeah, I don't want to, I don't want to keep you guys, um, for too long.
[00:56:43.480 --> 00:56:50.480]   If there's any, if there's any fun questions or anything, let me know.
[00:56:50.480 --> 00:56:54.480]   Um, congrats people on, on a fantastic presentation.
[00:56:54.480 --> 00:56:58.480]   Um, always love these like deep dyes, especially when it's like a really good paper.
[00:56:58.480 --> 00:57:00.480]   Like, um, I actually didn't read it.
[00:57:00.480 --> 00:57:01.480]   I don't know why I didn't read it.
[00:57:01.480 --> 00:57:02.480]   I just was busy that day.
[00:57:02.480 --> 00:57:04.480]   So thank you for highlighting it.
[00:57:04.480 --> 00:57:05.480]   Okay.
[00:57:05.480 --> 00:57:06.480]   Thanks guys.
[00:57:06.480 --> 00:57:07.480]   See you next week.
[00:57:07.480 --> 00:57:08.480]   Thanks everyone.
[00:57:08.480 --> 00:57:09.480]   I need volunteers.
[00:57:09.480 --> 00:57:10.480]   Volunteer, volunteer volunteer.
[00:57:10.480 --> 00:57:17.480]   If someone wants to volunteer for a paper, let us know, uh, potentially small LM3 next
[00:57:17.480 --> 00:57:20.480]   week, but any, any time in the future, if anyone wants to volunteer, let me know.
[00:57:20.480 --> 00:57:21.480]   Grok 4.
[00:57:21.480 --> 00:57:23.480]   Grok 4 will not be a paper.
[00:57:23.480 --> 00:57:29.480]   For, for, for fun context, for those that don't know, I, I used to run a very aggressive
[00:57:29.480 --> 00:57:31.480]   shitposting alt on Twitter.
[00:57:31.480 --> 00:57:35.480]   And, um, when Grok 3 came out, I poked, I poked the bear.
[00:57:35.480 --> 00:57:37.480]   I really shat on their charts.
[00:57:37.480 --> 00:57:38.480]   I got into Twitter beef.
[00:57:38.480 --> 00:57:39.480]   Elon got involved.
[00:57:39.480 --> 00:57:42.480]   And then the next day my account was terminated.
[00:57:42.480 --> 00:57:46.480]   So if you shitpost on Twitter, don't, don't go get Grok.
[00:57:46.480 --> 00:57:49.480]   I learned my lesson, but, uh, yeah, Grok 4 today.
[00:57:49.480 --> 00:57:52.480]   Um, Grok, Grok 4.
[00:57:52.480 --> 00:57:57.480]   So interestingly enough, they open sourced Grok 1 when Grok 2 came out.
[00:57:57.480 --> 00:57:59.480]   They didn't open source Grok 2 when Grok 3 came out.
[00:57:59.480 --> 00:58:00.480]   Maybe they open source Grok 3.
[00:58:00.480 --> 00:58:01.480]   Who knows?
[00:58:01.480 --> 00:58:05.480]   Um, we'll maybe do a watch party.
[00:58:05.480 --> 00:58:06.480]   Uh, who knows?
[00:58:06.480 --> 00:58:07.480]   Paper highlights and Zotero?
[00:58:07.480 --> 00:58:08.480]   No, I'm not a Zotero guy.
[00:58:08.480 --> 00:58:09.480]   I don't know how it works.
[00:58:09.480 --> 00:58:13.480]   Too hard, too hard for me, but I'll share my paper highlights and maybe someone can throw
[00:58:13.480 --> 00:58:14.480]   in Zotero.
[00:58:14.480 --> 00:58:18.480]   Um, for Timeless Paper Club, I think I'll share a post later this week.
[00:58:18.480 --> 00:58:20.480]   I have a bunch of topics papers.
[00:58:20.480 --> 00:58:23.480]   There's some domains where I'll cover them.
[00:58:23.480 --> 00:58:26.480]   If anyone wants to volunteer, that would be useful too.
[00:58:26.480 --> 00:58:32.480]   So, um, some stuff, like if you think you're good, like if you know diffusion pretty well,
[00:58:32.480 --> 00:58:36.480]   if you know optimizers, if you know, like inference optimization, like flash attention,
[00:58:36.480 --> 00:58:41.480]   if there's shit that you're passionate about, if there's stuff that you want accountability
[00:58:41.480 --> 00:58:45.480]   to learn and, and read over, maybe we do it together or you take it.
[00:58:45.480 --> 00:58:46.480]   And, uh, yeah, that'll be fun.
[00:58:46.480 --> 00:58:49.480]   I'll give you a list of papers or, you know, feel free to add some.
[00:58:49.480 --> 00:58:52.480]   And then, and then we'll, we'll go through second paper clip.
[00:58:52.480 --> 00:58:56.480]   Uh, launch event for OpenAI's open source model next week.
[00:58:56.480 --> 00:58:56.480]   Yeah.
[00:58:56.480 --> 00:59:03.480]   Uh, someone said that it's, uh, next week, but I heard a date that's slightly later.
[00:59:03.480 --> 00:59:04.480]   Where is this?
[00:59:04.480 --> 00:59:06.480]   Where is this new open source model?
[00:59:06.480 --> 00:59:12.480]   So someone has said that it comes out, um, next Thursday.
[00:59:12.480 --> 00:59:15.480]   I heard later, but we'll see.
[00:59:15.480 --> 00:59:16.480]   We'll see.
[00:59:16.480 --> 00:59:19.480]   Um, I dunno, maybe we'll do an event.
[00:59:19.480 --> 00:59:20.480]   Maybe, maybe we won't.
[00:59:20.480 --> 00:59:23.480]   It's not dev day in November.
[00:59:23.480 --> 00:59:26.480]   It's, it's this month, but maybe not next week.
[00:59:26.480 --> 00:59:27.480]   Okay.
[00:59:27.480 --> 00:59:29.480]   Anyway, enough yap.
[00:59:29.480 --> 00:59:33.480]   Thanks for listening to my yap guys.
[00:59:33.480 --> 00:59:35.480]   Two weeks.
[00:59:35.480 --> 00:59:36.480]   Okay.
[00:59:36.480 --> 00:59:39.480]   Not next week, two weeks, but we'll see.

