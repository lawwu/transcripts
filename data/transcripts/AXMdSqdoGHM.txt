
[00:00:00.000 --> 00:00:22.720]   For a show of hands, how many people in this audience know who Circle is, what we do?
[00:00:23.160 --> 00:00:53.140]   Just trying to gauge. Okay. Do you know anything about our developer tooling? Gotcha. Gotcha. So nobody. Okay, so this is good. Alright. First, you know, I just want to introduce myself. My name is Corey Cooper. I lead DevRel at Circle. This talk is about the intersection of some exploratory work we've been doing internally between AI and programmable money.
[00:00:53.140 --> 00:01:09.140]   And, you know, one of the things we noticed a trend in with USDC when Circle launched its digital dollar technology is that it was an order of a magnitude better at doing escrow than traditional payment rails.
[00:01:09.140 --> 00:01:33.140]   And so combining USDC with AI gives you a way to do some type of verification of workflows that are happening that need to be met in order for escrow agreement to be honored. And then you get instant settlement with a stable coin that can settle faster than T plus two around the world.
[00:01:33.140 --> 00:01:59.140]   So in this presentation, what we'll do is I'll give you a background on circle. I'll give you an overview of our developer tooling. Then we'll jump into our smart contract that powers USDC, the technology that makes it a programmable dollar and gives it features and attributes that you can do with a digital representation of a dollar in traditional payment rails.
[00:01:59.140 --> 00:02:15.140]   And then we'll end off with giving a live demo of our escrow agent application that we open source recently and allow you all to set up this in your environment if you want to locally. I can walk you through doing that today.
[00:02:15.140 --> 00:02:29.140]   Or we can just do a Q&A. You can ask some questions about, you know, anything about, you know, idea of tooling and and where we see this marriage between agents and USDC going.
[00:02:29.140 --> 00:02:48.140]   So just to give you a quick background about circle, it's a fintech company that issues stable coins. We were established in 2013 and some of our backers are the pillars in the financial services industry like black rock and fidelity.
[00:02:48.140 --> 00:03:11.140]   The reason for that is because we've done a really good job of providing trust and transparency that the digital tokenized version of the US dollar or the euro that we deploy on different blockchain networks is backed one to one with fiat and short term treasuries in a bank account.
[00:03:11.140 --> 00:03:26.140]   So it's fully reserved 100%. We also have led the charge in regulation around this industry and really helped regulators around the world think about this as a groundbreaking technology for payments.
[00:03:26.140 --> 00:03:44.140]   And as you see, there are some things that are happening in the US and across the world where laws are being passed to regulate stable coins, which we're happy about because it's going to get businesses and individuals an opportunity to take advantage of this technology.
[00:03:44.140 --> 00:04:02.140]   And so another note is, you know, since inception, we've been able to be responsible for settling over $26 trillion of transactions on roughly we're on roughly 20 different blockchains and go on right now.
[00:04:02.140 --> 00:04:21.140]   But that that's a huge accomplishment for the amount of engineering resources, the product resources, marketing resources that the company has poured into to, you know, allowing businesses and individuals to be able to take advantage of this technology and build on top of it as a payment rail.
[00:04:21.140 --> 00:04:33.140]   So here is a chart or not really a chart. It's an overview slide, a visual of the lay of the land of what we offer as a company.
[00:04:33.140 --> 00:05:00.140]   Like I mentioned earlier, you know, we issue USDC and EURC. We recently acquired a company called HashNote, where we now have a tokenized version of a money market fund, which is going to give us the ability to do something with money markets that were never possible for to be able to liquidate out of a money market into USDC 24/7 365 days a week.
[00:05:00.140 --> 00:05:27.140]   And then we have our liquidity services for payment service providers, financial institutions, where we enable them to be able to mint and redeem USDC to a very secure enterprise grade vault wallet on chain for performing different types of use cases that relate to payments, dollar access, as well as capital markets.
[00:05:27.140 --> 00:05:30.140]   And on the far right.
[00:05:30.140 --> 00:05:46.140]   And on the far right, we have our developer services and this portion of of what we offer is what will be wrapped into what we will demonstrate today with the sample app that I will demo where comprises of wallets.
[00:05:46.140 --> 00:05:53.140]   So well, a developer can embed wallets in their application programmatically.
[00:05:53.140 --> 00:05:56.140]   We also have circle contracts.
[00:05:56.140 --> 00:06:05.140]   So that's a smart contract platform that enables you to deploy contracts programmatically and read to those contracts as well as write.
[00:06:05.140 --> 00:06:21.140]   And then under that we have our circle pay master and cctp and if anybody knows anything about transacting on public blockchain networks, there is something called gas fees.
[00:06:21.140 --> 00:06:31.140]   And so what we've done is we've enabled end users to be able to pay for gas fees within USDC, so from the USDC balance.
[00:06:31.140 --> 00:06:40.140]   So it actually feels like a traditional payment transaction as opposed to having some native token that you always have to have in your wallet to be able to transact.
[00:06:40.140 --> 00:06:57.140]   And then since we're on all these blockchain networks, there is a lot of fragmentation that we were trying to unify and the way we unify that is with our cross chain transfer protocol that allows for you to move USDC between different blockchain networks permissionlessly.
[00:06:57.140 --> 00:07:11.140]   And user developer can build very seamless multi chain experiences around this protocol so that you don't have fragmentation where someone is on one chain and they can't transact on another chain.
[00:07:11.140 --> 00:07:16.140]   So you can do cross chain transactions and things like that.
[00:07:16.140 --> 00:07:25.140]   And at the bottom layer are all the blockchains that we natively have USDC issued on.
[00:07:25.140 --> 00:07:28.140]   This this list is getting longer.
[00:07:28.140 --> 00:07:37.140]   So but, you know, we are we are in a multi chain world where we want USDC to be the premier digital dollar.
[00:07:37.140 --> 00:07:49.140]   And so we are building all types of on chain utility around USDC as well as the ERC to make this, you know, support for multiple blockchains more unified.
[00:07:49.140 --> 00:07:54.140]   So there will be some other innovations that we're going to release in the next couple of weeks and months.
[00:07:54.140 --> 00:08:06.140]   that advance the unification of balances across multiple blockchain networks with our stablecoin technology.
[00:08:06.140 --> 00:08:13.140]   So let's let's dive into USDC and just really talk about the attributes that are really important to a developer.
[00:08:13.140 --> 00:08:20.140]   And so one of the things is, you know, it is a dollar that is internet native.
[00:08:20.140 --> 00:08:28.140]   And so what that means is the ledger of that dollar is built into internet technology, which is blockchain networks and smart contracts.
[00:08:28.140 --> 00:08:38.140]   And so it enhances the programmability, the transferability to enable money to move in seconds globally.
[00:08:38.140 --> 00:08:45.140]   And so it's not constricted to some of the friction points we have in legacy payment rails.
[00:08:45.140 --> 00:08:55.140]   The other thing is because it's native to the internet, it's, it's, it has no borders.
[00:08:55.140 --> 00:09:02.140]   So it works like email or text where, you know, you can send text or email around the world.
[00:09:02.140 --> 00:09:07.140]   We want to make money to be that seamless, to be able to transact with.
[00:09:07.140 --> 00:09:17.140]   And so because of it being issued on public blockchain networks, it gives it the borderless freedom to be able to transact globally.
[00:09:17.140 --> 00:09:37.140]   And then last, when you have a network that is permissionless and public and open, it makes it very easy for other companies, individuals to plug into this actual network of money and transact with it.
[00:09:37.140 --> 00:09:50.140]   And so it's scaling very fast globally because of the openness of anybody being able to build on top of this protocol for sending and receiving and storing value.
[00:09:50.140 --> 00:09:53.140]   And so how does this work?
[00:09:53.140 --> 00:10:05.140]   You know, how it works is how USDC gets issued in the ecosystem is a business gets approved by Circle to set up a business account.
[00:10:05.140 --> 00:10:18.140]   And then they connect their bank account to our circle mint platform and they wire their fiat to our reserve bank account.
[00:10:18.140 --> 00:10:30.140]   After that, that fiat settles as USD in our bank account, then we mint the corresponding amount of USDC and credit their circle mint account.
[00:10:30.140 --> 00:10:35.140]   And so that is how USDC gets issued in the ecosystem.
[00:10:35.140 --> 00:10:40.140]   Now, the reverse process happens when the business wants to get out of USDC.
[00:10:40.140 --> 00:10:41.140]   They can redeem.
[00:10:41.140 --> 00:10:49.140]   And there is a one to one with every USDC minted to a US dollar.
[00:10:49.140 --> 00:10:53.140]   So when they want to get out, they get that one to one parity.
[00:10:53.140 --> 00:10:58.140]   And so that is the trust and transparency that we provide to our customers.
[00:10:58.140 --> 00:11:02.140]   We also do a little bit of extra things.
[00:11:02.140 --> 00:11:08.140]   And you can go on our website, but we have a USDC transparency page where you can go and see our monthly attestations.
[00:11:08.140 --> 00:11:28.140]   And we have various auditors that are independent of the company that continue to audit and make sure that we are fully reserved and we, you know, make sure we ensure the trust and transparency around the actual issuance of a digital represent representation of the dollar on chain.
[00:11:28.140 --> 00:11:40.140]   So now we're going to jump into the USDC smart contract and really dive into like what makes this programmable?
[00:11:40.140 --> 00:11:41.140]   How does it work?
[00:11:41.140 --> 00:11:54.140]   So one thing is we have, you know, very strict implementation requirements before we deploy USDC on a different blockchain network.
[00:11:54.140 --> 00:12:08.140]   And so here are the things that we want to make sure that we can incorporate in the token contract before deploying it on a blockchain network, just to make sure we have standardization across the board.
[00:12:08.140 --> 00:12:30.140]   You know, as we expand to different blockchain ecosystems, but also to make sure that there are safeties provisions that we have built into this actual smart contract for businesses and individuals to be able to trust and use our technology as a protocol for money movement globally.
[00:12:30.140 --> 00:12:39.140]   And so here are some of the things I'll jump into and provide a little bit more clarity around the implementation requirements.
[00:12:39.140 --> 00:12:43.140]   But the first is allow lists and block lists.
[00:12:43.140 --> 00:12:51.140]   And so this enables us to basically protect, you know, people who use our token contract from bad actors.
[00:12:51.140 --> 00:13:06.140]   And so if we know someone's on a sanction list, you know, and they're malicious actor, we have the ability to actually stop them from transacting and protect other users from transacting with that actual user.
[00:13:06.140 --> 00:13:10.140]   And so it's built in for it for safety for businesses.
[00:13:10.140 --> 00:13:15.140]   And then we have spend on behalf.
[00:13:15.140 --> 00:13:33.140]   And so that's a feature where, you know, say if you're a business and you wanted to create a financial workflow where you wanted to enable, you know, somebody to spend a certain amount of money from a wallet balance and give them a cap on that on a daily basis.
[00:13:33.140 --> 00:13:45.140]   There is functionality built into it where you can delegate for a user to be able to spend a certain amount of money from an actual wallet balance using USDC stuff.
[00:13:45.140 --> 00:13:46.140]   Yeah.
[00:13:46.140 --> 00:13:52.140]   Like a corporate business card.
[00:13:52.140 --> 00:14:12.140]   So say if you have some virtual debit cards that you're issuing to your actual employees and the actual debit card is powered by USDC balance in a wallet, you could design basically a workflow where you could put thresholds on how much they could spend from that corporate card.
[00:14:12.140 --> 00:14:19.140]   Would you realistically be able to run that to like thousands, tens of thousands, hundreds of thousands, or would that not be the proper use case for that?
[00:14:19.140 --> 00:14:22.140]   No, no, no, you could scale it up.
[00:14:22.140 --> 00:14:23.140]   Yeah.
[00:14:23.140 --> 00:14:24.140]   Oops.
[00:14:24.140 --> 00:14:25.140]   Sorry.
[00:14:25.140 --> 00:14:33.140]   You could definitely scale that delegation of spending for that wallet address with a virtual debit card to tens of thousands.
[00:14:33.140 --> 00:14:34.140]   Yeah.
[00:14:34.140 --> 00:14:35.140]   Yeah.
[00:14:35.140 --> 00:14:36.140]   Yeah.
[00:14:36.140 --> 00:14:37.140]   Yeah.
[00:14:37.140 --> 00:14:39.140]   Another is mint or configuration.
[00:14:39.140 --> 00:14:48.140]   And so, you know, we have the ability to add, you know, other entities to be able to mint.
[00:14:48.140 --> 00:14:49.140]   From our token contract.
[00:14:49.140 --> 00:15:05.140]   This is something that we haven't done, but there could be a future where we could partner with financial institutions and they have a balance that they can mint from, from the actual token contract.
[00:15:05.140 --> 00:15:09.140]   And then multi-sig transactions.
[00:15:09.140 --> 00:15:23.140]   This is, this is for, you know, like if you're building some type of workflow where maybe you require the CEO, CFO, and COO to actually sign off on transactions that are above a certain threshold, you can design these type of transactional experiences to protect from, you know, a wallet being drained based off of like one person having total control of, you know, the transaction ability of that.
[00:15:23.140 --> 00:15:41.140]   And then, you know, cold storage support.
[00:15:41.140 --> 00:15:56.140]   A use case for this is where maybe you know that you're running payroll on a monthly basis using USDC for your employees, you know, the date and time that you were going to be sending money out, you know, the amount.
[00:15:56.140 --> 00:16:02.140]   You have the ability to put those transactions in a ready state that are offline.
[00:16:02.140 --> 00:16:05.140]   And so when that date and time comes, it's ready.
[00:16:05.140 --> 00:16:12.140]   The transaction object has already been approved and signed, and then you can just broadcast that to the actual blockchain network to send that off.
[00:16:12.140 --> 00:16:16.140]   So it allows you to kind of prepare transactions offline.
[00:16:16.140 --> 00:16:25.140]   Is that proof of funds transactions so that they can ensure that the money is there when the time comes?
[00:16:25.140 --> 00:16:27.140]   It could be designed for that.
[00:16:27.140 --> 00:16:41.140]   But it's more, it's more of you have a cadence of transactions that you know are going to happen on, you know, a biweekly or a monthly basis, and you want to make sure that that transaction is already ready to go.
[00:16:41.140 --> 00:16:48.140]   And in a state where it's already been signed and approved for, and then it can just be broadcasted at a later date.
[00:16:48.140 --> 00:16:51.140]   So it doesn't necessarily prevent it from bouncing?
[00:16:51.140 --> 00:16:53.140]   No, no, no.
[00:16:53.140 --> 00:16:54.140]   Yeah.
[00:16:54.140 --> 00:17:08.140]   And then since this is a new concept of money, and we're constantly, you know, thinking about ways of how we can enhance the actual protocol of money movement.
[00:17:08.140 --> 00:17:13.140]   There are times where we need to pause the contract for upgrading it.
[00:17:13.140 --> 00:17:22.140]   And so this hasn't been done much, but the most recent one was about two years ago, a year and a half to two years ago.
[00:17:22.140 --> 00:17:25.140]   And, you know, it's USDC version 2.2.
[00:17:25.140 --> 00:17:29.140]   And the main thing that we did was we made it more gas efficient.
[00:17:29.140 --> 00:17:37.140]   And so knowing that we want to make this technology scalable, we want to make sure that gas fees never become an issue.
[00:17:37.140 --> 00:17:49.140]   And so we were ready to design different functionality in the token contract to optimize for better gas performance across chains.
[00:17:49.140 --> 00:17:54.140]   And so now I'll jump into the contract functions of USDC.
[00:17:54.140 --> 00:18:06.140]   And so these are basically the functions, the core functions that a developer will plug into when commonly transacting with USDC.
[00:18:06.140 --> 00:18:13.140]   And you have balance of total supply allowance transfer transfer from and approve.
[00:18:13.140 --> 00:18:29.140]   And so these are these are, you know, functions that are built into the actual smart contract that powers USDC that you'll see actually later on when I do the demo that we'll be using to actually perform the actual escrow transaction.
[00:18:29.140 --> 00:18:38.140]   And so one of the most commonly used functions from this actual contract list is transfer from.
[00:18:38.140 --> 00:18:46.140]   And so in that argument, you see, you put the from address and the to address and then amount and you pass that.
[00:18:46.140 --> 00:18:53.140]   And then that gets broadcasted to the actual block blockchain network to be able to actually send that transaction.
[00:18:53.140 --> 00:19:02.140]   And you're you're telling it to send basically money from this account to that account and then the amount of USDC that you want to send.
[00:19:02.140 --> 00:19:14.140]   And so that that's the programmability that you get with USDC that that is not built into the digital representation of fiat in a database.
[00:19:14.140 --> 00:19:23.140]   And so that's where the magic allows you as developers in the room to create these very innovative experiences that were not available to us.
[00:19:23.140 --> 00:19:36.140]   And so, you know, USDC is, you know, it's kind of funny, but it's designed for agents basically how we've seen agents kind of proliferate over the last year or so.
[00:19:36.140 --> 00:19:43.140]   It seems like it's just the perfect currency for an agent to use to transact.
[00:19:43.140 --> 00:19:51.140]   And so some of the reasons why is, you know, when you get near instant settlement and built in verification of transactions.
[00:19:51.140 --> 00:19:54.140]   And so when an agent is transacting, it's not a human.
[00:19:54.140 --> 00:20:02.140]   And so one thing, you know, you want to do is you want to allow the agent to be able to to transact in those agents.
[00:20:02.140 --> 00:20:10.140]   If they're doing agent to agent payments, they want near instant settlement because these are robots transacting.
[00:20:10.140 --> 00:20:14.140]   Another thing is you don't want robots to have to deal with chargebacks.
[00:20:14.140 --> 00:20:22.140]   And so that could be a nightmare because when agents start transacting with each other, money is going to flow very fast.
[00:20:22.140 --> 00:20:31.140]   And so a chargeback could be a catastrophic risk to running agent to agent payments, you know, on reversible rails.
[00:20:31.140 --> 00:20:44.140]   The other thing is, you know, agents are always on, you know, and so they need a payment rail that's always on 24/7, no banking hours.
[00:20:44.140 --> 00:20:57.140]   And so, you know, the great thing about, you know, this public blockchain infrastructure is you have this compute that's always on that enables settlement to happen 24/7 globally with no banking hours.
[00:20:57.140 --> 00:21:03.140]   And all of these transactions are verifiable through private and public key technology.
[00:21:03.140 --> 00:21:18.140]   And so the cryptography and the actual openness of these actual ecosystems make it a perfect payment rail for agents to transact because there's no downtime.
[00:21:18.140 --> 00:21:20.140]   Oops, let's go back.
[00:21:20.140 --> 00:21:27.140]   And then the last thing is I'll go back to the slide where I was showing the actual contract functions.
[00:21:27.140 --> 00:21:28.140]   It's the programmability.
[00:21:28.140 --> 00:21:45.140]   You know, agents are going to need to be able to have a lot of programmability because there are going to be transactions where they'll need to be able to, you know, perform some sort of logic that they need to pass before they can actually make that transaction.
[00:21:45.140 --> 00:22:08.140]   And so that logic can actually be built into composable smart contracts that we'll show in this demo of how, like, this is great for escrow because, you know, you have the ability to perform value transfer with all this conditional logic that you can actually program in and the agent can actually interact with that logic to be able to perform those transactions.
[00:22:08.140 --> 00:22:14.140]   So very powerful technology here.
[00:22:14.140 --> 00:22:16.140]   And so now I'll jump into the sample app.
[00:22:16.140 --> 00:22:22.140]   And so first I'll run through kind of the architecture, what we used and how it works.
[00:22:22.140 --> 00:22:24.140]   And then we'll jump into a demo of it.
[00:22:24.140 --> 00:22:32.140]   And then everybody can have time to actually set it up in their own environment and I can walk around and help you out if you have any issues.
[00:22:32.140 --> 00:22:46.140]   So the core building blocks from a dev tooling standpoint of what we used to to build this actual escrow flow is we use circle wallets.
[00:22:46.140 --> 00:22:54.140]   And so that enabled us to actually provision wallets for the agent, the and the two parties involved in the actual escrow process.
[00:22:54.140 --> 00:22:59.140]   And then also to we use circle contracts.
[00:22:59.140 --> 00:23:09.140]   So we were able to actually we wrote a solidity contract and then we deployed that using the circle contracts API.
[00:23:09.140 --> 00:23:19.140]   So it was a repeatable process of us deploying contracts for each actual group of parties that are transacting.
[00:23:19.140 --> 00:23:33.140]   And so that API allowed for us to take, you know, this, this template of a escrow contract and solidity and repeatedly deployed and use it for different parties involved transacting amongst each other.
[00:23:33.140 --> 00:23:57.140]   And then lastly, USDC being able to embed the USDC stable coin in the actual smart contract gave us the ability to design basically a smart contract that is running off of dollars and interoperable with the actual fiat world as well.
[00:23:57.140 --> 00:24:12.140]   Because kind of the likely process of some of this will be there's an on ramping experience from fiat to USDC and then there's an off ramping experience for the beneficiary wants to go back to actual fiat and using the actual smart contract.
[00:24:12.140 --> 00:24:21.140]   And USDC gives both parties the trust that they have a tokenized version of the dollar that they know they can get in and out of any time one to one.
[00:24:21.140 --> 00:24:27.140]   So here's kind of how the onboarding flow works.
[00:24:27.140 --> 00:24:37.140]   As you can see from this, this design, you have a client, which is the business and the freelancer, and they both come to a platform and create an account.
[00:24:37.140 --> 00:24:46.140]   And so as they create an account in the background, there's an API call to the circle APIs that provisions a wallet for each of those actual parties.
[00:24:46.140 --> 00:25:05.140]   And then the next thing is the actual business will take basically a PDF version of an agreement that they have with that actual freelancer that they probably negotiated outside of the platform for this use case.
[00:25:05.140 --> 00:25:11.140]   And then they would upload that agreement.
[00:25:11.140 --> 00:25:24.140]   And what would happen is once they upload that agreement to the platform, it would pass it to the OpenAI's API and run it through a multimodal model to actually parse out information about the actual agreement.
[00:25:24.140 --> 00:25:33.140]   And so that information would be related to the amount that these two parties have agreed upon as far as the work is concerned.
[00:25:33.140 --> 00:25:43.140]   And then the the summary of tasks that need to be delivered in order for the actual escrow to be completed and payout to happen.
[00:25:43.140 --> 00:25:55.140]   And so after that happens, basically there's a listing on the platform that the AI agent generates and lists.
[00:25:55.140 --> 00:26:02.140]   And there's a human in the loop in this process where, you know, the actual business approves that, hey, this is the amount I'd agreed upon.
[00:26:02.140 --> 00:26:09.140]   This is the list of, you know, things that need to be done in order to honor their agreement and receive payout.
[00:26:09.140 --> 00:26:12.140]   And and this is a good summary of what the agreement is about.
[00:26:12.140 --> 00:26:15.140]   So I want to publish that listing to the platform.
[00:26:15.140 --> 00:26:24.140]   And then after that happens, then the actual business would need to create a smart contract.
[00:26:24.140 --> 00:26:31.140]   And so since we've already got a template running in the background, they're not designing that smart contract themselves.
[00:26:31.140 --> 00:26:38.140]   What it is doing is it's taking the information that the agent has parsed out from the actual contractual agreement
[00:26:38.140 --> 00:26:50.140]   and initializing certain constructor variables for the actual smart contract to be in a ready state to be deployed on chain to govern the rules of the actual agreement.
[00:26:50.140 --> 00:26:59.140]   And so those things are just simple things right now is just use USDC as the stable coin of choice for the currency that flows through.
[00:26:59.140 --> 00:27:09.140]   Also to the agent will will be given a wallet that can only be used to actually release funds from the contract.
[00:27:09.140 --> 00:27:16.140]   And then who is the, you know, depositor wallet and who is the beneficiary wallet?
[00:27:16.140 --> 00:27:24.140]   And so those rules will be will be enforced within the smart contract before it's deployed on chain.
[00:27:24.140 --> 00:27:31.140]   And so after so to deploy it on chain, we're using the circle APIs for this.
[00:27:31.140 --> 00:27:41.140]   And so after that that is deployed on chain, there's a notification that comes on the screen telling the actual business that the contract has been deployed successfully.
[00:27:41.140 --> 00:27:49.140]   And in the background, the developer can use the developer console that we have a circle to track all this activity.
[00:27:49.140 --> 00:27:54.140]   And to design web hook notifications as well around this activity.
[00:27:54.140 --> 00:27:57.140]   And so that's one of the powers of our dev console.
[00:27:57.140 --> 00:28:10.140]   We allow for you to do a lot with on chain data because we're indexing all this information and putting it in a nice format to allow you to design different programmable flows around that information that's happening on chain.
[00:28:10.140 --> 00:28:32.140]   And so once the actual contract has been deployed on chain, the next thing is you're going to have to the business will have to actually on ramp into USDC or if they have pure USDC, then they can fund that actual contract from some USDC.
[00:28:32.140 --> 00:28:33.140]   they already have an external wallet.
[00:28:33.140 --> 00:28:42.140]   And so you will deposit, you'll call the actual deposit function on the smart contract.
[00:28:42.140 --> 00:28:56.140]   And what that would do is that would basically initiate the approval for a certain amount of USDC to be sweep from your actual wallet address and transferred into the smart contract.
[00:28:56.140 --> 00:29:04.140]   So that the smart contract can go into a ready state of letting the beneficiary know funds have been deposited in the smart contract.
[00:29:04.140 --> 00:29:09.140]   Now it's ready for you to do the work you need to do to honor the contract.
[00:29:09.140 --> 00:29:36.140]   And so that's that's one, you know, magical moment where you have now in this escrow experience, a smart contract that's actually holding the money in code and there is some sort of transparency that you know the money actually is there because you're dealing with these public networks that have the ability to verify, you know, that information by just looking up on the block explorer to be able to see that.
[00:29:36.140 --> 00:29:39.140]   Okay, funds are actually in this smart contract.
[00:29:39.140 --> 00:29:42.140]   So I know this person serious about paying me.
[00:29:42.140 --> 00:29:55.140]   So after that, then the actual freelancer will infer for this actual experience where we use an image.
[00:29:55.140 --> 00:30:14.140]   They the task at hand was to design basically some marketing material in the format of an image that had certain things within that image that promoted the brand of the actual business.
[00:30:14.140 --> 00:30:33.140]   And so freelancer uploads that image to the platform, it passes it off to open AI and the agent goes to work in it, it looks and verifies, okay, does this image have all the things in it that, you know, were required of it in the actual task agreement.
[00:30:33.140 --> 00:30:40.140]   If it does, then it'll go through a simple scoring system.
[00:30:40.140 --> 00:31:00.140]   And if that system scores, it is, you know, confidence level high, that means, okay, yes, release funds from the actual smart contract and then the agent can use its wallet to actually call a release funds function within the smart contract that will ultimately release funds to the beneficiaries wallet.
[00:31:00.140 --> 00:31:21.140]   And so this is where like the automation, the verification happens where in most escrow situations, there's a lot of convoluted back in office work where manual review is being done and agents now are getting to the point where they're, they're very good at reading, seeing, hearing, doing a lot of things.
[00:31:21.140 --> 00:31:39.140]   And so what we think is there could be a future where agents could be a major checkpoint in a lot of escrow transactions and coupled with USDC becoming a great way to settle escrow transactions instantly.
[00:31:39.140 --> 00:31:46.140]   When you combine all this together, you can build some very cool stuff together.
[00:31:46.140 --> 00:31:47.140]   Yeah.
[00:31:47.140 --> 00:31:49.140]   So I did a lot of talking.
[00:31:49.140 --> 00:31:54.140]   Let me show the demo because I know people want to see that.
[00:31:54.140 --> 00:32:01.140]   So let me get out of here and open up my app.
[00:32:01.140 --> 00:32:02.140]   Okay.
[00:32:02.140 --> 00:32:02.140]   All right.
[00:32:02.140 --> 00:32:03.140]   Let's see.
[00:32:03.140 --> 00:32:04.140]   All right.
[00:32:04.140 --> 00:32:05.140]   Can everyone see this?
[00:32:05.140 --> 00:32:06.140]   Okay.
[00:32:06.140 --> 00:32:07.140]   Okay.
[00:32:07.140 --> 00:32:08.140]   All right.
[00:32:08.140 --> 00:32:09.140]   Thanks.
[00:32:09.140 --> 00:32:10.140]   All right.
[00:32:10.140 --> 00:32:11.140]   So here's the escrow agent app.
[00:32:11.140 --> 00:32:12.140]   I'm already logged in.
[00:32:12.140 --> 00:32:27.140]   And I have some transactions that I've already set up because I wanted to show you what things look like in each state.
[00:32:27.140 --> 00:32:34.140]   And then I'll kind of walk through certain transactions and get to the actual cool part of actually letting the agent actually release funds.
[00:32:34.140 --> 00:32:43.140]   But here's a transaction that I've staged and right now it's in the initiated status.
[00:32:43.140 --> 00:32:50.140]   And so this status is someone has already uploaded a contract in PDF form to the platform.
[00:32:50.140 --> 00:32:55.140]   It's parsed out the information with the agent using the four or mini model.
[00:32:55.140 --> 00:33:09.140]   And then that human in the loop process of approving that, hey, this, this is what, you know, the agreement should look like listed on the platform so that the beneficiary can receive that listing.
[00:33:09.140 --> 00:33:12.140]   And so this is the state of what it looks like after you get past that.
[00:33:12.140 --> 00:33:18.140]   So it's showing you the summary of the agreement obviously has the amount here of $10.
[00:33:18.140 --> 00:33:26.140]   And then here are some of the deliverables, high quality image, you know, featuring sparkle fizzle.
[00:33:26.140 --> 00:33:29.140]   So that's the brand, a fictitious company we created.
[00:33:29.140 --> 00:33:39.140]   And and so this is what it'll look like before a smart contract is deployed to govern the rules of a actual agreement.
[00:33:39.140 --> 00:33:47.140]   Now in this state, say I clicked deploy smart contract on chain.
[00:33:47.140 --> 00:33:54.140]   It has now built out the logic and the rules that will govern this this agreement.
[00:33:54.140 --> 00:33:57.140]   The next thing is, you know, depositing funds in the smart contract.
[00:33:57.140 --> 00:34:02.140]   So the actual beneficiary knows that, you know, this person serious.
[00:34:02.140 --> 00:34:03.140]   The money is there.
[00:34:03.140 --> 00:34:07.140]   It's time for me to go to work and do the things so I can receive the money.
[00:34:07.140 --> 00:34:09.140]   This is what state will look like.
[00:34:09.140 --> 00:34:16.140]   And then if you hit this button, you can deposit funds and it will draw the $10 amount from your account balance.
[00:34:16.140 --> 00:34:24.140]   And it will deposit it in the actual smart contract and provide a notification of when that money has settled in the actual smart contract.
[00:34:24.140 --> 00:34:30.140]   And then once it's, you know, in the smart contract, the state will move to locked.
[00:34:30.140 --> 00:34:33.140]   And so that means the smart contract will lock itself.
[00:34:33.140 --> 00:34:54.140]   And now the the next thing that can happen in that smart contract is basically the agent actually reviewing the work and interacting with it to either release the funds or, you know, revert the actual funds back to the actual depositor.
[00:34:54.140 --> 00:35:01.140]   If, you know, a period of time elapses where, you know, that person was never able to kind of meet the agreement.
[00:35:01.140 --> 00:35:11.140]   So what I'll do now is let me run through a test transaction.
[00:35:11.140 --> 00:35:12.140]   Okay.
[00:35:12.140 --> 00:35:12.140]   So let's see.
[00:35:12.140 --> 00:35:13.140]   Okay.
[00:35:13.140 --> 00:35:14.140]   So let's see.
[00:35:14.140 --> 00:35:15.140]   All right.
[00:35:15.140 --> 00:35:16.140]   Change design.
[00:35:16.140 --> 00:35:17.140]   Okay.
[00:35:17.140 --> 00:35:18.140]   So here's a PDF document.
[00:35:18.140 --> 00:35:19.140]   I'm going to upload it.
[00:35:19.140 --> 00:35:19.140]   Let's see.
[00:35:19.140 --> 00:35:19.140]   All right.
[00:35:19.140 --> 00:35:20.140]   So let's see.
[00:35:20.140 --> 00:35:21.140]   Let's see.
[00:35:21.140 --> 00:35:22.140]   All right.
[00:35:22.140 --> 00:35:23.140]   So let's see.
[00:35:23.140 --> 00:35:24.140]   All right.
[00:35:24.140 --> 00:35:30.140]   So in the background, the agent was running, parsing out the information in the PDF document.
[00:35:30.140 --> 00:35:31.140]   Again, it's, it's parsed out the amount and the task.
[00:35:31.140 --> 00:35:32.140]   And so if I hit continue, it's going to be a little bit more.
[00:35:32.140 --> 00:35:33.140]   So if I hit continue, it's going to be a little bit more.
[00:35:33.140 --> 00:35:34.140]   So if I hit continue, it's going to be a little bit more.
[00:35:34.140 --> 00:35:35.140]   So if I hit continue, it's going to be a little bit more.
[00:35:35.140 --> 00:35:36.140]   I'm going to upload it.
[00:35:36.140 --> 00:35:37.140]   I'm going to upload it.
[00:35:37.140 --> 00:35:38.140]   Let's see.
[00:35:38.140 --> 00:35:39.140]   All right.
[00:35:39.140 --> 00:35:53.140]   So in the background, the agent was running, parsing out the information in the PDF document.
[00:35:53.140 --> 00:35:57.140]   Again, it's, it's parsed out the amount and the task.
[00:35:57.140 --> 00:36:04.500]   And so if I hit continue, what it's going to do is it's going to generate that listing on
[00:36:04.500 --> 00:36:09.500]   the platform.
[00:36:09.500 --> 00:36:16.500]   So we've got our webhook working is passing updates, make sure.
[00:36:16.500 --> 00:36:19.500]   And let me do a refresh.
[00:36:19.500 --> 00:36:26.500]   So that listing will show.
[00:36:26.500 --> 00:36:27.500]   Yeah.
[00:36:27.500 --> 00:36:28.500]   Okay.
[00:36:28.500 --> 00:36:29.500]   Yep.
[00:36:29.500 --> 00:36:30.500]   So that's the listing.
[00:36:30.500 --> 00:36:38.500]   Um, and so now what we want to do is, um, we want to create a smart contract.
[00:36:38.500 --> 00:36:43.500]   So, um, because it has all the information that it needs to actually create this agreement
[00:36:43.500 --> 00:36:44.500]   now on chain.
[00:36:44.500 --> 00:36:47.500]   So we hit create smart contract.
[00:36:47.500 --> 00:36:54.500]   What it's doing now is calling the circle APIs to actually, uh, deploy that contract on chain.
[00:36:54.500 --> 00:37:03.500]   So may take a little time, but, uh, it should work in a few minutes.
[00:37:03.500 --> 00:37:04.500]   Let's see.
[00:37:04.500 --> 00:37:04.500]   Yeah.
[00:37:04.500 --> 00:37:05.500]   Actually, great question.
[00:37:05.500 --> 00:37:06.500]   Uh, the network I'm using is base.
[00:37:06.500 --> 00:37:07.500]   Sepolia.
[00:37:07.500 --> 00:37:08.500]   Yeah.
[00:37:08.500 --> 00:37:09.500]   Yeah.
[00:37:09.500 --> 00:37:10.500]   Yeah.
[00:37:10.500 --> 00:37:11.500]   No, no, no.
[00:37:11.500 --> 00:37:12.500]   I mean, it's a great partner.
[00:37:12.500 --> 00:37:14.500]   Um, but, uh, but we, we support, you know, all the, a lot of different chains.
[00:37:14.500 --> 00:37:15.500]   Yeah.
[00:37:15.500 --> 00:37:15.500]   Let me see.
[00:37:15.500 --> 00:37:16.500]   It was taking a little time.
[00:37:16.500 --> 00:37:17.500]   Yeah.
[00:37:17.500 --> 00:37:21.500]   You actually can perform cross chain extra escrow experience.
[00:37:21.500 --> 00:37:22.500]   Yeah.
[00:37:22.500 --> 00:37:23.500]   Yeah.
[00:37:23.500 --> 00:37:25.500]   You actually can perform cross chain extra escrow experience.
[00:37:25.500 --> 00:37:26.500]   I'm using this base.
[00:37:26.500 --> 00:37:27.500]   Yeah.
[00:37:27.500 --> 00:37:28.500]   Yeah.
[00:37:28.500 --> 00:37:29.500]   Yeah.
[00:37:29.500 --> 00:37:30.500]   Yeah.
[00:37:30.500 --> 00:37:31.500]   Yeah.
[00:37:31.500 --> 00:37:32.500]   No, no, no.
[00:37:32.500 --> 00:37:34.500]   I mean, it is a great partner.
[00:37:34.500 --> 00:37:37.500]   Um, but, um, but we, we support, you know, all the, a lot of different chains.
[00:37:37.500 --> 00:37:45.500]   Um, yeah, you actually can perform cross chain extra escrow experiences.
[00:37:45.500 --> 00:37:50.500]   Um, you can use our cross chain transfer protocol to do that.
[00:37:50.500 --> 00:37:53.500]   So I'll give you an example of how maybe that would look is.
[00:37:53.500 --> 00:37:56.500]   It's more of, uh, maybe a cross chain deposit.
[00:37:56.500 --> 00:38:03.500]   So maybe someone comes to the platform and the contracts are on base, but their USDC is
[00:38:03.500 --> 00:38:08.500]   on Solana and so they want to deposit from Solana USDC to base.
[00:38:08.500 --> 00:38:12.500]   They can send it over the cross chain transfer protocol to CCTP.
[00:38:12.500 --> 00:38:13.500]   Right.
[00:38:13.500 --> 00:38:16.500]   And then it will deposit into that base contract.
[00:38:16.500 --> 00:38:20.500]   And then if the beneficiary says, Hey, you know, like, I'm not on base.
[00:38:20.500 --> 00:38:23.500]   I'm on, you know, another chain, Ethereum.
[00:38:23.500 --> 00:38:24.500]   I want it on Ethereum.
[00:38:24.500 --> 00:38:29.500]   Then you can do a cross chain, you know, payout from that contract.
[00:38:29.500 --> 00:38:32.500]   Oh, so it's not actually part of the contract, but it's on the platform.
[00:38:32.500 --> 00:38:33.500]   Right.
[00:38:33.500 --> 00:38:34.500]   Right.
[00:38:34.500 --> 00:38:40.500]   So, so usually what we've seen is developers who are building, um, cross chain experiences
[00:38:40.500 --> 00:38:43.500]   where they're dealing with smart contracts, escrow.
[00:38:43.500 --> 00:38:49.500]   Uh, a lot of them pick like one chain where the actual contracts will live and then they
[00:38:49.500 --> 00:38:52.500]   build interoperability between like deposit and payout flows.
[00:38:52.500 --> 00:38:53.500]   Yeah.
[00:38:53.500 --> 00:38:54.500]   Yeah.
[00:38:54.500 --> 00:38:55.500]   Yeah.
[00:38:55.500 --> 00:38:56.500]   Uh, let's see.
[00:38:56.500 --> 00:38:59.500]   Let me go here to the.
[00:38:59.500 --> 00:39:00.500]   Oops.
[00:39:00.500 --> 00:39:01.500]   Wrong one.
[00:39:01.500 --> 00:39:02.500]   It's logging in.
[00:39:02.500 --> 00:39:06.500]   Let's see something.
[00:39:06.500 --> 00:39:07.500]   Okay.
[00:39:07.500 --> 00:39:07.500]   It's working.
[00:39:07.500 --> 00:39:07.500]   It's pending.
[00:39:07.500 --> 00:39:07.500]   It's just taking some time, a little latency here to actually.
[00:39:07.500 --> 00:39:08.500]   deploy the contract.
[00:39:08.500 --> 00:39:08.500]   Okay.
[00:39:08.500 --> 00:39:08.500]   So yeah, it's working.
[00:39:08.500 --> 00:39:08.500]   It's pending.
[00:39:08.500 --> 00:39:08.500]   It's just taking some time, a little latency here to actually deploy the contract.
[00:39:08.500 --> 00:39:09.500]   Okay.
[00:39:09.500 --> 00:39:09.500]   Um, so yeah, it's working.
[00:39:09.500 --> 00:39:10.500]   It's pending.
[00:39:10.500 --> 00:39:11.500]   It's just taking some time.
[00:39:11.500 --> 00:39:12.500]   Um, so yeah, it's working.
[00:39:12.500 --> 00:39:13.500]   It's pending.
[00:39:13.500 --> 00:39:38.500]   It's just taking some time, a little latency here to actually deploy the contract.
[00:39:38.500 --> 00:39:43.500]   Um, so these are, these are different contracts that deploy testing it.
[00:39:43.500 --> 00:39:46.500]   So this is some base upon you.
[00:39:46.500 --> 00:39:53.500]   Um, let's see.
[00:39:53.500 --> 00:39:57.500]   Actually, what I'm going to do, let me, let me show this cool video.
[00:39:57.500 --> 00:39:59.500]   So you all can see like end to end really quickly.
[00:39:59.500 --> 00:40:06.500]   Cause there is, you know, some sort of, uh, latency around the internet in here.
[00:40:06.500 --> 00:40:14.500]   So I'll play this video right quick.
[00:40:14.500 --> 00:40:18.500]   So you guys can see an end to end flow of like how it works.
[00:40:18.500 --> 00:40:32.500]   Okay.
[00:40:32.500 --> 00:40:34.500]   Okay.
[00:40:34.500 --> 00:40:36.500]   Okay.
[00:40:36.500 --> 00:40:54.500]   Okay.
[00:40:54.500 --> 00:40:54.500]   Okay.
[00:40:54.500 --> 00:41:13.500]   Okay.
[00:41:13.500 --> 00:41:14.500]   Okay.
[00:41:14.500 --> 00:41:15.500]   Okay.
[00:41:15.500 --> 00:41:25.500]   And another thing too, um, is, you know, you, you don't have to worry about gas with these, uh, with using our tooling because you can design these experiences.
[00:41:25.500 --> 00:41:29.500]   And then we have built in gas abstraction with our wallet, uh, as a service infra.
[00:41:29.500 --> 00:41:37.500]   Um, and so it enables you to really abstract away kind of dealing with, you know, holding native tokens for gas.
[00:41:37.500 --> 00:41:49.500]   And so we also, uh, make it very easy for, you know, as we're abstracting the gas away, obviously there's a cost there, but we make it easy for you to actually, uh, pay for your gas fees from Fiat.
[00:41:49.500 --> 00:41:53.500]   Um, directly from a debit card that you would, or a credit card that you put on file.
[00:41:53.500 --> 00:42:05.500]   Um, but we, we really have, uh, designed this for, you know, enterprises, um, that, you know, probably aren't web three native to be able to integrate our technology.
[00:42:05.500 --> 00:42:26.500]   Take advantage of their near instant settlement that comes with public blockchain networks and manage wallets and transactions at a scalable level to be able to, um, you know, expand their, their actual footprint of payments around the world.
[00:42:26.500 --> 00:42:35.500]   So, um, the last thing I have is, um, let's see.
[00:42:35.500 --> 00:42:36.500]   Yeah.
[00:42:36.500 --> 00:42:37.500]   Yeah.
[00:42:37.500 --> 00:42:38.500]   I used to be really into a theory.
[00:42:38.500 --> 00:42:43.500]   I'm going to, I remember deploying the contracts before the biggest gas costs.
[00:42:43.500 --> 00:42:44.500]   Yeah.
[00:42:44.500 --> 00:42:45.500]   Yeah.
[00:42:45.500 --> 00:42:52.500]   You can, you can actually deploy like a contract factory.
[00:42:52.500 --> 00:42:55.500]   Uh, and then that'll allow you to kind of create iterations.
[00:42:55.500 --> 00:43:00.500]   of that within the contract factory to be more efficient on the gas.
[00:43:00.500 --> 00:43:01.500]   Yeah.
[00:43:01.500 --> 00:43:02.500]   Yeah.
[00:43:02.500 --> 00:43:03.500]   Yeah.
[00:43:03.500 --> 00:43:04.500]   Yeah.
[00:43:04.500 --> 00:43:05.500]   I think.
[00:43:05.500 --> 00:43:21.500]   So in the mechanics of what you're doing is that first step, basically taking the unstructured document and you creating basically structured data to then feed to the circle API in terms of, and I guess, how does that piece work?
[00:43:21.500 --> 00:43:30.500]   Is it as simple as like feeding the contracts to open API and just doing a little bit of prompting to kind of get the structured data you want as far as the JSON format?
[00:43:30.500 --> 00:43:31.500]   Yeah.
[00:43:31.500 --> 00:43:32.500]   Yeah.
[00:43:32.500 --> 00:43:34.500]   I'll jump into this right quick for you.
[00:43:34.500 --> 00:43:35.500]   So, okay.
[00:43:35.500 --> 00:43:46.500]   So yeah, that first part is, you know, we've created a prompt to make sure it outputs it in JSON.
[00:43:46.500 --> 00:43:51.500]   So it parses things out, outputs it in kind of a JSON format that looks like this.
[00:43:51.500 --> 00:44:08.500]   Uh, and then, uh, that's how we're able to kind of feed it through to be able to, uh, create basically that listing that adheres to a, uh, a consistent format of, uh, showing the actual transaction amount in task.
[00:44:08.500 --> 00:44:11.500]   I'm not super familiar with escrow contracts.
[00:44:11.500 --> 00:44:15.500]   Are they fairly standardized or do they come in different forms?
[00:44:15.500 --> 00:44:23.500]   And I guess how, uh, robust has it been able to be in terms of handling different, uh, formats?
[00:44:23.500 --> 00:44:24.500]   Yeah.
[00:44:24.500 --> 00:44:27.500]   So, um, here's the actual solidity code.
[00:44:27.500 --> 00:44:32.500]   I'll show you, uh, for the actual escrow contract here.
[00:44:32.500 --> 00:44:36.500]   Uh, and it, this is a very simple one.
[00:44:36.500 --> 00:44:40.500]   Um, it's only like a couple of hundred lines, uh, and a few functions.
[00:44:40.500 --> 00:44:52.500]   They can get, uh, very robust, but if you're, um, for most, for most escrow, um, you know, experiences, uh, this could cover up.
[00:44:52.500 --> 00:44:58.500]   Uh, this could cover a lot, you know, for most they were experiences and there are a lot of templates out there.
[00:44:58.500 --> 00:45:11.500]   Um, since escrow has been a big thing in the actual crypto ecosystem, um, that you can use one, um, is, is one that, um, our research team worked on.
[00:45:11.500 --> 00:45:13.500]   It's called the refund protocol.
[00:45:13.500 --> 00:45:21.500]   Uh, I'll pull it up right now, but it's a, it's an escrow template that kind of gives you all the robustness you would probably need to handle, um, any type of escrow.
[00:45:21.500 --> 00:45:26.500]   Any type of escrow scenario, uh, that, that has been prevalent in the ecosystem.
[00:45:26.500 --> 00:45:27.500]   Let me pull it up right now.
[00:45:27.500 --> 00:45:36.500]   And, um, you could actually use that, uh, and as a template and, and, you know, add to it if you want, or just use it straight out of the box.
[00:45:36.500 --> 00:45:40.500]   So, let me show you this one.
[00:45:40.500 --> 00:45:44.500]   So, let me show you this one.
[00:45:44.500 --> 00:45:59.500]   Yeah, here it is right here.
[00:45:59.500 --> 00:46:11.500]   So, if you go to circle research, uh, this is an article about it and it kind of explains, you know, the functionality built into it, but also too, we have a repo.
[00:46:11.500 --> 00:46:23.500]   Um, it is, uh, where is this repo?
[00:46:23.500 --> 00:46:24.500]   Refund protocol.
[00:46:24.500 --> 00:46:25.500]   So, yeah, this one right here.
[00:46:25.500 --> 00:46:27.500]   You could use this as a template.
[00:46:27.500 --> 00:46:28.500]   Yeah.
[00:46:28.500 --> 00:46:28.500]   Yeah.
[00:46:28.500 --> 00:46:29.500]   Yeah.
[00:46:29.500 --> 00:46:34.500]   Can you just wait for the microphone so everybody can hear you?
[00:46:34.500 --> 00:46:35.500]   Hold on one second.
[00:46:35.500 --> 00:46:36.500]   Okay.
[00:46:36.500 --> 00:46:54.500]   Okay, um, so my, my question here is, uh, towards the challenges of minimizing human intervention.
[00:46:54.500 --> 00:47:06.500]   Um, I, I find, uh, LLMs and agents, um, sometimes unreliably non-deterministic, right?
[00:47:06.500 --> 00:47:07.500]   Mm-hmm.
[00:47:07.500 --> 00:47:16.500]   So, there is always this pattern of, um, the LLM or the agent builds, like, a plan and someone reveals to approve.
[00:47:16.500 --> 00:47:21.500]   Um, given the nature of, um, your business, right?
[00:47:21.500 --> 00:47:36.500]   I, I understand that, like, I guess the question here is, like, what are, for Circle.ai, the biggest challenges when you talk about minimizing human interaction using agents?
[00:47:36.500 --> 00:47:37.500]   Yeah.
[00:47:37.500 --> 00:47:38.500]   Yeah.
[00:47:38.500 --> 00:47:39.500]   Great, great question.
[00:47:39.500 --> 00:47:50.500]   Um, so the question here is, you know, what, what is, um, the challenges with minimizing interactions with payments as it relates to Circle.
[00:47:50.500 --> 00:48:06.500]   Um, so I think that, um, our focus as our company is kind of, like, creating more of a frictionless exchange of value using public blockchain networks for settlement, right?
[00:48:06.500 --> 00:48:21.500]   But we started to see a huge trend, uh, over a year ago where, um, a lot of developers were building agentic workflows using USDC as the payment rail of choice to transact between agents and agents.
[00:48:21.500 --> 00:48:36.500]   And so, um, and so, um, what we, we think is, um, obviously, they're, um, the, the one thing about, you know, um, AI is this, it's not deterministic and payments are deterministic.
[00:48:36.500 --> 00:48:48.500]   Uh, you want them to be deterministic, but there is a lot of conditional logic that is happening before payments are being released in the world.
[00:48:48.500 --> 00:49:00.500]   Um, and so, um, what, what I think is right now, the best safest way to design these experiences is with human in the loop built into it.
[00:49:00.500 --> 00:49:24.500]   Um, and, and, and really kind of focus on it doing, being just a peer review basically for a person in a actual, um, payment operation, um, job to be able to have just something else out there that is doing work 24/7 and saying, hey, here are a list of payments that are ready to go.
[00:49:24.500 --> 00:49:29.500]   Uh, and this is what we've analyzed and why we believe it's ready to go.
[00:49:29.500 --> 00:49:32.500]   But at the end of the day, like you're the final approver.
[00:49:32.500 --> 00:49:39.500]   Uh, and so that's what we think, um, you know, in the near future, combining these technologies together.
[00:49:39.500 --> 00:49:51.500]   Uh, it can be a great combination, but autonomously and just, you know, full automation of controlling, uh, sending and receiving payments.
[00:49:51.500 --> 00:50:14.500]   Um, I'm not sure we're there right now, uh, but I will say that, um, you know, the way this AI industry is moving, um, there could be a world, you know, five to 10 years from now where, um, people actually trust these agents to autonomously handle, um, payments, um, and procurement and things like that.
[00:50:14.500 --> 00:50:16.500]   So hopefully that answers your question.
[00:50:16.500 --> 00:50:17.500]   Yeah.
[00:50:17.500 --> 00:50:26.500]   But we're, we're in the first inning of this and to be completely transparent, you know, there's people in this room who have a lot of experience building with agents.
[00:50:26.500 --> 00:50:34.500]   Um, this is designed to inspire you all to like test out the combination of this technology and, and, and, and give us feedback too.
[00:50:34.500 --> 00:50:35.500]   Uh, we're learning alongside.
[00:50:35.500 --> 00:50:47.500]   Oh, um, I missed the first part, but what's the closest real life examples you have of this autonomous work evaluation and settlement?
[00:50:47.500 --> 00:50:50.500]   Do you have any kind of real life examples you can share?
[00:50:50.500 --> 00:50:51.500]   Yeah.
[00:50:51.500 --> 00:51:03.500]   Um, so we, we haven't released any, anything that's like in production doing this, but there are companies that are doing this right now.
[00:51:03.500 --> 00:51:10.500]   Um, and that is, you know, you have cross meant is one company.
[00:51:10.500 --> 00:51:17.500]   Uh, and then another company is, um, third way with nebula, uh, their model.
[00:51:17.500 --> 00:51:26.500]   So those companies are kind of, you know, on the bleeding edge of, of offering these experiences to developers, but also kind of, you know, putting things out themselves.
[00:51:26.500 --> 00:51:29.500]   So I'd encourage you to check out those two companies.
[00:51:29.500 --> 00:51:33.500]   They're both, uh, cross meant headquartered in New York, I think.
[00:51:33.500 --> 00:51:36.500]   And, uh, third web is right down the street here in the bay.
[00:51:36.500 --> 00:51:37.500]   Yeah.
[00:51:37.500 --> 00:51:38.500]   Yeah.
[00:51:38.500 --> 00:51:39.500]   Um, hi.
[00:51:39.500 --> 00:51:44.500]   Um, I have a question regarding like, uh, around the escrow transactions.
[00:51:44.500 --> 00:51:55.500]   So I wanted to know how feasible, uh, is it to implement zero knowledge proof, um, in this blockchain best escrow transactions?
[00:51:55.500 --> 00:52:07.500]   Yeah, um, that, that is, um, that's something that is, is pretty feasible with the advancements that we've seen with, um, proving TLS notary communications.
[00:52:07.500 --> 00:52:19.500]   Uh, those are a little bit lighter weight to prove and you can generate a proof faster and pass that to a smart contract to be able to, um, perform, uh, escrow.
[00:52:19.500 --> 00:52:28.500]   Uh, so, uh, there is a company called ZKP2P that actually is experimenting with this and it's a live experiment that is working really well.
[00:52:28.500 --> 00:52:35.500]   So, um, there are different ways you could, you could design these and integrate ZK proofs into 'em, um, that we've seen.
[00:52:35.500 --> 00:52:39.500]   And ZKP2P is one of them that's, it's done it pretty well.
[00:52:39.500 --> 00:52:40.500]   Yeah.
[00:52:40.500 --> 00:52:41.500]   Great question.
[00:52:41.500 --> 00:52:42.500]   Yeah.
[00:52:42.500 --> 00:52:43.500]   Thank you.
[00:52:43.500 --> 00:52:44.500]   I have, sorry.
[00:52:44.500 --> 00:52:45.500]   I have one other question as well.
[00:52:45.500 --> 00:52:52.500]   So, uh, could you go to the slide where the, uh, implementation thing is there for the cold storage support?
[00:52:52.500 --> 00:52:53.500]   Okay.
[00:52:53.500 --> 00:52:54.500]   Let's see.
[00:52:54.500 --> 00:52:58.500]   Yeah.
[00:52:58.500 --> 00:53:01.500]   So here I have a, uh, downlight.
[00:53:01.500 --> 00:53:08.500]   Um, so yes.
[00:53:08.500 --> 00:53:13.500]   In this, like, transactions should not all, uh, always be instantaneous.
[00:53:13.500 --> 00:53:18.500]   So you should be, like, creating ahead of time and broadcast next month, right?
[00:53:18.500 --> 00:53:27.500]   So I'm not sure, like, I have a doubt, like, if, is there a possibility if, like, uh, there might be a double spending kind of attack?
[00:53:27.500 --> 00:53:32.500]   If we, like, hold, uh, the transaction and it is not instantaneous?
[00:53:32.500 --> 00:53:45.500]   Um, so the, the question is, could actually, uh, generating an offline transaction that's approved create a double spending, uh, exploit?
[00:53:45.500 --> 00:53:47.500]   Is that, that, that, that the question?
[00:53:47.500 --> 00:53:48.500]   Um, yes.
[00:53:48.500 --> 00:53:53.500]   Uh, um, I don't think it could, could necessarily do that.
[00:53:53.500 --> 00:54:08.500]   Um, you know, from, from my experience of, of people actually kind of generating transactions offline to actually broadcast later, I haven't seen that, that issue become, uh, a problem with double spending.
[00:54:08.500 --> 00:54:17.500]   Oh, oh, no, no, like, uh, could you, like, a little bit, uh, explain me the scenario of, like, how transactions should not always be instantaneous, like, around this?
[00:54:17.500 --> 00:54:18.500]   Yeah.
[00:54:18.500 --> 00:54:35.500]   So, so, so this, this use case, I mean, maybe if you are a company and you're running payroll on chain, and, um, you know that, um, there is a transaction that you're gonna make in the future, um, for a certain amount to do payroll and it's on a consistent cadence.
[00:54:35.500 --> 00:54:47.500]   You could actually, uh, generate that transaction, sign and approve it offline, and then broadcast it on the day of the actual transaction that needs to be sent out.
[00:54:47.500 --> 00:54:48.500]   Oh, got it.
[00:54:48.500 --> 00:54:49.500]   Thank you.
[00:54:49.500 --> 00:54:50.500]   Yeah.
[00:54:50.500 --> 00:54:51.500]   Yeah.
[00:54:51.500 --> 00:54:52.500]   Okay.
[00:54:52.500 --> 00:54:53.500]   Yeah.
[00:54:53.500 --> 00:54:55.500]   Hey, how's it going?
[00:54:55.500 --> 00:54:56.500]   Good.
[00:54:56.500 --> 00:54:57.500]   How you doing?
[00:54:57.500 --> 00:55:02.500]   Um, I must have missed the first part where you mentioned multi-sig.
[00:55:02.500 --> 00:55:03.500]   Yeah.
[00:55:03.500 --> 00:55:11.500]   But, um, my question was just revolving around, like, some of the different use cases of multi-sig, combining that with, you know, humans, agents.
[00:55:11.500 --> 00:55:22.500]   Um, you know, for example, in this, um, contract evaluation, you could have, like, three different agents try to evaluate the same contract and criteria inside of multi-sig.
[00:55:22.500 --> 00:55:27.500]   But what are the, what other use cases of multi-sig and AI do you see?
[00:55:27.500 --> 00:55:29.500]   Great question.
[00:55:29.500 --> 00:55:48.500]   Um, you know, I, I think that, um, you know, there could be a world where, um, you, like, you, you have multiple agents that may act as, um, you know, in, in kind of like a, a financial, uh, operations unit at a company, small company.
[00:55:48.500 --> 00:55:59.500]   And you may have, um, you know, a CFO agent, a controller agent, uh, accountant agent, and those agents are cross-checking each other's work and things like that.
[00:55:59.500 --> 00:56:09.500]   But then ultimately they need to do, uh, some sort of multi-signature process to be able to sign off on, uh, maybe transactions that are over like $25,000.
[00:56:09.500 --> 00:56:17.500]   Um, so that, that, that could be like a world that we see, uh, with, with agents and, um, USDC.
[00:56:17.500 --> 00:56:18.500]   Great. Thank you.
[00:56:18.500 --> 00:56:19.500]   Yeah. Okay.
[00:56:19.500 --> 00:56:34.500]   So where are you using that AI, um, for reading the document and generating the, like, what the contract should be?
[00:56:34.500 --> 00:56:36.500]   So there is a human in the loop.
[00:56:36.500 --> 00:56:44.500]   Uh, so for, in order to the, in order for the human to approve or reject it, he needs to go through that document himself as well, right?
[00:56:44.500 --> 00:56:50.500]   Um, so how exactly is that agent saving any effort?
[00:56:50.500 --> 00:56:54.500]   Because the human has to still go and read the document, right?
[00:56:54.500 --> 00:56:55.500]   Yeah, yeah.
[00:56:55.500 --> 00:57:00.500]   So, like, you know, right now, like, this is just a, a simple prototype, right?
[00:57:00.500 --> 00:57:16.500]   Um, we could have gone the extra mile and started out with someone, uh, you know, using NLP to, like, just create, like, a, a simple prompt to say, hey, I want a contract between, you know, me and this other person that does these things.
[00:57:16.500 --> 00:57:18.500]   And then the agent goes out and writes it.
[00:57:18.500 --> 00:57:28.500]   And then the agent could actually, you know, um, parse out the information that it wrote and then send a notification to the two parties that this is an agreement for a hundred dollars.
[00:57:28.500 --> 00:57:30.500]   And these are the things that need to be met.
[00:57:30.500 --> 00:57:39.500]   Um, so that, that's, that's a word where we, we could have done that, but like, we were just trying to put together a simple prototype to just showcase the combination of technology.
[00:57:39.500 --> 00:57:51.500]   But this is not, you know, something we, we feel like is, you should, you know, deploy in production and use right now, but it's inspiration, you know, of combining these different technologies.
[00:57:51.500 --> 00:57:52.500]   Okay.
[00:57:52.500 --> 00:57:53.500]   Got it.
[00:57:53.500 --> 00:57:54.500]   Yes.
[00:57:54.500 --> 00:57:55.500]   Yeah.
[00:57:55.500 --> 00:58:04.500]   So I guess, um, yeah, uh, we don't have any other questions.
[00:58:04.500 --> 00:58:09.500]   We can close it out.
[00:58:09.500 --> 00:58:09.500]   Thanks everyone.
[00:58:09.500 --> 00:58:10.500]   Thanks everyone.
[00:58:10.500 --> 00:58:11.500]   Thank you.
[00:58:11.500 --> 00:58:12.500]   Thanks everyone.
[00:58:12.500 --> 00:58:13.000]   you
[00:58:13.000 --> 00:58:15.060]   you
[00:58:15.060 --> 00:58:17.160]   We'll see you next time.

