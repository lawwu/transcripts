
[00:00:00.000 --> 00:00:05.660]   Hi everyone, I'm Vikash. I'm a software development manager with AWS at Amazon.
[00:00:05.660 --> 00:00:10.980]   I'm Linda. I'm a developer advocate at AWS. And in this video, we're going to talk about the
[00:00:10.980 --> 00:00:16.960]   software development lifecycle and specifically how you can use Gen.AI throughout that lifecycle.
[00:00:16.960 --> 00:00:21.980]   We're going to focus on Amazon Q Developer, which is an AI coding assistant. And we're going to show
[00:00:21.980 --> 00:00:26.640]   you where you could use it in all the different parts of that. So I'm going to throw it to Vikash
[00:00:26.640 --> 00:00:30.980]   because he as a manager always gets a very common question regarding this.
[00:00:30.980 --> 00:00:36.600]   One of the most common questions that I hear from the engineering team is how can they incorporate
[00:00:36.600 --> 00:00:43.060]   generative AI practices into their software development lifecycle or the SDLC. For those
[00:00:43.060 --> 00:00:49.660]   of us who don't know what SDLC is, it's a process of building and releasing software to our customers.
[00:00:49.660 --> 00:00:54.500]   We generally start with a planning phase where we gather requirements, product feedback, etc.
[00:00:54.900 --> 00:01:00.000]   Then we go to the create phase where we actually build the software application itself.
[00:01:00.000 --> 00:01:05.280]   Then we test it, do end-to-end testing, integration testing, penetration testing,
[00:01:05.280 --> 00:01:09.340]   to make sure that the software that we are building is safe for our customers.
[00:01:09.340 --> 00:01:13.820]   We then deploy it. And finally, we maintain it and modernize it.
[00:01:13.820 --> 00:01:18.520]   Over time, depending upon the feedback, we go through this cycle all over again.
[00:01:18.680 --> 00:01:25.320]   So let's get right into it. Amazon Q Developer is a coding assistant that is also in your IDE,
[00:01:25.320 --> 00:01:30.840]   can be even in your CLI and terminal, actually also has a GitHub extension and can be also in
[00:01:30.840 --> 00:01:35.120]   different parts of the lifecycle, right? So I'm going to show you where you could get started.
[00:01:35.120 --> 00:01:40.280]   One of the cool things is if you install it in the command line or the IDE, it doesn't require an AWS
[00:01:40.280 --> 00:01:45.400]   account. All you have to do is go to this page, click get started for free, and choose which one you want.
[00:01:45.400 --> 00:01:50.080]   But once you do that, I'll just quickly show you. Here you have an example of how it appears in Visual
[00:01:50.080 --> 00:01:54.780]   Studio Code over here. And we're going to build, don't worry. Here is a way it appears in the CLI.
[00:01:54.780 --> 00:01:59.760]   What we can do next is jump into the CLI version, because that's the most lightweight version for
[00:01:59.760 --> 00:02:04.940]   you to install Amazon Q. You all have a command line on your computer. And here you can do either
[00:02:04.940 --> 00:02:10.480]   the planning phase, or if you've already done the planning phase somewhere else, you can go straight
[00:02:10.480 --> 00:02:13.700]   into creating and coding. So let's get into it.
[00:02:13.700 --> 00:02:20.440]   I have an idea. Why don't we build a game for our viewers today? So this game is called 2048 or 2048.
[00:02:20.440 --> 00:02:27.240]   So we have multiple tiles. The goal of the game is to merge two tiles of the same number, and then the
[00:02:27.240 --> 00:02:34.980]   numbers double. The goal is to reach a total of 2048 or 2048. So here, if you see, we are merging two tiles
[00:02:34.980 --> 00:02:40.360]   of two, they become four, we are merging two tiles of four, they become eight, we are merging two tiles
[00:02:40.360 --> 00:02:43.200]   of eight, making them 16, and so on and so forth.
[00:02:43.200 --> 00:02:49.420]   This is a really fun game to build. So I actually think let's get right into the CLI and try it out. So everyone has a command
[00:02:49.420 --> 00:02:54.420]   line, right? So in order to start Q, once you install it, we showed you where to install it.
[00:02:54.420 --> 00:03:09.420]   Now, Vikash gave me a challenge. We have to build this 2048 game. To start it, all I have to actually write is Q. I press enter. If you aren't sure what to do and how to use it, you can just type with natural language right now and start just talking to it, also as a chat, also to ideate.
[00:03:09.420 --> 00:03:29.300]   But if you want to see all the other options you have, you can do slash help. And you will see also that you have all these different commands, as well as MCP, if you would like to use that, and other tips. So for now, I want to build a 2048 game in Python using fast API.
[00:03:29.300 --> 00:03:31.840]   Yeah, let's do using fast API.
[00:03:31.840 --> 00:03:34.520]   Let's use poetry.
[00:03:34.520 --> 00:03:50.380]   Using poetry. Let's see what it comes up with. So now it's giving me the plan. It's telling me here's what I'm going to do. And now I have an ability to either accept each step by pressing Y and enter, or I can just do T and trust it. Vikash, should we trust it?
[00:03:50.380 --> 00:03:51.860]   I trust Q.
[00:03:51.860 --> 00:04:01.220]   Of course, this is a demo. If you're building in production, we always recommend reviewing the code. But here, we're going to trust it and it'll start running. And now you can see how long each step is taking as well.
[00:04:01.220 --> 00:04:12.980]   All right. So now, while we were chatting, this was generating some 2048 code here. One thing I forgot, and check this out. One thing I forgot is, look, it's putting it inside just my regular folder.
[00:04:12.980 --> 00:04:23.360]   I actually wanted to move the whole thing into my development folder. So guess what? I could actually ask it, can you move this project to my development folder? So now, it will move it in there.
[00:04:23.360 --> 00:04:25.500]   That's actually a pretty nifty little hack.
[00:04:25.500 --> 00:04:29.360]   Yeah, because I always forget when I do this to put it in the right place.
[00:04:29.360 --> 00:04:35.520]   All right. So now, it's saying the project's set up. You can see that here it appears in my development folder.
[00:04:35.520 --> 00:04:45.360]   Awesome. I think this code actually looks good. I am really happy that it is using FirstAPI rightly. It has a response model. It has created post-APIs.
[00:04:45.360 --> 00:04:45.900]   Agreed.
[00:04:45.900 --> 00:04:56.900]   What's cool, Vikash, you could also use this in your IDE, right, and open the folder structure. Because, of course, this is more coming out in the CLI. But you can use Q in your IDE of choice.
[00:04:57.700 --> 00:05:11.500]   Given that my engineering team relies on VS Code, IntelliJ, Eclipse, and everyone has their own preferences, right? An Amazon Q developer touches all these touch points, which makes it very seamless of an experience.
[00:05:11.500 --> 00:05:15.900]   It even created a readme, Vikash. Which part of the software development lifecycle is that?
[00:05:15.900 --> 00:05:17.720]   Awesome.
[00:05:17.720 --> 00:05:26.580]   So now, it tells me what my project structure is. It created it in the development folder, even though I only remembered Midway. And it tells me how to run it.
[00:05:26.660 --> 00:05:29.780]   I think this is a great start. But is it production ready?
[00:05:29.780 --> 00:05:31.260]   I would say no, too.
[00:05:31.260 --> 00:05:33.780]   Why don't we add unit test?
[00:05:33.780 --> 00:05:35.880]   Yes. So let's open it in the IDE.
[00:05:35.880 --> 00:05:40.660]   So why don't we start with adding unit test to make sure that it's production ready?
[00:05:40.660 --> 00:05:42.200]   So let's start with that.
[00:05:42.200 --> 00:05:52.700]   I quickly open up in my IDE and I start invoking my Amazon Q developer agent for test for generating unit test by invoking slash test.
[00:05:52.940 --> 00:06:01.540]   So here I'm doing slash test. It automatically invokes the Amazon Q developer agent and it quickly starts looking at the code itself.
[00:06:01.540 --> 00:06:12.840]   Once it's done, let's look at the generated code. Here we see it is able to understand all pieces of the code and we have, I think, a good amount of test.
[00:06:12.840 --> 00:06:19.380]   It is amazing that it was able to also understand the state and created relevant tests for the state management itself.
[00:06:19.380 --> 00:06:21.720]   So I think this looks pretty, pretty robust.
[00:06:21.720 --> 00:06:23.860]   I generally use slash test a lot.
[00:06:23.860 --> 00:06:27.720]   There's also a feature called slash dev, which is for feature development.
[00:06:27.960 --> 00:06:29.760]   You can give it a prompt in the IDE.
[00:06:29.760 --> 00:06:36.640]   It will automatically understand the entire project as context and build context aware features for me.
[00:06:36.640 --> 00:06:44.060]   So let's go ahead and quickly ask you to fix my bugs by just saying fix and giving the error message.
[00:06:44.060 --> 00:06:46.820]   It quickly analyzed my code base.
[00:06:46.820 --> 00:06:51.100]   It figured out where the error is, gave me the code.
[00:06:51.100 --> 00:06:53.740]   I applied it and now let's see what happens.
[00:06:53.740 --> 00:06:55.900]   Voila!
[00:06:55.900 --> 00:07:00.000]   I have a working code for a game with unit test.
[00:07:00.000 --> 00:07:00.980]   Let's do one more thing.
[00:07:00.980 --> 00:07:04.240]   Why don't we generate documentations before we raise a pull request?
[00:07:04.240 --> 00:07:10.800]   So let's invoke the slash doc, which is the Amazon Q developer agent to generate documentation.
[00:07:11.300 --> 00:07:14.280]   I go ahead, I quickly pass on slash doc.
[00:07:14.280 --> 00:07:16.420]   I ask it to create a readme.
[00:07:16.420 --> 00:07:23.480]   So initially there was a readme generated, but now that we have a code and we have unit test, I want to see how it does better.
[00:07:23.480 --> 00:07:28.120]   So it quickly started my summarizing my code base, started going through my source files.
[00:07:28.120 --> 00:07:29.960]   So now I see a documentation.
[00:07:29.960 --> 00:07:31.980]   It is able to understand my source code.
[00:07:31.980 --> 00:07:36.260]   It gives me the instruction, which was pretty much the same last time as well.
[00:07:36.260 --> 00:07:37.280]   This is interesting.
[00:07:37.580 --> 00:07:43.100]   Now my API endpoints also have relevant examples, my troubleshooting documentation.
[00:07:43.100 --> 00:07:48.600]   And it also gave me a data flow diagram of how my state is being managed.
[00:07:48.600 --> 00:07:53.280]   And I think one of the next steps could be deploying or having a PR.
[00:07:53.280 --> 00:07:56.560]   But did you know also the queue is available inside GitHub?
[00:07:56.560 --> 00:07:58.860]   And you can actually build inside GitHub.
[00:07:58.860 --> 00:07:59.780]   I have agents there.
[00:07:59.780 --> 00:08:01.860]   And I'm going to show you really quick that as well.
[00:08:01.860 --> 00:08:05.640]   So if you like to build on GitHub and not leave GitHub, you can also do that.
[00:08:05.640 --> 00:08:06.740]   Awesome.
[00:08:06.740 --> 00:08:08.000]   I'm going to give you a quick overview.
[00:08:08.000 --> 00:08:11.840]   So head over to QDeveloper in Marketplace and GitHub.
[00:08:11.840 --> 00:08:14.640]   And all you have to do is choose which repos you want.
[00:08:14.640 --> 00:08:15.660]   You can put all or a few.
[00:08:15.660 --> 00:08:20.040]   And now you can actually either use an existing issue or create a new one.
[00:08:20.040 --> 00:08:21.780]   Apply a label here.
[00:08:21.780 --> 00:08:23.180]   Let's say we're just doing development agent.
[00:08:23.180 --> 00:08:26.480]   And based on that issue, it will generate code.
[00:08:26.480 --> 00:08:28.260]   It will tell you when the PR is ready.
[00:08:28.260 --> 00:08:31.260]   And you can then look at the files that were changed.
[00:08:31.840 --> 00:08:39.200]   And now if we want to change something in the PR, you can actually add comments and request changes like I normally would in a review.
[00:08:39.200 --> 00:08:41.560]   And then request the changes so it does it again.
[00:08:41.620 --> 00:08:43.000]   So you don't even have to leave GitHub.
[00:08:43.000 --> 00:08:49.020]   And then Q also automatically runs code scans and fixes it right in the PR.
[00:08:49.520 --> 00:08:55.120]   And so it's pretty awesome how you can use also agents right inside GitHub with Q.
[00:08:55.120 --> 00:09:00.600]   We talked about where we could code, which is IDEs, CLI, GitHub.
[00:09:00.600 --> 00:09:03.580]   We're building this 2048 game.
[00:09:03.580 --> 00:09:04.880]   We even ran tests.
[00:09:04.880 --> 00:09:05.680]   We add documentation.
[00:09:05.680 --> 00:09:07.580]   So what's next in the lifecycle?
[00:09:07.580 --> 00:09:12.340]   So the next would be to deploy it to our cloud services already.
[00:09:12.340 --> 00:09:18.100]   So one of the most common things, and I'm guilty of it, is saying works on my machine, right?
[00:09:18.100 --> 00:09:23.380]   To make this game an actual production ready, we'll deploy it into AWS console.
[00:09:23.380 --> 00:09:31.120]   And in the background, I use the slash dev agent in the IDE to actually generate SAM scripts and deploy my application.
[00:09:31.120 --> 00:09:33.840]   You know what's something interesting I found?
[00:09:33.840 --> 00:09:34.860]   What?
[00:09:34.860 --> 00:09:38.700]   That our application was actually not running the right way in production.
[00:09:38.700 --> 00:09:39.580]   Oh.
[00:09:39.580 --> 00:09:40.340]   Yes.
[00:09:40.340 --> 00:09:41.860]   So I need to investigate.
[00:09:41.860 --> 00:09:43.420]   So let's go ahead and do that.
[00:09:43.580 --> 00:09:46.360]   So here, I come to my AWS console.
[00:09:46.360 --> 00:09:48.460]   I go into my CloudWatch.
[00:09:48.460 --> 00:09:52.640]   Let's first look at the Lambda where I deployed through SAM.
[00:09:53.140 --> 00:09:54.880]   And I'm looking at the logs.
[00:09:54.880 --> 00:09:59.020]   And I quickly see there is some import error happening in the Lambda itself.
[00:09:59.020 --> 00:10:06.340]   Now I can start investigating the application directly in the console itself using Amazon Q developer.
[00:10:07.740 --> 00:10:15.400]   The Amazon Q developer AI operations automatically starts looking at the log group and all the associated resources.
[00:10:15.400 --> 00:10:20.060]   It creates a topology and then figures out the root cause for me.
[00:10:20.060 --> 00:10:22.260]   I don't have to spend time debugging.
[00:10:22.260 --> 00:10:23.860]   I can look at the graphs.
[00:10:23.860 --> 00:10:27.640]   I can figure out what's going on and come back and fix my application.
[00:10:27.640 --> 00:10:36.460]   It's so easy for developers to actually know what's happening rather than trying to find the right timestamp and create reports or incident reports for the team.
[00:10:36.460 --> 00:10:41.960]   So this feature enables me to quickly look what's wrong in my application.
[00:10:41.960 --> 00:10:45.580]   And I can go back in time and go ahead and fix it.
[00:10:45.580 --> 00:10:48.480]   I think this, I was happy with this report.
[00:10:48.480 --> 00:10:50.960]   So let's just go ahead and close the investigation.
[00:10:50.960 --> 00:10:53.740]   Taking this game to production.
[00:10:53.740 --> 00:10:59.360]   I think when we saw the errors and Amazon Q developer helped us debug what's the reason.
[00:10:59.360 --> 00:11:08.460]   I think one of the takeaways for me in this particular situation is to think of infra upfront, how your application is going to the customers.
[00:11:08.460 --> 00:11:14.640]   I think if that's something that we would have done early on, we wouldn't have faced this.
[00:11:14.640 --> 00:11:16.980]   I should have asked QCLI to generate an IAIS.
[00:11:16.980 --> 00:11:18.140]   We should have thought about infra.
[00:11:18.140 --> 00:11:21.240]   We are both part of the software development lifecycle, Vikash.
[00:11:22.420 --> 00:11:24.640]   So we should have thought about it up front.
[00:11:24.640 --> 00:11:26.460]   What was your takeaways?
[00:11:26.460 --> 00:11:31.260]   My takeaway is kind of similar to yours where we have to pre-plan.
[00:11:31.260 --> 00:11:33.520]   So that planning phase might have other things.
[00:11:33.520 --> 00:11:39.360]   And maybe one way to actually follow best practices is to actually ask, even in the CLI, we could say,
[00:11:39.360 --> 00:11:43.860]   what is the best way for me to plan for something that's a bit more robust, right?
[00:11:43.860 --> 00:11:46.520]   And production ready and follow best practices.
[00:11:46.620 --> 00:11:51.380]   And you can iterate before you ever actually have the code saved anywhere, right?
[00:11:51.380 --> 00:11:52.680]   Or like generate and iterate.
[00:11:52.680 --> 00:11:58.260]   So I think the planning part where you can, of course, if you're deploying to the cloud, use IAC.
[00:11:58.800 --> 00:12:04.600]   And then being able to utilize Q in different ways for your use case in so many different locations is helpful.
[00:12:04.600 --> 00:12:07.720]   Of course, it's always you are the person planning.
[00:12:07.720 --> 00:12:08.360]   You're the manager.
[00:12:08.360 --> 00:12:13.340]   And AI is just helping you with all these tedious tasks and almost becoming your assistant in so many places there.
[00:12:13.440 --> 00:12:16.180]   So it's awesome to have it in all these different places.
[00:12:16.180 --> 00:12:21.000]   But, of course, it's on you as we learn to be able to do this responsibly.
[00:12:21.000 --> 00:12:27.420]   And I love security scans and the monitoring and observability because I think it helps a lot in mitigating issues.
[00:12:27.420 --> 00:12:28.120]   Absolutely.
[00:12:28.720 --> 00:12:39.800]   One of the things that you rightly pointed out is as engineers and with a generative AI and Amazon Q developer, the planning phase might probably also include planning your prompts.
[00:12:39.800 --> 00:12:48.540]   Because prompt engineering is going to be a very important skill set to make sure that you get desired outputs from the models and the agents.
[00:12:48.540 --> 00:12:57.460]   So for anyone who's watching this and wants to try Q, first of all, you could try it for free in the IDE, you could try it for free in the CLI, you could try it for free in GitHub and so many different locations.
[00:12:57.460 --> 00:12:59.000]   So definitely give it a try.
[00:12:59.000 --> 00:13:00.440]   Play around with it yourself.
[00:13:00.440 --> 00:13:07.660]   So you could head over to aws.amazon.com slash Q slash developer and get started building right over here.
[00:13:07.660 --> 00:13:12.360]   If you want to see what's new, also check out there's updates coming through.
[00:13:12.360 --> 00:13:14.980]   So be sure to check that out.
[00:13:14.980 --> 00:13:17.480]   And if you have any questions, let us know in the comments.
[00:13:17.660 --> 00:13:19.720]   And as always, happy building.

