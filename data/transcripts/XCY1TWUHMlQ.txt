
[00:00:00.000 --> 00:00:15.000]   Hey everyone, my name is Shreya. I'm finishing up my PhD at UC Berkeley so that's quite exciting for me.
[00:00:15.000 --> 00:00:26.000]   And I'm here to give you a different kind of talk. This is about research, what we're learning through research and how to help people build reliable L1 pipelines.
[00:00:26.000 --> 00:00:31.000]   Just to give a picture of the kind of research that we do at Berkeley, this is around data processing agents.
[00:00:31.000 --> 00:00:41.000]   What do I mean by data processing? Organizations have lots of unstructured data, documents that they want to extract and analyze, extract insights from and make sense of.
[00:00:41.000 --> 00:00:49.000]   So for example, maybe in customer service reviews they want to extract themes, summarize them, figuring out matchable next steps.
[00:00:49.000 --> 00:01:00.000]   Maybe they want to look through their emails to figure out for a sales agent. Which clients could have gotten closed? Why didn't they? How do we move forward from that?
[00:01:00.000 --> 00:01:11.000]   And all sorts of domains have these kinds of tasks. For example, in traffic safety, aviation safety. What are the causes of accidents? How can we mitigate them?
[00:01:11.000 --> 00:01:22.000]   And when people write pipelines to use LLMs to solve these problems, their number one complaint is that, you know, this is really hard. It doesn't work.
[00:01:22.000 --> 00:01:25.000]   And so I want to put you in that mindset to figure out why.
[00:01:25.000 --> 00:01:34.000]   Imagine you are a real estate agent trying to find a place to meet your customer or your client's needs. And your client has a pet. It's a dog owner.
[00:01:34.000 --> 00:01:43.000]   You might want to know, okay, what neighborhoods in, say, SF have the most restrictive pet policies. I want to tell that to my client.
[00:01:43.000 --> 00:01:57.000]   So you might write this pipeline as a sequence of LLM operations on a bunch of real estate rental contracts. You might start out with a map operation, which for every document gives you some extracted output.
[00:01:57.000 --> 00:02:10.000]   More map operations, for example, to categorize or classify clauses. And then aggregate these clauses together, maybe by neighborhood, by city, and come up with a summary or report for each.
[00:02:10.000 --> 00:02:14.000]   People write these pipelines and the number one thing that they tell us is, "My prompts don't work."
[00:02:14.000 --> 00:02:20.000]   And then the number one thing that they're told as a solution is, "Oh, just iterate on your prompts."
[00:02:20.000 --> 00:02:31.000]   So today's talk, I really want to dive into what does this kind of iteration entail, right? Why is this problem hard? How can you feel like you're not just hacking away at nothing to make progress?
[00:02:31.000 --> 00:02:41.000]   So at UC Berkeley, we put our research hats on, our HCI hats on, and studied how people write these kinds of data processing pipelines.
[00:02:41.000 --> 00:02:48.000]   The very first thing we observed is that people did not even know what the right question is. And many of you might resonate with this a little bit.
[00:02:48.000 --> 00:03:03.000]   So in our real estate agent example, someone might think they want to extract all pet policy clauses and then realize only after looking at the documents and looking at the outputs that they only wanted, you know, dog and cat pet policy clauses.
[00:03:03.000 --> 00:03:10.000]   Then when they feel like they know they have the right question they want to ask, then they want to figure out how to specify that question.
[00:03:10.000 --> 00:03:16.000]   So we all know with working with LLMs that we need to have very well specified, clear, unambiguous prompts.
[00:03:16.000 --> 00:03:27.000]   And things that we as humans think are unambiguous are actually pretty ambiguous. For example, just saying dog and cat policy clauses doesn't tell the LLM much.
[00:03:27.000 --> 00:03:35.000]   Maybe you need to say weight limits or restrictions, brief restrictions, quantity limits, and so forth, improving the LLM's performance.
[00:03:35.000 --> 00:03:43.000]   So zooming out a bit, what do these challenges mean, right? Iteration kind of reveals a lot of these insights if you do it correctly.
[00:03:43.000 --> 00:03:55.000]   But when we help people build data processing pipelines, what we really want to do is close these gaps between the user or the developer, the data they're trying to query and make sense of, and the pipeline that we're writing.
[00:03:55.000 --> 00:04:02.000]   And as researchers, we figured out that, oh my gosh, there's so much tooling in this bottom half in LLM accuracy.
[00:04:02.000 --> 00:04:08.000]   When you have a very well specified pipeline, how do we make sure that generalizes to all of our documents and our needs?
[00:04:08.000 --> 00:04:14.000]   But there's virtually no tooling in this data understanding and intense specification gaps.
[00:04:14.000 --> 00:04:25.000]   So in today's talk, I want to spend the rest of the time telling you about how we're thinking of closing these gaps and insights that you might apply when you are trying to iterate on your own forms.
[00:04:25.000 --> 00:04:28.000]   First, I'll talk about this data understanding gap.
[00:04:28.000 --> 00:04:40.000]   So going back to our real estate rental contract example, the core challenge here is what are the types of documents in the data and what are the unique failure modes that happen for each type of documents?
[00:04:40.000 --> 00:04:48.000]   So for example, all of these types of pet clauses might exist, three restriction type clauses, clauses on the number of pets, service animal exemptions.
[00:04:48.000 --> 00:04:51.000]   And many people don't even know this until they look at the data.
[00:04:51.000 --> 00:05:00.000]   So when we're building tools, we might want to automatically be able to extract them for our end users so they can look at examples of failure modes for each type.
[00:05:00.000 --> 00:05:04.000]   And then we see that there's a really, really long tail of failure modes.
[00:05:04.000 --> 00:05:07.000]   And this is not just unique in real estate settings.
[00:05:07.000 --> 00:05:09.000]   We observe this for pretty much any application here.
[00:05:09.000 --> 00:05:11.000]   It's like ML in general.
[00:05:11.000 --> 00:05:15.000]   There's so many different types of failure modes that are difficult to make sense of.
[00:05:15.000 --> 00:05:20.000]   So for example, clauses might be phrased unusually and the LLM might miss extracting them.
[00:05:20.000 --> 00:05:29.000]   It might extract things that are unrelated because, you know, a keyword is separately related and so forth.
[00:05:29.000 --> 00:05:36.000]   But it's not uncommon to see people flag hundreds of issues in a thousand document collection.
[00:05:36.000 --> 00:05:43.000]   So putting this all together, you're zooming out, what does it mean to close this data understanding gap?
[00:05:43.000 --> 00:05:48.000]   I mentioned that we want pooling to help people find anomalies and failure modes in their data,
[00:05:48.000 --> 00:05:53.000]   but also to be able to design emails on the fly for each of these different failure modes.
[00:05:53.000 --> 00:05:57.000]   And some of the solutions that we're prototyping in our stack, in our research stack,
[00:05:57.000 --> 00:06:06.000]   are for having people look at clusters of outputs automatically and take them in situ so that we can help organize them.
[00:06:06.000 --> 00:06:12.000]   So to give you a concrete example of what a real estate agent might do or a real estate agent developer,
[00:06:12.000 --> 00:06:17.000]   they might see for each failure mode that either we organize or once they label,
[00:06:17.000 --> 00:06:20.000]   we are able to identify that they've labeled them all the same.
[00:06:20.000 --> 00:06:26.000]   They come up with, okay, here's a data set for where you can design emails on.
[00:06:26.000 --> 00:06:28.000]   And maybe there are some potential strategies.
[00:06:28.000 --> 00:06:34.000]   For example, generating alternative phrasing with an LLM or doing keyword checks in hybrid with LLMs.
[00:06:34.000 --> 00:06:36.000]   And this is where it gets a little bit fuzzy and interesting, right?
[00:06:36.000 --> 00:06:38.000]   How do we build these for our users?
[00:06:38.000 --> 00:06:41.000]   And I think a lot of different domains have very exciting challenges.
[00:06:41.000 --> 00:06:50.000]   So now I want to move over to the intent, which is when we know that there are lots of failure modes in our data,
[00:06:50.000 --> 00:06:53.000]   how do we even go about improving the pipeline?
[00:06:53.000 --> 00:06:59.000]   And much of this revolves around reducing query ambiguity or prompting ambiguity.
[00:06:59.000 --> 00:07:02.000]   Maybe I want to change pet related clauses to dog and cat related clauses.
[00:07:02.000 --> 00:07:04.000]   This is a very simple example.
[00:07:04.000 --> 00:07:11.000]   But you can imagine with the hundreds of failure modes, figuring out how to translate this into actual pipeline improvements is very difficult.
[00:07:11.000 --> 00:07:13.000]   Do we prompt engineer?
[00:07:13.000 --> 00:07:15.000]   Do we add new operations?
[00:07:15.000 --> 00:07:16.000]   Do we do task decomposition?
[00:07:16.000 --> 00:07:20.000]   Do we try to look at subsections of the document and unify themselves?
[00:07:20.000 --> 00:07:22.000]   People often get very lost in that.
[00:07:22.000 --> 00:07:30.000]   So one of the solutions that we're prototyping and that's available on our DocuTL project is the ability to take users provided notes
[00:07:30.000 --> 00:07:37.000]   and automatically translate them into prompt improvements in an interface where people can interactively give feedback, edit,
[00:07:37.000 --> 00:07:42.000]   and maintain their revision history so it's fully steerable.
[00:07:42.000 --> 00:07:43.000]   Alright.
[00:07:43.000 --> 00:07:47.000]   Now in my last slide, you might be wondering, okay, why does this matter?
[00:07:47.000 --> 00:07:48.000]   I don't really care.
[00:07:48.000 --> 00:07:51.000]   I might not be emailing agents for data processing.
[00:07:51.000 --> 00:07:53.000]   What can I take away from this?
[00:07:53.000 --> 00:07:54.000]   Great question.
[00:07:54.000 --> 00:07:55.000]   So here's my takeaways for you.
[00:07:55.000 --> 00:08:00.000]   First is that we always find in every single domain that people are processing data with,
[00:08:00.000 --> 00:08:02.000]   evals are very, very possible.
[00:08:02.000 --> 00:08:05.000]   And they're never done first off with evaluation.
[00:08:05.000 --> 00:08:08.000]   People are always collecting new failure modes as they run pipelines.
[00:08:08.000 --> 00:08:17.000]   Always creating new subsets of documents or example traces that will represent evals in the future.
[00:08:17.000 --> 00:08:19.000]   And failure modes really hide in this long tail, right?
[00:08:19.000 --> 00:08:24.000]   We see people having tens, twenties of different failure modes that they're constantly checking.
[00:08:24.000 --> 00:08:34.000]   Then the next thing that we've observed that is very helpful is when our users unpack the cycle of iteration into distinct stages.
[00:08:34.000 --> 00:08:35.000]   Right?
[00:08:35.000 --> 00:08:46.000]   I mentioned that people try to do strategies like query decomposition or prompt optimization to get a well-specified pipeline into a generalizable pipeline.
[00:08:46.000 --> 00:08:52.000]   However, we find that people first need to figure out how to specify a pipeline in the first place.
[00:08:52.000 --> 00:08:54.000]   So first, understand your data.
[00:08:54.000 --> 00:08:56.000]   Do this as a stage yourself.
[00:08:56.000 --> 00:08:58.000]   Don't worry about having good accuracy.
[00:08:58.000 --> 00:09:00.000]   Just know what's going on in your failure modes.
[00:09:00.000 --> 00:09:05.000]   Second, figure out how to get your prompts as well-specified as possible.
[00:09:05.000 --> 00:09:06.000]   Make sure there's no ambiguity.
[00:09:06.000 --> 00:09:10.000]   If you were to send them to be human, they would not misinterpret them, for example.
[00:09:10.000 --> 00:09:18.000]   And then only do people get really good gains in applying well-known accuracy optimization strategies.
[00:09:18.000 --> 00:09:20.000]   So, with that, thanks so much.
[00:09:20.000 --> 00:09:23.000]   Feel free to email me at shreyashunker@berkeley.edu.
[00:09:23.000 --> 00:09:25.000]   I'm happy to chat with anyone afterwards.
[00:09:25.000 --> 00:09:26.000]   Thank you, Shreya.
[00:09:26.000 --> 00:09:26.000]   Thank you, Shreya.
[00:09:26.000 --> 00:09:27.000]   Next up is Tan.
[00:09:27.000 --> 00:09:28.000]   She's going to come back.
[00:09:28.000 --> 00:09:29.000]   Thank you, Shreya.
[00:09:29.000 --> 00:09:30.000]   Okay.
[00:09:30.000 --> 00:09:30.000]   Thank you, Shreya.
[00:09:30.000 --> 00:09:31.000]   Next up is Tan.
[00:09:31.000 --> 00:09:32.000]   She's going to come back.
[00:09:32.000 --> 00:09:33.000]   Thank you, Shreya.
[00:09:33.000 --> 00:09:34.000]   Thank you, Shreya.
[00:09:34.000 --> 00:09:35.000]   Thank you, Shreya.
[00:09:35.000 --> 00:09:36.000]   Next up is Tan.
[00:09:36.000 --> 00:09:37.000]   She's going to come back.

