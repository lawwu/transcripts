
[00:00:00.000 --> 00:00:15.000]   .
[00:00:15.000 --> 00:00:17.000]   Hey, thank you and welcome everybody.
[00:00:17.000 --> 00:00:20.000]   I'm Keiji Kanazawa from Microsoft.
[00:00:20.000 --> 00:00:22.000]   I work in product and AI Foundry.
[00:00:22.000 --> 00:00:26.000]   If you're at the keynote session from Asha, she's my CVB boss.
[00:00:26.000 --> 00:00:30.000]   So I work in that org and Nagkumar is an engineer on the team.
[00:00:30.000 --> 00:00:35.000]   He's going to be showing some code in a little bit, which I'm sure most of you are excited to see.
[00:00:35.000 --> 00:00:38.000]   So here we are at the AI engineer conference.
[00:00:38.000 --> 00:00:45.000]   I'm sure you're learning about all kinds of stuff, reinforcement learning, agents, SWE agents, evals, all kinds of stuff.
[00:00:45.000 --> 00:00:52.000]   And so we're all really excited, at least I am, to get AI into the hands of people and help people,
[00:00:52.000 --> 00:00:57.000]   whether it's for your end users and your internal users.
[00:00:57.000 --> 00:01:01.000]   And so AI is obviously where it's at.
[00:01:01.000 --> 00:01:02.000]   Or I think it's where it's at.
[00:01:02.000 --> 00:01:05.000]   But it comes with a bunch of headlines that you've probably seen.
[00:01:05.000 --> 00:01:09.000]   And some of them, again, if you're at the keynote this morning with Simon, he showed some examples.
[00:01:09.000 --> 00:01:12.000]   So, you know, it's very easy.
[00:01:12.000 --> 00:01:17.000]   It can be easy to trick chatbots into saying stuff that you don't necessarily want them to say.
[00:01:17.000 --> 00:01:24.000]   You can actually trick them into giving you information potentially that you don't want leaking out.
[00:01:24.000 --> 00:01:27.000]   And, you know, AI is built like AI engineering.
[00:01:27.000 --> 00:01:36.000]   It's built on a whole ecosystem of different things, including Python packages, MPM packages, you know, other services that you may be using that are hosted.
[00:01:36.000 --> 00:01:40.000]   And, of course, San Francisco is the home of self-driving cars.
[00:01:40.000 --> 00:01:53.000]   You know, this picture is showing like a, you know, it's a frame from a video clip where a self-driving car is, you know, driving happily right past the school bus with a stop sign on it.
[00:01:53.000 --> 00:01:54.000]   Right?
[00:01:54.000 --> 00:01:58.000]   And if you think, you know, hey, is, you know, what does it have to do with me?
[00:01:58.000 --> 00:02:06.000]   You know, well, this is one test that you can kind of think of in terms of whether it's something you've built or something you're thinking of building.
[00:02:06.000 --> 00:02:12.000]   Again, it's really easy to, you know, kind of get around some of the defenses of the AI models.
[00:02:12.000 --> 00:02:20.000]   So, for example, the prompt on the left, if you say how to loot a bank, a lot of the models will actually, you know, refuse to answer.
[00:02:20.000 --> 00:02:20.000]   Right?
[00:02:20.000 --> 00:02:22.000]   They'll say like, oh, no, I can't help you with that.
[00:02:22.000 --> 00:02:30.000]   But if you, and some of the examples, if, how many of you were at the Sanders workshop yesterday on prompt engineering, red teaming?
[00:02:30.000 --> 00:02:31.000]   Yeah.
[00:02:31.000 --> 00:02:42.000]   So, like, it's really like, if you preface that question with a whole, but like maybe a bit of your life story, you can maybe convince the AI to tell you something, you know, that it's not supposed to.
[00:02:42.000 --> 00:02:51.000]   And there are also other tricks, like, on the right-hand side, it says , which is how to loot a bank, spelled backwards, right, right to left.
[00:02:51.000 --> 00:02:58.000]   And actually, it turns out that's one of the patterns that an AI model can be tricked into giving you the answer.
[00:02:58.000 --> 00:03:07.000]   And so, you know, especially like, we touched on it this morning also, but like, of course, it's all agents, agents, agents, 20, 25 years of agents.
[00:03:07.000 --> 00:03:21.000]   And there are a lot of concerns, like if you talk to businesses about how in this world of agents, AI can be, you know, tricked into different kind of risks and stuff and different malfunctions.
[00:03:21.000 --> 00:03:33.000]   So, but we're here at the AI engineer conference and, you know, like, what I want to kind of like convey is that we as engineers know how to do this stuff, right?
[00:03:33.000 --> 00:03:38.000]   So like engineers build bridges and dams that people trust.
[00:03:38.000 --> 00:03:40.000]   We build trucks and trains.
[00:03:40.000 --> 00:03:42.000]   And so AI engineering is early.
[00:03:42.000 --> 00:03:48.000]   So we've got a lot of work to do to get to the point where people trust AI as much as they trust, you know, bridges.
[00:03:48.000 --> 00:03:57.000]   But, you know, this is something we know how to do as engineers, we build something, we iterate, we check it, we test it, you know, we continue to iterate.
[00:03:57.000 --> 00:04:00.000]   And that's what we're here to show you kind of how to do.
[00:04:00.000 --> 00:04:07.000]   And as engineers, you know, we also rely on not just ourselves, but other people.
[00:04:07.000 --> 00:04:11.000]   So what we like to say is trust is a team sport.
[00:04:11.000 --> 00:04:16.000]   So when we're looking to build trustworthy AI systems, we depend on other people.
[00:04:16.000 --> 00:04:23.000]   So the engineers need to depend on people who have a lot of expertise in these areas like security and AI risk.
[00:04:23.000 --> 00:04:30.000]   So at Microsoft, we have a team called the Microsoft AI Red Team, which I've been working with for a few years.
[00:04:30.000 --> 00:04:37.000]   Actually, they were one of the pioneers in identifying risks, you know, kind of AI in general, as well as LLMs.
[00:04:37.000 --> 00:04:41.000]   Like two, three years ago, they were already talking about, hey, you know what?
[00:04:41.000 --> 00:04:47.000]   Like these GPT-3, GPT-4 models, you can get them to do things that, you know, you really don't want them to do.
[00:04:47.000 --> 00:04:56.000]   So we partnered in Azure AI Foundry with the AI Red Team to offer a solution that makes it easy for you,
[00:04:56.000 --> 00:05:03.000]   AI engineers, to basically have a teammate that can help you with the AI Red Teaming.
[00:05:03.000 --> 00:05:10.000]   And so the AI Red Team, they put a Python package called Pyrit, P-Y-R-I-T.
[00:05:10.000 --> 00:05:21.000]   And what we offer is a hosted version and wrapped it around an easy-to-use SDK and also hosted dashboard to show you the evals, you know, that come from this.
[00:05:21.000 --> 00:05:26.000]   And so here to show you how it works is Nakumar.
[00:05:26.000 --> 00:05:27.000]   Awesome.
[00:05:27.000 --> 00:05:28.000]   Thank you.
[00:05:28.000 --> 00:05:30.000]   Thank you, Gigi.
[00:05:30.000 --> 00:05:32.000]   Here we go.
[00:05:32.000 --> 00:05:33.000]   So hello.
[00:05:33.000 --> 00:05:49.000]   And so this is the sample project that I'm going to run for you all.
[00:05:49.000 --> 00:05:54.000]   It's a simple drag on PostgreSQL within Azure samples.
[00:05:54.000 --> 00:05:57.000]   I'll have this QR code up again.
[00:05:57.000 --> 00:06:00.000]   So running locally right now.
[00:06:00.000 --> 00:06:03.000]   You can ask simple questions like this.
[00:06:03.000 --> 00:06:07.000]   And it's talking to a locally running model via Ollama.
[00:06:07.000 --> 00:06:09.000]   Well, tool called and work.
[00:06:09.000 --> 00:06:11.000]   Live demos, right?
[00:06:11.000 --> 00:06:17.000]   So in this piece here, logs for everything.
[00:06:17.000 --> 00:06:26.000]   But what we are trying to showcase is something called the semantic kernel agent, which here's some code for it.
[00:06:26.000 --> 00:06:30.000]   It exposes, takes in the Azure chat completions.
[00:06:30.000 --> 00:06:35.000]   And our Red Team plugin is something that our SDK exposes.
[00:06:35.000 --> 00:06:45.000]   It has all the functions that are needed for an agent to call into a Red Team agent to help someone with their Red Team process.
[00:06:45.000 --> 00:06:48.000]   And then it's simple chat completions agent afterwards.
[00:06:48.000 --> 00:06:52.000]   So for now, I'm going to start running this.
[00:06:52.000 --> 00:07:04.000]   And when I run this, it will go through a few user inputs that I have hardcoded, and then we can jump into it in interactive mode.
[00:07:04.000 --> 00:07:11.000]   But the target for this semantic kernel is going to be the same RAG app, which is running locally.
[00:07:11.000 --> 00:07:18.000]   So once this loads in, the first question--oops.
[00:07:18.000 --> 00:07:20.000]   Live demos.
[00:07:20.000 --> 00:07:27.000]   Looks like tool calling isn't working today.
[00:07:27.000 --> 00:07:38.000]   But anyway, so this call RAG app can be switched into a call to any other application, which takes in a query as an input and then responds with a string as an output.
[00:07:38.000 --> 00:07:45.000]   So internally, we ask you to call your application, which then you can run evaluations on.
[00:07:45.000 --> 00:07:55.000]   So in this agent mode, what would usually happen, I can scroll up to like a previous output, which ran earlier.
[00:07:55.000 --> 00:07:58.000]   Not lying to you all.
[00:07:58.000 --> 00:08:02.000]   So these were the strategies which were available.
[00:08:02.000 --> 00:08:10.000]   And then I'll use one of the--I asked it to like, hey, figure out--get me a harmful prompt in the violence category.
[00:08:10.000 --> 00:08:12.000]   And then it gives me some sort of prompt.
[00:08:12.000 --> 00:08:14.000]   And then I'm like, hey, send it to my target.
[00:08:14.000 --> 00:08:17.000]   And then this is what the target responds with.
[00:08:17.000 --> 00:08:26.000]   And then there is some details about some sort of ski goggles and products that are supposed to be answered from our database.
[00:08:26.000 --> 00:08:30.000]   And then I try to be like, hey, convert the prompt using base 64.
[00:08:30.000 --> 00:08:32.000]   And the agent converts it.
[00:08:32.000 --> 00:08:35.000]   And then be like, hey, now send it to my target.
[00:08:35.000 --> 00:08:37.000]   And then the target responds with something else.
[00:08:37.000 --> 00:08:45.000]   So this is an easy copilot-style way for anyone to get started to redeeming an application.
[00:08:45.000 --> 00:08:52.000]   Now, we have--we can take it a step further and run the whole scan end to end.
[00:08:52.000 --> 00:08:54.000]   And this is how you would run the scan.
[00:08:54.000 --> 00:08:57.000]   You saw a little bit of code that KG showed earlier.
[00:08:57.000 --> 00:09:06.000]   So you usually set up your AI project, throw in the URL, and then you can set up--initialize it with your--the URL and then your credentials.
[00:09:06.000 --> 00:09:08.000]   You can select risk categories.
[00:09:08.000 --> 00:09:10.000]   We have four of these risk categories right now.
[00:09:10.000 --> 00:09:12.000]   These map to our evaluators.
[00:09:12.000 --> 00:09:15.000]   So this is how you set them up.
[00:09:15.000 --> 00:09:18.000]   If you don't include any, we include all by default.
[00:09:18.000 --> 00:09:23.000]   And then the number of objectives is the number of questions that will be sent out to your application.
[00:09:23.000 --> 00:09:27.000]   And then the scan method looks like this.
[00:09:27.000 --> 00:09:29.000]   So you give it a scan name.
[00:09:29.000 --> 00:09:32.000]   You can give an optional output path, which stores all the results there.
[00:09:32.000 --> 00:09:38.000]   And then your attack strategies will include a list of different attack strategies.
[00:09:38.000 --> 00:09:44.000]   I'll pull up a docs page later on, which has all the information about different risk strategies that you can use.
[00:09:44.000 --> 00:09:53.000]   There are combination strategies like easy, which does like flip, the one that reverses the string and things like that.
[00:09:53.000 --> 00:09:55.000]   So there's also Mars.
[00:09:55.000 --> 00:10:00.000]   These are our simple converters, which live within pirate, but then exposed via our SDK.
[00:10:00.000 --> 00:10:04.000]   So our SDK can offer it to people to use it easily.
[00:10:04.000 --> 00:10:08.000]   You can also compose an attack with two different strategies.
[00:10:08.000 --> 00:10:15.000]   So you can get a tense converted strategy and then do a URL style conversion on it.
[00:10:15.000 --> 00:10:17.000]   So it does both and then sends it out.
[00:10:17.000 --> 00:10:23.000]   And then you pass in a target, a target which supposedly decided not to work today.
[00:10:23.000 --> 00:10:26.000]   Again, called to the same application.
[00:10:26.000 --> 00:10:35.000]   And once you run this, you usually see an output which looks like this.
[00:10:35.000 --> 00:10:42.000]   So whoops.
[00:10:42.000 --> 00:10:47.000]   I'm going to unplug the ethernet cable.
[00:10:47.000 --> 00:10:52.000]   Okay.
[00:10:52.000 --> 00:10:55.000]   There we go.
[00:10:55.000 --> 00:11:09.000]   So this is when I had it running yesterday with GPT 4.0 as my model.
[00:11:09.000 --> 00:11:14.000]   And GPT 4.0 comes with a lot of security in-built within our Azure AI foundry.
[00:11:14.000 --> 00:11:20.000]   So once you have all those guardrails up, it kind of was pretty good.
[00:11:20.000 --> 00:11:23.000]   It was a very small sample size, 160.
[00:11:23.000 --> 00:11:28.000]   I think I selected 10 different harm types or like five harm types with a few categories.
[00:11:28.000 --> 00:11:32.000]   So none of them was able to break into our application.
[00:11:32.000 --> 00:11:35.000]   But then I switched around and I used 5.3.
[00:11:35.000 --> 00:11:42.000]   And with 5.3 you can see the results show five out of 40 in height and fairness was successful.
[00:11:42.000 --> 00:11:47.000]   So we can take a look at it, filter data based on what was successful.
[00:11:47.000 --> 00:11:56.000]   And then you can, you know, look at like what was the response that was determined as, you know, harmful in our -- from our evaluators.
[00:11:56.000 --> 00:12:02.000]   And finally we have one more way of doing this.
[00:12:02.000 --> 00:12:06.000]   So initially a lot of people might just be building models.
[00:12:06.000 --> 00:12:08.000]   You don't even have an application.
[00:12:08.000 --> 00:12:13.000]   You can directly call the scan against an Azure OpenAI config.
[00:12:13.000 --> 00:12:21.000]   So if you have models running on Azure, you can set it up as a target, which is just, you know, these three things.
[00:12:21.000 --> 00:12:24.000]   And then once you have these three things, you can run the whole scan.
[00:12:24.000 --> 00:12:30.000]   This scan runs against the model directly and gives you an output.
[00:12:30.000 --> 00:12:33.000]   So I guess this should be able to work.
[00:12:33.000 --> 00:12:43.000]   Let's see.
[00:12:43.000 --> 00:12:48.000]   I can probably run it here.
[00:12:48.000 --> 00:12:49.000]   There we go.
[00:12:49.000 --> 00:12:53.000]   So, yep, scan model runs a direct model scan.
[00:12:53.000 --> 00:12:56.000]   And here I have some results from a pre-run.
[00:12:56.000 --> 00:12:57.000]   I was prepared for this.
[00:12:57.000 --> 00:13:03.000]   So this is when 4.1, if you take off all the guardrails, here's the result.
[00:13:03.000 --> 00:13:13.000]   It says that 25% of violence category was successful and, you know, 20% of all the difficult complexity attacks were successful.
[00:13:13.000 --> 00:13:18.000]   And, again, you can filter out on the data, see which was successful.
[00:13:18.000 --> 00:13:23.000]   And, yep, there we go.
[00:13:23.000 --> 00:13:24.000]   Lots of violence.
[00:13:24.000 --> 00:13:30.000]   And then this was the flip where, like, some sort of -- we can see what strategy it was.
[00:13:30.000 --> 00:13:33.000]   I think it was a Cesar encoding strategy.
[00:13:33.000 --> 00:13:36.000]   And you can see that the assistant kind of decoded it.
[00:13:36.000 --> 00:13:39.000]   So we did not want that to happen.
[00:13:39.000 --> 00:13:41.000]   So we did a successful attack.
[00:13:41.000 --> 00:13:43.000]   So that's one of the things.
[00:13:43.000 --> 00:13:49.000]   And then here's the response when you set up all the guardrails for GPT-41 nano.
[00:13:49.000 --> 00:13:55.000]   And you can see that the difference is that we reduced our attack success by a little bit.
[00:13:55.000 --> 00:14:01.000]   So that's an overview of how things go and how this scan is running.
[00:14:01.000 --> 00:14:05.000]   So it usually gives you an ETA, six minutes.
[00:14:05.000 --> 00:14:07.000]   We'll probably be running out of time by then.
[00:14:07.000 --> 00:14:12.000]   But, yeah, as soon as this is done, it shoots you in a URL which will directly take you to this page.
[00:14:12.000 --> 00:14:16.000]   So that's safety evals and AI red teaming.
[00:14:16.000 --> 00:14:20.000]   I will be at the Microsoft booth towards the end for questions.
[00:14:20.000 --> 00:14:22.000]   So back to you, KG.
[00:14:22.000 --> 00:14:23.000]   Yeah, thanks.
[00:14:26.000 --> 00:14:36.000]   So basically, you know, the rest of the talk is talking about essentially how this fits into an overall strategy, right?
[00:14:36.000 --> 00:14:50.000]   So that's AI red teaming is a really important and, you know, part of kind of your defenses and kind of in your toolbox to be able to develop and deploy trustworthy AI systems.
[00:14:50.000 --> 00:15:01.000]   But really what you want to do is incorporate this within a whole, you know, kind of, again, from the engineering mindset, a framework, you know, and kind of a process to get these things out, right?
[00:15:01.000 --> 00:15:13.000]   So first, what you want to do is before, you know, you develop like a production application that goes to customers, you want to, you know, you want to kind of map out what are the kind of risks that, you know, we're anticipating here?
[00:15:13.000 --> 00:15:14.000]   Is this an agent?
[00:15:14.000 --> 00:15:18.000]   Is it, you know, using kind of like external data or internal customer data?
[00:15:18.000 --> 00:15:33.000]   You want to think about what are the, you know, kind of the risks that, you know, your app is going to have, plan for it, start to implement the guard those in the first place, and then do the evaluations of which, you know, red teaming is one of those possibilities, right?
[00:15:33.000 --> 00:15:40.000]   So within Azure AI Foundry, we have a suite of evaluators, both for quality check, quality evals.
[00:15:40.000 --> 00:15:49.000]   I think there's a lot of talks today, you know, and I engineer about quality, you know, kind of quality evals, right, with something you could do in a foundry.
[00:15:49.000 --> 00:16:07.000]   And then there's a whole set of risk and safety evaluators that we have, which AI red, you know, red teaming agent is one of them, but we also have a lot of different class, you know, kind of classifiers, in terms of, you know, kind of both input as well as output, because you want to check for both.
[00:16:07.000 --> 00:16:21.000]   And then there's a specific set of evaluators we just created for agentic applications as well, like the agent following your instructions well, is it, you know, things like that.
[00:16:21.000 --> 00:16:29.000]   And then you can add your own customer evaluators, and Nakumar showed you kind of like some of the mitigation strategies that you want to apply, right?
[00:16:29.000 --> 00:16:34.000]   So, for example, there are guardrails and controls that you can have in your application.
[00:16:34.000 --> 00:16:41.000]   So once you've, you know, ran the AI red teaming agent, you've figured out, well, actually 20% of, you know, like stuff gets through.
[00:16:41.000 --> 00:16:42.000]   What do you do?
[00:16:42.000 --> 00:16:54.000]   Well, that's the point at which you can apply the guardrails, you know, to do content filters and other capabilities that, again, we have in Azure AI Foundry that makes it easy for you to add those guardrails.
[00:16:54.000 --> 00:17:05.000]   And among other ones, there's ones called like prompt shields, which are for to guard against prompt-based attacks, especially the kind that, you know, are, you know, involved with AI red teaming.
[00:17:05.000 --> 00:17:10.000]   And we have time for maybe one or two questions.
[00:17:10.000 --> 00:17:11.000]   Yeah.
[00:17:11.000 --> 00:17:12.000]   I think we have like a minute, maybe.
[00:17:12.000 --> 00:17:13.000]   Yeah, we have two more.
[00:17:13.000 --> 00:17:14.000]   So, yeah.
[00:17:14.000 --> 00:17:21.000]   Do you know how to guardrails work under the hood?
[00:17:21.000 --> 00:17:22.000]   Uh-huh.
[00:17:22.000 --> 00:17:32.000]   Like, is it, is it like filtering after it gets the answer, or is it like before the LM even stops?
[00:17:32.000 --> 00:17:33.000]   Yeah.
[00:17:33.000 --> 00:17:34.000]   So, there's both kinds.
[00:17:34.000 --> 00:17:35.000]   Yeah.
[00:17:35.000 --> 00:17:36.000]   You can apply both, right?
[00:17:36.000 --> 00:17:37.000]   So, you--
[00:17:37.000 --> 00:17:38.000]   Yeah, but the guardrail feature.
[00:17:38.000 --> 00:17:39.000]   Yes.
[00:17:39.000 --> 00:17:41.000]   How does it work under the hood?
[00:17:41.000 --> 00:17:42.000]   Do you know?
[00:17:42.000 --> 00:17:52.000]   I mean, I think there are both, I think we have both filters, you know, for the input end, as well as filters at the output end.
[00:17:52.000 --> 00:18:04.000]   So, there are content filters, for example, you know, basically if people are typing in, you know, like a CBR or like, you know, like how to build a bomb kind of thing, right?
[00:18:04.000 --> 00:18:13.000]   So, there are the input guardrails, but then there's also like guardrails in terms of, well, actually, I want to make sure I'm not outputting like sexual content or something, right?
[00:18:13.000 --> 00:18:16.000]   So, like, there's also guardrails in terms of the output of the model as well.
[00:18:16.000 --> 00:18:20.000]   And that, that's what's happening under the hood with the guardrail feature, or--
[00:18:20.000 --> 00:18:21.000]   Yeah, yeah, yeah, with the guardrail.
[00:18:21.000 --> 00:18:23.000]   We have to implement several features to get that.
[00:18:23.000 --> 00:18:29.000]   Oh, no, no, you, so there are guardrails that are, that AI Foundry offers directly.
[00:18:29.000 --> 00:18:32.000]   And, yeah, so that's what's happening under the hood.
[00:18:32.000 --> 00:18:37.000]   So, you have the ability, for example, to just give the model raw inputs, right?
[00:18:37.000 --> 00:18:43.000]   And then if you turn off all content filters, and that was some of the example that actually Naikuma were showing where, yeah.
[00:18:43.000 --> 00:18:46.000]   So, the guardrails are not in the model itself.
[00:18:46.000 --> 00:18:51.000]   The model is still the raw model, and the guardrails are actually kind of outside it.
[00:18:51.000 --> 00:18:52.000]   Does that answer your question?
[00:18:52.000 --> 00:18:53.000]   Thank you.
[00:18:53.000 --> 00:18:54.000]   Okay, all right, thanks.
[00:18:54.000 --> 00:18:55.000]   I think we're out of time.
[00:18:55.000 --> 00:18:56.000]   Yeah.
[00:18:56.000 --> 00:18:59.000]   So, thank you for coming.
[00:18:59.000 --> 00:19:03.000]   If, you know, to, you know, definitely start, get started with AI-rate teaming.
[00:19:03.000 --> 00:19:06.000]   If you're not doing it today, definitely get started.
[00:19:06.000 --> 00:19:09.000]   Here's a link to the code, as well as the docs.
[00:19:09.000 --> 00:19:11.000]   And, yeah, thank you for coming.
[00:19:11.000 --> 00:19:19.000]   And if, yeah, so if you have any questions, we will be, you know, at the Microsoft booth, you know, different parts of, you know, today and tomorrow.
[00:19:19.000 --> 00:19:20.000]   So, yeah.
[00:19:20.000 --> 00:19:21.000]   Come find us.
[00:19:21.000 --> 00:19:22.000]   Yeah.
[00:19:22.000 --> 00:19:22.000]   Thank you.
[00:19:22.000 --> 00:19:23.000]   Thank you.
[00:19:23.000 --> 00:19:24.000]   Thank you.
[00:19:24.000 --> 00:19:25.000]   Thank you.
[00:19:25.000 --> 00:19:25.000]   Thank you.
[00:19:25.000 --> 00:19:25.000]   Thank you.
[00:19:25.000 --> 00:19:25.000]   Thank you.
[00:19:25.000 --> 00:19:26.000]   Thank you.
[00:19:26.000 --> 00:19:30.120]   We'll see you next time.

