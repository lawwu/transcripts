
[00:00:00.000 --> 00:00:02.560]   The following is a conversation with Brendan Eich,
[00:00:02.560 --> 00:00:05.680]   creator of the JavaScript programming language,
[00:00:05.680 --> 00:00:09.200]   co-founder of Mozilla, which created the Firefox browser,
[00:00:09.200 --> 00:00:12.840]   and now co-founder and CEO of Brave Software,
[00:00:12.840 --> 00:00:15.440]   which has created the Brave browser.
[00:00:15.440 --> 00:00:18.320]   Each of these are revolutionary technologies.
[00:00:18.320 --> 00:00:21.120]   JavaScript is one of the most widely used
[00:00:21.120 --> 00:00:24.880]   and impactful programming languages in the world.
[00:00:24.880 --> 00:00:29.000]   Firefox pioneered many browser ideas that we love today,
[00:00:29.000 --> 00:00:31.280]   or even take for granted today.
[00:00:31.280 --> 00:00:33.520]   And Brave is looking to revolutionize
[00:00:33.520 --> 00:00:36.640]   not only the browser, but content creation online
[00:00:36.640 --> 00:00:39.640]   and the nature of the internet to make it fundamentally
[00:00:39.640 --> 00:00:43.400]   about respecting people's control over their data.
[00:00:43.400 --> 00:00:45.360]   Quick mention of our sponsors,
[00:00:45.360 --> 00:00:47.360]   the Jordan Harbinger Show,
[00:00:47.360 --> 00:00:49.720]   Sun Basket Meal Delivery Service,
[00:00:49.720 --> 00:00:51.520]   BetterHelp Online Therapy,
[00:00:51.520 --> 00:00:53.920]   and 8sleep Self-Cleaning Mattress.
[00:00:53.920 --> 00:00:56.200]   Click the sponsor links to get a discount
[00:00:56.200 --> 00:00:58.080]   and to support this podcast.
[00:00:58.080 --> 00:01:00.840]   As a side note, let me say that there's a tension
[00:01:00.840 --> 00:01:03.160]   between theory and engineering
[00:01:03.160 --> 00:01:05.200]   that I've been thinking a lot about.
[00:01:05.200 --> 00:01:06.960]   I tweeted something like,
[00:01:06.960 --> 00:01:09.880]   "Good execution is more important than a good idea,
[00:01:09.880 --> 00:01:11.800]   "but one helps the other."
[00:01:11.800 --> 00:01:13.480]   I think the wording of that sucks,
[00:01:13.480 --> 00:01:16.880]   but what I mean is a good idea is a must.
[00:01:16.880 --> 00:01:20.720]   But in my experience, good ideas are in abundance.
[00:01:20.720 --> 00:01:23.720]   Good execution, on the other hand, is rare.
[00:01:23.720 --> 00:01:26.040]   I think some mix of good timing, good idea,
[00:01:26.040 --> 00:01:28.120]   and good execution is essential.
[00:01:28.120 --> 00:01:29.840]   Getting that mix right is tough,
[00:01:29.840 --> 00:01:32.880]   and Brendan somehow, multiple times in his career,
[00:01:32.880 --> 00:01:34.240]   did just that.
[00:01:34.240 --> 00:01:36.640]   I'm starting to believe it's more art than science,
[00:01:36.640 --> 00:01:39.200]   like most interesting things in life.
[00:01:39.200 --> 00:01:41.680]   If you enjoy this thing, subscribe on YouTube,
[00:01:41.680 --> 00:01:44.640]   review on Apple Podcasts, follow on Spotify,
[00:01:44.640 --> 00:01:47.440]   support on Patreon, or connect with me on Twitter,
[00:01:47.440 --> 00:01:48.800]   @lexfriedman.
[00:01:48.800 --> 00:01:52.400]   And now, here's my conversation with Brendan Eich.
[00:01:52.400 --> 00:01:56.000]   When did you first fall in love with programming?
[00:01:56.000 --> 00:01:58.080]   - I didn't program a lot when I was in high school,
[00:01:58.080 --> 00:02:01.320]   but I had a friend who had a Commodore PET.
[00:02:01.320 --> 00:02:02.920]   And after we saw Star Wars, he said,
[00:02:02.920 --> 00:02:05.440]   "Hey, let's make a basic program
[00:02:05.440 --> 00:02:07.800]   "that does the Death Star Trench run."
[00:02:07.800 --> 00:02:10.680]   And it was just simple 2D graphics.
[00:02:10.680 --> 00:02:11.520]   And I didn't know what I was doing,
[00:02:11.520 --> 00:02:14.040]   so I just helped him out on the math and stuff like that.
[00:02:14.040 --> 00:02:15.880]   I was a math and science kid.
[00:02:15.880 --> 00:02:19.840]   I was really into the HP calculators of the early mid '70s.
[00:02:19.840 --> 00:02:21.320]   These were the RPM.
[00:02:21.320 --> 00:02:23.200]   They were really strongly built,
[00:02:23.200 --> 00:02:27.360]   and are at Goldfinger, instead of gold divinely heavy.
[00:02:27.360 --> 00:02:29.680]   There's probably some gold in them, too, gold metalization.
[00:02:29.680 --> 00:02:31.080]   But they were awesome calculators,
[00:02:31.080 --> 00:02:32.960]   and they had all the scientific functions,
[00:02:32.960 --> 00:02:34.240]   so I was really into that.
[00:02:34.240 --> 00:02:37.160]   So I aimed toward physics.
[00:02:37.160 --> 00:02:40.440]   I was a little late for the, I think,
[00:02:40.440 --> 00:02:42.280]   the 20th century golden age,
[00:02:42.280 --> 00:02:43.560]   and I read a lot of science fiction,
[00:02:43.560 --> 00:02:46.480]   so I was like, yeah, it's on the hyperdrives and warp drives.
[00:02:46.480 --> 00:02:50.160]   And physics was not gonna get there quickly,
[00:02:50.160 --> 00:02:52.280]   and I started hacking on computers
[00:02:52.280 --> 00:02:54.880]   while I was studying physics as an undergraduate
[00:02:54.880 --> 00:02:56.400]   at Santa Clara University.
[00:02:56.400 --> 00:02:59.920]   And I dodged the Fortran bullet
[00:02:59.920 --> 00:03:01.840]   because I was in the science department
[00:03:01.840 --> 00:03:02.960]   instead of the engineering department,
[00:03:02.960 --> 00:03:05.560]   where they still did Fortran card decks.
[00:03:05.560 --> 00:03:07.320]   I think they had an auto collator.
[00:03:07.320 --> 00:03:09.160]   But we were using Pascal,
[00:03:09.160 --> 00:03:13.640]   and I got one of the first portable C compilers,
[00:03:13.640 --> 00:03:17.560]   ports to the deck minicomputers we were using.
[00:03:17.560 --> 00:03:19.160]   And I fell in love with programming
[00:03:19.320 --> 00:03:24.320]   just based on procedural abstraction, Pascal,
[00:03:24.320 --> 00:03:28.880]   just what now would be considered old school,
[00:03:28.880 --> 00:03:31.600]   like structured programming from the '70s.
[00:03:31.600 --> 00:03:33.480]   Niklaus Wirth, the creator of Pascal,
[00:03:33.480 --> 00:03:36.160]   was a good writer and a good pedagogue.
[00:03:36.160 --> 00:03:38.200]   He always, at ETH, would do these courses
[00:03:38.200 --> 00:03:40.120]   where it's like build your own computer,
[00:03:40.120 --> 00:03:42.720]   build your own compiler, build your own operating system.
[00:03:42.720 --> 00:03:44.200]   - From scratch. - Yeah, kind of.
[00:03:44.200 --> 00:03:47.120]   And I know some people who are grad students under him
[00:03:47.120 --> 00:03:50.480]   said he would torture the students
[00:03:50.480 --> 00:03:52.240]   with things like this custom email system
[00:03:52.240 --> 00:03:55.120]   that had 25 word limit. (laughs)
[00:03:55.120 --> 00:03:56.800]   And things like that.
[00:03:56.800 --> 00:03:59.200]   - I unfortunately dodged both the Pascal
[00:03:59.200 --> 00:04:00.720]   and the Fortran bullets.
[00:04:00.720 --> 00:04:04.760]   Could you maybe linger on the Pascal?
[00:04:04.760 --> 00:04:06.280]   What kind of programming language was it?
[00:04:06.280 --> 00:04:08.120]   What is it reminiscent of today?
[00:04:08.120 --> 00:04:10.840]   Because it sounds like it may have had
[00:04:10.840 --> 00:04:12.560]   an impact on your own trajectory.
[00:04:12.560 --> 00:04:14.440]   - Yeah, it was in the Algol family.
[00:04:14.440 --> 00:04:19.080]   And Algol was the big successful
[00:04:19.080 --> 00:04:23.120]   language design and compiler project in the '60s.
[00:04:23.120 --> 00:04:24.920]   It had a successor called Algol 68,
[00:04:24.920 --> 00:04:27.400]   which was ambitious but not as successful.
[00:04:27.400 --> 00:04:30.960]   But Pascal was kind of a wordy procedures
[00:04:30.960 --> 00:04:32.560]   and functions language.
[00:04:32.560 --> 00:04:33.880]   It distinguished between functions,
[00:04:33.880 --> 00:04:36.120]   which return a value, and procedures, which don't,
[00:04:36.120 --> 00:04:37.840]   which just compute.
[00:04:37.840 --> 00:04:42.560]   And you could say that whole Algol family went into Ada.
[00:04:42.560 --> 00:04:44.560]   Pascal had a second life thanks to Borland
[00:04:44.560 --> 00:04:48.020]   with Turbo Pascal, which was hugely successful.
[00:04:48.020 --> 00:04:51.000]   I think in large part due to Anders Helsberg,
[00:04:51.000 --> 00:04:53.840]   who then went to Microsoft and did C# and .NET
[00:04:53.840 --> 00:04:55.520]   with his team there and has done really well.
[00:04:55.520 --> 00:04:58.020]   Doing TypeScript, Type JavaScript.
[00:04:58.020 --> 00:05:00.800]   So yeah, there's a lineage here.
[00:05:00.800 --> 00:05:03.800]   But I was also interested in C and Unix
[00:05:03.800 --> 00:05:05.680]   by the time I was an undergrad.
[00:05:05.680 --> 00:05:07.840]   Because people were bringing Unix up
[00:05:07.840 --> 00:05:09.200]   on all sorts of hardware.
[00:05:09.200 --> 00:05:10.200]   I had some friends who were doing
[00:05:10.200 --> 00:05:14.480]   their own wire-wrapped computers, 6820 maybe.
[00:05:14.480 --> 00:05:19.160]   And I was wire-wrapping for my engineering course,
[00:05:19.160 --> 00:05:22.480]   1609 or something simpler, building a computer on a board.
[00:05:22.480 --> 00:05:24.740]   And I wanted to build a more ambitious one
[00:05:24.740 --> 00:05:26.960]   and port Unix to it, but I picked the wrong processor.
[00:05:26.960 --> 00:05:30.920]   I picked the National Semiconductor NS16032,
[00:05:30.920 --> 00:05:34.040]   which was this amazing CISC,
[00:05:34.040 --> 00:05:37.200]   Complex Instruction Set Computer.
[00:05:37.200 --> 00:05:39.360]   And not the reduced instruction set computers
[00:05:39.360 --> 00:05:43.760]   that were just being contemplated into the mid '80s.
[00:05:43.760 --> 00:05:45.440]   - And RISC ultimately won out.
[00:05:45.440 --> 00:05:48.380]   - RISC-I in some ways, it dissolved into,
[00:05:48.380 --> 00:05:49.220]   you have both now.
[00:05:49.220 --> 00:05:50.800]   You have these super scalar architectures
[00:05:50.800 --> 00:05:55.240]   where Intel has kept probably too much backward compatibility
[00:05:55.240 --> 00:05:56.800]   at the instruction level.
[00:05:56.800 --> 00:05:58.920]   But there's a front end that parses that
[00:05:58.920 --> 00:06:01.240]   into these wide internal instructions.
[00:06:01.240 --> 00:06:04.440]   So the very long instruction word research
[00:06:04.440 --> 00:06:06.880]   that was also interesting at the time
[00:06:06.880 --> 00:06:08.560]   kind of became the microarchitecture
[00:06:08.560 --> 00:06:11.440]   inside the backward compatible Intel.
[00:06:11.440 --> 00:06:13.160]   But I picked the National Semichip
[00:06:13.160 --> 00:06:14.840]   and it never got made successfully.
[00:06:14.840 --> 00:06:17.800]   It was full of bugs and I never could have brought it up.
[00:06:17.800 --> 00:06:21.160]   But I went on out of physics after three years
[00:06:21.160 --> 00:06:23.240]   into math computer science.
[00:06:23.240 --> 00:06:25.740]   And like I said, I did it because I saw,
[00:06:25.740 --> 00:06:28.420]   I was being sort of childlike and naive about physics.
[00:06:28.420 --> 00:06:32.120]   And I thought, meanwhile, the valley is go-go for computers.
[00:06:32.120 --> 00:06:35.960]   The Apple II, the PC, the Intel.
[00:06:36.960 --> 00:06:41.960]   8086, 8088 based PC, the IBM.
[00:06:41.960 --> 00:06:46.800]   Gave Microsoft the future for a somewhat fishy deal.
[00:06:46.800 --> 00:06:48.640]   - So it was wide open in the computing space,
[00:06:48.640 --> 00:06:52.160]   but in physics, you were as optimistic about physics as--
[00:06:52.160 --> 00:06:54.680]   - No, I mean, I was one of three brothers
[00:06:54.680 --> 00:06:56.060]   who were all in the same grade.
[00:06:56.060 --> 00:06:58.800]   I have a twin and a younger brother
[00:06:58.800 --> 00:07:01.440]   who skipped second grade and was with us
[00:07:01.440 --> 00:07:02.960]   the whole time after that.
[00:07:02.960 --> 00:07:04.460]   And he went on.
[00:07:04.460 --> 00:07:07.520]   He actually studied under Kip Thorne at Caltech.
[00:07:07.520 --> 00:07:09.720]   But he also didn't, he ended up in software.
[00:07:09.720 --> 00:07:12.340]   (laughing)
[00:07:12.340 --> 00:07:16.100]   - Does it make you sad that theoretical physics,
[00:07:16.100 --> 00:07:18.640]   even with string theory, hasn't really had
[00:07:18.640 --> 00:07:21.900]   any foundational breakthroughs in the latter part
[00:07:21.900 --> 00:07:23.320]   of the 20th century?
[00:07:23.320 --> 00:07:25.220]   - Yeah, in fact, I'd say the problem is theory
[00:07:25.220 --> 00:07:27.120]   over experiments.
[00:07:27.120 --> 00:07:30.840]   I would say we need more Aristotle and less Plato.
[00:07:30.840 --> 00:07:33.800]   Mathematics is not all physical.
[00:07:33.800 --> 00:07:36.240]   There are lots of mathematics that cannot be realized
[00:07:36.240 --> 00:07:38.340]   as far as I know in this world.
[00:07:38.340 --> 00:07:41.000]   So to understand the world, you need to do experiments.
[00:07:41.000 --> 00:07:45.160]   You need to not just dream up inductive theories
[00:07:45.160 --> 00:07:47.860]   that could have lots of alternative theories
[00:07:47.860 --> 00:07:50.100]   competing with them, with no way to decide between them,
[00:07:50.100 --> 00:07:53.000]   except aesthetics, which is not a good guide, in my opinion.
[00:07:53.000 --> 00:07:54.920]   - I don't know if you are friends with
[00:07:54.920 --> 00:07:56.860]   or have a relationship with Elon Musk.
[00:07:56.860 --> 00:08:00.500]   Where's the, in terms of what you would love to see
[00:08:00.500 --> 00:08:02.760]   our society investing in building up,
[00:08:02.760 --> 00:08:06.320]   is it closer to Elon or is it closer to
[00:08:06.320 --> 00:08:09.120]   Feynman and Einstein and those?
[00:08:09.120 --> 00:08:10.560]   - Well, those gentlemen are no longer with us,
[00:08:10.560 --> 00:08:11.960]   and I think that's noticed.
[00:08:11.960 --> 00:08:14.440]   So like I said, the real glory days of physics,
[00:08:14.440 --> 00:08:17.240]   the famous pictures from Germany before the Second War
[00:08:17.240 --> 00:08:21.720]   were just a fantastic assembly of brains,
[00:08:21.720 --> 00:08:23.680]   Schrodinger and Einstein.
[00:08:23.680 --> 00:08:26.280]   Physics, I think, took a wrong turn
[00:08:26.280 --> 00:08:30.320]   that maybe all of, I would say, Western science took
[00:08:30.320 --> 00:08:33.720]   in going for models over reality, right?
[00:08:33.720 --> 00:08:35.280]   You see this in all sorts of fields.
[00:08:35.280 --> 00:08:37.980]   Now, we can build models that are very predictive
[00:08:37.980 --> 00:08:40.280]   and generative and then we build actual devices
[00:08:40.280 --> 00:08:42.160]   or semiconductors, things like that.
[00:08:42.160 --> 00:08:44.400]   That's good, I'm not dismissing that.
[00:08:44.400 --> 00:08:46.840]   We need good models, we need to experiment
[00:08:46.840 --> 00:08:49.640]   and prove them and test them.
[00:08:49.640 --> 00:08:51.880]   But the problem I've seen in physics,
[00:08:51.880 --> 00:08:55.600]   which you see certainly in economics, the dismal science,
[00:08:55.600 --> 00:08:59.040]   and you see, surprisingly, in other so-called hard sciences,
[00:08:59.040 --> 00:09:04.040]   is models that don't really have to be tested
[00:09:04.040 --> 00:09:05.520]   against reality.
[00:09:05.520 --> 00:09:07.620]   They can instead become policy tools
[00:09:07.620 --> 00:09:09.880]   or they can become, like I said,
[00:09:09.880 --> 00:09:12.920]   one of a large family of alternate theories
[00:09:12.920 --> 00:09:14.600]   that could be as predictive,
[00:09:14.600 --> 00:09:16.960]   but nobody's doing the winnowing out.
[00:09:16.960 --> 00:09:18.840]   - That's such an interesting tension in society.
[00:09:18.840 --> 00:09:20.960]   You see this in even the softer sciences,
[00:09:20.960 --> 00:09:24.400]   which I have a deep love for, like psychology.
[00:09:24.400 --> 00:09:27.200]   You see this in epidemiology, not with the virus.
[00:09:27.200 --> 00:09:28.040]   - Absolutely.
[00:09:28.040 --> 00:09:31.280]   - There's this tension of how much of the world
[00:09:31.280 --> 00:09:35.060]   can we understand through just a beautifully fit model?
[00:09:35.060 --> 00:09:37.640]   And then at the same time, my main work
[00:09:37.640 --> 00:09:41.000]   is in machine learning, where it's like
[00:09:41.000 --> 00:09:44.400]   there is no provable thing usually.
[00:09:44.400 --> 00:09:46.880]   It's just kind of, it's all about just getting
[00:09:46.880 --> 00:09:49.640]   the right data set and getting tricks and so on.
[00:09:49.640 --> 00:09:51.760]   And there's this tension, even in my own soul,
[00:09:51.760 --> 00:09:55.680]   of like I grew up in theoretical computer science.
[00:09:55.680 --> 00:09:58.680]   I loved approximation algorithms,
[00:09:58.680 --> 00:10:01.940]   like all of that, like different complexity classes,
[00:10:01.940 --> 00:10:03.960]   just those little puzzles.
[00:10:03.960 --> 00:10:06.200]   I mean, I don't know, to you as somebody
[00:10:06.200 --> 00:10:08.600]   who was in math and computer science
[00:10:08.600 --> 00:10:11.280]   and then ended up going into places
[00:10:11.280 --> 00:10:13.860]   where you engineered some of the most impactful things
[00:10:13.860 --> 00:10:18.680]   in this world, do you see the P versus NP,
[00:10:18.680 --> 00:10:21.280]   all that whole space as interesting at all?
[00:10:21.280 --> 00:10:24.640]   - Yeah, it's not that useful in practice, right?
[00:10:24.640 --> 00:10:27.920]   People are using it with sort of crypto analysis
[00:10:27.920 --> 00:10:31.760]   or asymptotic arguments about can we have
[00:10:31.760 --> 00:10:35.320]   a quantum-resistant crypto algorithm, things like that,
[00:10:35.320 --> 00:10:36.600]   which may not be practical, right?
[00:10:36.600 --> 00:10:40.160]   If you follow Mikhail Diakonov or Gil Kalai,
[00:10:40.160 --> 00:10:43.640]   there are big questions about how quantum computing
[00:10:43.640 --> 00:10:46.800]   will scale up, how practical it will be.
[00:10:46.800 --> 00:10:48.000]   - Is that something that you think about,
[00:10:48.000 --> 00:10:49.480]   quantum computing?
[00:10:49.480 --> 00:10:51.080]   - Not for a spare time.
[00:10:51.080 --> 00:10:53.560]   Like you said, I'm not using this kind of computer science
[00:10:53.560 --> 00:10:57.680]   in practice because almost everything now is engineering
[00:10:57.680 --> 00:11:02.160]   and finding ways to get computers
[00:11:02.160 --> 00:11:03.340]   to be more useful for people,
[00:11:03.340 --> 00:11:06.160]   which goes from design problems,
[00:11:06.160 --> 00:11:07.440]   which are really kind of an art.
[00:11:07.440 --> 00:11:09.960]   Like Knuth said, anything you can't automate is an art.
[00:11:09.960 --> 00:11:13.320]   Well, we can have machine learning compose music
[00:11:13.320 --> 00:11:14.800]   and it can imitate, you can train it,
[00:11:14.800 --> 00:11:16.040]   and it can sound kind of decent,
[00:11:16.040 --> 00:11:18.680]   but maybe lacking that je ne sais quoi.
[00:11:18.680 --> 00:11:23.080]   But user interface still, I think, requires human art.
[00:11:23.560 --> 00:11:26.440]   - So speaking of things that didn't follow
[00:11:26.440 --> 00:11:30.480]   a perfect theory and model, JavaScript.
[00:11:30.480 --> 00:11:31.320]   So there's two things.
[00:11:31.320 --> 00:11:34.360]   One, it had an impact on the world at a huge scale,
[00:11:34.360 --> 00:11:38.320]   obviously, and it also still is one of,
[00:11:38.320 --> 00:11:41.400]   probably the most popular programming language in the world.
[00:11:41.400 --> 00:11:44.140]   So can we go back to the origin story?
[00:11:44.140 --> 00:11:47.840]   Can you tell the story of how JavaScript was created?
[00:11:47.840 --> 00:11:51.080]   - Yeah, I was at Silicon Graphics after graduate school
[00:11:51.080 --> 00:11:54.720]   for seven years, and it got to be big and successful
[00:11:54.720 --> 00:11:56.800]   and divisionalized and political,
[00:11:56.800 --> 00:12:00.480]   and I thought, kind of boring.
[00:12:00.480 --> 00:12:03.240]   And a friend who'd been there went to
[00:12:03.240 --> 00:12:05.280]   one of the last of the super companies,
[00:12:05.280 --> 00:12:07.600]   super startups in the early '90s.
[00:12:07.600 --> 00:12:08.720]   There were several.
[00:12:08.720 --> 00:12:10.840]   I suppose General Magic was a little after that
[00:12:10.840 --> 00:12:11.920]   or around the same time.
[00:12:11.920 --> 00:12:14.360]   But MicroUnity was that company that I went to,
[00:12:14.360 --> 00:12:16.880]   and it was because my friend, Jeff Weinstein,
[00:12:16.880 --> 00:12:18.040]   had gone there from Silicon Graphics.
[00:12:18.040 --> 00:12:21.960]   He recruited me, and MicroUnity was doing everything.
[00:12:21.960 --> 00:12:26.080]   So this was like the ultimate sort of pretend grad school.
[00:12:26.080 --> 00:12:29.360]   It was doing a new fab, new semiconductor process.
[00:12:29.360 --> 00:12:32.600]   It was doing new analog and digital circuits
[00:12:32.600 --> 00:12:36.080]   on the same very large but not wafer-scale chip.
[00:12:36.080 --> 00:12:40.360]   Originally, it was five centimeters on a side.
[00:12:40.360 --> 00:12:43.880]   It was really hot, too, so it needed a water cooler.
[00:12:43.880 --> 00:12:46.280]   It was a Craykiller, and then they shrunk it,
[00:12:46.280 --> 00:12:49.320]   and they tried to do a home sort of media processor
[00:12:49.320 --> 00:12:51.920]   that was essentially a barrel processor,
[00:12:51.920 --> 00:12:55.440]   but you could think of trying to do all the things
[00:12:55.440 --> 00:12:58.160]   that we now see in modern architectures
[00:12:58.160 --> 00:13:00.240]   with short vector instructions
[00:13:00.240 --> 00:13:04.640]   and sort of wide instructions for multiple issue,
[00:13:04.640 --> 00:13:07.520]   and doing a lot of the stuff in software
[00:13:07.520 --> 00:13:10.120]   because the second iteration, the set-top box,
[00:13:10.120 --> 00:13:13.040]   was really for avoiding the cost to the cable company
[00:13:13.040 --> 00:13:14.520]   of rolling the trucks out
[00:13:14.520 --> 00:13:17.600]   to replace your garbage General Atlantic set-top box
[00:13:17.600 --> 00:13:21.040]   with a totally newer, less garbagey one.
[00:13:21.040 --> 00:13:23.900]   So if you could have software-gradeable set-top boxes,
[00:13:23.900 --> 00:13:26.240]   the cable companies thought they could save a lot of money
[00:13:26.240 --> 00:13:27.200]   and add features.
[00:13:27.200 --> 00:13:30.280]   - Is this assembly, or which level of the software?
[00:13:30.280 --> 00:13:33.840]   - It was like, we were writing in, we were using GCC.
[00:13:33.840 --> 00:13:36.280]   We were writing C++ in C.
[00:13:36.280 --> 00:13:39.920]   Somebody I worked with there, really very smart guy,
[00:13:39.920 --> 00:13:41.680]   hired from a sort of Wall Street
[00:13:43.040 --> 00:13:45.240]   hotshot programming consultancy,
[00:13:45.240 --> 00:13:47.680]   did his own hardware design as well as software.
[00:13:47.680 --> 00:13:49.400]   We were working on how to make
[00:13:49.400 --> 00:13:50.740]   not only short vector units,
[00:13:50.740 --> 00:13:53.080]   but general bit shufflers and permuters
[00:13:53.080 --> 00:13:57.480]   so you could do things like crypto algorithms efficiently,
[00:13:57.480 --> 00:14:01.400]   and you could do demodulation of the cable,
[00:14:01.400 --> 00:14:05.240]   complex quadrature amplitude modulated signal.
[00:14:05.240 --> 00:14:07.980]   So you're basically taking A to D converters,
[00:14:07.980 --> 00:14:09.000]   dumping things in buffers,
[00:14:09.000 --> 00:14:10.760]   and then doing the rest in software.
[00:14:10.760 --> 00:14:12.880]   All the framing and the Reed Solomon
[00:14:12.880 --> 00:14:14.520]   and Viterbi and all that error correction.
[00:14:14.520 --> 00:14:16.100]   So that was really great learning experience,
[00:14:16.100 --> 00:14:16.940]   but it was not gonna work.
[00:14:16.940 --> 00:14:19.440]   It was doing too many risky things at once.
[00:14:19.440 --> 00:14:21.960]   As Jim Clark said to me when I hopped to Netscape
[00:14:21.960 --> 00:14:23.240]   after three years at MicroUnity,
[00:14:23.240 --> 00:14:25.240]   he said, "Oh yeah, you do 10 things,
[00:14:25.240 --> 00:14:28.040]   "each one in 10 odds, it's gonna be one in 10 billion."
[00:14:28.040 --> 00:14:29.880]   (laughing)
[00:14:29.880 --> 00:14:31.080]   The multiplication principle.
[00:14:31.080 --> 00:14:33.360]   So Netscape was already a rocket,
[00:14:33.360 --> 00:14:36.800]   and I passed the chance to go there in 1994.
[00:14:36.800 --> 00:14:39.240]   I knew the founders, 'cause I worked at SGI,
[00:14:39.240 --> 00:14:40.080]   Clark's company.
[00:14:40.080 --> 00:14:41.040]   - Could you pause for a second?
[00:14:41.160 --> 00:14:44.800]   Netscape, when was the launch of this rocket?
[00:14:44.800 --> 00:14:45.640]   - '94.
[00:14:45.640 --> 00:14:47.280]   - '94 was the launch of Netscape?
[00:14:47.280 --> 00:14:49.720]   - And I went there in early '95, in April.
[00:14:49.720 --> 00:14:52.160]   - Okay, so you said you missed the launch.
[00:14:52.160 --> 00:14:55.560]   - Well, I missed the first floor employment opportunity,
[00:14:55.560 --> 00:14:59.000]   but the IPO was August 1995, so I was there for that.
[00:14:59.000 --> 00:15:02.280]   - How obvious was it that Netscape was world changing?
[00:15:02.280 --> 00:15:04.080]   What was the layout?
[00:15:04.080 --> 00:15:06.160]   Was Netscape one of the first big browsers?
[00:15:06.160 --> 00:15:09.280]   - Yes, so when I was at MicroUnity still in '93,
[00:15:09.280 --> 00:15:11.720]   we saw a browser called Mosaic.
[00:15:11.720 --> 00:15:13.400]   And up 'til then, we'd used email,
[00:15:13.400 --> 00:15:15.840]   and we'd used Usenet, the NNTP protocol.
[00:15:15.840 --> 00:15:18.680]   We'd used Newsreaders, we used FTP,
[00:15:18.680 --> 00:15:20.880]   we used all these old internet protocols,
[00:15:20.880 --> 00:15:24.080]   all relying on the DNS and TCP/IP and UDP,
[00:15:24.080 --> 00:15:25.720]   for that matter.
[00:15:25.720 --> 00:15:26.800]   When I was at Silicon Graphics,
[00:15:26.800 --> 00:15:28.120]   we brought up the whole stack, right?
[00:15:28.120 --> 00:15:31.760]   We had to discover how to find the ethernet addresses
[00:15:31.760 --> 00:15:34.720]   on your network, and then find IP addresses for them,
[00:15:34.720 --> 00:15:35.960]   ARP protocol, all that stuff.
[00:15:35.960 --> 00:15:38.680]   And it was great, because nobody knew in the '80s
[00:15:38.680 --> 00:15:39.520]   what was gonna win.
[00:15:39.520 --> 00:15:43.840]   All the proprietary stacks like IBM, SNA, and DECnet,
[00:15:43.840 --> 00:15:45.720]   and all these other protocols were saying,
[00:15:45.720 --> 00:15:48.680]   we're gonna do it, or it's gonna be heterogeneous future.
[00:15:48.680 --> 00:15:52.560]   Instead, it was Berkeley Unix and the TCP/IP stack
[00:15:52.560 --> 00:15:54.960]   that dated back to the ARPANET that won.
[00:15:54.960 --> 00:15:56.480]   And I think we knew it.
[00:15:56.480 --> 00:15:59.320]   We all knew it at SGI, but the salespeople didn't.
[00:15:59.320 --> 00:16:02.120]   And so they kept trying to get multiple network stacks
[00:16:02.120 --> 00:16:04.400]   interoperating, but in the end, it won.
[00:16:04.400 --> 00:16:06.520]   And so that was the internet.
[00:16:06.520 --> 00:16:09.000]   And it was email and texty, and it was used then,
[00:16:09.000 --> 00:16:09.840]   very texty.
[00:16:09.840 --> 00:16:12.580]   And then Tim Berners-Lee did his thing,
[00:16:12.580 --> 00:16:14.160]   but I don't think I was paying attention.
[00:16:14.160 --> 00:16:16.440]   And I think the date when he first did it,
[00:16:16.440 --> 00:16:17.840]   or when he wrote the famous email,
[00:16:17.840 --> 00:16:19.620]   it's been pushed back to '89.
[00:16:19.620 --> 00:16:21.720]   But I noticed a mosaic in '93,
[00:16:21.720 --> 00:16:24.480]   because one of the things that Mark Andreessen
[00:16:24.480 --> 00:16:28.240]   and Eric Bina did at NCSA was they innovated
[00:16:28.240 --> 00:16:31.360]   on the early HTML standard.
[00:16:31.360 --> 00:16:33.080]   They, in particular, Mark sent this email saying,
[00:16:33.080 --> 00:16:34.400]   hey, everybody, we think you should be able
[00:16:34.400 --> 00:16:36.280]   to put an image in a page.
[00:16:36.280 --> 00:16:37.640]   And you know when he sent that,
[00:16:37.640 --> 00:16:39.080]   Eric Bina had already written the code.
[00:16:39.080 --> 00:16:41.920]   And I talked to Tim Berners-Lee more recently,
[00:16:41.920 --> 00:16:43.120]   just a few years ago, and he was like,
[00:16:43.120 --> 00:16:44.280]   oh, we had another way of doing it.
[00:16:44.280 --> 00:16:47.960]   And it didn't work out, 'cause Mark shipped his in mosaic.
[00:16:47.960 --> 00:16:50.040]   And this convinced me of several things.
[00:16:50.040 --> 00:16:53.160]   One, the internet meant there was a huge
[00:16:53.160 --> 00:16:56.440]   first mover advantage, and being fast,
[00:16:56.440 --> 00:16:58.160]   getting on first, mattered a lot.
[00:16:58.160 --> 00:17:01.880]   And so Richard Gabriel of Scheme and Poetry fame
[00:17:01.880 --> 00:17:03.080]   has written about this, the famous essay.
[00:17:03.080 --> 00:17:04.760]   - Poetry, what's poetry?
[00:17:04.760 --> 00:17:06.000]   - Well, he's a poet.
[00:17:06.000 --> 00:17:07.160]   - Oh, actual poetry.
[00:17:07.160 --> 00:17:08.320]   He's like talking about some kind of subject.
[00:17:08.320 --> 00:17:10.160]   - No, no, I mean, he's the founder of Lucid,
[00:17:10.160 --> 00:17:12.840]   which is where Jamie Zawinski worked before Netscape.
[00:17:12.840 --> 00:17:16.280]   And Lucid was doing compilers, and Lucid Emacs,
[00:17:16.280 --> 00:17:19.480]   which was a fork of Emacs, famously Jamie fighting
[00:17:19.480 --> 00:17:22.640]   against Richard Stallman, Stallmax.
[00:17:22.640 --> 00:17:25.240]   And so Richard Gabriel, very brainy computer guy,
[00:17:25.240 --> 00:17:27.320]   but also a poet, but he wrote a nice essay
[00:17:27.320 --> 00:17:28.920]   that gets abused all the time.
[00:17:28.920 --> 00:17:30.440]   In fact, Jamie's put a kind of warning
[00:17:30.440 --> 00:17:33.320]   in front of his version of it on his site, JWZ.org,
[00:17:33.320 --> 00:17:34.360]   called Worse is Better.
[00:17:34.360 --> 00:17:38.240]   And this is about survival advantage of software
[00:17:38.240 --> 00:17:39.760]   in the network world, in my opinion.
[00:17:39.760 --> 00:17:42.640]   It's about Unix, it started out being framed
[00:17:42.640 --> 00:17:44.600]   as Unix and Lisp, good news, bad news,
[00:17:44.600 --> 00:17:46.560]   because all the Lisp people, the MIT people,
[00:17:46.560 --> 00:17:50.320]   were like, oh, the crown jewel scheme,
[00:17:50.320 --> 00:17:53.760]   this Fabergé egg, or Common Lisp, this giant cathedral.
[00:17:53.760 --> 00:17:55.680]   Of course we're gonna win, this is civilization.
[00:17:55.680 --> 00:17:59.080]   And those farmers in New Jersey, to borrow from Sopranos,
[00:17:59.080 --> 00:18:02.440]   those hicks down at Bell Labs, they're just,
[00:18:02.440 --> 00:18:04.160]   there's nothing sound there, it's all hacking.
[00:18:04.160 --> 00:18:05.240]   - Yeah.
[00:18:05.240 --> 00:18:06.800]   - Well, guess what won?
[00:18:06.800 --> 00:18:11.080]   - Wow, so you're saying this is a fundamental principle
[00:18:11.080 --> 00:18:14.760]   of the internet is moving fast winds.
[00:18:14.760 --> 00:18:16.920]   - You could say in almost any network system,
[00:18:16.920 --> 00:18:19.760]   like in biological evolution, you see successful alleles
[00:18:19.760 --> 00:18:22.000]   sweep populations, and they don't always have,
[00:18:22.000 --> 00:18:24.840]   they aren't free of flaws, they,
[00:18:24.840 --> 00:18:26.320]   heterozygous advantage, right?
[00:18:26.320 --> 00:18:30.160]   You can get, both parents give you the gene variant
[00:18:30.160 --> 00:18:31.760]   and you get sickle cell anemia, right?
[00:18:31.760 --> 00:18:34.640]   But if one of them does, you're more resistant to malaria.
[00:18:34.640 --> 00:18:38.120]   And so this isn't a beautiful process,
[00:18:38.120 --> 00:18:40.440]   except at large scale, and then you realize that
[00:18:40.440 --> 00:18:44.200]   because it moves fast and can adapt, it can win.
[00:18:44.200 --> 00:18:46.560]   And people still struggle with this.
[00:18:46.560 --> 00:18:48.800]   I used to struggle with this, because JavaScript was done
[00:18:48.800 --> 00:18:52.040]   in such a hurry, and the force of web compatibility
[00:18:52.040 --> 00:18:55.200]   meant early mistakes couldn't be fixed.
[00:18:55.200 --> 00:18:57.640]   And even the standards process injected new mistakes,
[00:18:57.640 --> 00:19:00.360]   as it will, but often standards bodies go back
[00:19:00.360 --> 00:19:01.640]   and making compatible changes.
[00:19:01.640 --> 00:19:03.040]   You can't do that with the web.
[00:19:03.040 --> 00:19:05.600]   It's more like, again, like biology,
[00:19:05.600 --> 00:19:07.080]   you preserve what still works.
[00:19:07.080 --> 00:19:10.320]   You don't wanna break ATP metabolism or whatever.
[00:19:10.320 --> 00:19:15.120]   So you have to kind of resign yourself to the reality
[00:19:15.120 --> 00:19:19.960]   of worse is better being enshrined
[00:19:19.960 --> 00:19:23.080]   in actual design points you might not like.
[00:19:23.080 --> 00:19:25.760]   And that happened with JavaScript, and I'm way over it,
[00:19:25.760 --> 00:19:28.720]   but it also, I think, was a huge advantage,
[00:19:28.720 --> 00:19:31.160]   which is why JavaScript has kind of swept
[00:19:31.160 --> 00:19:33.400]   a lot of programming domains.
[00:19:33.400 --> 00:19:34.840]   People will say, "Oh, it's not because of merit."
[00:19:34.840 --> 00:19:36.880]   Well, you're right, but we also improved it over time
[00:19:36.880 --> 00:19:37.720]   in the standards body.
[00:19:37.720 --> 00:19:39.320]   I spent 20 years doing that.
[00:19:39.320 --> 00:19:41.760]   And you don't get that choice.
[00:19:41.760 --> 00:19:45.360]   It's like, I'm not saying that that was the best language.
[00:19:45.360 --> 00:19:47.400]   I'm just saying that was the right time to do it.
[00:19:47.400 --> 00:19:50.280]   And I like to say the alternative was not to do it.
[00:19:50.280 --> 00:19:52.120]   I could have told Netscape, "I can't do this.
[00:19:52.120 --> 00:19:53.480]   "It's too rushed."
[00:19:53.480 --> 00:19:55.240]   And it would have been Visual Basic Script,
[00:19:55.240 --> 00:19:57.160]   and it would have been bad.
[00:19:58.040 --> 00:19:59.800]   - So that's a good way to present the alternative.
[00:19:59.800 --> 00:20:03.040]   But so it was a Netscape, and you have written it
[00:20:03.040 --> 00:20:05.880]   in how many days, and why was it only that many days,
[00:20:05.880 --> 00:20:08.880]   and what was the goal and the underlying principles
[00:20:08.880 --> 00:20:09.720]   in your mind at the time?
[00:20:09.720 --> 00:20:11.760]   - So the whole, I'm sort of describing worse is better
[00:20:11.760 --> 00:20:15.000]   in a frenetic way because it fit the model of Netscape.
[00:20:15.000 --> 00:20:19.000]   When it was known that Jim Clark and Mark Inveas
[00:20:19.000 --> 00:20:21.400]   were founding Netscape, and they did the first release
[00:20:21.400 --> 00:20:24.840]   in 1994, that browser took over from Mosaic.
[00:20:24.840 --> 00:20:27.120]   In fact, that's why Mozilla is called that.
[00:20:27.120 --> 00:20:28.240]   It's the Mosaic killer.
[00:20:28.240 --> 00:20:30.120]   It's like the giant monster that kills Mosaic.
[00:20:30.120 --> 00:20:30.960]   - That's awesome.
[00:20:30.960 --> 00:20:34.160]   - And they knew that, it wasn't that, again,
[00:20:34.160 --> 00:20:36.200]   it's not like you're doing advanced scientific research
[00:20:36.200 --> 00:20:37.360]   that is changing the world.
[00:20:37.360 --> 00:20:41.000]   You're more like taking down the last iteration
[00:20:41.000 --> 00:20:43.160]   of the browser Mark did, which had images,
[00:20:43.160 --> 00:20:45.880]   and other importances before he stopped working on it,
[00:20:45.880 --> 00:20:49.040]   and you're making Netscape the new thing that has images,
[00:20:49.040 --> 00:20:51.680]   plugins, which was the way to do video back in the day.
[00:20:51.680 --> 00:20:53.200]   It had something that's kind of died now
[00:20:53.200 --> 00:20:55.960]   for tiled windows called frames and framesets.
[00:20:56.880 --> 00:20:57.920]   - Oh, yeah, yeah, yeah, yeah.
[00:20:57.920 --> 00:20:59.280]   - HTML tables, that was new.
[00:20:59.280 --> 00:21:01.640]   Eric Bina did tables in Netscape 1.1.
[00:21:01.640 --> 00:21:05.040]   So when I got there, they were heading toward IPO.
[00:21:05.040 --> 00:21:06.480]   Clark wanted to IPO early.
[00:21:06.480 --> 00:21:07.640]   I think his instinct was right,
[00:21:07.640 --> 00:21:10.280]   and that kicked off the whole dot-com era.
[00:21:10.280 --> 00:21:13.280]   There was a recession in the US in '91.
[00:21:13.280 --> 00:21:15.140]   You can see old Law & Order reruns
[00:21:15.140 --> 00:21:16.520]   where they talk about the recession,
[00:21:16.520 --> 00:21:18.080]   how hard it's hitting New Yorkers.
[00:21:18.080 --> 00:21:20.440]   And after that, Greenspan really goosed things
[00:21:20.440 --> 00:21:23.160]   at the Federal Reserve, and technology had been
[00:21:23.160 --> 00:21:25.800]   sort of fermenting in a way that came together
[00:21:25.800 --> 00:21:28.720]   with the internet, and Netscape made it possible
[00:21:28.720 --> 00:21:33.160]   to do pets.com, to do eBay, to get people to recognize
[00:21:33.160 --> 00:21:36.040]   a URL on a billboard and then type it in when they get home.
[00:21:36.040 --> 00:21:37.320]   And that was huge.
[00:21:37.320 --> 00:21:42.120]   That was so fast moving a rocket that Mark
[00:21:42.120 --> 00:21:45.080]   and the engineering team there thought,
[00:21:45.080 --> 00:21:47.920]   we need to make this a programmable browser,
[00:21:47.920 --> 00:21:50.840]   not just a document viewer, not just a video.
[00:21:50.840 --> 00:21:53.800]   - So it was all HTML with images and tables,
[00:21:53.800 --> 00:21:55.280]   and also, like you said, frames.
[00:21:55.280 --> 00:21:56.120]   - Early plugins.
[00:21:56.120 --> 00:21:57.800]   - There's no dynamic element at all.
[00:21:57.800 --> 00:21:59.680]   - Yeah, the most dynamism you get was from a plugin,
[00:21:59.680 --> 00:22:01.640]   which there were a few of them then.
[00:22:01.640 --> 00:22:03.960]   Flash didn't exist at that point.
[00:22:03.960 --> 00:22:05.000]   It was, I think--
[00:22:05.000 --> 00:22:07.400]   - Java Applets yet, or no?
[00:22:07.400 --> 00:22:08.240]   - Well, that's the thing.
[00:22:08.240 --> 00:22:09.440]   We did the deal with Sun.
[00:22:09.440 --> 00:22:12.560]   In fact, I was recruited to go do Scheme in the browser.
[00:22:12.560 --> 00:22:14.800]   Remember Guy Steele and Gerald Sussman's
[00:22:14.800 --> 00:22:16.760]   beautiful Lisp variant?
[00:22:16.760 --> 00:22:17.920]   I was gonna do it in the browser
[00:22:17.920 --> 00:22:19.480]   because my friends from SGI thought,
[00:22:19.480 --> 00:22:20.920]   hey, we like Scheme, you like Scheme.
[00:22:20.920 --> 00:22:22.140]   And I'm like, I hardly ever use Scheme.
[00:22:22.140 --> 00:22:23.400]   It's not really used in industry,
[00:22:23.400 --> 00:22:25.000]   except in sort of silos.
[00:22:25.000 --> 00:22:27.080]   But I like it.
[00:22:27.080 --> 00:22:29.760]   Okay, I'll come do Scheme in the browser.
[00:22:29.760 --> 00:22:32.720]   I have a slide from my 2017 talk
[00:22:32.720 --> 00:22:34.640]   where I have Bruce Willis crawling through the duct
[00:22:34.640 --> 00:22:35.480]   in Die Hard.
[00:22:35.480 --> 00:22:38.280]   He's like, come out to the coast, have a lot of fun.
[00:22:38.280 --> 00:22:40.560]   Come on, do Scheme in the browser.
[00:22:40.560 --> 00:22:42.160]   But when I got there, there was no Scheme in the browser
[00:22:42.160 --> 00:22:45.240]   because they'd started a deal with Sun Microsystems.
[00:22:45.240 --> 00:22:47.040]   And my best contact there was Bill Joy,
[00:22:47.040 --> 00:22:50.560]   who I admired as a Berkeley Unix founder and Sun founder.
[00:22:50.560 --> 00:22:53.880]   And Bill got the idea of making the browser programmable too.
[00:22:53.880 --> 00:22:57.200]   And so the main idea was to put the Java VM,
[00:22:57.200 --> 00:23:00.360]   which at that point was not really easy to embed,
[00:23:00.360 --> 00:23:04.220]   into Netscape, including the Netscape version on Windows
[00:23:04.220 --> 00:23:05.600]   that was still most popular,
[00:23:05.600 --> 00:23:09.520]   which was the 16-bit Windows 3.1, which was going away.
[00:23:09.520 --> 00:23:11.320]   Microsoft was coming out with Windows 95
[00:23:11.320 --> 00:23:13.560]   and everyone was afraid they were gonna do
[00:23:13.560 --> 00:23:16.160]   Internet Explorer, I guess, two at that point,
[00:23:16.160 --> 00:23:17.040]   three the next year.
[00:23:17.040 --> 00:23:20.920]   They already bought or invested in somehow Spyglass,
[00:23:20.920 --> 00:23:24.440]   this other company that shot out from NCSA
[00:23:24.440 --> 00:23:26.360]   at University of Illinois.
[00:23:26.360 --> 00:23:29.720]   And in fact, Microsoft had tried to buy Netscape
[00:23:29.720 --> 00:23:31.360]   in late '94, before I got there.
[00:23:31.360 --> 00:23:32.240]   And I heard about this later.
[00:23:32.240 --> 00:23:35.000]   I heard they offered way too little money.
[00:23:35.000 --> 00:23:37.360]   And so Jim Barksdale and Jim Clark said,
[00:23:37.360 --> 00:23:39.760]   "Get out of here," in a pound of sand.
[00:23:39.760 --> 00:23:43.740]   But then they realized, oh, this is going to hurt us
[00:23:43.740 --> 00:23:45.480]   because now they're gonna copy us.
[00:23:45.480 --> 00:23:46.320]   Didn't happen right away.
[00:23:46.320 --> 00:23:49.080]   I'm not sure when Gates' Internet Tidal Wave memo
[00:23:49.080 --> 00:23:50.240]   was written.
[00:23:50.240 --> 00:23:53.160]   That's the famous memo he wrote when Bill Gates realized
[00:23:53.160 --> 00:23:56.840]   that Microsoft was going down this old copy AOL path
[00:23:56.840 --> 00:24:01.100]   or copy CompuServe path, a project called Blackbird,
[00:24:01.100 --> 00:24:03.240]   presumably after the SR-71, I don't know.
[00:24:03.240 --> 00:24:05.360]   But they were gonna make a dial-up service
[00:24:05.360 --> 00:24:09.040]   with a custom content language stack and custom rendering.
[00:24:09.040 --> 00:24:10.000]   It wasn't the web.
[00:24:10.000 --> 00:24:13.200]   They could have content partners.
[00:24:13.200 --> 00:24:14.400]   They have a lot of money.
[00:24:14.400 --> 00:24:15.920]   But it still wasn't to scale the web.
[00:24:15.920 --> 00:24:16.880]   It wasn't gonna be compelling.
[00:24:16.880 --> 00:24:19.480]   And Gates realized this, and he turned the company
[00:24:19.480 --> 00:24:22.400]   on a dime, and they couldn't buy Netscape.
[00:24:22.400 --> 00:24:23.320]   Again, I'm not sure of the timing.
[00:24:23.320 --> 00:24:24.540]   So they decided to copy it.
[00:24:24.540 --> 00:24:27.400]   And once we realized that, everybody inside Netscape
[00:24:27.400 --> 00:24:30.920]   felt even more urgency and more of a frenetic mood.
[00:24:30.920 --> 00:24:33.620]   And so my chance to do Scheme disappeared
[00:24:33.620 --> 00:24:35.840]   when the Java deal started brewing.
[00:24:35.840 --> 00:24:38.840]   But there was still a chance to do a companion language
[00:24:38.840 --> 00:24:42.620]   to Java because Java is a compiled language.
[00:24:42.620 --> 00:24:44.960]   It's evolved and improved quite a lot since then too.
[00:24:44.960 --> 00:24:48.560]   But it was for serious advanced programmers
[00:24:48.560 --> 00:24:51.400]   that cost a certain salary or hourly rate.
[00:24:51.400 --> 00:24:53.760]   And people observed, Bill Joy observed,
[00:24:53.760 --> 00:24:55.760]   and Mark Andreessen and I observed,
[00:24:55.760 --> 00:24:57.900]   that in a mature stack like Microsoft,
[00:24:57.900 --> 00:25:00.020]   you really benefit from having a scripting language
[00:25:00.020 --> 00:25:03.000]   like Visual Basic, which became Visual Basic Script
[00:25:03.000 --> 00:25:07.120]   in IE3, but didn't take over and kill JavaScript,
[00:25:07.120 --> 00:25:08.360]   that you need two languages.
[00:25:08.360 --> 00:25:10.160]   One is for the component writers
[00:25:10.160 --> 00:25:12.560]   who are higher priced and more expert.
[00:25:12.560 --> 00:25:17.000]   And the other is for scripters,
[00:25:17.000 --> 00:25:19.480]   certified public accountants, designers,
[00:25:19.480 --> 00:25:21.720]   graphic designers with some programming inclination.
[00:25:21.720 --> 00:25:23.460]   Anybody, amateurs, doesn't matter.
[00:25:23.460 --> 00:25:26.600]   There's a much more demotic approach there
[00:25:26.600 --> 00:25:28.640]   for programming the components together,
[00:25:28.640 --> 00:25:29.880]   gluing them together.
[00:25:29.880 --> 00:25:32.800]   Some people say duct tape language, which I don't really like.
[00:25:32.800 --> 00:25:36.080]   But we saw, Bill Joy and Mark Andreessen and I,
[00:25:36.080 --> 00:25:38.040]   we saw the need for a companion language.
[00:25:38.040 --> 00:25:40.400]   And the gleam in our eye was to call it JavaScript.
[00:25:40.400 --> 00:25:42.480]   I didn't like it, that was marketing's plan.
[00:25:42.480 --> 00:25:45.080]   Mark called it Mocha, which I liked.
[00:25:45.080 --> 00:25:47.080]   And Netscape Marketing, I think, didn't like that.
[00:25:47.080 --> 00:25:48.440]   So they said, "Oh, there's some trademark
[00:25:48.440 --> 00:25:50.740]   "in some software somewhere that uses Mocha,
[00:25:50.740 --> 00:25:52.120]   "so we can't use that."
[00:25:52.120 --> 00:25:54.960]   And they tried LiveScript in August and that didn't last.
[00:25:54.960 --> 00:25:56.680]   And then finally, we got the trademark license
[00:25:56.680 --> 00:25:58.720]   in December, 1995.
[00:25:58.720 --> 00:26:01.620]   But the work I did to prove that it could be done
[00:26:01.620 --> 00:26:05.200]   was important because I came in in April
[00:26:05.200 --> 00:26:08.320]   and even then Netscape was growing so fast
[00:26:08.320 --> 00:26:11.280]   that they couldn't find an open hiring requisition
[00:26:11.280 --> 00:26:12.320]   in the client team for me.
[00:26:12.320 --> 00:26:14.280]   So they hired me into the server team.
[00:26:14.280 --> 00:26:16.680]   And I worked for a month on server team
[00:26:16.680 --> 00:26:18.600]   on what became HTTP/1/1.
[00:26:18.600 --> 00:26:20.280]   So I was actually, I had done protocol work
[00:26:20.280 --> 00:26:22.640]   at Silicon Graphics with Greg Chesson,
[00:26:22.640 --> 00:26:25.360]   former Bell Labs intern, grad student intern,
[00:26:25.360 --> 00:26:27.040]   who knew all the Unix founders.
[00:26:27.040 --> 00:26:30.920]   And Greg was very interested in taking protocols
[00:26:30.920 --> 00:26:32.840]   to the next level with VLSI
[00:26:32.840 --> 00:26:35.480]   'cause he thought that CPUs wouldn't scale up.
[00:26:35.480 --> 00:26:37.480]   He was mistaken in that, unfortunately.
[00:26:37.480 --> 00:26:39.060]   Moore's law more than kept up.
[00:26:39.060 --> 00:26:41.400]   And you have gigabit ethernet running
[00:26:41.400 --> 00:26:42.520]   with conventional processors.
[00:26:42.520 --> 00:26:45.680]   But I worked on protocols at SGI
[00:26:45.680 --> 00:26:49.000]   as well as Unix kernel hacking and NFS and things like that.
[00:26:49.000 --> 00:26:53.060]   So I came into Netscape to work on the server side
[00:26:53.060 --> 00:26:55.280]   for a month, but I was thinking the whole time,
[00:26:55.280 --> 00:26:56.360]   what should this language be like?
[00:26:56.360 --> 00:26:58.480]   Should it be easy to use?
[00:26:58.480 --> 00:27:00.680]   Might it syntax even be more like natural language
[00:27:00.680 --> 00:27:04.840]   like HyperTalk, which is Bill Atkinson's language
[00:27:04.840 --> 00:27:07.320]   in HyperCard, if you have ever used HyperCard
[00:27:07.320 --> 00:27:08.560]   on an early Mac.
[00:27:08.800 --> 00:27:12.080]   And I thought, well, I'd like to do that,
[00:27:12.080 --> 00:27:15.160]   but my management is saying make it look like Java,
[00:27:15.160 --> 00:27:17.480]   which looks like C from a distance.
[00:27:17.480 --> 00:27:18.480]   - What does that mean?
[00:27:18.480 --> 00:27:20.400]   Is it braces we're talking about visually?
[00:27:20.400 --> 00:27:23.040]   Does it mean like, what, management,
[00:27:23.040 --> 00:27:24.160]   do they understand what--
[00:27:24.160 --> 00:27:25.520]   - They don't, marketing didn't know,
[00:27:25.520 --> 00:27:28.460]   but management did, like the rickshaw of engineering knew.
[00:27:28.460 --> 00:27:31.720]   And we had a plan even that was,
[00:27:31.720 --> 00:27:32.920]   if you have this companion language,
[00:27:32.920 --> 00:27:34.560]   you're going to glue things together
[00:27:34.560 --> 00:27:35.680]   between Java and JavaScript.
[00:27:35.720 --> 00:27:38.200]   So you're going to have commerce in memory,
[00:27:38.200 --> 00:27:40.240]   in the heap with data types.
[00:27:40.240 --> 00:27:42.760]   So you're going to want some of the data types in Java
[00:27:42.760 --> 00:27:43.880]   to reflect in the JavaScript.
[00:27:43.880 --> 00:27:46.120]   You're going to want the primitive types that Java,
[00:27:46.120 --> 00:27:47.520]   unfortunately, severed from objects.
[00:27:47.520 --> 00:27:50.880]   So at least some of them, double, let's call it
[00:27:50.880 --> 00:27:53.720]   in Java's terms, from the C term for double precision,
[00:27:53.720 --> 00:27:58.720]   floating point, or strings, or Booleans, and objects.
[00:27:58.720 --> 00:28:03.960]   And so right away, there was this constraint
[00:28:03.960 --> 00:28:07.520]   that looking like Java meant kind of the C curly brace
[00:28:07.520 --> 00:28:09.840]   syntax, but also some of the data types and objects.
[00:28:09.840 --> 00:28:11.520]   - Like objects and so on, all that kind of stuff.
[00:28:11.520 --> 00:28:12.360]   - Dotted columns.
[00:28:12.360 --> 00:28:13.200]   - Comparison operator.
[00:28:13.200 --> 00:28:15.480]   - Garbage collection, all that stuff.
[00:28:15.480 --> 00:28:17.640]   Even the bitwise operators and the shift operators,
[00:28:17.640 --> 00:28:19.580]   including the unsigned right shift,
[00:28:19.580 --> 00:28:22.720]   which Java had because it didn't have unsigned integer types.
[00:28:22.720 --> 00:28:24.600]   It said if you want to do unsigned operations,
[00:28:24.600 --> 00:28:25.440]   use an operator.
[00:28:25.440 --> 00:28:27.320]   And that turned out to be important much later.
[00:28:27.320 --> 00:28:28.560]   I'll tell that story five times.
[00:28:28.560 --> 00:28:32.980]   But JavaScript inherited a set of,
[00:28:33.980 --> 00:28:36.340]   operators, the expression grammar,
[00:28:36.340 --> 00:28:39.380]   the statement grammar up to a point from Java.
[00:28:39.380 --> 00:28:40.740]   But I wanted a functional language.
[00:28:40.740 --> 00:28:42.840]   I wanted a little bit of Scheme,
[00:28:42.840 --> 00:28:44.620]   even though it wasn't as clean as Scheme.
[00:28:44.620 --> 00:28:46.140]   - So you had a love, sorry to interrupt,
[00:28:46.140 --> 00:28:47.660]   you had a love for Scheme and Lisp,
[00:28:47.660 --> 00:28:49.740]   that functional language landscape.
[00:28:49.740 --> 00:28:51.620]   - Yes, I wanted first class functions.
[00:28:51.620 --> 00:28:54.000]   Because I saw the need for callbacks in the browser,
[00:28:54.000 --> 00:28:55.940]   where it's a single threaded program.
[00:28:55.940 --> 00:28:57.380]   All the early browsers were single threaded.
[00:28:57.380 --> 00:28:58.640]   And it's the right model for users.
[00:28:58.640 --> 00:29:00.620]   Most users weren't ready for mutual exclusion
[00:29:00.620 --> 00:29:01.680]   and threading.
[00:29:01.680 --> 00:29:03.660]   So in a single threaded world,
[00:29:03.660 --> 00:29:05.420]   you cannot block the user interface.
[00:29:05.420 --> 00:29:07.500]   So you have to use a callback and run later.
[00:29:07.500 --> 00:29:09.900]   And without getting too fancy
[00:29:09.900 --> 00:29:11.620]   and trying to capture the continuation,
[00:29:11.620 --> 00:29:13.340]   like call CC does in Scheme,
[00:29:13.340 --> 00:29:16.620]   I thought I'll just make it easy to have fun arcs,
[00:29:16.620 --> 00:29:18.860]   first class functions you pass downward
[00:29:18.860 --> 00:29:20.660]   and it can be called back.
[00:29:20.660 --> 00:29:23.660]   And Java didn't have that at the time.
[00:29:23.660 --> 00:29:27.300]   It took forever to get proper first class functions,
[00:29:27.300 --> 00:29:30.740]   lambdas now into Java, Java seven or eight, I think.
[00:29:30.740 --> 00:29:32.120]   - It did have concurrency, right?
[00:29:32.120 --> 00:29:32.960]   - Yes.
[00:29:32.960 --> 00:29:33.780]   - From the very beginning.
[00:29:33.780 --> 00:29:36.200]   But you were thinking that the JavaScript in the browser
[00:29:36.200 --> 00:29:39.400]   would not have the luxury of being concurrent.
[00:29:39.400 --> 00:29:40.240]   - That's right.
[00:29:40.240 --> 00:29:41.080]   And the reason was,
[00:29:41.080 --> 00:29:42.560]   Java was gonna run in the plugins.
[00:29:42.560 --> 00:29:44.600]   We could fork threads and go to town.
[00:29:44.600 --> 00:29:46.920]   But the main action in the browser
[00:29:46.920 --> 00:29:48.280]   was in the single threaded program,
[00:29:48.280 --> 00:29:51.920]   in the single Unix process on Unix or Windows.
[00:29:51.920 --> 00:29:54.440]   And it was where you had to service the event loop
[00:29:54.440 --> 00:29:56.180]   and then go do things.
[00:29:56.180 --> 00:29:58.600]   Respond to the network, lay out some HTML,
[00:29:58.600 --> 00:30:01.100]   render it, turn widths into heights
[00:30:01.100 --> 00:30:03.180]   by filling containers, boxes,
[00:30:03.180 --> 00:30:06.060]   the early, what became the CSS box model.
[00:30:06.060 --> 00:30:09.580]   And run scripts to make the thing livelier,
[00:30:09.580 --> 00:30:11.340]   respond to user input.
[00:30:11.340 --> 00:30:14.180]   And all that event driven programming
[00:30:14.180 --> 00:30:16.060]   was in part like HyperCard
[00:30:16.060 --> 00:30:19.420]   because HyperCard had this on event name syntax.
[00:30:19.420 --> 00:30:21.640]   And so that's why you have in JavaScript on click
[00:30:21.640 --> 00:30:24.080]   run together as the name of the event handler.
[00:30:24.080 --> 00:30:27.060]   And there's some funny ones on mouse over and on mouse out.
[00:30:27.060 --> 00:30:28.180]   People still complain about those.
[00:30:28.180 --> 00:30:30.460]   But there are many more events now
[00:30:30.460 --> 00:30:31.580]   over the years standardized.
[00:30:31.580 --> 00:30:33.940]   But it was a mix of event driven,
[00:30:33.940 --> 00:30:34.900]   single threaded programming
[00:30:34.900 --> 00:30:38.140]   because it had to run in the main thread of the browser
[00:30:38.140 --> 00:30:38.980]   where the action is.
[00:30:38.980 --> 00:30:40.660]   And Java never got there,
[00:30:40.660 --> 00:30:42.620]   which meant Java could not interact easily
[00:30:42.620 --> 00:30:46.680]   or quickly or in a nested way with the document,
[00:30:46.680 --> 00:30:49.140]   with the objects reflected from the HTML document,
[00:30:49.140 --> 00:30:51.180]   with the tables and forms and so on.
[00:30:51.180 --> 00:30:54.460]   And that is one of the reasons I think JavaScript survived
[00:30:54.460 --> 00:30:55.300]   and Java kind of died.
[00:30:55.300 --> 00:30:56.900]   Java was in this plugin prison.
[00:30:56.900 --> 00:30:58.700]   It essentially was confined to a rectangle,
[00:30:58.700 --> 00:30:59.860]   the app with rectangle.
[00:30:59.860 --> 00:31:02.660]   And while we even built a next year,
[00:31:02.660 --> 00:31:04.820]   Nick Thompson, a friend from SGI,
[00:31:04.820 --> 00:31:08.580]   who was an intern grad student at CMU at the time,
[00:31:08.580 --> 00:31:10.220]   built the first version of Live Connect
[00:31:10.220 --> 00:31:12.580]   to glue Java and JavaScript together
[00:31:12.580 --> 00:31:14.620]   to deliver on that vision where you do have commerce
[00:31:14.620 --> 00:31:16.780]   between the data types in the heap.
[00:31:16.780 --> 00:31:18.820]   - Did it work?
[00:31:18.820 --> 00:31:21.220]   - It worked, but Java was in charge.
[00:31:21.220 --> 00:31:22.180]   JavaScript was in charge
[00:31:22.180 --> 00:31:24.380]   and Java was just these components, these helper.
[00:31:24.380 --> 00:31:25.900]   - You might as well do everything in JavaScript.
[00:31:25.900 --> 00:31:26.740]   - What happened over time.
[00:31:26.740 --> 00:31:27.940]   It's like an evolutionary filter.
[00:31:27.940 --> 00:31:29.580]   It just kind of, who needs the plugin?
[00:31:29.580 --> 00:31:33.020]   And in fact, Sun mismanaged Java as a plugin.
[00:31:33.020 --> 00:31:35.500]   They thought, oh, Netscape was giving us
[00:31:35.500 --> 00:31:37.700]   the distribution vehicle and we don't care
[00:31:37.700 --> 00:31:39.700]   about the browser, it's just about getting Java out there.
[00:31:39.700 --> 00:31:41.220]   And that was a big miscalculation.
[00:31:41.220 --> 00:31:43.820]   They then tried, because Microsoft's killing Netscape
[00:31:43.820 --> 00:31:46.140]   after a few years, they tried getting into Microsoft.
[00:31:46.140 --> 00:31:48.500]   And you may remember there was a Sun-Microsoft deal
[00:31:48.500 --> 00:31:50.660]   which famously blew up.
[00:31:50.660 --> 00:31:54.820]   And Microsoft kicked Java out of Windows.
[00:31:54.820 --> 00:31:56.420]   And that's when they really pulled the trigger.
[00:31:56.420 --> 00:31:58.140]   I think they already evaluated it and liked it
[00:31:58.140 --> 00:32:01.740]   on Anders Helsberg's .NET and C#
[00:32:01.740 --> 00:32:04.620]   and decided we're gonna just not have Java.
[00:32:04.620 --> 00:32:06.460]   We don't want any of that Sun stuff.
[00:32:06.460 --> 00:32:07.540]   We don't want the patent risk.
[00:32:07.540 --> 00:32:10.100]   We don't want, I'm not sure what the fights were about.
[00:32:10.100 --> 00:32:12.300]   There was some patent angle to it, I think.
[00:32:12.300 --> 00:32:16.940]   And up till then, Microsoft had been using Java components
[00:32:16.940 --> 00:32:20.820]   like in Outlook Web Access, which had a lot of JavaScript
[00:32:20.820 --> 00:32:23.100]   to be a Hotmail-like user interface.
[00:32:23.100 --> 00:32:27.740]   They had to call the mail server through HTTP
[00:32:27.740 --> 00:32:31.340]   and they used a Java object to do this.
[00:32:31.340 --> 00:32:33.820]   And when they gave the boot to Sun,
[00:32:33.820 --> 00:32:37.260]   they suddenly other, the left-hand gave the boot
[00:32:37.260 --> 00:32:39.140]   and the right-hand said, "We better do something else
[00:32:39.140 --> 00:32:40.060]   in Outlook Web Access.
[00:32:40.060 --> 00:32:40.900]   What are we gonna do?"
[00:32:40.900 --> 00:32:43.620]   And they said, "Let's just add an ActiveX component,"
[00:32:43.620 --> 00:32:45.380]   which is their own native way
[00:32:45.380 --> 00:32:46.900]   of embedding things in languages.
[00:32:46.900 --> 00:32:51.900]   And we'll make it, it'll be what became XML HTTP request,
[00:32:51.980 --> 00:32:55.100]   which is now a web standard for calling asynchronously.
[00:32:55.100 --> 00:32:57.060]   And it's been replaced by the Fetch API
[00:32:57.060 --> 00:32:59.500]   in HTML5 or HTML living document.
[00:32:59.500 --> 00:33:01.100]   But this whole lineage goes back
[00:33:01.100 --> 00:33:05.100]   to Java being successfully the loser and getting kicked out.
[00:33:05.100 --> 00:33:07.680]   And after Microsoft kicked it out, it was a plugin
[00:33:07.680 --> 00:33:11.020]   and you would find it required for like smart card banking
[00:33:11.020 --> 00:33:14.700]   in the Nordic countries where that was mandated by law
[00:33:14.700 --> 00:33:16.380]   but really didn't get used much.
[00:33:16.380 --> 00:33:20.600]   Or there were pilots who used it for flight information.
[00:33:21.560 --> 00:33:24.180]   But Flash, which Netscape could have bought
[00:33:24.180 --> 00:33:25.540]   but unfortunately didn't.
[00:33:25.540 --> 00:33:26.380]   - Unfortunately didn't?
[00:33:26.380 --> 00:33:28.100]   - Yeah, we would have screwed it up.
[00:33:28.100 --> 00:33:29.540]   - What year are we talking about with Flash?
[00:33:29.540 --> 00:33:32.180]   - I think after the IPO, so it was probably late '95.
[00:33:32.180 --> 00:33:34.140]   - Flash was around, was it Adobe?
[00:33:34.140 --> 00:33:34.980]   No, it wasn't.
[00:33:34.980 --> 00:33:36.380]   - No, it was called Future Splash
[00:33:36.380 --> 00:33:38.700]   and it was these brothers, Jonathan Gay,
[00:33:38.700 --> 00:33:39.540]   I think his name was.
[00:33:39.540 --> 00:33:43.540]   He came knocking and the marketing guy at Netscape
[00:33:43.540 --> 00:33:45.820]   who was screening the technology partners
[00:33:45.820 --> 00:33:47.780]   or wannabe acquisitions was brutal
[00:33:47.780 --> 00:33:50.300]   and just everybody wanted to get in on the Netscape
[00:33:50.300 --> 00:33:52.480]   stock gravy train and he sent them packing
[00:33:52.480 --> 00:33:55.120]   and they ended up selling to Macromedia
[00:33:55.120 --> 00:33:57.360]   and Macromedia was where Flash was created.
[00:33:57.360 --> 00:34:02.000]   And the good thing about Macromedia was it was a tool company
[00:34:02.000 --> 00:34:05.800]   so it invested in the best ideas, I think,
[00:34:05.800 --> 00:34:08.120]   which are still somewhat lost to us of Flash.
[00:34:08.120 --> 00:34:12.500]   The timeline, animation is sort of an immutable function
[00:34:12.500 --> 00:34:13.560]   over time.
[00:34:13.560 --> 00:34:14.920]   - They had the tooling around that too,
[00:34:14.920 --> 00:34:17.240]   like the Dreamweaver, there's a Flash--
[00:34:17.240 --> 00:34:18.840]   - Flash Director, there were a bunch of them.
[00:34:18.840 --> 00:34:20.880]   - Yeah, I mean, yeah, that was a great--
[00:34:20.880 --> 00:34:22.800]   - Flash Builder was one of the last ones.
[00:34:22.800 --> 00:34:25.400]   These tools were used by real artists
[00:34:25.400 --> 00:34:27.440]   and special effects people and designers.
[00:34:27.440 --> 00:34:30.880]   All the restaurant websites around 2005 were done in Flash
[00:34:30.880 --> 00:34:34.080]   which was, we were trying to do HTML5 at the same time
[00:34:34.080 --> 00:34:35.080]   that was the Firefox era.
[00:34:35.080 --> 00:34:37.640]   We were trying to make the web capable enough
[00:34:37.640 --> 00:34:39.400]   you didn't need Flash but if you recall,
[00:34:39.400 --> 00:34:41.080]   you go to a restaurant and it's like,
[00:34:41.080 --> 00:34:42.400]   this is kind of like a game or something.
[00:34:42.400 --> 00:34:44.640]   It's like a Flash, all the font looks small.
[00:34:44.640 --> 00:34:45.920]   - You didn't like Flash from the beginning.
[00:34:45.920 --> 00:34:47.800]   You're like, this doesn't feel right.
[00:34:47.800 --> 00:34:50.040]   - Not really, I actually admire Flash's technology
[00:34:50.040 --> 00:34:51.740]   and I'm pretty pragmatic about these things
[00:34:51.740 --> 00:34:54.880]   and I realized that it doesn't matter
[00:34:54.880 --> 00:34:58.320]   if you're dealt a bad hand like JavaScript was a rush job
[00:34:58.320 --> 00:35:00.280]   or if you have Flash as a plugin
[00:35:00.280 --> 00:35:03.680]   and you can invest in the tools and make it pretty good.
[00:35:03.680 --> 00:35:05.760]   You should make it better for your users
[00:35:05.760 --> 00:35:07.040]   and grow it as best you can.
[00:35:07.040 --> 00:35:08.760]   And what happened with the browser
[00:35:08.760 --> 00:35:11.080]   due to Microsoft's monopoly abuse
[00:35:11.080 --> 00:35:15.100]   for which they were convicted and even after that
[00:35:15.100 --> 00:35:17.480]   until I think Firefox and then Chrome
[00:35:17.480 --> 00:35:19.960]   was people kept saying, oh, the web can't do X,
[00:35:19.960 --> 00:35:21.280]   it can't do Y.
[00:35:21.280 --> 00:35:22.280]   We'll have to have a plugin.
[00:35:22.280 --> 00:35:23.720]   We'll have to have a new approach.
[00:35:23.720 --> 00:35:26.900]   We'll clean the slate and have a new web
[00:35:26.900 --> 00:35:29.000]   and everyone who said that failed
[00:35:29.000 --> 00:35:31.740]   and the reason they failed is because there's too much value
[00:35:31.740 --> 00:35:34.120]   in the web, this huge network
[00:35:34.120 --> 00:35:35.760]   and the worse is better principle
[00:35:35.760 --> 00:35:37.900]   means that you can not only start bad
[00:35:37.900 --> 00:35:40.880]   which they all sneer at but get on first
[00:35:40.880 --> 00:35:44.560]   and get wide distribution, get sort of evolutionary advantage
[00:35:44.560 --> 00:35:49.360]   and priority of place but you can also improve it over time.
[00:35:49.360 --> 00:35:51.120]   And so if you're gonna improve Flash
[00:35:51.120 --> 00:35:53.040]   and for some reason Flash is now out of favor,
[00:35:53.040 --> 00:35:55.040]   Steve Jobs said you can't have Flash on the iPhone.
[00:35:55.040 --> 00:35:56.760]   That was probably the death knell.
[00:35:56.760 --> 00:35:58.880]   Put your energy into JavaScript and that happened, right?
[00:35:58.880 --> 00:36:02.440]   So we did things at Mozilla with Adobe to improve
[00:36:02.440 --> 00:36:04.880]   which bought my Macromedia to improve Flash
[00:36:04.880 --> 00:36:07.560]   and to improve the version of JavaScript that was in Flash.
[00:36:07.560 --> 00:36:09.040]   We tried to standardize that.
[00:36:09.040 --> 00:36:09.880]   - Oh, that's right.
[00:36:09.880 --> 00:36:10.720]   - I'm getting ahead of myself.
[00:36:10.720 --> 00:36:12.040]   - You can program Flash. - ES4, yeah.
[00:36:12.040 --> 00:36:13.200]   - That's right.
[00:36:13.200 --> 00:36:15.200]   Can we just rewind to the magical,
[00:36:15.200 --> 00:36:18.600]   like it's a special moment in the history
[00:36:18.600 --> 00:36:20.200]   of all of computing.
[00:36:20.200 --> 00:36:22.880]   We'll talk about it later but it's arguable,
[00:36:22.880 --> 00:36:25.320]   it's possible that the entirety of the world
[00:36:25.320 --> 00:36:27.280]   will run in JavaScript at some point.
[00:36:27.280 --> 00:36:31.280]   So it's like those days, it would be interesting
[00:36:31.280 --> 00:36:34.800]   if you could just describe actually zooming in
[00:36:34.800 --> 00:36:39.800]   on how the cake was baked from the several days
[00:36:39.800 --> 00:36:42.920]   that you were working on it, what was on your mind,
[00:36:43.360 --> 00:36:45.400]   how much coffee were you drinking,
[00:36:45.400 --> 00:36:47.360]   were you nervous, freaking out?
[00:36:47.360 --> 00:36:48.360]   - I'll try to remember it.
[00:36:48.360 --> 00:36:50.240]   I mean, you're right, there were these pregnant moments
[00:36:50.240 --> 00:36:52.240]   you see in hindsight, maybe they're overrated
[00:36:52.240 --> 00:36:55.800]   but like Hegel sees Napoleon on horseback at Jena
[00:36:55.800 --> 00:36:59.240]   and says, "There's the world spirit on horse."
[00:36:59.240 --> 00:37:05.080]   And I knew that there was a chance to do it, Mark knew,
[00:37:05.080 --> 00:37:08.000]   and he was my executive sponsor
[00:37:08.000 --> 00:37:10.840]   and he was the one sort of brainstorming
[00:37:10.840 --> 00:37:13.400]   how the JavaScript should be right there in the page.
[00:37:13.400 --> 00:37:14.800]   That was important for him to say that
[00:37:14.800 --> 00:37:17.320]   'cause I thought so too but a lot of people were like,
[00:37:17.320 --> 00:37:18.680]   "Oh, you can't write programming language
[00:37:18.680 --> 00:37:20.120]   "in the middle of the markup."
[00:37:20.120 --> 00:37:22.000]   And indeed there are problems, if you did it naively,
[00:37:22.000 --> 00:37:25.340]   you'd see the code laid out as like random gibberish.
[00:37:25.340 --> 00:37:26.640]   So I had to figure out how to hide that,
[00:37:26.640 --> 00:37:28.160]   that was a challenge.
[00:37:28.160 --> 00:37:29.840]   - Is that a breakthrough idea?
[00:37:29.840 --> 00:37:32.600]   I mean, so you and Mark thinking about this idea
[00:37:32.600 --> 00:37:36.160]   that you just inject code in the middle of the markup.
[00:37:36.160 --> 00:37:38.040]   - Of the webpage, yeah, it was considered kind of heretical.
[00:37:38.040 --> 00:37:40.160]   There was an SGML guru, I forget his name,
[00:37:40.160 --> 00:37:42.120]   but he corresponded with me and at first he was angry.
[00:37:42.120 --> 00:37:44.680]   He's like, "You should have used a marked section,
[00:37:44.680 --> 00:37:45.960]   "why didn't you use a marked section?"
[00:37:45.960 --> 00:37:47.680]   And I said, "Well, SGML marked sections
[00:37:47.680 --> 00:37:48.900]   "are not part of HTML by the way,
[00:37:48.900 --> 00:37:50.640]   "and they're not supported in the browser."
[00:37:50.640 --> 00:37:52.560]   And so I did some hack that was equivalent
[00:37:52.560 --> 00:37:55.320]   and over time you could do the proper SGML thing.
[00:37:55.320 --> 00:37:58.240]   But eventually he came around and it was again
[00:37:58.240 --> 00:37:59.680]   sort of evolutionary necessity,
[00:37:59.680 --> 00:38:00.880]   it was almost like introgression,
[00:38:00.880 --> 00:38:05.880]   like the idea which Lin Margulies I think helped get across
[00:38:07.000 --> 00:38:10.640]   that we have to consider mutualism biology
[00:38:10.640 --> 00:38:14.080]   that maybe mitochondria were ancient prokaryotes
[00:38:14.080 --> 00:38:17.400]   that got into the cell and became beneficial.
[00:38:17.400 --> 00:38:21.200]   Somehow the same sort of thinking applies,
[00:38:21.200 --> 00:38:23.040]   you have to embed JavaScript in HTML.
[00:38:23.040 --> 00:38:24.480]   It's gonna be a good virus.
[00:38:24.480 --> 00:38:25.320]   - It won't hurt you.
[00:38:25.320 --> 00:38:27.400]   - So the code becomes data in the sense
[00:38:27.400 --> 00:38:30.040]   it just gets carried along.
[00:38:30.040 --> 00:38:32.760]   But is there the side of the,
[00:38:32.760 --> 00:38:35.080]   so you were focusing on the Netscape at that time,
[00:38:35.080 --> 00:38:37.080]   doesn't the browser have to support,
[00:38:37.080 --> 00:38:41.440]   interpret correctly this mix of HTML and whatever code?
[00:38:41.440 --> 00:38:43.800]   - I had to hide it from old browsers including Netscape 1.1
[00:38:43.800 --> 00:38:45.140]   which was predominant then.
[00:38:45.140 --> 00:38:48.000]   So I used an HTML comment,
[00:38:48.000 --> 00:38:50.360]   but inside the container that comment lived in,
[00:38:50.360 --> 00:38:51.980]   the script tag, which is a new element,
[00:38:51.980 --> 00:38:54.640]   I could make different semantics in Netscape 2
[00:38:54.640 --> 00:38:57.040]   where those HTML comment delimiters
[00:38:57.040 --> 00:38:58.520]   instead of being multi-line brackets
[00:38:58.520 --> 00:39:00.680]   became one line or essentially one line.
[00:39:00.680 --> 00:39:02.560]   - So you wrote, so JavaScript was written,
[00:39:02.560 --> 00:39:05.040]   the programming language was written as a comment.
[00:39:05.040 --> 00:39:06.120]   - Yeah, comment for old browsers
[00:39:06.120 --> 00:39:08.800]   and a set of brackets that were ignored
[00:39:08.800 --> 00:39:10.120]   with real code for new.
[00:39:10.120 --> 00:39:13.480]   And it was this two-way comment hiding hack, as I called it,
[00:39:13.480 --> 00:39:15.720]   that was absolutely necessary for us to get off the ground.
[00:39:15.720 --> 00:39:17.680]   We couldn't have bootstrapped JavaScript without it.
[00:39:17.680 --> 00:39:19.480]   We didn't have scripts that were loaded
[00:39:19.480 --> 00:39:20.320]   from a separate file.
[00:39:20.320 --> 00:39:22.920]   The only scripts in Netscape 2 were inline in the document.
[00:39:22.920 --> 00:39:24.840]   - What were the challenges here?
[00:39:24.840 --> 00:39:27.420]   Like what, you know, typing,
[00:39:27.420 --> 00:39:30.200]   what were the choices you were thinking about?
[00:39:30.200 --> 00:39:31.640]   - Garbage collection. - Was garbage collection.
[00:39:31.640 --> 00:39:33.000]   - I didn't have time to write a garbage collector,
[00:39:33.000 --> 00:39:34.680]   so I just, I didn't at first.
[00:39:34.680 --> 00:39:36.920]   So the thing was using essentially arenas
[00:39:36.920 --> 00:39:39.160]   or what GNU calls obj pools
[00:39:39.160 --> 00:39:41.680]   and just would run out of memory eventually.
[00:39:41.680 --> 00:39:43.560]   And I added reference counting in a hurry
[00:39:43.560 --> 00:39:45.360]   after the 10 days in which I hacked.
[00:39:45.360 --> 00:39:48.120]   So after I was in the server team doing HTTP 1.1
[00:39:48.120 --> 00:39:49.640]   and thinking about the language,
[00:39:49.640 --> 00:39:52.320]   I finally got transferred to the client team in early May.
[00:39:52.320 --> 00:39:55.280]   And that's when I, you know, I got the go sign from Mark
[00:39:55.280 --> 00:39:57.280]   and it was like, we can't wait
[00:39:57.280 --> 00:39:59.360]   because people inside Netscape are doubting,
[00:39:59.360 --> 00:40:01.880]   even people inside Sun are definitely doubting.
[00:40:01.880 --> 00:40:04.960]   Bill Joy was the champion, but he was like alone in that
[00:40:04.960 --> 00:40:07.240]   in seeing there was a role for JavaScript
[00:40:07.240 --> 00:40:10.560]   as the, as I call it, the sidekick language,
[00:40:10.560 --> 00:40:11.960]   robbing the boy hostage.
[00:40:11.960 --> 00:40:13.080]   (laughing)
[00:40:13.080 --> 00:40:16.360]   Frank Miller put it in the Dark Knight Returns
[00:40:16.360 --> 00:40:18.640]   that there was this silly little language
[00:40:18.640 --> 00:40:19.480]   that would be the glue language
[00:40:19.480 --> 00:40:20.960]   and it could become important over time.
[00:40:20.960 --> 00:40:23.880]   And you were better off having that complementarity,
[00:40:23.880 --> 00:40:25.120]   that pairing of languages,
[00:40:25.120 --> 00:40:26.960]   just like Microsoft stacked it
[00:40:26.960 --> 00:40:28.880]   with Visual C++ and Visual Basic.
[00:40:28.880 --> 00:40:33.120]   - So what was the big moment of I'm done?
[00:40:33.120 --> 00:40:34.320]   - So I had to do a demo.
[00:40:34.320 --> 00:40:35.480]   I forget the dates.
[00:40:35.480 --> 00:40:38.680]   I think I, for a history of programming languages paper
[00:40:38.680 --> 00:40:40.840]   that Alan Weissbrock did with my help,
[00:40:40.840 --> 00:40:42.720]   he did a lot of the writing.
[00:40:42.720 --> 00:40:47.440]   I think it was the 10 days from like Thursday evening
[00:40:47.440 --> 00:40:50.800]   through to the following weeks, you know,
[00:40:50.800 --> 00:40:52.440]   the whole of that week and then into the Monday.
[00:40:52.440 --> 00:40:53.280]   - Did you get sleep?
[00:40:53.280 --> 00:40:54.400]   - Not, not enough.
[00:40:54.400 --> 00:40:56.280]   And I was really going fast
[00:40:56.280 --> 00:41:00.080]   because I'd already used a lot of C compiler
[00:41:00.080 --> 00:41:02.320]   and front-end compiler knowledge
[00:41:02.320 --> 00:41:04.680]   that I'd gained from undergraduate school.
[00:41:04.680 --> 00:41:06.560]   When I started getting into computing
[00:41:06.560 --> 00:41:10.040]   as a renegade physics major,
[00:41:10.040 --> 00:41:14.640]   people were formalizing more efficient bottom-up grammars,
[00:41:14.640 --> 00:41:17.040]   parsers for bottom-up languages.
[00:41:17.040 --> 00:41:19.520]   Really, LALR1 was the big thing.
[00:41:19.520 --> 00:41:22.440]   And I studied all this and learned how to parse them.
[00:41:22.440 --> 00:41:25.100]   And in the end, if you're doing C languages,
[00:41:25.100 --> 00:41:28.640]   you often do what Dennis Ritchie did anyway,
[00:41:28.640 --> 00:41:31.280]   which is a recursive descent parser.
[00:41:31.280 --> 00:41:32.200]   You can hand code it.
[00:41:32.200 --> 00:41:36.280]   And I did that for JavaScript in a blazing hurry.
[00:41:36.280 --> 00:41:37.360]   Mostly got it right.
[00:41:37.360 --> 00:41:40.160]   Didn't have precedence inversion problems or other bugs,
[00:41:40.160 --> 00:41:43.160]   but I copied a lot from Java and C.
[00:41:43.160 --> 00:41:45.240]   And I tried to keep things simple.
[00:41:45.240 --> 00:41:49.400]   Like the equality operator in those 10 days sprint
[00:41:49.400 --> 00:41:52.280]   between two objects of different dynamic type said,
[00:41:52.280 --> 00:41:53.120]   "No, they're not equal.
[00:41:53.120 --> 00:41:54.320]   Their types are different."
[00:41:54.320 --> 00:41:57.660]   And then after that, I had internal early adopters
[00:41:57.660 --> 00:42:01.260]   and they were using JavaScript to match a number
[00:42:01.260 --> 00:42:03.920]   against a database field that had been stringized.
[00:42:03.920 --> 00:42:05.920]   And they said, "Oh, can't we just have implicit conversion?"
[00:42:05.920 --> 00:42:07.700]   And like an idiot, I agreed.
[00:42:07.700 --> 00:42:08.620]   I gave them what they wanted.
[00:42:08.620 --> 00:42:10.640]   I was trying to please them and get adoption.
[00:42:10.640 --> 00:42:15.640]   And that broke what equivalence relation nature
[00:42:15.640 --> 00:42:19.600]   there was to the double equal.
[00:42:19.600 --> 00:42:22.360]   There's some edge cases with not a number
[00:42:22.360 --> 00:42:23.320]   that break that at two.
[00:42:23.320 --> 00:42:25.040]   But it really broke it.
[00:42:25.040 --> 00:42:26.960]   Having implicit conversions in the operator
[00:42:26.960 --> 00:42:29.320]   is something that people still roast me over.
[00:42:29.320 --> 00:42:31.720]   - So let's talk about two things.
[00:42:31.720 --> 00:42:34.280]   One, it sounds like the comparison operator,
[00:42:34.280 --> 00:42:38.760]   the equality operator is the thing that you regret.
[00:42:38.760 --> 00:42:39.600]   So maybe can you--
[00:42:39.600 --> 00:42:40.600]   - Making it sloppy.
[00:42:40.600 --> 00:42:41.440]   - Making it sloppy.
[00:42:41.440 --> 00:42:45.200]   So what is the biggest thing you regret in those 10 days?
[00:42:45.200 --> 00:42:47.480]   And what is the biggest thing you're proud of?
[00:42:47.480 --> 00:42:49.680]   - So that making it sloppy came after the 10 days.
[00:42:49.680 --> 00:42:51.880]   And my lesson there, which I've tweeted is,
[00:42:51.880 --> 00:42:53.080]   when people come to you saying,
[00:42:53.080 --> 00:42:56.080]   "Can you please make it sloppy or add this cute feature?"
[00:42:56.080 --> 00:42:57.640]   The answer should be no.
[00:42:57.640 --> 00:43:00.120]   And I should have known that 'cause I think Niklaus Wirth,
[00:43:00.120 --> 00:43:01.120]   one of my heroes, said,
[00:43:01.120 --> 00:43:03.640]   "The essence of design is leaving things out."
[00:43:03.640 --> 00:43:06.180]   But during the 10 days, I also, like I said,
[00:43:06.180 --> 00:43:08.560]   I was in such a hurry, I left out garbage collection.
[00:43:08.560 --> 00:43:09.400]   Came back to haunt me,
[00:43:09.400 --> 00:43:11.240]   but I got reference counting in in time
[00:43:11.240 --> 00:43:14.400]   that people weren't running out of memory right away
[00:43:14.400 --> 00:43:16.080]   on long-lived JavaScript.
[00:43:16.080 --> 00:43:17.000]   - Wait, what happens when you don't have
[00:43:17.000 --> 00:43:18.520]   garbage collection and you have objects?
[00:43:18.520 --> 00:43:20.160]   - Well, you just run out of memory.
[00:43:20.160 --> 00:43:21.000]   (Lex laughs)
[00:43:21.000 --> 00:43:24.120]   And you know, at first, you write a short script
[00:43:24.120 --> 00:43:25.920]   and the page doesn't last long or it doesn't do a lot,
[00:43:25.920 --> 00:43:26.740]   and it's okay.
[00:43:26.740 --> 00:43:27.580]   - Oh, I see, yeah, yeah, yeah.
[00:43:27.580 --> 00:43:28.600]   - But if you're writing a game or something
[00:43:28.600 --> 00:43:30.600]   and you're doing event-based allocation,
[00:43:30.600 --> 00:43:31.640]   you run out of memory.
[00:43:31.640 --> 00:43:34.320]   And this was noticed in the summer of 1995,
[00:43:34.320 --> 00:43:35.560]   and people were like, "What's going on?"
[00:43:35.560 --> 00:43:38.600]   I was, "Oh yeah, I better go back and do reference counting."
[00:43:38.600 --> 00:43:40.200]   And then the problem with reference counting is
[00:43:40.200 --> 00:43:43.160]   you're writing the language in the runtime in C,
[00:43:43.160 --> 00:43:45.760]   an unsafe language, and if you're reference counting
[00:43:45.760 --> 00:43:48.060]   and you overflow the counter, you mismanage it
[00:43:48.060 --> 00:43:49.600]   so it goes high, it gets stuck high,
[00:43:49.600 --> 00:43:51.560]   you leak memory again and you run out.
[00:43:51.560 --> 00:43:56.200]   If you underflow it, you pre-memory that's still in use.
[00:43:56.200 --> 00:44:00.120]   And even then, we knew what all the security hackers
[00:44:00.120 --> 00:44:02.600]   came to know, that you therefore have
[00:44:02.600 --> 00:44:05.840]   potentially a remote code execution vulnerability.
[00:44:05.840 --> 00:44:08.120]   'Cause this was before things like
[00:44:08.120 --> 00:44:11.120]   non-executable heap memory and
[00:44:11.120 --> 00:44:14.800]   stack defenses against taking over memory.
[00:44:14.800 --> 00:44:17.780]   So if you can, from the remote side,
[00:44:17.780 --> 00:44:19.900]   write some HTML and JavaScript that just happens
[00:44:19.900 --> 00:44:21.820]   to exploit a bug in memory safety,
[00:44:21.820 --> 00:44:24.960]   like it causes JavaScript to underflow a reference counter,
[00:44:24.960 --> 00:44:27.560]   and the script still has its hands on that object
[00:44:27.560 --> 00:44:29.040]   and it's trying to call a method on it,
[00:44:29.040 --> 00:44:30.680]   and there's some kind of lookup function table
[00:44:30.680 --> 00:44:34.620]   in the object, but you've managed to stuff the heap
[00:44:34.620 --> 00:44:37.160]   with strings that forwards their own lookalike
[00:44:37.160 --> 00:44:41.360]   for the function table, you can call some other code.
[00:44:41.360 --> 00:44:43.400]   And this was a problem right away.
[00:44:43.400 --> 00:44:46.280]   So security, JavaScript upped the ante.
[00:44:46.280 --> 00:44:48.840]   Java had this problem too, but in its own VM.
[00:44:48.840 --> 00:44:53.440]   And it just was a separate headache for Sun to worry about.
[00:44:53.440 --> 00:44:55.280]   We had this problem in Netscape right away.
[00:44:55.280 --> 00:44:58.340]   So Netscape 2 came out after my 10 days,
[00:44:58.340 --> 00:45:02.640]   and after these follow-on work to embed JavaScript
[00:45:02.640 --> 00:45:05.120]   better in the browser and to add garbage collection
[00:45:05.120 --> 00:45:06.320]   through reference counting, really,
[00:45:06.320 --> 00:45:09.660]   I call it reference counting, and get it shipped.
[00:45:09.660 --> 00:45:11.400]   We had a bunch of dot releases where we fixed
[00:45:11.400 --> 00:45:13.560]   security bugs like maniacs. (laughs)
[00:45:13.560 --> 00:45:16.000]   - But what is the thing you're,
[00:45:16.000 --> 00:45:18.360]   you know, when you sit back on a porch
[00:45:18.360 --> 00:45:20.000]   and just look out into the sunset,
[00:45:20.000 --> 00:45:21.960]   what are you most proud of from those 10 days?
[00:45:21.960 --> 00:45:23.560]   - I think the first class functions, Sean.
[00:45:23.560 --> 00:45:25.640]   I think, especially since Java didn't have it
[00:45:25.640 --> 00:45:27.600]   and it was somewhat unusual.
[00:45:27.600 --> 00:45:30.640]   - Scheme made it in somehow at the end of the day.
[00:45:30.640 --> 00:45:31.480]   - In spirit, in spirit.
[00:45:31.480 --> 00:45:33.440]   I mean, people complain because Scheme has,
[00:45:33.440 --> 00:45:34.840]   you know, minimalism.
[00:45:34.840 --> 00:45:37.000]   It has six or seven special forms.
[00:45:37.000 --> 00:45:38.720]   It has hygienic macros.
[00:45:38.720 --> 00:45:39.640]   It has call CC.
[00:45:39.680 --> 00:45:44.680]   It has sort of a beautiful, complete set of forms
[00:45:44.680 --> 00:45:48.640]   to make the Lambda calculus pleasant to use in practice.
[00:45:48.640 --> 00:45:51.640]   And JavaScript is, you know,
[00:45:51.640 --> 00:45:56.120]   kind of a multi-paradigm or Schembolic. (laughs)
[00:45:56.120 --> 00:45:59.400]   - Just on a small tangent, you mentioned Mark Andreessen.
[00:45:59.400 --> 00:46:03.400]   It sounds like, and Bill Joy, but staying on Mark,
[00:46:03.400 --> 00:46:06.520]   it sounds like he had an impact on you
[00:46:06.520 --> 00:46:09.120]   in that he sort of believed in what you were doing there.
[00:46:09.120 --> 00:46:11.920]   Can you talk about like what role Mark had in your life?
[00:46:11.920 --> 00:46:15.880]   - Yeah, we would meet at the Pinsla Creamery
[00:46:15.880 --> 00:46:17.720]   in downtown Palo Alto.
[00:46:17.720 --> 00:46:19.960]   And Mark was just fresh out of, you know, grad school
[00:46:19.960 --> 00:46:20.880]   or whatever he was doing.
[00:46:20.880 --> 00:46:25.280]   And he was a big dude and he got fitter later.
[00:46:25.280 --> 00:46:26.120]   He had hair.
[00:46:26.120 --> 00:46:28.800]   He would order giant milkshakes and burgers.
[00:46:28.800 --> 00:46:31.040]   And we would meet there and brainstorm about what to do.
[00:46:31.040 --> 00:46:34.020]   And it was very direct because we didn't have much time.
[00:46:34.020 --> 00:46:36.280]   Sort of, we didn't talk about it,
[00:46:36.280 --> 00:46:39.080]   but the implication was Microsoft was coming after us.
[00:46:39.080 --> 00:46:41.760]   Mark was saying things boldly, pre-IPO,
[00:46:41.760 --> 00:46:44.320]   like Netscape plus Java kills Windows, right?
[00:46:44.320 --> 00:46:45.640]   - Wow, it's ambitious.
[00:46:45.640 --> 00:46:46.840]   - Make a browser programmable,
[00:46:46.840 --> 00:46:49.400]   it becomes the new runtime for programs.
[00:46:49.400 --> 00:46:52.000]   It's the meta OS or it's the replacement OS.
[00:46:52.000 --> 00:46:54.280]   - But he still saw value in JavaScript.
[00:46:54.280 --> 00:46:56.000]   - Yes, even though he was saying that
[00:46:56.000 --> 00:46:59.800]   and Java was the big name, hence the trademark license,
[00:46:59.800 --> 00:47:01.360]   he saw JavaScript as important.
[00:47:01.360 --> 00:47:03.720]   And he even thought, what if we got,
[00:47:03.720 --> 00:47:05.040]   I told this in other interviews, I can say it,
[00:47:05.040 --> 00:47:07.660]   he thought, what if we had my friend Kip Hickman,
[00:47:07.660 --> 00:47:09.520]   who'd been at Netscape from the beginning
[00:47:09.520 --> 00:47:13.080]   and who was a kernel hacker at SGI when I joined,
[00:47:13.080 --> 00:47:14.880]   he started writing his own JVM
[00:47:14.880 --> 00:47:16.400]   before we consummated the Sun deal
[00:47:16.400 --> 00:47:17.960]   and got our hands on their code.
[00:47:17.960 --> 00:47:20.480]   And the Java compiler, Java C,
[00:47:20.480 --> 00:47:23.200]   which Arthur Van Hoff had written, very nice code,
[00:47:23.200 --> 00:47:24.960]   was all written in Java, it was self-hosted
[00:47:24.960 --> 00:47:26.480]   or so-called bootstrap.
[00:47:26.480 --> 00:47:29.320]   And so we could use that as soon as Kip's Java VM
[00:47:29.320 --> 00:47:34.320]   could run the bytecode from the Sun JVM
[00:47:34.320 --> 00:47:37.520]   running the self-hosted compiler to emit the bytecode.
[00:47:37.520 --> 00:47:39.420]   So once we could bootstrap into Kip's VM,
[00:47:39.420 --> 00:47:40.300]   we wouldn't need Sun.
[00:47:40.300 --> 00:47:44.380]   And Mark was like, well, maybe we can just ditch Sun,
[00:47:44.380 --> 00:47:47.340]   we'll have Kip's Java VM, we'll have your JavaScript VM.
[00:47:47.340 --> 00:47:48.220]   Now we need graphics.
[00:47:48.220 --> 00:47:49.600]   So Mark was thinking far ahead
[00:47:49.600 --> 00:47:53.380]   because he knew you could do things with HTML and images,
[00:47:53.380 --> 00:47:54.900]   but at some point you really want--
[00:47:54.900 --> 00:47:57.340]   - Like dynamo graphics or three-dimensional?
[00:47:57.340 --> 00:47:59.920]   - Like even SGI had already started its downfall
[00:47:59.920 --> 00:48:02.940]   because the first four VLSI team there
[00:48:02.940 --> 00:48:05.380]   had gone off to do 3DFX and all these other companies
[00:48:05.380 --> 00:48:07.480]   that made the graphics card on your PC, right?
[00:48:07.480 --> 00:48:09.360]   Doom was big and Quake.
[00:48:09.360 --> 00:48:10.660]   And so we were all playing Quake.
[00:48:10.660 --> 00:48:12.860]   I was old, so I was terrible.
[00:48:12.860 --> 00:48:16.360]   But why not put that graphics capability on the web?
[00:48:16.360 --> 00:48:18.680]   And in fact, it finally happened at Mozilla
[00:48:18.680 --> 00:48:21.480]   with Firefox era with Vlad Vukicevic
[00:48:21.480 --> 00:48:24.380]   taking OpenGL ES and reflecting it as WebGL.
[00:48:24.380 --> 00:48:27.960]   But OpenGL ES is the mobile version of OpenGL,
[00:48:27.960 --> 00:48:30.300]   which is a standard based on SGI GL.
[00:48:30.300 --> 00:48:32.760]   So this whole lineage of graphics libraries
[00:48:32.760 --> 00:48:36.260]   or really graphics languages for what became the GPU.
[00:48:36.260 --> 00:48:37.300]   And Mark was thinking ahead.
[00:48:37.300 --> 00:48:38.540]   He's like, "We need graphics too."
[00:48:38.540 --> 00:48:40.300]   And I thought, "Okay, I can try to get somebody
[00:48:40.300 --> 00:48:42.860]   I knew at SGI, but he's a grad student at MIT.
[00:48:42.860 --> 00:48:44.500]   He was studying under Barbara Liskov.
[00:48:44.500 --> 00:48:46.140]   He laughed when he heard about this later.
[00:48:46.140 --> 00:48:48.420]   Andrew Myers, he's at Cornell, long time.
[00:48:48.420 --> 00:48:50.100]   I think he's a full professor.
[00:48:50.100 --> 00:48:51.740]   And Mark said, "Great, we'll get him."
[00:48:51.740 --> 00:48:53.140]   And I'm like, "I'm not sure he's gonna come.
[00:48:53.140 --> 00:48:55.260]   We'll throw money, we'll stock options."
[00:48:55.260 --> 00:48:56.120]   We never did it.
[00:48:56.120 --> 00:48:57.580]   And they did the Sun deal.
[00:48:57.580 --> 00:49:00.900]   So Kip Nobly put aside his own JVM
[00:49:00.900 --> 00:49:02.860]   and we used the Sun JVM.
[00:49:02.860 --> 00:49:03.980]   So that was an ambitious period.
[00:49:03.980 --> 00:49:06.620]   And Mark was very generative because he was pushing hard.
[00:49:06.620 --> 00:49:11.180]   He was ambitious and he wanted to have Netscape
[00:49:11.180 --> 00:49:13.660]   possibly be in control of the ball.
[00:49:13.660 --> 00:49:16.860]   - Maybe you can speak to this dance
[00:49:16.860 --> 00:49:20.500]   of Netscape versus Internet Explorer.
[00:49:20.500 --> 00:49:25.500]   You've thrown some loving words towards Microsoft
[00:49:25.500 --> 00:49:26.700]   throughout this conversation,
[00:49:26.700 --> 00:49:28.440]   but that's a theme with, I mean,
[00:49:28.440 --> 00:49:31.260]   Steve Jobs had a similar sort of commentary.
[00:49:31.260 --> 00:49:34.500]   From a big sort of philosophical principle perspective,
[00:49:34.500 --> 00:49:37.780]   can you comment on the approach that Microsoft has taken
[00:49:37.780 --> 00:49:42.100]   with Internet Explorer from IE1 to Edge today?
[00:49:42.100 --> 00:49:45.380]   Is there something that you see as valuable
[00:49:45.380 --> 00:49:48.380]   that they're doing in the occasional copying
[00:49:48.380 --> 00:49:49.580]   and that kind of stuff?
[00:49:49.580 --> 00:49:54.580]   Or is the world worse off because Internet Explorer exists?
[00:49:54.580 --> 00:49:57.620]   - So I'm gonna segment this into historical eras
[00:49:57.620 --> 00:49:59.560]   because I think Microsofters today with Satya
[00:49:59.560 --> 00:50:00.620]   is quite a different company
[00:50:00.620 --> 00:50:02.340]   and what they're doing with Edge is different.
[00:50:02.340 --> 00:50:06.160]   But back then, Gates, aggressive character,
[00:50:06.160 --> 00:50:09.660]   not really original in my view, not an originator.
[00:50:09.660 --> 00:50:12.420]   Steve Jobs famously said once, "He doesn't have any taste."
[00:50:12.420 --> 00:50:13.780]   And I don't mean this in a small way.
[00:50:13.780 --> 00:50:15.060]   He has no taste.
[00:50:15.060 --> 00:50:16.540]   You can see this.
[00:50:16.540 --> 00:50:19.340]   Apple at the time had beautiful typography
[00:50:19.340 --> 00:50:22.580]   and ligatures and kerning and the fonts looked great.
[00:50:22.580 --> 00:50:25.220]   And Windows had this sort of ugly system font
[00:50:25.220 --> 00:50:26.940]   that was carefully aligned with pixels
[00:50:26.940 --> 00:50:28.660]   so it didn't get anti-aliased.
[00:50:28.660 --> 00:50:29.500]   - What is it?
[00:50:29.500 --> 00:50:30.320]   I'm sorry to keep interrupting.
[00:50:30.320 --> 00:50:32.380]   Why was Internet Explorer winning
[00:50:32.380 --> 00:50:34.300]   throughout the history of these competitions?
[00:50:34.300 --> 00:50:35.220]   - Distribution.
[00:50:35.220 --> 00:50:36.620]   Distribution matters more than anything.
[00:50:36.620 --> 00:50:39.820]   And this is why even now we're seeing
[00:50:39.820 --> 00:50:41.660]   in the browser wars, Edge doing better
[00:50:41.660 --> 00:50:43.460]   because it's being foisted on people of Windows.
[00:50:43.460 --> 00:50:45.220]   We have Windows 10 boxes at home.
[00:50:45.220 --> 00:50:48.220]   We have some Windows 7 boxes or laptops we keep running too
[00:50:48.220 --> 00:50:50.860]   because we don't connect them to the internet generally.
[00:50:50.860 --> 00:50:55.860]   But once you have that operating system to hold,
[00:50:56.140 --> 00:50:57.820]   you can force Edge.
[00:50:57.820 --> 00:50:59.500]   And Apple did it with Safari too.
[00:50:59.500 --> 00:51:01.340]   It's not unique to Microsoft.
[00:51:01.340 --> 00:51:02.180]   - That's sad.
[00:51:02.180 --> 00:51:03.660]   - But distribution matters.
[00:51:03.660 --> 00:51:07.060]   And that's why I think IE was going to win.
[00:51:07.060 --> 00:51:09.580]   That's why everybody at Netscape felt we're doomed.
[00:51:09.580 --> 00:51:12.900]   This was something Michael Toy and Jamie Woodson were doomed.
[00:51:12.900 --> 00:51:14.700]   But for a while there, we had a chance
[00:51:14.700 --> 00:51:16.060]   and we innovated in Netscape too.
[00:51:16.060 --> 00:51:17.540]   We did a big platform push.
[00:51:17.540 --> 00:51:21.740]   Java and JavaScript and plugins, more plugins,
[00:51:21.740 --> 00:51:25.140]   and more HTML table features.
[00:51:25.140 --> 00:51:28.700]   And really started making a pre-arable stack
[00:51:28.700 --> 00:51:30.820]   out of what were pretty static web languages.
[00:51:30.820 --> 00:51:33.220]   And even in the beta releases of Netscape,
[00:51:33.220 --> 00:51:34.460]   two people were using JavaScript
[00:51:34.460 --> 00:51:36.620]   to build what you would call single page applications
[00:51:36.620 --> 00:51:37.740]   like Gmail.
[00:51:37.740 --> 00:51:40.380]   And they were using JavaScript locally to compute things
[00:51:40.380 --> 00:51:43.660]   and to call the server on a hidden frame in the background.
[00:51:43.660 --> 00:51:46.860]   So it was prefiguring a lot of what came later as AJAX
[00:51:46.860 --> 00:51:48.620]   or dynamic JavaScript, dynamic HTML.
[00:51:48.620 --> 00:51:49.740]   - So people saw that, I mean--
[00:51:49.740 --> 00:51:50.900]   - Even then they saw it, yeah.
[00:51:50.900 --> 00:51:53.820]   - That's kind of, I don't know, from my perspective,
[00:51:53.820 --> 00:51:54.940]   that seems quite brilliant.
[00:51:54.940 --> 00:51:56.580]   It seems like really innovative
[00:51:56.580 --> 00:51:59.220]   that you would have code run in the browser.
[00:51:59.220 --> 00:52:01.380]   - It did impress me with something,
[00:52:01.380 --> 00:52:04.020]   which I learned later about from Eric von Hippel of MIT,
[00:52:04.020 --> 00:52:07.260]   which is user innovation networks, lead user effects.
[00:52:07.260 --> 00:52:09.180]   That throwing out JavaScript,
[00:52:09.180 --> 00:52:10.460]   even though we weren't doing open source,
[00:52:10.460 --> 00:52:12.300]   we were doing beta releases early
[00:52:12.300 --> 00:52:14.340]   and permissively with Netscape.
[00:52:14.340 --> 00:52:17.180]   Getting early developer feedback, absolutely critical.
[00:52:17.180 --> 00:52:18.020]   I loved it.
[00:52:18.020 --> 00:52:19.140]   I did some of that with SGI,
[00:52:19.140 --> 00:52:20.260]   with some of the products I worked on,
[00:52:20.260 --> 00:52:21.860]   but it really came to the fore in Netscape.
[00:52:21.860 --> 00:52:23.740]   And that culminated in Mozilla,
[00:52:23.740 --> 00:52:25.700]   where you're dealing with developers all the time
[00:52:25.700 --> 00:52:27.200]   and early adopters, lead users.
[00:52:27.200 --> 00:52:29.800]   But the lead users helped improve JavaScript,
[00:52:29.800 --> 00:52:31.540]   even in those last few betas,
[00:52:31.540 --> 00:52:32.620]   where I could hardly change things.
[00:52:32.620 --> 00:52:34.540]   I was under pretty rigid change control.
[00:52:34.540 --> 00:52:36.220]   - So we're talking about just a small collection
[00:52:36.220 --> 00:52:38.260]   of individuals that are just like up front--
[00:52:38.260 --> 00:52:39.380]   - A guy named Bill Dortch,
[00:52:39.380 --> 00:52:40.900]   you can find his work in the web archive,
[00:52:40.900 --> 00:52:41.940]   still from 1996.
[00:52:41.940 --> 00:52:43.240]   It's a single page application.
[00:52:43.240 --> 00:52:46.300]   It's an artist gallery of mountain art.
[00:52:46.300 --> 00:52:47.140]   - He used JavaScript.
[00:52:47.140 --> 00:52:47.960]   - It doesn't quite work.
[00:52:47.960 --> 00:52:48.800]   He uses JavaScript locally.
[00:52:48.800 --> 00:52:50.540]   He uses a local database.
[00:52:50.540 --> 00:52:52.180]   What you would think of now is JSON,
[00:52:52.180 --> 00:52:54.260]   but it's all pure JavaScript code,
[00:52:54.260 --> 00:52:55.820]   a bunch of objects being constructed.
[00:52:55.820 --> 00:52:57.460]   - That's so cool.
[00:52:57.460 --> 00:53:00.780]   So how is, if you can do sort of a big,
[00:53:00.780 --> 00:53:03.220]   sweeping progress of JavaScript,
[00:53:03.220 --> 00:53:05.380]   how has JavaScript changed over the years,
[00:53:05.380 --> 00:53:07.320]   in your view, from those early 10 days,
[00:53:07.320 --> 00:53:09.460]   with a quick addition of garbage collection
[00:53:09.460 --> 00:53:11.140]   and fixes around security?
[00:53:11.140 --> 00:53:14.140]   How has this evolution, that now it's taken over the world?
[00:53:14.140 --> 00:53:16.340]   - It's been a bumpy ride,
[00:53:16.340 --> 00:53:19.900]   because the standards body got shut down after Microsoft,
[00:53:19.900 --> 00:53:21.540]   I think, took over the web,
[00:53:21.540 --> 00:53:24.220]   and then felt punished by the US v. Microsoft
[00:53:24.220 --> 00:53:25.380]   antitrust case.
[00:53:25.380 --> 00:53:27.380]   - Can you speak to the standard body?
[00:53:27.380 --> 00:53:28.260]   - That was a fun ride, too,
[00:53:28.260 --> 00:53:32.300]   because Netscape had taken the lead with the web
[00:53:32.300 --> 00:53:37.100]   and HTML innovations like frames and framesets tables.
[00:53:37.100 --> 00:53:38.740]   And the W3C was sort of off,
[00:53:38.740 --> 00:53:40.460]   even then, sort of in SGML land,
[00:53:40.460 --> 00:53:43.100]   heading toward XML la-la land.
[00:53:43.100 --> 00:53:44.340]   I'm gonna be a little harsh on it.
[00:53:44.340 --> 00:53:45.180]   - What's SGML?
[00:53:45.180 --> 00:53:46.000]   I'm sorry.
[00:53:46.000 --> 00:53:48.900]   - SGML was the precursor markup language to HTML,
[00:53:48.900 --> 00:53:51.020]   or it was sort of the more extensible
[00:53:51.020 --> 00:53:54.140]   standard generalized markup language.
[00:53:54.140 --> 00:53:55.820]   It was a-- - XML-like.
[00:53:55.820 --> 00:53:58.540]   - Pointy brackets, but it had all sorts of elaborate syntax
[00:53:58.540 --> 00:54:00.940]   for doing different semantics.
[00:54:00.940 --> 00:54:03.780]   And this is why I think TBL and others
[00:54:03.780 --> 00:54:05.580]   who wanted to do the semantic web
[00:54:05.580 --> 00:54:08.340]   then took XML forward.
[00:54:08.340 --> 00:54:10.420]   But they had this, or some of them anyway,
[00:54:10.420 --> 00:54:12.340]   had this strange idea that they could replace the web
[00:54:12.340 --> 00:54:15.740]   with XML, or that they would upgrade the web to be XML.
[00:54:15.740 --> 00:54:17.260]   And it couldn't be done.
[00:54:17.260 --> 00:54:19.540]   Worse is better had concrete meaning.
[00:54:19.540 --> 00:54:22.660]   The web was very forgiving of HTML,
[00:54:22.660 --> 00:54:25.220]   including sort of minor syntax errors
[00:54:25.220 --> 00:54:26.500]   that could be error corrected.
[00:54:26.500 --> 00:54:28.180]   Like error correction isn't generally done
[00:54:28.180 --> 00:54:29.380]   in programming languages because--
[00:54:29.380 --> 00:54:30.220]   - Right.
[00:54:30.220 --> 00:54:31.860]   That's another amazing thing about HTML,
[00:54:31.860 --> 00:54:34.820]   is like it's more like biology than programming.
[00:54:34.820 --> 00:54:36.100]   - Yeah, exactly.
[00:54:36.100 --> 00:54:40.060]   And so XML was, in its standard form,
[00:54:40.060 --> 00:54:42.580]   super strict and could never have admitted
[00:54:42.580 --> 00:54:44.460]   the kind of users who were committing these errors.
[00:54:44.460 --> 00:54:46.540]   And the funniest part was Microsoft said,
[00:54:46.540 --> 00:54:47.660]   "Hey, we're doing XML."
[00:54:47.660 --> 00:54:49.580]   But the way they put it in Internet Explorer
[00:54:49.580 --> 00:54:51.540]   under the default media type,
[00:54:51.540 --> 00:54:53.220]   put it through the HTML error corrector.
[00:54:53.220 --> 00:54:54.060]   (laughing)
[00:54:54.060 --> 00:54:55.020]   - Oh, wow.
[00:54:55.020 --> 00:54:56.340]   - So they kind of bastardized it
[00:54:56.340 --> 00:54:58.620]   to make it popular and usable and accessible.
[00:54:58.620 --> 00:55:03.620]   And so XML as a pure thing was never gonna take over.
[00:55:03.620 --> 00:55:07.220]   And W3C was kind of not fully functional
[00:55:07.220 --> 00:55:09.780]   because Netscape wasn't cooperating with them.
[00:55:09.780 --> 00:55:11.180]   We thought about where to take JavaScript
[00:55:11.180 --> 00:55:13.980]   and we realized, our standards guru, Carl Cargill,
[00:55:13.980 --> 00:55:17.140]   realized there was a European standards body
[00:55:17.140 --> 00:55:18.820]   that had already given Microsoft fits
[00:55:18.820 --> 00:55:22.580]   by standardizing parts of the Windows 3.1 API,
[00:55:22.580 --> 00:55:24.020]   which European governments insisted on.
[00:55:24.020 --> 00:55:26.180]   They said, "Microsoft, we can't use your operating system
[00:55:26.180 --> 00:55:27.620]   "without some standards."
[00:55:27.620 --> 00:55:29.660]   And Microsoft said, "Here's our docs."
[00:55:29.660 --> 00:55:32.460]   And the government said, "No, we need a European standard."
[00:55:32.460 --> 00:55:33.420]   So this body called
[00:55:33.420 --> 00:55:37.500]   the European Computer Manufacturers Association, ECMA,
[00:55:37.500 --> 00:55:38.580]   which eventually became global
[00:55:38.580 --> 00:55:40.980]   and became a proper noun instead of an acronym.
[00:55:40.980 --> 00:55:43.260]   - Right, it's just one capital E now
[00:55:43.260 --> 00:55:44.660]   with a lowercase CMA.
[00:55:44.660 --> 00:55:45.500]   - Right.
[00:55:45.500 --> 00:55:47.580]   And as one of the early Microsoft guys I met
[00:55:47.580 --> 00:55:50.260]   when we first convened a working group
[00:55:50.260 --> 00:55:51.340]   to talk about JavaScript said,
[00:55:51.340 --> 00:55:53.420]   "It sounds like a skin disease."
[00:55:53.420 --> 00:55:56.140]   - But it gave, I mean, maybe you'll speak to that,
[00:55:56.140 --> 00:55:58.980]   but it gave the name to JavaScript of ECMAScript.
[00:55:58.980 --> 00:55:59.820]   - That was the standard name
[00:55:59.820 --> 00:56:02.820]   because Java was a trademark of Suns.
[00:56:02.820 --> 00:56:03.700]   They were so aggressive,
[00:56:03.700 --> 00:56:05.820]   they were sending cease and desist letters
[00:56:05.820 --> 00:56:08.500]   to people whose middle European heritage
[00:56:08.500 --> 00:56:10.780]   meant their surname was Javanko
[00:56:10.780 --> 00:56:12.860]   and they called their website javanko.com
[00:56:12.860 --> 00:56:14.580]   and Sun would send them a letter saying,
[00:56:14.580 --> 00:56:16.700]   "You're using J-A-V-A at the start of your domain name.
[00:56:16.700 --> 00:56:18.900]   "You must cease and desist."
[00:56:18.900 --> 00:56:22.020]   - I love marketing more than anything else in this world.
[00:56:22.020 --> 00:56:27.020]   So ECMAScript and now is popularly named as ES plus version.
[00:56:27.020 --> 00:56:29.860]   - I would say people use JS more than anything.
[00:56:29.860 --> 00:56:31.100]   People still say JavaScript.
[00:56:31.100 --> 00:56:32.380]   JavaScript is in all the books.
[00:56:32.380 --> 00:56:33.700]   - So I mean, when you're referring to it,
[00:56:33.700 --> 00:56:34.860]   it's usually JavaScript
[00:56:34.860 --> 00:56:37.300]   and when you wanna refer to a version of JavaScript,
[00:56:37.300 --> 00:56:39.140]   you'll say ES6, ES5.
[00:56:39.140 --> 00:56:40.820]   - Yes, or now they've gone to years,
[00:56:40.820 --> 00:56:41.820]   which is kind of confusing
[00:56:41.820 --> 00:56:45.500]   'cause it's an offset of 2009.
[00:56:45.500 --> 00:56:49.220]   ES6 is ES2016.
[00:56:49.220 --> 00:56:52.700]   - Yeah, it doesn't match the years perfectly.
[00:56:52.700 --> 00:56:55.660]   Yeah, so what were the choices made
[00:56:55.660 --> 00:56:57.980]   and how did JavaScript evolve here?
[00:56:57.980 --> 00:57:01.060]   - So we took this new standards body,
[00:57:01.060 --> 00:57:04.340]   which we thought sort of a proven record
[00:57:04.340 --> 00:57:05.380]   of standing up to Microsoft,
[00:57:05.380 --> 00:57:07.540]   but Microsoft sent a lot of people.
[00:57:07.540 --> 00:57:10.540]   They sent some people who were pretty good
[00:57:10.540 --> 00:57:12.940]   and then when they realized that I was there
[00:57:12.940 --> 00:57:15.220]   and Netscape was not gonna just bend over
[00:57:15.220 --> 00:57:16.380]   and do whatever they wanted,
[00:57:16.380 --> 00:57:17.300]   they sent somebody really good.
[00:57:17.300 --> 00:57:18.140]   He was a smart guy.
[00:57:18.140 --> 00:57:21.020]   He did a lot of the work on the first draft of the spec,
[00:57:21.020 --> 00:57:22.780]   Sean Katzenberger, he's left Microsoft.
[00:57:22.780 --> 00:57:25.260]   He even did what I sort of did.
[00:57:25.260 --> 00:57:27.980]   He told his bosses, stop bugging me to do other things.
[00:57:27.980 --> 00:57:28.940]   I'm focused on this
[00:57:28.940 --> 00:57:30.580]   'cause it took a lot of focused work
[00:57:30.580 --> 00:57:31.940]   to create the first draft of the spec.
[00:57:31.940 --> 00:57:33.540]   And I was still holding,
[00:57:33.540 --> 00:57:34.900]   I was spending almost all the plates.
[00:57:34.900 --> 00:57:37.220]   I had like part-time help in certain areas
[00:57:37.220 --> 00:57:38.740]   and on the front end integrations,
[00:57:38.740 --> 00:57:40.100]   I had the front end guys.
[00:57:40.100 --> 00:57:42.620]   But I couldn't take as much time as Sean was
[00:57:42.620 --> 00:57:43.660]   to write the draft spec,
[00:57:43.660 --> 00:57:44.660]   but I had to participate
[00:57:44.660 --> 00:57:46.880]   because I was essentially helping write down
[00:57:46.880 --> 00:57:48.020]   what the language did.
[00:57:48.020 --> 00:57:50.180]   And in areas where we didn't like what it did
[00:57:50.180 --> 00:57:51.620]   and Microsoft didn't agree,
[00:57:51.620 --> 00:57:54.580]   we sometimes got away with slight changes.
[00:57:54.580 --> 00:57:55.780]   And that's the story of standards.
[00:57:55.780 --> 00:57:57.980]   You have different implementations
[00:57:57.980 --> 00:57:59.820]   and depending on their market power,
[00:57:59.820 --> 00:58:01.820]   they interoperate where you have agreement
[00:58:01.820 --> 00:58:02.780]   and where they don't,
[00:58:02.780 --> 00:58:05.900]   the dominant one usually sets the de facto standard.
[00:58:05.900 --> 00:58:07.500]   And then you should probably reflect that
[00:58:07.500 --> 00:58:09.340]   into the de jure standard.
[00:58:09.340 --> 00:58:11.060]   And this happened with JavaScript.
[00:58:11.060 --> 00:58:14.140]   Over time as Netscape went down and Microsoft went up,
[00:58:14.140 --> 00:58:18.180]   we did the first edition of the standard codified in 1997.
[00:58:18.180 --> 00:58:20.540]   In France, we had a trip to Nice,
[00:58:20.540 --> 00:58:22.140]   which was very memorable.
[00:58:22.140 --> 00:58:24.540]   - For any interesting reason or just because it's Nice?
[00:58:24.540 --> 00:58:28.980]   - And ECMA's European and IBM and others were there.
[00:58:28.980 --> 00:58:31.340]   Mike Kalashaw, an IBM fellow was a British.
[00:58:31.340 --> 00:58:34.460]   And the guy who ran ECMA at the time,
[00:58:34.460 --> 00:58:37.740]   Jan van den Bel was quite a raconteur
[00:58:37.740 --> 00:58:39.060]   and a very fun guy.
[00:58:39.060 --> 00:58:41.540]   And he had us out for the great,
[00:58:41.540 --> 00:58:43.500]   "Fui de mer," the bouillabaisse.
[00:58:43.500 --> 00:58:46.140]   - Was the standardization process beautiful or painful
[00:58:46.140 --> 00:58:48.500]   that those early days, you as a designer of the language?
[00:58:48.500 --> 00:58:50.140]   - It was painful because it was rushed.
[00:58:50.140 --> 00:58:52.420]   Now, Guy Steele was contributed by Sun.
[00:58:52.420 --> 00:58:53.620]   So even more than Sean,
[00:58:53.620 --> 00:58:55.980]   you had this giant brain, Guy Steele helping,
[00:58:55.980 --> 00:58:57.220]   bringing some of that scheme magic.
[00:58:57.220 --> 00:58:59.500]   He even brought Richard Gabriel for fun.
[00:58:59.500 --> 00:59:02.900]   Richard wrote the fourth clause of the ECMA standard,
[00:59:02.900 --> 00:59:05.260]   which was kind of an intro to what JavaScript's all about.
[00:59:05.260 --> 00:59:07.220]   So we had some really good people.
[00:59:07.220 --> 00:59:09.100]   And we didn't fight too much.
[00:59:09.100 --> 00:59:11.460]   There was some tension where I was fixing bugs
[00:59:11.460 --> 00:59:12.700]   and I was late to a meeting.
[00:59:12.700 --> 00:59:14.980]   And Sean Katzenberger of Microsoft was actually mad.
[00:59:14.980 --> 00:59:16.580]   Like, "Where is he? We need him."
[00:59:16.580 --> 00:59:18.620]   And when I got there,
[00:59:18.620 --> 00:59:21.860]   I saw that only he saw this sort of off by one bug
[00:59:21.860 --> 00:59:22.920]   and somewhere in the spec.
[00:59:22.920 --> 00:59:23.980]   And then I saw it too.
[00:59:23.980 --> 00:59:25.260]   And I said, "There's a fence post bug there."
[00:59:25.260 --> 00:59:26.980]   And then we kind of locked eyes
[00:59:26.980 --> 00:59:28.460]   and we realized we were on the same page.
[00:59:28.460 --> 00:59:30.260]   And we kind of, he wasn't mad anymore.
[00:59:30.260 --> 00:59:33.020]   - What were the features that are being struggled over
[00:59:33.020 --> 00:59:34.980]   and debated and thought about?
[00:59:34.980 --> 00:59:36.500]   - It was mainly writing down what worked
[00:59:36.500 --> 00:59:38.420]   and what we thought should work in the edge cases
[00:59:38.420 --> 00:59:41.540]   that didn't interoperate or that seemed wrong.
[00:59:41.540 --> 00:59:43.100]   But we were already laying the groundwork
[00:59:43.100 --> 00:59:46.220]   for the future editions that I was already implementing.
[00:59:46.220 --> 00:59:48.100]   I was still trying to lead the standard
[00:59:48.100 --> 00:59:50.100]   by using the dominant market power
[00:59:50.100 --> 00:59:52.500]   to write the code that actually shipped.
[00:59:52.500 --> 00:59:54.740]   So the de facto standard would lead the de jure standard.
[00:59:54.740 --> 00:59:58.220]   And I was putting in the missing function forms
[00:59:58.220 --> 01:00:00.500]   that I didn't have time for in the 10 days.
[01:00:00.500 --> 01:00:02.180]   - So this is the engineering mindset
[01:00:02.180 --> 01:00:03.500]   versus the theoretician.
[01:00:03.500 --> 01:00:05.120]   So you didn't want to create the perfect language,
[01:00:05.120 --> 01:00:06.940]   but one that was popular and shipped
[01:00:06.940 --> 01:00:07.780]   and all that kind of stuff.
[01:00:07.780 --> 01:00:08.620]   - And you could say there was,
[01:00:08.620 --> 01:00:09.940]   I was standing on the shoulders of giants.
[01:00:09.940 --> 01:00:12.500]   So there was a staged process where I had to hold back
[01:00:12.500 --> 01:00:15.220]   things that were well designed by others
[01:00:15.220 --> 01:00:17.260]   in other languages that I could imitate.
[01:00:17.260 --> 01:00:18.540]   But I couldn't do them all in the 10 days.
[01:00:18.540 --> 01:00:22.820]   So they came in in 1996 and '97.
[01:00:22.820 --> 01:00:25.140]   And they came into the third edition of the standard,
[01:00:25.140 --> 01:00:27.680]   which was finalized in 1999.
[01:00:27.680 --> 01:00:30.460]   But at that point, Netscape had been sold to AOL
[01:00:30.460 --> 01:00:33.140]   and was, which was a decent exit considering.
[01:00:33.140 --> 01:00:37.400]   And had previously been mercilessly crushed.
[01:00:37.400 --> 01:00:40.680]   Netscape was selling the browser along with server software
[01:00:40.680 --> 01:00:42.760]   that it had acquired after its IPO.
[01:00:42.760 --> 01:00:44.560]   And Microsoft was just underpricing it.
[01:00:44.560 --> 01:00:47.480]   So there was no way to compete with that.
[01:00:47.480 --> 01:00:51.440]   Microsoft was also making Internet Explorer
[01:00:51.440 --> 01:00:53.140]   the default browser in Windows,
[01:00:53.140 --> 01:00:55.560]   which is called tying in antitrust law.
[01:00:55.560 --> 01:00:57.140]   And they were doing even more brutal things.
[01:00:57.140 --> 01:01:00.340]   There's a famous investor, he did very well on Google.
[01:01:00.340 --> 01:01:01.800]   So he's a billionaire, Ram Shriram.
[01:01:01.800 --> 01:01:04.680]   He was sales guy or head of sales at Netscape.
[01:01:04.680 --> 01:01:07.920]   And he got off the phone looking ashen faced
[01:01:07.920 --> 01:01:09.620]   after Compaq called and said,
[01:01:09.620 --> 01:01:12.000]   "Microsoft just told us they're gonna pull
[01:01:12.000 --> 01:01:13.800]   "our Windows license if we ship Netscape
[01:01:13.800 --> 01:01:15.080]   "as the default browser."
[01:01:15.080 --> 01:01:15.920]   - Wow.
[01:01:15.920 --> 01:01:17.440]   So there is some bullying going on.
[01:01:17.440 --> 01:01:19.720]   - It was totally immaterial in the antitrust case.
[01:01:19.720 --> 01:01:23.080]   But JavaScript escaped into the standard setting
[01:01:23.080 --> 01:01:24.900]   where there was fairly good cooperation.
[01:01:24.900 --> 01:01:26.880]   Microsoft had a really good guy on it.
[01:01:26.880 --> 01:01:29.440]   And Guy Steele was there for a time.
[01:01:29.440 --> 01:01:30.920]   And there was some good work.
[01:01:30.920 --> 01:01:35.200]   But after the antitrust case and Netscape
[01:01:35.200 --> 01:01:37.480]   kind of dissolving into AOL
[01:01:37.480 --> 01:01:38.920]   and not really going anywhere quickly,
[01:01:38.920 --> 01:01:40.940]   Mozilla took years to really bring up,
[01:01:40.940 --> 01:01:43.400]   the standard froze.
[01:01:43.400 --> 01:01:46.300]   And by 2003, even though they'd been sort of noodling around
[01:01:46.300 --> 01:01:48.880]   with advanced versions, JavaScript 2,
[01:01:48.880 --> 01:01:50.280]   I'd given the keys to the kingdom
[01:01:50.280 --> 01:01:53.040]   to another MIT grad, Baltimore Horwatt.
[01:01:53.040 --> 01:01:54.880]   Very big brain, still at Google, I think.
[01:01:54.880 --> 01:01:56.600]   He won the Putnam in '86.
[01:01:56.600 --> 01:01:58.360]   So he's, yeah, very mathematical.
[01:01:58.360 --> 01:01:59.600]   - Legit.
[01:01:59.600 --> 01:02:02.960]   - He designed the successor language, JavaScript 2,
[01:02:02.960 --> 01:02:06.600]   but it only showed up in mutated form
[01:02:06.600 --> 01:02:09.560]   in Microsoft's ASP.NET server side.
[01:02:09.560 --> 01:02:11.120]   And it didn't last there.
[01:02:11.120 --> 01:02:12.320]   And it showed up in Flash.
[01:02:12.320 --> 01:02:14.640]   And that's what became ActionScript 3.
[01:02:14.640 --> 01:02:15.960]   - Ah, ActionScript.
[01:02:15.960 --> 01:02:16.800]   Interesting.
[01:02:16.800 --> 01:02:18.720]   And then Flash was declined.
[01:02:18.720 --> 01:02:21.280]   And so how did we arrive at ES6,
[01:02:21.280 --> 01:02:24.080]   where it's like, there's so many,
[01:02:24.080 --> 01:02:27.200]   where everyone, okay, there's this history of JavaScript
[01:02:27.200 --> 01:02:29.200]   that people were, it was just like, cool,
[01:02:29.200 --> 01:02:32.520]   when you're having beers to talk crap about JavaScript.
[01:02:32.520 --> 01:02:35.280]   Everyone loves to hate, like people who are married say,
[01:02:35.280 --> 01:02:38.880]   ah, marriage sucks, is they just wanna let off some steam,
[01:02:38.880 --> 01:02:40.880]   even though everyone uses the language.
[01:02:40.880 --> 01:02:43.480]   But ES6, it's become this,
[01:02:43.480 --> 01:02:49.200]   it fixed major pain points, I think.
[01:02:49.200 --> 01:02:50.400]   - It added things to the language
[01:02:50.400 --> 01:02:53.600]   and added something that was already ES5 strict mode,
[01:02:53.600 --> 01:02:57.280]   but made it implicit in class bodies and module bodies.
[01:02:57.280 --> 01:02:59.480]   It was a big jump, but it accumulated
[01:02:59.480 --> 01:03:03.640]   some of the ES4 designs that we'd done with Adobe
[01:03:03.640 --> 01:03:07.680]   for what we hoped would be the fourth edition of ECMAScript
[01:03:07.680 --> 01:03:10.520]   that were supposed to fold in some of these old JavaScript,
[01:03:10.520 --> 01:03:13.080]   two ideas that had come into ActionScript 3.
[01:03:13.080 --> 01:03:15.240]   So you look at the family tree and you see these forks,
[01:03:15.240 --> 01:03:20.240]   and the main ones are the ones that go into Adobe Flash,
[01:03:20.240 --> 01:03:22.040]   acquired from Acromedia,
[01:03:22.040 --> 01:03:23.560]   and the one that went into the server side
[01:03:23.560 --> 01:03:26.000]   of Microsoft's stack, which kind of died.
[01:03:27.060 --> 01:03:28.840]   And then trying to bring them back into the standard,
[01:03:28.840 --> 01:03:32.240]   and not quite succeeding, ES4 was mothballed.
[01:03:32.240 --> 01:03:34.300]   But all the good parts that everyone liked
[01:03:34.300 --> 01:03:35.800]   made it into ES6.
[01:03:35.800 --> 01:03:37.000]   And so that was a success.
[01:03:37.000 --> 01:03:38.320]   And I said earlier, I had the wrong year,
[01:03:38.320 --> 01:03:40.360]   I think it's 2015, so it's off by--
[01:03:40.360 --> 01:03:41.200]   - For ES6.
[01:03:41.200 --> 01:03:44.280]   - Yeah, it was done, finalized in 2015.
[01:03:44.280 --> 01:03:45.560]   It took a little longer than we hoped,
[01:03:45.560 --> 01:03:48.560]   but 'cause ES5 was 2009,
[01:03:48.560 --> 01:03:51.540]   and that was a smaller increment from ES3.
[01:03:51.540 --> 01:03:53.520]   We skipped four again, we mothballed it.
[01:03:53.520 --> 01:03:55.480]   And we had a split in the committee
[01:03:55.480 --> 01:03:57.480]   where some people said, ES4 is too big,
[01:03:57.480 --> 01:03:59.540]   we're gonna work on incremental improvements,
[01:03:59.540 --> 01:04:02.580]   no new syntax in particular, they promised.
[01:04:02.580 --> 01:04:06.300]   Not quite true, but they added a bunch of interesting APIs,
[01:04:06.300 --> 01:04:09.880]   Alan Weir-Sprock, my co-author of the Hubble paper.
[01:04:09.880 --> 01:04:11.140]   And he was at Microsoft at the time,
[01:04:11.140 --> 01:04:12.300]   I ended up hiring him at Mozilla,
[01:04:12.300 --> 01:04:15.260]   he wanted to get to Mozilla and keep doing
[01:04:15.260 --> 01:04:19.660]   the sort of editor job of the JavaScript standard,
[01:04:19.660 --> 01:04:21.300]   ECMAScript.
[01:04:21.300 --> 01:04:24.640]   And when we got ES6 done, it was a little late,
[01:04:24.640 --> 01:04:27.180]   2015, and we switched to year numbers.
[01:04:27.180 --> 01:04:30.100]   So people still call it ES6, I call it ES6.
[01:04:30.100 --> 01:04:33.100]   But if you remember, off by nine, plus 2000.
[01:04:33.100 --> 01:04:35.780]   - Yeah, I mean, ES6 is such a big job.
[01:04:35.780 --> 01:04:37.620]   I mean, like you said, there's a thread
[01:04:37.620 --> 01:04:39.260]   that connects all of it, but ES6 is one
[01:04:39.260 --> 01:04:41.100]   that's like, became this language
[01:04:41.100 --> 01:04:45.180]   that almost feels ready to take over the world completely.
[01:04:45.180 --> 01:04:46.660]   - More programming in the large features,
[01:04:46.660 --> 01:04:49.380]   more features you need for larger teams.
[01:04:49.380 --> 01:04:50.300]   - Software engineering.
[01:04:50.300 --> 01:04:51.580]   - Microsoft did something smart too,
[01:04:52.240 --> 01:04:56.240]   Anders and company, Luke Hoban, who's left Microsoft,
[01:04:56.240 --> 01:04:57.800]   also did TypeScript.
[01:04:57.800 --> 01:05:00.400]   And they realized something, I think,
[01:05:00.400 --> 01:05:02.760]   that Gilad Brak has also popularized,
[01:05:02.760 --> 01:05:05.720]   and he was involved in Dart at Google.
[01:05:05.720 --> 01:05:08.840]   If you, don't worry about soundness in the type system,
[01:05:08.840 --> 01:05:10.920]   you don't try to enforce type checks
[01:05:10.920 --> 01:05:12.280]   at runtime in particular, just use it
[01:05:12.280 --> 01:05:15.040]   as sort of a warning system, a tool time type system,
[01:05:15.040 --> 01:05:17.680]   you can still have a lot of value for developers,
[01:05:17.680 --> 01:05:19.280]   especially in large projects.
[01:05:19.280 --> 01:05:21.240]   So TypeScript's been a roaring success for Microsoft.
[01:05:21.240 --> 01:05:24.120]   - What do you think about TypeScript?
[01:05:24.120 --> 01:05:27.360]   Is it adding confusion or is it ultimately beneficial?
[01:05:27.360 --> 01:05:28.200]   - I think it's beneficial.
[01:05:28.200 --> 01:05:30.920]   Now, it's technically a superset of JavaScript,
[01:05:30.920 --> 01:05:32.080]   so of course I love it.
[01:05:32.080 --> 01:05:33.360]   (laughs)
[01:05:33.360 --> 01:05:35.560]   The shortest JavaScript program
[01:05:35.560 --> 01:05:36.640]   is still a TypeScript program.
[01:05:36.640 --> 01:05:38.520]   Any JavaScript program is a TypeScript program,
[01:05:38.520 --> 01:05:40.020]   which is brilliant 'cause then you can start
[01:05:40.020 --> 01:05:41.800]   incrementally adding type annotations,
[01:05:41.800 --> 01:05:44.440]   getting warnings, learning how to use them.
[01:05:44.440 --> 01:05:47.160]   Microsoft's had to kind of look around corners
[01:05:47.160 --> 01:05:49.920]   at the standards body and guess how their version
[01:05:49.920 --> 01:05:52.480]   of modules or decorators should work.
[01:05:52.480 --> 01:05:55.400]   And the standards body then may change things a bit.
[01:05:55.400 --> 01:05:57.640]   So I think they're obligated with TypeScript
[01:05:57.640 --> 01:05:59.320]   either to carry their own version
[01:05:59.320 --> 01:06:01.680]   or to bring it back with incompatible changes
[01:06:01.680 --> 01:06:03.120]   towards the standard over time.
[01:06:03.120 --> 01:06:05.440]   And I think they've played generally fair there.
[01:06:05.440 --> 01:06:06.480]   There's some sentiment that,
[01:06:06.480 --> 01:06:07.980]   why don't they standardize TypeScript?
[01:06:07.980 --> 01:06:09.920]   Well, they've been clear they don't want to.
[01:06:09.920 --> 01:06:11.880]   They have a proprietary investment, it's valuable,
[01:06:11.880 --> 01:06:13.440]   they have control of the ball.
[01:06:13.440 --> 01:06:15.840]   And in some ways you can say the same thing
[01:06:15.840 --> 01:06:18.120]   to any of the other big companies in the standards body,
[01:06:18.120 --> 01:06:20.600]   why doesn't Google standardize its stuff?
[01:06:20.600 --> 01:06:22.280]   - So you think it'll continue being
[01:06:22.280 --> 01:06:24.640]   like a kind of a dance partner to JavaScript,
[01:06:24.640 --> 01:06:25.880]   to the base JavaScript?
[01:06:25.880 --> 01:06:27.640]   - There's a hope that at some point,
[01:06:27.640 --> 01:06:29.800]   if they keep reconverging it and the standard
[01:06:29.800 --> 01:06:32.040]   doesn't break them and goes in a good direction,
[01:06:32.040 --> 01:06:34.800]   we will get at least the annotation syntax
[01:06:34.800 --> 01:06:37.040]   and some semantics around them.
[01:06:37.040 --> 01:06:39.020]   Because when you're talking about type annotations,
[01:06:39.020 --> 01:06:42.360]   they're generally on parameters and return values
[01:06:42.360 --> 01:06:45.560]   and variable declarations, they're cast operators.
[01:06:45.560 --> 01:06:47.280]   You want that syntax to be reserved
[01:06:47.280 --> 01:06:50.000]   and you want it to work the same in all engines.
[01:06:50.000 --> 01:06:51.560]   And this is where ideas like GILAD's
[01:06:51.560 --> 01:06:54.240]   pluggable type systems might be good,
[01:06:54.240 --> 01:06:55.840]   though then you could create the same problem
[01:06:55.840 --> 01:06:56.960]   you have with Lisp and Scheme,
[01:06:56.960 --> 01:06:58.560]   where there's a bunch of macro libraries
[01:06:58.560 --> 01:07:01.720]   and they don't agree and you have conflicts between them.
[01:07:01.720 --> 01:07:04.960]   But pluggable type systems could be one way to standardize.
[01:07:04.960 --> 01:07:07.040]   - What do you think about the giant ecosystem
[01:07:07.040 --> 01:07:09.840]   of frameworks in JavaScript?
[01:07:09.840 --> 01:07:12.840]   It feels like, because, I mean,
[01:07:12.840 --> 01:07:16.040]   this is a side effect of how many people use JavaScript,
[01:07:16.040 --> 01:07:18.960]   a lot of entrepreneurial spirit,
[01:07:18.960 --> 01:07:22.320]   like create their own JavaScript frameworks.
[01:07:22.320 --> 01:07:27.280]   And they're actually awesome in all different ways.
[01:07:27.280 --> 01:07:31.200]   And this is an interesting question
[01:07:31.200 --> 01:07:33.200]   about almost like philosophically
[01:07:33.200 --> 01:07:35.280]   about biological system and evolution,
[01:07:35.280 --> 01:07:36.160]   all that kind of stuff.
[01:07:36.160 --> 01:07:38.600]   Do you see that as good or should it,
[01:07:38.600 --> 01:07:40.400]   should some of them die out quicker?
[01:07:40.400 --> 01:07:41.880]   - I think that maybe they should.
[01:07:41.880 --> 01:07:44.840]   Now jQuery was a very clever thing.
[01:07:44.840 --> 01:07:47.600]   John Resig made this library that was sort of query and do
[01:07:47.600 --> 01:07:50.000]   and blended sort of CSS selector syntax
[01:07:50.000 --> 01:07:53.000]   with JavaScript sort of object graph or DOM querying
[01:07:53.000 --> 01:07:54.920]   and made it very easy for people to do things
[01:07:54.920 --> 01:07:57.680]   almost like they were learning jQuery as its own language,
[01:07:57.680 --> 01:07:58.960]   domain-specific language.
[01:07:58.960 --> 01:08:02.080]   And that I think reflected in part
[01:08:02.080 --> 01:08:04.960]   the difficulty of using the document object model,
[01:08:04.960 --> 01:08:07.040]   these APIs that were originally designed in the '90s
[01:08:07.040 --> 01:08:08.440]   for Java as well as JavaScript.
[01:08:08.440 --> 01:08:11.720]   They were very object-oriented or even procedural.
[01:08:11.720 --> 01:08:13.360]   They were very kind of verbose.
[01:08:13.360 --> 01:08:15.440]   And it took like a constructor call
[01:08:15.440 --> 01:08:18.400]   and three different hokey-pokey dances to do something,
[01:08:18.400 --> 01:08:20.720]   whereas in jQuery, it's just one line.
[01:08:20.720 --> 01:08:24.520]   So that fed back finally into the standards.
[01:08:24.520 --> 01:08:25.960]   It didn't mean we standardized jQuery.
[01:08:25.960 --> 01:08:27.120]   It wasn't quite that concise.
[01:08:27.120 --> 01:08:29.680]   But you find now with the modern standards
[01:08:29.680 --> 01:08:34.680]   that we were working on in the HTML5 sort of effort,
[01:08:34.680 --> 01:08:35.840]   that things became simpler,
[01:08:35.840 --> 01:08:38.840]   the fetch API and the query selector API,
[01:08:38.840 --> 01:08:40.120]   document.querySelector.
[01:08:40.120 --> 01:08:42.560]   A lot of things can be done now in raw JavaScript
[01:08:42.560 --> 01:08:46.640]   that you would make more concise and terse in jQuery,
[01:08:46.640 --> 01:08:48.000]   but it's not bad.
[01:08:48.000 --> 01:08:48.840]   It's pretty good.
[01:08:48.840 --> 01:08:51.120]   Whereas in the old DOM of 15 years ago,
[01:08:51.120 --> 01:08:51.960]   it was just too verbose.
[01:08:51.960 --> 01:08:53.800]   - So maybe the frameworks were born
[01:08:53.800 --> 01:08:59.000]   because JavaScript lacked some of the features of jQuery.
[01:08:59.000 --> 01:09:03.520]   And so now that JavaScript is swallowing what jQuery was,
[01:09:03.520 --> 01:09:05.240]   then the frameworks will,
[01:09:05.240 --> 01:09:07.840]   only the ones that truly add value will stick around
[01:09:07.840 --> 01:09:09.000]   and the other ones will die out.
[01:09:09.000 --> 01:09:10.680]   - And that highlights also this division
[01:09:10.680 --> 01:09:12.320]   between the core language JavaScript,
[01:09:12.320 --> 01:09:13.600]   which can show up in other places
[01:09:13.600 --> 01:09:15.680]   like Node.js on the server side
[01:09:15.680 --> 01:09:17.680]   and the browser specific APIs
[01:09:17.680 --> 01:09:19.720]   or the document object model APIs,
[01:09:19.720 --> 01:09:21.560]   which are even managed by the W3C,
[01:09:21.560 --> 01:09:23.800]   the standards body that was off in XML
[01:09:23.800 --> 01:09:25.320]   while I land on we were doing
[01:09:25.320 --> 01:09:26.960]   real JavaScript standards in ECMA.
[01:09:26.960 --> 01:09:30.280]   And you have this division of labor,
[01:09:30.280 --> 01:09:33.240]   division of responsibility and division of style
[01:09:33.240 --> 01:09:37.240]   and sort of aesthetics and also speed.
[01:09:37.240 --> 01:09:39.600]   So the document object model really stagnated
[01:09:39.600 --> 01:09:43.560]   after Microsoft kind of de-invested in the web.
[01:09:43.560 --> 01:09:45.880]   And Microsoft did something in their haste
[01:09:45.880 --> 01:09:46.880]   in the spirit of Netscape,
[01:09:46.880 --> 01:09:49.760]   doing things quickly and getting on first called DHTML.
[01:09:49.760 --> 01:09:51.320]   And some of their innovations
[01:09:51.320 --> 01:09:53.680]   that were like an alternative document object model
[01:09:53.680 --> 01:09:56.840]   didn't really get standardized until HTML5
[01:09:56.840 --> 01:10:00.040]   when we pragmatists set up for at the time,
[01:10:00.040 --> 01:10:03.640]   Ian Hickson, who went to Google, Apple and Mozilla said,
[01:10:03.640 --> 01:10:07.160]   "XML is not gonna replace HTML.
[01:10:07.160 --> 01:10:08.720]   HTML4 is too old.
[01:10:08.720 --> 01:10:12.160]   Let's standardize HTML5 based on all this good stuff,
[01:10:12.160 --> 01:10:15.000]   including that DHTML variant, dynamic HTML.
[01:10:15.000 --> 01:10:17.240]   - HTML5, it feels like to me,
[01:10:17.240 --> 01:10:18.120]   maybe you can correct me,
[01:10:18.120 --> 01:10:21.120]   like a beautiful piece of design work.
[01:10:21.120 --> 01:10:24.880]   It's not often with web stuff,
[01:10:24.880 --> 01:10:27.320]   you have this breath of just like,
[01:10:27.320 --> 01:10:31.320]   oh, whoever did this, this just feels good.
[01:10:31.320 --> 01:10:34.280]   What are your thoughts about HTML?
[01:10:34.280 --> 01:10:35.840]   Am I being too romantic?
[01:10:35.840 --> 01:10:36.800]   - A little bit, a little bit.
[01:10:36.800 --> 01:10:38.680]   - Are there flaws, fundamental flaws to it
[01:10:38.680 --> 01:10:40.080]   that I'm just not aware of?
[01:10:40.080 --> 01:10:42.560]   - My old friend Hicksey did a great job.
[01:10:42.560 --> 01:10:45.760]   He was another renegade physics student.
[01:10:45.760 --> 01:10:48.000]   And he was basically a QA guy at opera,
[01:10:48.000 --> 01:10:52.520]   but he obviously trained physics student
[01:10:52.520 --> 01:10:54.720]   and someone who could write, a Britisher.
[01:10:54.720 --> 01:10:57.840]   He developed test suites
[01:10:57.840 --> 01:11:00.920]   and he started thinking about them more axiomatically.
[01:11:00.920 --> 01:11:03.960]   Now this can be good because you can sort of systematize
[01:11:03.960 --> 01:11:06.000]   in a way that makes a better HTML,
[01:11:06.000 --> 01:11:08.080]   or you can get caught in the pragmatism of saying,
[01:11:08.080 --> 01:11:09.840]   well, we have to handle all of these edge cases,
[01:11:09.840 --> 01:11:12.560]   so we're just gonna have sort of a test matrix.
[01:11:12.560 --> 01:11:14.000]   And if the matrix is large,
[01:11:14.000 --> 01:11:15.880]   it will not be beautiful by many people's lights.
[01:11:15.880 --> 01:11:19.320]   Everyone likes to minimize along their preferred dimensions,
[01:11:19.320 --> 01:11:21.680]   the seven special forms and scheme or whatever.
[01:11:21.680 --> 01:11:26.680]   But reality is HTML needs to be big.
[01:11:26.680 --> 01:11:30.400]   It's kind of shambolic, it's a creative multi-paradigm.
[01:11:30.400 --> 01:11:34.380]   And Hicksey did a good job, I would say, with a bunch of it.
[01:11:34.380 --> 01:11:36.640]   Other people came in in the spirit of Ian Hickson
[01:11:36.640 --> 01:11:40.240]   to do HTML5 work and they've carried on that effort.
[01:11:40.240 --> 01:11:42.640]   And so it's a mix of pragmatism,
[01:11:42.640 --> 01:11:46.280]   de facto standards from the past being sort of combined
[01:11:46.280 --> 01:11:47.580]   or written down for the first time,
[01:11:47.580 --> 01:11:50.300]   and then rethought in a way that has a simpler syntax,
[01:11:50.300 --> 01:11:54.400]   like the fetch API instead of XMLHTTP request.
[01:11:54.400 --> 01:11:55.440]   - This video too as well,
[01:11:55.440 --> 01:11:58.080]   it ultimately, it feels like, maybe you can correct me,
[01:11:58.080 --> 01:12:01.200]   it feels like it was the nail in the coffin of Flash.
[01:12:01.200 --> 01:12:03.040]   - Steve Jobs saying no Flash on the iPhone,
[01:12:03.040 --> 01:12:05.460]   in my opinion, was the actual stake to the heart.
[01:12:05.460 --> 01:12:09.160]   But, well, I'm not sure what trope you wanna use.
[01:12:09.160 --> 01:12:12.080]   Flash was a zombie until just this year, right,
[01:12:12.080 --> 01:12:14.160]   or last year, I think last year was the end of Flash
[01:12:14.160 --> 01:12:15.240]   in main browsers.
[01:12:15.240 --> 01:12:18.280]   But Jobs really did the death blow.
[01:12:18.280 --> 01:12:23.040]   And yet, you're right, we had to make HTML5 competitive.
[01:12:23.040 --> 01:12:24.960]   I still don't think we got that beautiful
[01:12:24.960 --> 01:12:26.760]   timeline animation.
[01:12:26.760 --> 01:12:28.600]   - The timeline thing, so you like the time,
[01:12:28.600 --> 01:12:31.880]   I mean, me from, I used to animate all kinds of stuff
[01:12:31.880 --> 01:12:34.920]   inside Flash, plus there's a programming element.
[01:12:34.920 --> 01:12:38.220]   It was a little bit, I don't know if you can comment
[01:12:38.220 --> 01:12:39.860]   on that, but to me, it was a little bit like
[01:12:39.860 --> 01:12:42.640]   go-to statement, like in a sense that
[01:12:42.640 --> 01:12:44.900]   it was a little bit too chaotic.
[01:12:44.900 --> 01:12:48.360]   Like it didn't, that OCD part of me as a programmer
[01:12:48.360 --> 01:12:50.180]   wasn't satisfied by Flash.
[01:12:50.180 --> 01:12:52.760]   It feels like there was bugs that were introduced
[01:12:52.760 --> 01:12:55.340]   through the animation process that I couldn't debug easily.
[01:12:55.340 --> 01:12:56.620]   - Yes, I heard that too.
[01:12:56.620 --> 01:12:59.260]   I didn't use it, so I'm doing the grass is greener thing
[01:12:59.260 --> 01:13:00.100]   here.
[01:13:00.100 --> 01:13:02.100]   The thing I liked about the animation model
[01:13:02.100 --> 01:13:03.900]   was that it was this immutable function of time,
[01:13:03.900 --> 01:13:06.220]   so you could time warp and you could,
[01:13:06.220 --> 01:13:08.320]   if you dodged these bugs or worked carefully,
[01:13:08.320 --> 01:13:10.660]   you could really make it sing in ways that I think
[01:13:10.660 --> 01:13:14.620]   still a little challenging with web animation standards,
[01:13:14.620 --> 01:13:18.140]   but, or just using raw canvas and WebGL.
[01:13:18.140 --> 01:13:20.740]   But there's so many tools now that maybe it doesn't matter.
[01:13:20.740 --> 01:13:25.740]   And yet we had to do video, we had to do WebGL
[01:13:25.740 --> 01:13:27.820]   and then evolve it.
[01:13:27.820 --> 01:13:29.180]   We had to do web audio.
[01:13:30.060 --> 01:13:34.140]   But once we did all these things that helped Flash die,
[01:13:34.140 --> 01:13:37.380]   thanks to Steve Goves, we had something that
[01:13:37.380 --> 01:13:39.580]   people didn't realize.
[01:13:39.580 --> 01:13:41.180]   We had that vision that Mark and Jason had,
[01:13:41.180 --> 01:13:46.180]   this graphics capable to the metal, portable runtime.
[01:13:46.180 --> 01:13:51.600]   And we at Mozilla realized this and we saw JavaScript
[01:13:51.600 --> 01:13:53.340]   was something that you could compile to.
[01:13:53.340 --> 01:13:55.620]   Adobe had somebody in the Adobe labs doing this too.
[01:13:55.620 --> 01:13:57.220]   He had a project called Alchemy.
[01:13:57.220 --> 01:13:59.020]   We had somebody who's now at Google,
[01:13:59.020 --> 01:14:03.220]   Alon Zakai, who did his own LLVM based compiler
[01:14:03.220 --> 01:14:06.140]   that would take C or C++ and it would emit JavaScript.
[01:14:06.140 --> 01:14:07.620]   And you would think this is crazy.
[01:14:07.620 --> 01:14:09.820]   You're going from this sort of machine types,
[01:14:09.820 --> 01:14:13.080]   low level, controlled memory allocation language
[01:14:13.080 --> 01:14:16.340]   to this garbage collected dynamically typed,
[01:14:16.340 --> 01:14:18.020]   high level, higher level language.
[01:14:18.020 --> 01:14:22.420]   But Alon sort of just phenomenologically carved nature
[01:14:22.420 --> 01:14:23.700]   of the joint and found the forms
[01:14:23.700 --> 01:14:25.580]   that were fast in JavaScript.
[01:14:25.580 --> 01:14:28.220]   And then with Dave Herman, who I'd recruited
[01:14:28.220 --> 01:14:31.220]   from Northeastern University, who was a type theorist,
[01:14:31.220 --> 01:14:33.800]   and Luke Wagner, who's still at Mozilla,
[01:14:33.800 --> 01:14:36.820]   who was the compiler guy and the JIT guy,
[01:14:36.820 --> 01:14:40.180]   they figured out how to codify what Alon had done
[01:14:40.180 --> 01:14:44.260]   into a typed subset of JavaScript called Asm.js.
[01:14:44.260 --> 01:14:45.660]   And this is a strange thing to think about
[01:14:45.660 --> 01:14:47.260]   because it doesn't have new syntax.
[01:14:47.260 --> 01:14:52.260]   The types are casts that occur in dominator positions
[01:14:52.260 --> 01:14:54.140]   in the control flow graph.
[01:14:54.140 --> 01:14:56.740]   So it's like a hack on JavaScript and it's a subset.
[01:14:56.740 --> 01:14:58.380]   And it uses those bitwise operators
[01:14:58.380 --> 01:15:00.420]   that I talked about copying from Java
[01:15:00.420 --> 01:15:04.480]   to basically cast numeric types,
[01:15:04.480 --> 01:15:06.980]   which are double precision point into integers.
[01:15:06.980 --> 01:15:08.940]   And so inside JavaScript,
[01:15:08.940 --> 01:15:11.700]   in the kernel semantics are integers.
[01:15:11.700 --> 01:15:13.040]   And if you use these operators,
[01:15:13.040 --> 01:15:15.580]   if a compiler emits them in the right places,
[01:15:15.580 --> 01:15:18.500]   you can then treat them as typed values,
[01:15:18.500 --> 01:15:22.380]   typed memory locations, and you can type check your program.
[01:15:22.380 --> 01:15:24.940]   You can not only type check it, you can compile it.
[01:15:24.940 --> 01:15:26.420]   This is all in sort of linear time.
[01:15:26.420 --> 01:15:29.020]   Oh, and you can compile it
[01:15:29.020 --> 01:15:30.420]   to have deterministic performance.
[01:15:30.420 --> 01:15:32.580]   It doesn't touch the garbage collector.
[01:15:32.580 --> 01:15:35.460]   It calls a bunch of functions that come from the C functions
[01:15:35.460 --> 01:15:37.460]   or C++ code that you're compiling.
[01:15:37.460 --> 01:15:40.940]   And you can make the epic Unreal Engine
[01:15:40.940 --> 01:15:43.580]   go in 30 frames a second.
[01:15:43.580 --> 01:15:46.860]   And when we did this in 2013 in the fall,
[01:15:46.860 --> 01:15:50.140]   Tim Sweeney, I bet, didn't think it could be done quickly.
[01:15:50.140 --> 01:15:51.540]   He thought it would take years.
[01:15:51.540 --> 01:15:54.060]   And the team went to Raleigh to Epic,
[01:15:54.060 --> 01:15:57.420]   and in four days they had Unreal Engine ported
[01:15:57.420 --> 01:15:59.940]   by pressing a compile button.
[01:15:59.940 --> 01:16:03.180]   But they had to have WebGL, which came from OpenGL,
[01:16:03.180 --> 01:16:05.980]   ES came to OpenGL, which came from Silicon Graphics GL.
[01:16:05.980 --> 01:16:09.420]   They had to have Web Audio, so they could map OpenAL,
[01:16:09.420 --> 01:16:11.000]   which was another audio library standard,
[01:16:11.000 --> 01:16:14.000]   to Web Audio, which was kind of a Chrome idiosyncratic thing.
[01:16:14.000 --> 01:16:16.260]   But they could make it work.
[01:16:16.260 --> 01:16:21.060]   And they had to have Asm.js for fast C++ to JavaScript.
[01:16:21.060 --> 01:16:25.220]   And if you didn't have that fast compiler step,
[01:16:25.220 --> 01:16:27.340]   the JavaScript you'd write by hand
[01:16:27.340 --> 01:16:29.780]   trying to do an Unreal game would be too big and too slow.
[01:16:29.780 --> 01:16:31.380]   It would touch the garbage collector.
[01:16:31.380 --> 01:16:33.220]   It would not keep up with 30 frames a second
[01:16:33.220 --> 01:16:35.600]   on the 2013 hardware.
[01:16:35.600 --> 01:16:37.000]   So we demoed that at,
[01:16:37.000 --> 01:16:40.420]   this must have been fall 2012 now that I think about it,
[01:16:40.420 --> 01:16:44.420]   'cause we demoed it at GDC, Game Developer Conference 2013,
[01:16:44.420 --> 01:16:45.420]   and people were stunned.
[01:16:45.420 --> 01:16:47.380]   That's like Unreal Engine, Unreal Tournament,
[01:16:47.380 --> 01:16:48.860]   running in my browser window.
[01:16:48.860 --> 01:16:52.660]   No plugin, no Flash, no Java, no--
[01:16:52.660 --> 01:16:54.460]   - So were those the early days of,
[01:16:54.460 --> 01:16:58.380]   because JavaScript now is able to run basically on par
[01:16:58.380 --> 01:17:01.420]   with a lot of the C++.
[01:17:01.420 --> 01:17:02.820]   - Yeah, and even before then,
[01:17:02.820 --> 01:17:06.560]   you had the fast JavaScript VMs in 2008 when Chrome came out.
[01:17:06.560 --> 01:17:08.740]   Just before it came out, Mozilla,
[01:17:08.740 --> 01:17:11.700]   my friend Andreas Gal and I and others
[01:17:11.700 --> 01:17:14.460]   hacked out TraceMonkey, our trace-based JIT.
[01:17:14.460 --> 01:17:18.740]   The SquirrelFishExtreme team at Apple did their JIT.
[01:17:18.740 --> 01:17:19.700]   And we were all competing
[01:17:19.700 --> 01:17:21.900]   on these crazy performance benchmarks.
[01:17:21.900 --> 01:17:23.540]   It was a little bit too much tuning of the benchmark.
[01:17:23.540 --> 01:17:25.220]   But JavaScript started getting fast,
[01:17:25.220 --> 01:17:26.700]   and developers started noticing it.
[01:17:26.700 --> 01:17:29.780]   But it was still kind of its own high-level language
[01:17:29.780 --> 01:17:30.780]   with garbage collection.
[01:17:30.780 --> 01:17:33.260]   The Asm.js step helped us go further,
[01:17:33.260 --> 01:17:37.100]   because until we really proved the concept,
[01:17:37.100 --> 01:17:39.320]   people were still saying, "Well, JavaScript's okay.
[01:17:39.320 --> 01:17:41.020]   "It's getting faster thanks to V8."
[01:17:41.020 --> 01:17:43.300]   Everybody gave Google credit, especially Google.
[01:17:43.300 --> 01:17:44.940]   But we need something to kill Flash.
[01:17:44.940 --> 01:17:47.300]   Let's use a portable native client code
[01:17:47.300 --> 01:17:49.300]   that Google had acquired, Native Client,
[01:17:49.300 --> 01:17:52.940]   which is a separate lineage for taking basically C code,
[01:17:52.940 --> 01:17:56.260]   compiling it into a software fault isolated container
[01:17:56.260 --> 01:17:59.740]   of some sort, using some kind of virtualization technique.
[01:17:59.740 --> 01:18:01.620]   And maybe it can even be in process
[01:18:01.620 --> 01:18:02.540]   and still be memory-safe.
[01:18:02.540 --> 01:18:03.380]   That would be awesome.
[01:18:03.380 --> 01:18:04.780]   But they ended up using process isolation, too,
[01:18:04.780 --> 01:18:06.300]   and that kind of weakened it.
[01:18:06.300 --> 01:18:08.540]   And in the end, it was like portable native client,
[01:18:08.540 --> 01:18:11.060]   okay, meet the new boss, same as the old boss.
[01:18:11.060 --> 01:18:13.260]   This is the Google Flash, right?
[01:18:13.260 --> 01:18:15.060]   But when we did Asm.js
[01:18:15.060 --> 01:18:17.180]   and we showed Unreal Engine working,
[01:18:17.180 --> 01:18:18.660]   I think it was only a matter of time
[01:18:18.660 --> 01:18:19.820]   before Google threw in the towel.
[01:18:19.820 --> 01:18:23.140]   And in fact, everybody agreed in spring of 2015,
[01:18:23.140 --> 01:18:25.500]   we're gonna take what was proven by Asm.js
[01:18:25.500 --> 01:18:29.460]   and make a new syntax, a binary syntax that's efficient,
[01:18:29.460 --> 01:18:31.580]   that loads into the same JavaScript VM
[01:18:31.580 --> 01:18:32.620]   that JavaScript loads into.
[01:18:32.620 --> 01:18:34.100]   So there'll be two source languages,
[01:18:34.100 --> 01:18:36.220]   one VM, very important, one garbage collector,
[01:18:36.220 --> 01:18:40.800]   one memory manager, one set of compiler stages.
[01:18:40.800 --> 01:18:42.300]   And that's called WebAssembly.
[01:18:42.300 --> 01:18:44.260]   And that's the successor to Asm.js.
[01:18:44.260 --> 01:18:46.340]   And it's important that it have binary syntax
[01:18:46.340 --> 01:18:48.780]   because at the end of the day, especially on mobile,
[01:18:48.780 --> 01:18:50.100]   if you're downloading JavaScript,
[01:18:50.100 --> 01:18:52.040]   even if you're using LZ compression on the wire,
[01:18:52.040 --> 01:18:53.900]   that's cool, but you've got to blow it out into memory
[01:18:53.900 --> 01:18:56.860]   and then parse the silly eight character function keyword
[01:18:56.860 --> 01:19:00.780]   that I picked when I should have used something shorter.
[01:19:00.780 --> 01:19:03.300]   I picked it because of awk, the Unix tool.
[01:19:03.300 --> 01:19:05.380]   So anyways.
[01:19:05.380 --> 01:19:06.220]   - I'm not following, I want to,
[01:19:06.220 --> 01:19:07.940]   but I'm not following the awk thread.
[01:19:07.940 --> 01:19:09.780]   - Yeah, don't worry about it.
[01:19:09.780 --> 01:19:12.260]   - Is it surprising to you that
[01:19:12.260 --> 01:19:14.660]   how damn fast JavaScript is these days?
[01:19:14.660 --> 01:19:16.820]   I mean, 'cause you've been through the whole journey.
[01:19:16.820 --> 01:19:19.660]   I know every step of the way, but is it like,
[01:19:19.660 --> 01:19:22.140]   I mean, it feels incredible.
[01:19:22.140 --> 01:19:24.220]   - It does, but I knew, so the funny thing is,
[01:19:24.220 --> 01:19:26.820]   computer science is this big karmic wheel, right?
[01:19:26.820 --> 01:19:27.900]   Wheel of Fortuna.
[01:19:27.900 --> 01:19:32.420]   And in the, it was about the '97,
[01:19:32.420 --> 01:19:37.060]   I was loaned by Netscape to do due diligence for Sun
[01:19:37.060 --> 01:19:39.260]   in their acquisition of Animorphic,
[01:19:39.260 --> 01:19:43.860]   which was David Unger and friends,
[01:19:43.860 --> 01:19:46.220]   people, Craig, I'm forgetting his name,
[01:19:46.220 --> 01:19:47.660]   he went to Microsoft.
[01:19:47.660 --> 01:19:51.140]   These Stanford language buffs who had taken Smalltalk
[01:19:51.140 --> 01:19:53.460]   and then David created Self
[01:19:53.460 --> 01:19:56.220]   as a simpler sort of Smalltalk language
[01:19:56.220 --> 01:20:00.580]   and made really fast, just-in-time compiling VMs for them.
[01:20:00.580 --> 01:20:05.580]   And they, well ahead of Java Hotspot or JavaScript V8
[01:20:05.580 --> 01:20:07.620]   or any of these modern VMs,
[01:20:07.620 --> 01:20:10.740]   figured out how to make dynamic code fast
[01:20:10.740 --> 01:20:13.060]   because Smalltalk is dynamic language, right?
[01:20:13.060 --> 01:20:15.060]   It has classes, it has, I think,
[01:20:15.060 --> 01:20:17.380]   more lockdown declarative syntax than JavaScript,
[01:20:17.380 --> 01:20:20.980]   but it's fundamentally dynamic, you don't declare the types.
[01:20:20.980 --> 01:20:24.140]   But you could infer the types as the program runs
[01:20:24.140 --> 01:20:26.080]   and you start to form these ideas
[01:20:26.080 --> 01:20:27.600]   about what types are actually flowing
[01:20:27.600 --> 01:20:30.580]   through key operations and you form little
[01:20:30.580 --> 01:20:32.720]   so-called polymorphic inline caches
[01:20:32.720 --> 01:20:35.660]   that are optimized machine code.
[01:20:35.660 --> 01:20:38.300]   The cache is the machine code that assumes,
[01:20:38.300 --> 01:20:40.140]   does a quick check to make sure the type is right,
[01:20:40.140 --> 01:20:42.380]   and if it's not right, it bails to the interpreter.
[01:20:42.380 --> 01:20:44.500]   If it is right, you go pretty fast.
[01:20:44.500 --> 01:20:47.100]   And that short test is a predicted branch,
[01:20:47.100 --> 01:20:48.620]   so things are pretty quick.
[01:20:48.620 --> 01:20:51.340]   All that amazing stuff I knew about in the '90s
[01:20:51.340 --> 01:20:53.780]   and I didn't have time to do it
[01:20:53.780 --> 01:20:57.220]   and Anamorphic got bought by Sun and they did Hotspot.
[01:20:57.220 --> 01:21:00.060]   And you needed that even in Java because at scale,
[01:21:00.060 --> 01:21:04.340]   Java has some dynamic aspects due to invoke interface.
[01:21:04.340 --> 01:21:06.720]   You can have basically collections of Java code
[01:21:06.720 --> 01:21:10.900]   where you don't know at the time each module
[01:21:10.900 --> 01:21:13.900]   or package is compiled exactly what's being called,
[01:21:13.900 --> 01:21:16.300]   what subclass or what implementation
[01:21:16.300 --> 01:21:17.820]   of an interface is being called.
[01:21:17.820 --> 01:21:19.580]   And so you want to optimize using this sort
[01:21:19.580 --> 01:21:21.740]   of dynamic polymorphic caching there too.
[01:21:21.740 --> 01:21:24.620]   And they did that and Hotspot is an amazing beast.
[01:21:24.620 --> 01:21:27.740]   I've met like 13 people who all claim they created it.
[01:21:27.740 --> 01:21:30.540]   I think one of them may deserve credit more than others.
[01:21:30.540 --> 01:21:34.660]   But I didn't get to do that in JavaScript
[01:21:34.660 --> 01:21:38.060]   and when we knew that Google was going
[01:21:38.060 --> 01:21:41.060]   to do their own browser, which we knew at Mozilla around 2006
[01:21:41.060 --> 01:21:45.180]   I also met the team that did V8.
[01:21:45.180 --> 01:21:46.620]   And it turns out it was Lars Bach
[01:21:46.620 --> 01:21:49.300]   who was one of the young engineers from Anamorphic
[01:21:49.300 --> 01:21:50.660]   who got acquired by Sun.
[01:21:50.660 --> 01:21:52.940]   And so Lars is like one of the world's expert
[01:21:52.940 --> 01:21:54.940]   on these kinds of virtual machines
[01:21:54.940 --> 01:21:56.780]   and he picked my brains about JavaScript.
[01:21:56.780 --> 01:21:58.100]   I could tell he didn't like it at the time
[01:21:58.100 --> 01:22:00.460]   but he had to do it.
[01:22:00.460 --> 01:22:01.380]   - Oh, really, interesting.
[01:22:01.380 --> 01:22:03.620]   - Yeah, in 2006 launch at Google's campus.
[01:22:03.620 --> 01:22:07.020]   And then I had another friend who was DevRel at Chrome
[01:22:07.020 --> 01:22:08.300]   and he said, yeah, we don't know what they're doing.
[01:22:08.300 --> 01:22:11.980]   This is getting 2007 to fall, getting toward 2008.
[01:22:11.980 --> 01:22:12.980]   We're trying to get Chrome out
[01:22:12.980 --> 01:22:14.460]   and we don't know what's going on with the V8 team.
[01:22:14.460 --> 01:22:16.860]   They're off in Aarhus, Denmark,
[01:22:16.860 --> 01:22:19.260]   rewriting their engine four times, which is good.
[01:22:19.260 --> 01:22:22.260]   That's the right way to do this kind of development.
[01:22:22.260 --> 01:22:24.260]   They were learning JavaScript, including all its quirks
[01:22:24.260 --> 01:22:26.980]   which they came to hate, the fire of a thousand suns
[01:22:26.980 --> 01:22:28.860]   which is one of the reasons that Lars and company
[01:22:28.860 --> 01:22:30.900]   did Dart, their own language.
[01:22:30.900 --> 01:22:32.860]   But they also made the language fast.
[01:22:32.860 --> 01:22:35.220]   And meanwhile, we knew this was happening.
[01:22:35.220 --> 01:22:38.460]   So we got our act together with TraceMonkey,
[01:22:38.460 --> 01:22:40.060]   our tracing JIT at Mozilla.
[01:22:40.060 --> 01:22:41.820]   And Apple, I think, was also aware.
[01:22:41.820 --> 01:22:42.980]   And so they were doing their own JIT.
[01:22:42.980 --> 01:22:46.420]   So the era of JIT-ed fast JavaScript in 2008
[01:22:46.420 --> 01:22:49.540]   had this prehistory going back to Smalltalk itself
[01:22:49.540 --> 01:22:50.940]   and anamorphic.
[01:22:50.940 --> 01:22:53.060]   And again, the lineage is interesting
[01:22:53.060 --> 01:22:54.460]   'cause you had Lars at anamorphic
[01:22:54.460 --> 01:22:55.940]   and then he ends up at Google.
[01:22:55.940 --> 01:23:00.140]   - Yeah, and today we have an incredibly fast language
[01:23:00.140 --> 01:23:04.740]   that like you said, still, without hate, you can't have love.
[01:23:04.740 --> 01:23:09.740]   So I think there's both love and hate for this dance,
[01:23:09.740 --> 01:23:12.060]   this rich, complex dance of JavaScript
[01:23:12.060 --> 01:23:12.900]   throughout its history.
[01:23:12.900 --> 01:23:15.300]   - There's a dialectic for sure.
[01:23:15.300 --> 01:23:18.940]   - Today, JavaScript is the most popular language
[01:23:18.940 --> 01:23:20.120]   in the world.
[01:23:20.120 --> 01:23:24.220]   Why, by many measures, why do you think that is?
[01:23:24.220 --> 01:23:28.420]   Is there some fundamental ideas
[01:23:28.420 --> 01:23:29.700]   that you've already spoke to a little bit
[01:23:29.700 --> 01:23:31.380]   but sort of broader that you think
[01:23:31.380 --> 01:23:32.820]   is the most popular language in the world?
[01:23:32.820 --> 01:23:36.220]   - So I think I did, by doing first class functions
[01:23:36.220 --> 01:23:40.780]   and taking the good parts of the C operator hierarchy
[01:23:40.780 --> 01:23:44.060]   and just keeping things simple enough,
[01:23:44.060 --> 01:23:45.060]   maybe it could have been simpler,
[01:23:45.060 --> 01:23:47.340]   but I had to make it look like Java
[01:23:47.340 --> 01:23:48.740]   and interoperate with Java,
[01:23:48.740 --> 01:23:52.820]   that there was inherent goodness,
[01:23:52.820 --> 01:23:54.380]   Aristotelian quality there.
[01:23:54.380 --> 01:23:56.060]   And people perceive that
[01:23:56.060 --> 01:23:57.700]   even through all the quirks and warts.
[01:23:57.700 --> 01:23:59.900]   And then over time, working on it with the standards body,
[01:23:59.900 --> 01:24:02.760]   working on it not only as a core language,
[01:24:02.760 --> 01:24:06.620]   but in the context of HTML5 and making the browser better,
[01:24:06.620 --> 01:24:08.940]   listening to developers, thinking about,
[01:24:08.940 --> 01:24:11.460]   this is something that Nick Thompson wrote nicely about
[01:24:11.460 --> 01:24:12.580]   on the Hacker News, I was very flattered.
[01:24:12.580 --> 01:24:14.220]   He said, "Java was this thing
[01:24:14.220 --> 01:24:15.900]   "where the experts were writing the code
[01:24:15.900 --> 01:24:17.920]   "and it was compiled and you had to declare all your types.
[01:24:17.920 --> 01:24:20.860]   "And Sun didn't really give a damn about
[01:24:20.860 --> 01:24:23.720]   "the average programmer who wanted to build real web apps,
[01:24:23.720 --> 01:24:25.020]   "dynamic things."
[01:24:25.020 --> 01:24:28.800]   And I was in there meanwhile doing a bunch of people's jobs,
[01:24:28.800 --> 01:24:31.540]   making JavaScript survive those early years
[01:24:31.540 --> 01:24:33.580]   when it was kind of touch and go, right?
[01:24:33.580 --> 01:24:36.100]   JavaScript was considered a Mickey Mouse language.
[01:24:36.100 --> 01:24:38.620]   It was for annoyances like the scrolling text
[01:24:38.620 --> 01:24:40.780]   at the bottom of the browser in the status bar.
[01:24:40.780 --> 01:24:42.440]   But I kept listening to developers,
[01:24:42.440 --> 01:24:45.420]   working with them and trying to make it run
[01:24:45.420 --> 01:24:47.680]   in that single threaded event loop in a useful way.
[01:24:47.680 --> 01:24:49.840]   And I think that forged something
[01:24:49.840 --> 01:24:51.160]   that people have come to love.
[01:24:51.160 --> 01:24:53.660]   Now you don't always love the best thing, right?
[01:24:53.660 --> 01:24:56.060]   I talked about, Shakespeare,
[01:24:56.060 --> 01:25:00.140]   sunnet about, "I'm Mr. Sizer, nothing like the sun."
[01:25:00.140 --> 01:25:03.780]   Or the scene from Josh Whedon's film,
[01:25:03.780 --> 01:25:07.700]   Serenity at the end where the actual piece in the score
[01:25:07.700 --> 01:25:09.020]   by David Newman is called Love,
[01:25:09.020 --> 01:25:12.820]   where Captain Mal is teaching River Tam
[01:25:12.820 --> 01:25:13.840]   about how to pilot a ship.
[01:25:13.840 --> 01:25:15.340]   And she's a super genius, super soldier.
[01:25:15.340 --> 01:25:17.100]   She knows how to do it already.
[01:25:17.100 --> 01:25:19.460]   And he's basically talking about how you have to love
[01:25:19.460 --> 01:25:22.020]   the ship because if you don't, it's gonna kill you.
[01:25:22.020 --> 01:25:23.820]   And then the piece falls off the ship.
[01:25:23.820 --> 01:25:25.220]   It's kind of like JavaScript.
[01:25:25.220 --> 01:25:26.900]   You have to love it.
[01:25:26.900 --> 01:25:28.920]   You have to love it because now people say,
[01:25:28.920 --> 01:25:30.260]   "Ah, we're stuck with it
[01:25:30.260 --> 01:25:31.620]   'cause it got this priority of place."
[01:25:31.620 --> 01:25:33.320]   - But there's love underpinning that.
[01:25:33.320 --> 01:25:35.860]   And actually, listening to developers,
[01:25:35.860 --> 01:25:36.700]   that's kind of beautiful.
[01:25:36.700 --> 01:25:41.100]   There's most successful products in this world
[01:25:41.100 --> 01:25:43.060]   with all the messes, with all the flaws.
[01:25:43.060 --> 01:25:45.320]   Perhaps the flaws themselves are actual features,
[01:25:45.320 --> 01:25:48.140]   but that's a whole nother, that's a discussion about love.
[01:25:48.140 --> 01:25:50.180]   But underneath it, there's something
[01:25:50.180 --> 01:25:52.380]   that just connects with people.
[01:25:52.380 --> 01:25:53.440]   - And it has to keep connecting.
[01:25:53.440 --> 01:25:55.620]   If JavaScript kind of went off in this,
[01:25:55.620 --> 01:25:57.300]   people sometimes complain about ES6.
[01:25:57.300 --> 01:25:58.660]   Oh, you put classes in JavaScript.
[01:25:58.660 --> 01:25:59.500]   I hate classes.
[01:25:59.500 --> 01:26:00.400]   You've ruined it.
[01:26:00.400 --> 01:26:01.380]   But it's not true.
[01:26:01.380 --> 01:26:02.620]   It's a dynamic language.
[01:26:02.620 --> 01:26:04.780]   Smalltalk had classes.
[01:26:04.780 --> 01:26:06.040]   Python has classes.
[01:26:06.040 --> 01:26:10.080]   There are lots of Lisp variants that had classy systems.
[01:26:10.080 --> 01:26:12.700]   Common Lisp.
[01:26:12.700 --> 01:26:16.740]   So people who don't reject it based on some sort
[01:26:16.740 --> 01:26:21.020]   of fashion judgment do use it
[01:26:21.020 --> 01:26:23.340]   and do interact with the standards body.
[01:26:23.340 --> 01:26:25.800]   The standards body is competing browser vendors mainly,
[01:26:25.800 --> 01:26:28.440]   but also now big companies that use JavaScript heavily
[01:26:28.440 --> 01:26:32.940]   the PayPal's and other such companies, Salesforce.
[01:26:32.940 --> 01:26:36.260]   And they have to cater to web developers.
[01:26:36.260 --> 01:26:38.980]   They have to hire developers who know JavaScript.
[01:26:38.980 --> 01:26:43.060]   They have to keep their engines up to the latest standard.
[01:26:43.060 --> 01:26:45.860]   And this creates all this sort of social structure
[01:26:45.860 --> 01:26:47.780]   around JavaScript that is unusual.
[01:26:47.780 --> 01:26:51.380]   I mean, you get C++ buffs that follow the inner workings
[01:26:51.380 --> 01:26:54.420]   of C++, what is it now?
[01:26:54.420 --> 01:26:55.900]   21 something.
[01:26:55.900 --> 01:26:56.740]   I don't know.
[01:26:56.740 --> 01:26:57.560]   I've lost track.
[01:26:57.560 --> 01:26:58.980]   But it's a more rarified group.
[01:26:58.980 --> 01:27:02.820]   It's more like the old language, gray hairs.
[01:27:02.820 --> 01:27:04.500]   Whereas JavaScript is a younger
[01:27:04.500 --> 01:27:07.380]   and more vibrant and large crowd.
[01:27:07.380 --> 01:27:09.260]   - There's a community feel to it.
[01:27:09.260 --> 01:27:12.180]   There's a echoes, perhaps I don't wanna draw
[01:27:12.180 --> 01:27:13.940]   too many similarities.
[01:27:13.940 --> 01:27:15.420]   Maybe you can comment on it.
[01:27:15.420 --> 01:27:18.980]   There's a C++ is like Wall Street
[01:27:18.980 --> 01:27:21.220]   and the JavaScript is like Wall Street bets
[01:27:21.220 --> 01:27:22.620]   from the recent events.
[01:27:22.620 --> 01:27:24.940]   It's like, there's a chaotic community of all.
[01:27:24.940 --> 01:27:28.800]   And there's some power from that distributed crowd
[01:27:28.800 --> 01:27:30.240]   of people that ultimately--
[01:27:30.240 --> 01:27:31.120]   - It's more demotic.
[01:27:31.120 --> 01:27:32.640]   It's more of the people.
[01:27:32.640 --> 01:27:35.840]   It lets people in without requiring these credentials.
[01:27:35.840 --> 01:27:38.400]   I remember in the late 90s into the noughties,
[01:27:38.400 --> 01:27:39.880]   people were all getting Java credentials.
[01:27:39.880 --> 01:27:42.640]   And I knew people and friends knew people
[01:27:42.640 --> 01:27:44.120]   who became Java programmers.
[01:27:44.120 --> 01:27:45.320]   And you knew they really should have been
[01:27:45.320 --> 01:27:47.200]   like nature guides or pilots.
[01:27:47.200 --> 01:27:49.000]   They hated programming, but they thought,
[01:27:49.000 --> 01:27:49.840]   I gotta make money.
[01:27:49.840 --> 01:27:51.740]   I'm gonna become a Java programmer.
[01:27:51.740 --> 01:27:54.920]   - Do you have some, because it's such a monumental moment
[01:27:54.920 --> 01:27:58.080]   in our current history as a quick aside,
[01:27:58.080 --> 01:28:02.200]   do you have thoughts about this huge distributed,
[01:28:02.200 --> 01:28:06.600]   crowdsourced financial happenings with Wall Street bets?
[01:28:06.600 --> 01:28:07.440]   - Yeah.
[01:28:07.440 --> 01:28:08.500]   - That's like nobody could have,
[01:28:08.500 --> 01:28:09.700]   well, you could have predicted,
[01:28:09.700 --> 01:28:12.080]   but the scale and the impact of this kind
[01:28:12.080 --> 01:28:15.000]   of emergent behavior from independent parties
[01:28:15.000 --> 01:28:15.840]   that could happen.
[01:28:15.840 --> 01:28:19.900]   - Like I said, my own experience with the dismal science
[01:28:19.900 --> 01:28:22.520]   as with physics led me to reject a lot of bad models.
[01:28:22.520 --> 01:28:26.280]   And economics was always compromised by politics,
[01:28:26.280 --> 01:28:27.400]   political economy.
[01:28:27.400 --> 01:28:29.480]   You could also argue that it was,
[01:28:29.480 --> 01:28:31.020]   it used to be a branch of moral philosophy.
[01:28:31.020 --> 01:28:33.960]   So it was concerned with the good and it became divorced
[01:28:33.960 --> 01:28:36.600]   and became sort of in this quasi Newtonian way,
[01:28:36.600 --> 01:28:39.160]   just about everything's just running by itself.
[01:28:39.160 --> 01:28:40.280]   Don't worry about it.
[01:28:40.280 --> 01:28:42.080]   This monopoly is crushing your Netscape company,
[01:28:42.080 --> 01:28:43.760]   but that's just nature.
[01:28:43.760 --> 01:28:45.200]   - And economics couldn't,
[01:28:45.200 --> 01:28:46.620]   or doesn't really have good models
[01:28:46.620 --> 01:28:49.000]   for the Wall Street bets subreddit.
[01:28:49.000 --> 01:28:52.320]   - They know how to squeeze a short, right?
[01:28:52.320 --> 01:28:56.480]   So the amazing thing is you have Robinhood app,
[01:28:56.480 --> 01:29:00.760]   which was again, supposedly for the demos, for the people,
[01:29:00.760 --> 01:29:05.160]   and eliminated the fee through various kinds of straddles
[01:29:05.160 --> 01:29:09.240]   or some kind of spread operation
[01:29:09.240 --> 01:29:11.880]   that helped them eliminate the fee or eat the fee.
[01:29:11.880 --> 01:29:14.560]   And in fact, as a broker in these days,
[01:29:14.560 --> 01:29:15.840]   because it takes two days to settle,
[01:29:15.840 --> 01:29:18.640]   there's counterparty risk as they found out.
[01:29:18.640 --> 01:29:23.400]   And so the Wall Street bets people,
[01:29:23.400 --> 01:29:25.700]   the memes are like the Terminator robot
[01:29:25.700 --> 01:29:30.160]   with $600 STEMI check and the hedge funds
[01:29:30.160 --> 01:29:32.400]   the little girl hiding under the desk.
[01:29:32.400 --> 01:29:36.040]   There is a problem, which I talked about
[01:29:36.040 --> 01:29:38.280]   in the recent podcast, which I'm conscious of
[01:29:38.280 --> 01:29:39.320]   from the history of the web.
[01:29:39.320 --> 01:29:41.240]   And that is, you could say it's monopoly,
[01:29:41.240 --> 01:29:42.960]   which antitrust wasn't enforced
[01:29:42.960 --> 01:29:45.120]   after US Microsoft for a long time.
[01:29:45.120 --> 01:29:48.000]   And a lot of this was due to the money interests
[01:29:48.000 --> 01:29:50.880]   buying control of politicians.
[01:29:50.880 --> 01:29:54.400]   And in Plato's five regimes, that's oligarchy.
[01:29:54.400 --> 01:29:56.160]   That's where we are.
[01:29:56.160 --> 01:29:58.720]   And now we're seeing a fight against the oligarchs.
[01:29:58.720 --> 01:29:59.560]   I don't know if it'll work,
[01:29:59.560 --> 01:30:00.760]   but you're definitely seeing it.
[01:30:00.760 --> 01:30:02.360]   And it's also kind of hackerish, right?
[01:30:02.360 --> 01:30:04.320]   It's got a hacker ethos.
[01:30:04.320 --> 01:30:05.640]   Hey, Robinhood, no fees.
[01:30:05.640 --> 01:30:06.460]   Oh, interesting.
[01:30:06.460 --> 01:30:09.560]   Hey, I can buy a fraction of a share in this thing,
[01:30:09.560 --> 01:30:12.240]   or I can keep buying with my stimulus check.
[01:30:12.240 --> 01:30:16.920]   So I mentioned Hegel seeing Napoleon on the horse.
[01:30:16.920 --> 01:30:19.160]   Hegel also talked about the cunning of reason,
[01:30:19.160 --> 01:30:23.040]   that you have this sort of God sees history in full,
[01:30:23.040 --> 01:30:25.880]   and if you believe in God, or we don't know the future,
[01:30:25.880 --> 01:30:28.320]   but there's always this sort of fly in the ointment,
[01:30:28.320 --> 01:30:32.080]   this unintended consequence that confounds
[01:30:32.080 --> 01:30:35.600]   the best plans of the powers that be.
[01:30:35.600 --> 01:30:37.000]   And we're living through it.
[01:30:37.000 --> 01:30:41.480]   I'm glad it's not street warfare or mechanized warfare,
[01:30:41.480 --> 01:30:43.340]   'cause it has been in the past.
[01:30:44.760 --> 01:30:47.120]   It's more like soft power.
[01:30:47.120 --> 01:30:47.960]   - Yes.
[01:30:47.960 --> 01:30:49.360]   - And people are fighting back.
[01:30:49.360 --> 01:30:51.760]   - Do you think it's possible,
[01:30:51.760 --> 01:30:56.760]   so JavaScript used to be for the front end of the web.
[01:30:56.760 --> 01:31:01.600]   It's now increasingly so being used for backend,
[01:31:01.600 --> 01:31:06.080]   like running stuff that's like behind the scenes.
[01:31:06.080 --> 01:31:10.260]   And it's also starting to be used quite a bit
[01:31:10.260 --> 01:31:12.240]   for things like TensorFlow.js.
[01:31:12.240 --> 01:31:16.040]   So starting to actually use these heavy duty applications
[01:31:16.040 --> 01:31:17.680]   that are using neural networks, machine learning,
[01:31:17.680 --> 01:31:19.380]   and so on in the browser.
[01:31:19.380 --> 01:31:24.120]   Is it possible in 10, 20, 30 years
[01:31:24.120 --> 01:31:28.640]   that basically most of the world runs on JavaScript?
[01:31:28.640 --> 01:31:31.240]   - This is a dystopia and a nightmare to some people.
[01:31:31.240 --> 01:31:33.160]   (Dave laughs)
[01:31:33.160 --> 01:31:34.920]   When we did Asm.js and WebAssembly,
[01:31:34.920 --> 01:31:37.360]   I would joke and meme people with scenes like
[01:31:37.360 --> 01:31:39.520]   Neo waking up in his pod in the Matrix,
[01:31:39.520 --> 01:31:41.920]   and he's all skinny and weak and hairless.
[01:31:41.920 --> 01:31:46.720]   And you realize in the future that you're living
[01:31:46.720 --> 01:31:49.160]   in some simulation that it's all running on JavaScript,
[01:31:49.160 --> 01:31:50.600]   and you just scream forever.
[01:31:50.600 --> 01:31:52.840]   It's possible.
[01:31:52.840 --> 01:31:54.840]   Gary Bernhardt does these funny talks.
[01:31:54.840 --> 01:31:56.880]   He did Wat.js, and then he did this
[01:31:56.880 --> 01:31:59.560]   Life and Death of JavaScript, I think it's called,
[01:31:59.560 --> 01:32:02.000]   where he took some clever ideas
[01:32:02.000 --> 01:32:05.320]   that actually have a thread of credibility to them.
[01:32:05.320 --> 01:32:09.200]   But I mentioned software fault isolation.
[01:32:09.200 --> 01:32:10.600]   In the old days when we were using computers,
[01:32:10.600 --> 01:32:14.120]   we said we're gonna use the Unix monolithic monitor,
[01:32:14.120 --> 01:32:15.980]   and it's the privileged program.
[01:32:15.980 --> 01:32:18.400]   This is before you even had hardware rings of protection.
[01:32:18.400 --> 01:32:20.440]   Those, some of the early '60s operating systems
[01:32:20.440 --> 01:32:22.680]   used hardware protection zones.
[01:32:22.680 --> 01:32:25.920]   But Unix is privileged, and the program
[01:32:25.920 --> 01:32:30.440]   that runs user code in a process is hosted.
[01:32:30.440 --> 01:32:33.640]   It's the guest in the host, and you get to suspend it.
[01:32:33.640 --> 01:32:35.240]   You get to kill it.
[01:32:35.240 --> 01:32:37.280]   If it crashes, it doesn't take down the whole OS.
[01:32:37.280 --> 01:32:38.520]   It's a wonderful idea.
[01:32:39.360 --> 01:32:42.640]   But the call into the kernel is expensive,
[01:32:42.640 --> 01:32:43.800]   the system call, so-called.
[01:32:43.800 --> 01:32:45.160]   And this has even been optimized now
[01:32:45.160 --> 01:32:46.300]   for things like getting the time of day
[01:32:46.300 --> 01:32:48.300]   so it doesn't actually enter the kernel.
[01:32:48.300 --> 01:32:52.760]   And meanwhile, hardware architectures
[01:32:52.760 --> 01:32:54.420]   and virtualization techniques have gone
[01:32:54.420 --> 01:32:56.360]   in a different direction, even to the point
[01:32:56.360 --> 01:32:58.800]   where you can do software fault isolation very cheaply
[01:32:58.800 --> 01:33:00.720]   without entering the operating system kernel.
[01:33:00.720 --> 01:33:02.880]   And so you get unikernels and exokernels
[01:33:02.880 --> 01:33:04.320]   and very lightweight VMs.
[01:33:04.320 --> 01:33:06.240]   And so Gary took this idea and said,
[01:33:07.520 --> 01:33:09.160]   JavaScript will take over computing
[01:33:09.160 --> 01:33:11.640]   because the system call boundary's too expensive,
[01:33:11.640 --> 01:33:12.920]   so everything ends up in JavaScript
[01:33:12.920 --> 01:33:16.880]   with these lighter-weight isolation enforcement mechanisms.
[01:33:16.880 --> 01:33:18.560]   It's not totally beyond belief.
[01:33:18.560 --> 01:33:20.880]   It'd be WebAssembly, too.
[01:33:20.880 --> 01:33:25.280]   - It's nice to ask you sort of for advice.
[01:33:25.280 --> 01:33:26.920]   There's so many people that are interested
[01:33:26.920 --> 01:33:29.120]   in starting to learning about programming,
[01:33:29.120 --> 01:33:30.320]   getting into this world.
[01:33:30.320 --> 01:33:34.960]   Is there some number of languages,
[01:33:34.960 --> 01:33:36.440]   three to five programming languages
[01:33:36.440 --> 01:33:38.200]   that you would recommend people learn,
[01:33:38.200 --> 01:33:41.680]   or maybe a broader advice
[01:33:41.680 --> 01:33:43.920]   on how to get started in programming?
[01:33:43.920 --> 01:33:45.360]   - Well, so you asked about machine learning,
[01:33:45.360 --> 01:33:47.800]   and JavaScript is a general-purpose language,
[01:33:47.800 --> 01:33:52.800]   and it's a language that's not that great
[01:33:52.800 --> 01:33:56.260]   for doing matrix operations
[01:33:56.260 --> 01:33:59.600]   or doing parallel programming, I would say,
[01:33:59.600 --> 01:34:02.080]   without using some extensions or some libraries
[01:34:02.080 --> 01:34:03.560]   that have some magic in them.
[01:34:03.560 --> 01:34:06.720]   So if someone wanted to learn,
[01:34:06.720 --> 01:34:11.040]   there are amazing languages in sort of the APL family
[01:34:11.040 --> 01:34:14.000]   that are very useful for, I would say, linear algebra,
[01:34:14.000 --> 01:34:16.760]   which gets to a lot of the kernels in machine learning.
[01:34:16.760 --> 01:34:19.940]   And so APL had like J and then K,
[01:34:19.940 --> 01:34:22.160]   and they're K variants
[01:34:22.160 --> 01:34:24.600]   because the guy that did K is still going,
[01:34:24.600 --> 01:34:27.480]   and they're proprietary, but he's still innovating there.
[01:34:27.480 --> 01:34:30.360]   Python is used.
[01:34:30.360 --> 01:34:31.680]   So people talk about TensorFlow.js.
[01:34:31.680 --> 01:34:33.400]   Well, it's not that surprising
[01:34:33.400 --> 01:34:36.320]   'cause Python was heavily used for machine learning,
[01:34:36.320 --> 01:34:38.680]   and Python was always, you know,
[01:34:38.680 --> 01:34:41.480]   they didn't have this fast just-in-time compiler tradition.
[01:34:41.480 --> 01:34:43.120]   There were some projects that tried this,
[01:34:43.120 --> 01:34:45.280]   and some of them were interesting.
[01:34:45.280 --> 01:34:46.240]   PyPy was interesting.
[01:34:46.240 --> 01:34:49.960]   But the philosophy with Python was,
[01:34:49.960 --> 01:34:51.720]   oh, you need to go fast, write a C plugin,
[01:34:51.720 --> 01:34:53.040]   and drop into C code.
[01:34:53.040 --> 01:34:57.480]   So I think people should look at multiple languages
[01:34:57.480 --> 01:34:59.480]   because there are different tools in the belt.
[01:34:59.480 --> 01:35:02.800]   If you're trying to do supervision or rapid prototyping,
[01:35:02.800 --> 01:35:03.920]   you want a dynamic language.
[01:35:03.920 --> 01:35:06.520]   You wanna throw things together and see what works.
[01:35:06.520 --> 01:35:09.280]   If you are trying to go down to the metal very fast,
[01:35:09.280 --> 01:35:10.720]   well, I'm an old C hacker,
[01:35:10.720 --> 01:35:14.280]   but I was also the executive sponsor of Rust at Mozilla,
[01:35:14.280 --> 01:35:17.880]   and Rust has now escaped from that sort of nest
[01:35:17.880 --> 01:35:21.440]   where it was born to be adopted by a bunch of companies
[01:35:21.440 --> 01:35:23.200]   to have a foundation in the works.
[01:35:23.200 --> 01:35:24.760]   Some of the key core team members
[01:35:24.760 --> 01:35:27.660]   are working now at Amazon and other places.
[01:35:27.660 --> 01:35:30.080]   So it looks like Rust has reached escape velocity.
[01:35:30.080 --> 01:35:31.360]   And Rust is an interesting language
[01:35:31.360 --> 01:35:33.040]   because one of our goals there,
[01:35:33.040 --> 01:35:34.480]   one of the reasons I sponsored it was,
[01:35:34.480 --> 01:35:35.640]   we were all tired of seeing
[01:35:35.640 --> 01:35:38.080]   those remote code execution vulnerabilities
[01:35:38.080 --> 01:35:40.160]   due to C and C++.
[01:35:40.160 --> 01:35:43.800]   And we thought, can we have a sort of safety property
[01:35:43.800 --> 01:35:46.880]   through a type and effect system or an ownership system?
[01:35:46.880 --> 01:35:48.280]   And Rust has that.
[01:35:48.280 --> 01:35:49.960]   And that ownership system is interesting
[01:35:49.960 --> 01:35:52.120]   because it doesn't just give you memory safety.
[01:35:52.120 --> 01:35:53.460]   There's a sort of theorem for free,
[01:35:53.460 --> 01:35:57.160]   a dual that falls out for protection against data races.
[01:35:57.160 --> 01:35:59.720]   So Rust is better for low-level programming.
[01:35:59.720 --> 01:36:02.880]   You delimit your unsafe code where you do have to be unsafe,
[01:36:02.880 --> 01:36:05.280]   and you can prove certain facts about memory safety
[01:36:05.280 --> 01:36:08.800]   and race condition avoidance.
[01:36:08.800 --> 01:36:11.320]   And so I think people should learn these new languages.
[01:36:11.320 --> 01:36:13.320]   I think Go is a great language.
[01:36:13.320 --> 01:36:16.480]   I admire the Unix people who did that.
[01:36:16.480 --> 01:36:19.040]   Ken Stoll was involved, Rob Pike, of course,
[01:36:19.040 --> 01:36:23.400]   David, what's his name, and other people.
[01:36:23.400 --> 01:36:27.080]   Go is a huge success, really, on the server side,
[01:36:27.080 --> 01:36:30.120]   mainly where you have a lot of networking to do.
[01:36:30.120 --> 01:36:33.800]   And it's garbage collected, but it's also very pragmatic.
[01:36:33.800 --> 01:36:35.400]   It has that sort of C flavor.
[01:36:35.400 --> 01:36:37.040]   As an old C hacker, I can't get used to the fact
[01:36:37.040 --> 01:36:39.600]   that they swapped the type and declarator
[01:36:39.600 --> 01:36:41.160]   in the declaration order.
[01:36:41.160 --> 01:36:44.200]   - I haven't used Rust, but this is one of the most respected
[01:36:44.200 --> 01:36:46.280]   and loved languages currently, so it's interesting.
[01:36:46.280 --> 01:36:47.400]   - Yeah, and it's still young.
[01:36:47.400 --> 01:36:48.400]   You look at these things,
[01:36:48.400 --> 01:36:50.140]   JavaScript is now considered old.
[01:36:50.140 --> 01:36:52.520]   - It's gone through so many versions
[01:36:52.520 --> 01:36:54.880]   that you can fall in love with it all over again.
[01:36:54.880 --> 01:36:57.760]   - 25 plus years, it's an adult.
[01:36:57.760 --> 01:36:58.760]   (laughing)
[01:36:58.760 --> 01:36:59.800]   It should be out of the house.
[01:36:59.800 --> 01:37:03.420]   But it could be around another 25 years.
[01:37:03.420 --> 01:37:04.260]   Cannot rule it out.
[01:37:04.260 --> 01:37:06.280]   So Rust could be around for a long time.
[01:37:06.280 --> 01:37:08.920]   The longer you're around, the more likely you're Lindy
[01:37:08.920 --> 01:37:10.400]   and you're around your wife.
[01:37:10.400 --> 01:37:11.600]   - A lot of people ask me,
[01:37:11.600 --> 01:37:15.800]   I'm often torn between recommending either Python
[01:37:15.800 --> 01:37:18.080]   or JavaScript as the first language to play with,
[01:37:18.080 --> 01:37:20.880]   because it's difficult,
[01:37:20.880 --> 01:37:24.840]   because it's so easy to do JavaScript incorrectly.
[01:37:24.840 --> 01:37:29.440]   It's much easier to do it correctly these days,
[01:37:29.440 --> 01:37:31.640]   or like well, like learn about programming.
[01:37:31.640 --> 01:37:33.940]   But the cool thing about JavaScript
[01:37:33.940 --> 01:37:36.120]   is that you can create stuff
[01:37:36.120 --> 01:37:38.120]   that will put a smile on your face.
[01:37:38.120 --> 01:37:41.440]   Like as a developer, you can create stuff
[01:37:41.440 --> 01:37:44.200]   and it'll visually look like something and it'll do stuff.
[01:37:44.200 --> 01:37:45.720]   And it makes you feel good.
[01:37:45.720 --> 01:37:47.320]   It makes you fall in love with programming.
[01:37:47.320 --> 01:37:48.700]   With Python, you could do the same.
[01:37:48.700 --> 01:37:49.540]   It's a little slower.
[01:37:49.540 --> 01:37:51.560]   And with C++, it takes five to 10 years
[01:37:51.560 --> 01:37:54.100]   to write a program that actually does something.
[01:37:54.100 --> 01:37:56.800]   So like there's that tension between,
[01:37:56.800 --> 01:37:59.640]   is JavaScript the right first step or is it Python?
[01:37:59.640 --> 01:38:01.880]   And I've been going back and forth on those two.
[01:38:01.880 --> 01:38:02.760]   - I have my Python, right?
[01:38:02.760 --> 01:38:05.280]   It came from a lineage of ABC,
[01:38:05.280 --> 01:38:08.600]   which was a pedagogical language in the Netherlands.
[01:38:08.600 --> 01:38:14.560]   And it was a good teaching language too.
[01:38:14.560 --> 01:38:17.980]   I think it is a good teaching language.
[01:38:17.980 --> 01:38:19.120]   And it's a little more restrictive
[01:38:19.120 --> 01:38:21.960]   in that if you misspell something
[01:38:21.960 --> 01:38:25.200]   in a way that JavaScript might let run,
[01:38:25.200 --> 01:38:26.880]   let reach run time, it'll get stopped
[01:38:26.880 --> 01:38:30.600]   at syntax check in Python.
[01:38:30.600 --> 01:38:31.700]   That's good for beginners.
[01:38:31.700 --> 01:38:34.760]   I think the sloppiness that some people object to,
[01:38:34.760 --> 01:38:37.160]   like people were just tweeting at me,
[01:38:37.160 --> 01:38:38.640]   having just learned JavaScript.
[01:38:38.640 --> 01:38:41.120]   They said, "I can take a number and I can index into it
[01:38:41.120 --> 01:38:42.880]   "and get undefined out of it as a property."
[01:38:42.880 --> 01:38:43.800]   And why is that?
[01:38:43.800 --> 01:38:44.840]   A number is not an object.
[01:38:44.840 --> 01:38:46.200]   And I explained why it is.
[01:38:46.200 --> 01:38:48.340]   'Cause like in Java, the primitive types,
[01:38:48.340 --> 01:38:49.840]   which unfortunately are not objects,
[01:38:49.840 --> 01:38:53.260]   can be automatically boxed or wrapped by an object.
[01:38:53.260 --> 01:38:55.440]   And I made that implicit.
[01:38:55.440 --> 01:38:58.220]   In Java, it's typed and you have to declare things
[01:38:58.220 --> 01:39:00.480]   and you'll get type errors.
[01:39:00.480 --> 01:39:03.080]   But there are cases in Java where you get auto-boxing
[01:39:03.080 --> 01:39:06.020]   or auto-wrapping 'cause you've declared that you want it.
[01:39:06.020 --> 01:39:07.540]   In JavaScript, it just happens.
[01:39:07.540 --> 01:39:10.300]   And so once I explained it, I'm like, "Oh, wow, I get it."
[01:39:10.300 --> 01:39:13.640]   But it also means that you can commit a blunder that just--
[01:39:13.640 --> 01:39:15.340]   - You don't get punished for it, you don't detect.
[01:39:15.340 --> 01:39:16.800]   - You get an undefined value
[01:39:16.800 --> 01:39:17.840]   and you don't know where it came from.
[01:39:17.840 --> 01:39:18.680]   - Right.
[01:39:18.680 --> 01:39:23.360]   I've been reading a lot about military history recently.
[01:39:23.360 --> 01:39:26.760]   And one way to paint the picture of browsers,
[01:39:26.760 --> 01:39:29.280]   internet browsers, is through the various wars
[01:39:29.280 --> 01:39:30.620]   throughout its history.
[01:39:30.620 --> 01:39:32.300]   I don't know if that's a useful way to look at it,
[01:39:32.300 --> 01:39:34.660]   but we've already talked a little bit about Netscape
[01:39:34.660 --> 01:39:38.400]   and Internet Explorer in the early days.
[01:39:38.400 --> 01:39:41.260]   Can you tell the story of the different wars,
[01:39:41.260 --> 01:39:43.440]   if that's at all an interesting way to look at it,
[01:39:43.440 --> 01:39:46.460]   of the '90s and to today?
[01:39:46.460 --> 01:39:49.120]   - Yeah, so I mentioned that Microsoft,
[01:39:49.120 --> 01:39:51.520]   which was convicted for it, did abuse its monopoly,
[01:39:51.520 --> 01:39:55.120]   but they had a pretty good team by the time they did IE4.
[01:39:55.120 --> 01:39:57.920]   And Netscape, unfortunately, I was like second floor
[01:39:57.920 --> 01:39:59.520]   and I was friends with all the first floor people,
[01:39:59.520 --> 01:40:02.720]   the front end guys who did the JavaScript event hookup
[01:40:02.720 --> 01:40:07.560]   and things like that, that team was fairly burnt out.
[01:40:07.560 --> 01:40:10.880]   And I think having gone public,
[01:40:10.880 --> 01:40:13.320]   the upper management wanted to buy a bunch of companies
[01:40:13.320 --> 01:40:15.360]   to try to go head to head with Microsoft.
[01:40:15.360 --> 01:40:17.760]   Didn't work, but buying a bunch of companies
[01:40:17.760 --> 01:40:19.360]   usually doesn't work.
[01:40:19.360 --> 01:40:22.800]   I think the modern sort of approach roughly
[01:40:22.800 --> 01:40:25.280]   is like Mark Zuckerberg took,
[01:40:25.280 --> 01:40:26.880]   which is to keep them at arm's length
[01:40:26.880 --> 01:40:28.320]   and let them do their thing.
[01:40:28.320 --> 01:40:29.920]   And now that he's pulling WhatsApp in
[01:40:29.920 --> 01:40:31.440]   and people are fleeing it
[01:40:31.440 --> 01:40:33.480]   because it's tied into the ad surveillance.
[01:40:33.480 --> 01:40:36.920]   But for a while they were keeping it separate.
[01:40:36.920 --> 01:40:39.000]   It really does work 'cause you bought it for its value,
[01:40:39.000 --> 01:40:41.080]   it's complimentary and you're not messing with it.
[01:40:41.080 --> 01:40:43.560]   With Netscape, when they bought a bunch of companies,
[01:40:43.560 --> 01:40:45.440]   they had some of the first floor people
[01:40:45.440 --> 01:40:46.920]   or the founders burned out.
[01:40:46.920 --> 01:40:51.400]   They had newcomers who wanted their turn to do the browser
[01:40:51.400 --> 01:40:54.400]   and they hadn't really done browsers or understood them.
[01:40:54.400 --> 01:40:57.320]   And so Netscape 4 was originally supposed to be 3
[01:40:57.320 --> 01:40:58.800]   and it was so late, they renumbered it.
[01:40:58.800 --> 01:41:01.400]   We did a 3 release, Jamie and a few others
[01:41:01.400 --> 01:41:03.640]   put some extra effort into secure MIME
[01:41:03.640 --> 01:41:07.960]   was supported in the mail, built-in mail program.
[01:41:07.960 --> 01:41:11.840]   And Netscape 4 was late and it was only on Windows at first
[01:41:11.840 --> 01:41:14.880]   and Microsoft had really started doing better.
[01:41:14.880 --> 01:41:17.280]   Like they do, they copy and the first version is trash
[01:41:17.280 --> 01:41:19.040]   and the second one, you're starting to feel threatened.
[01:41:19.040 --> 01:41:21.400]   The third one, you can tell what's gonna happen
[01:41:21.400 --> 01:41:22.440]   and the fourth one's good.
[01:41:22.440 --> 01:41:24.200]   - And plus there's the benefit, like you said,
[01:41:24.200 --> 01:41:26.080]   that it comes as a default browser.
[01:41:26.080 --> 01:41:28.760]   - Yes, and yet Netscape's screwing it up
[01:41:28.760 --> 01:41:32.520]   and Microsoft really putting some quality people on it.
[01:41:32.520 --> 01:41:34.200]   IE 4 was good, on Windows it was good.
[01:41:34.200 --> 01:41:37.040]   And they did the dynamic HTML innovations,
[01:41:37.040 --> 01:41:39.680]   they, Scott Isaacs, my old buddy,
[01:41:39.680 --> 01:41:42.360]   a former accountant who programmed in BASIC
[01:41:42.360 --> 01:41:45.520]   and became what Microsoft calls a program manager,
[01:41:45.520 --> 01:41:47.000]   which is kind of an elevated position.
[01:41:47.000 --> 01:41:50.520]   It's, you can be a programmer or an engineer track
[01:41:50.520 --> 01:41:53.440]   but you switch to it and you sort of lead a lot of design
[01:41:53.440 --> 01:41:54.680]   and standards efforts.
[01:41:54.680 --> 01:41:58.920]   And so Scott Isaac put in a lot of those funky DHTML APIs
[01:41:58.920 --> 01:42:01.000]   that didn't quite have the same flavor
[01:42:01.000 --> 01:42:02.520]   as the stuff that I did.
[01:42:02.520 --> 01:42:04.200]   And neither of them was like the later
[01:42:04.200 --> 01:42:08.560]   sort of verbose Java like DOM W3C standardized.
[01:42:08.560 --> 01:42:10.560]   But IE 4 was pretty darn good.
[01:42:10.560 --> 01:42:12.480]   I remember a friend, Scott Furman and I
[01:42:12.480 --> 01:42:16.680]   got invited by Scott Isaacs to Gordon Beers in San Jose.
[01:42:16.680 --> 01:42:21.520]   They were doing a preview of IE 4, this must have been 1997.
[01:42:21.520 --> 01:42:24.120]   And Scott said, yeah, we've got,
[01:42:24.120 --> 01:42:25.560]   here's the new graphics stuff we're doing.
[01:42:25.560 --> 01:42:28.240]   We've got something like your Netscape layers.
[01:42:28.240 --> 01:42:31.800]   We've got VML, a vector markup language.
[01:42:31.800 --> 01:42:33.440]   We can do like virtual reality
[01:42:33.440 --> 01:42:34.920]   and Scott and I looked at each other
[01:42:34.920 --> 01:42:36.840]   and said, we're doomed, right?
[01:42:36.840 --> 01:42:38.800]   Microsoft was starting to fire on all cylinders.
[01:42:38.800 --> 01:42:40.440]   So I have to give them credit for that
[01:42:40.440 --> 01:42:42.960]   even though they abused their market power.
[01:42:42.960 --> 01:42:44.320]   And maybe I shouldn't give them credit
[01:42:44.320 --> 01:42:45.920]   for having the resource to hire talented people
[01:42:45.920 --> 01:42:48.880]   but they did a credible job on IE 4.
[01:42:48.880 --> 01:42:51.920]   What really was bad was that phase of the browser wars
[01:42:51.920 --> 01:42:56.080]   ended with monopoly and perhaps due to the antitrust case,
[01:42:56.080 --> 01:42:58.140]   perhaps due to regulation in Europe,
[01:42:58.140 --> 01:43:00.560]   perhaps just due to Microsoft
[01:43:00.560 --> 01:43:03.120]   not liking dealing with standardization.
[01:43:03.120 --> 01:43:05.440]   They let it rot.
[01:43:05.440 --> 01:43:10.440]   They just abandoned it, IE 5, 5.5, IE 6 later,
[01:43:10.440 --> 01:43:12.320]   but these were not well-maintained.
[01:43:12.320 --> 01:43:14.400]   They had a lot of security bugs.
[01:43:14.400 --> 01:43:16.680]   - And it was really closed and outdated too,
[01:43:16.680 --> 01:43:19.040]   even though it was getting updated, it's just weird.
[01:43:19.040 --> 01:43:22.120]   - Browsers like Mozilla and then Firefox were adding tabs.
[01:43:22.120 --> 01:43:25.960]   Opera had a version of tabs and they didn't add tabs
[01:43:25.960 --> 01:43:27.560]   and they pop up blocking,
[01:43:27.560 --> 01:43:28.840]   something I should have done from the start.
[01:43:28.840 --> 01:43:30.160]   People realized that you can tell
[01:43:30.160 --> 01:43:31.520]   when the user clicks something
[01:43:31.520 --> 01:43:34.280]   and it goes in JavaScript to open a little window
[01:43:34.280 --> 01:43:36.200]   that you can sort of inspect the stack
[01:43:36.200 --> 01:43:38.120]   and see that the click originated that
[01:43:38.120 --> 01:43:39.400]   and it's probably okay.
[01:43:39.400 --> 01:43:40.800]   Whereas if you're just loading a script
[01:43:40.800 --> 01:43:43.840]   and it opens a new window, that's a spam technique
[01:43:43.840 --> 01:43:45.180]   and you should block it.
[01:43:45.180 --> 01:43:47.360]   - Tabs were a brilliant innovation.
[01:43:47.360 --> 01:43:48.360]   Like you said, Opera had it,
[01:43:48.360 --> 01:43:52.040]   but I remember I fully switched to Firefox the moment.
[01:43:52.040 --> 01:43:57.040]   I remember the moments of first using tabs in Firefox
[01:43:57.040 --> 01:44:00.160]   and not liking it for the first few minutes
[01:44:00.160 --> 01:44:02.400]   and then like, wait a minute.
[01:44:02.400 --> 01:44:03.240]   - You get the groove, yeah.
[01:44:03.240 --> 01:44:05.520]   - You get the groove and you understand.
[01:44:05.520 --> 01:44:08.520]   So that timing, what year was this?
[01:44:08.520 --> 01:44:13.320]   Because also as a aspiring web designer, I use table.
[01:44:13.320 --> 01:44:16.240]   So we didn't mention layout or CSS much.
[01:44:16.240 --> 01:44:18.520]   There's also a change in the way
[01:44:18.520 --> 01:44:21.040]   like the frames were going away.
[01:44:21.040 --> 01:44:23.600]   So there's a change in the way websites looked
[01:44:23.600 --> 01:44:25.240]   and behaved and all that kind of stuff.
[01:44:25.240 --> 01:44:28.400]   - CSS finally, which Microsoft embraced with IE4
[01:44:28.400 --> 01:44:30.680]   and Netscape never really did, right?
[01:44:30.680 --> 01:44:33.440]   CSS became a better standard over time
[01:44:33.440 --> 01:44:36.600]   for doing table layout that relieved you of the need
[01:44:36.600 --> 01:44:40.280]   to use what are called spacer GIFs, spacer GIFs, right?
[01:44:40.280 --> 01:44:42.880]   Images you would throw into space out tables.
[01:44:42.880 --> 01:44:47.440]   The typographic power of the web has gotten better,
[01:44:47.440 --> 01:44:49.320]   but it's still not on the level of PDF
[01:44:49.320 --> 01:44:51.560]   and you can't do advanced typography,
[01:44:51.560 --> 01:44:53.160]   but it's gotten really better.
[01:44:53.160 --> 01:44:54.920]   And even then tables were getting better.
[01:44:54.920 --> 01:44:57.280]   If you were using Firefox, that would have been 2004
[01:44:57.280 --> 01:45:00.240]   'cause it was called Firebird until earlier that year.
[01:45:00.240 --> 01:45:01.840]   - No, yeah, I think it wasn't.
[01:45:01.840 --> 01:45:03.640]   - 2003. - Well, I don't remember.
[01:45:03.640 --> 01:45:06.120]   It was a Firebird, which had tabs.
[01:45:06.120 --> 01:45:07.080]   - We had tabs the whole way.
[01:45:07.080 --> 01:45:10.440]   So it started out as Mozilla/browser in 2002,
[01:45:10.440 --> 01:45:12.080]   became Phoenix.
[01:45:12.080 --> 01:45:14.680]   There's a BIOS that has an embedded version of IE
[01:45:14.680 --> 01:45:16.360]   and they said, "We're called Phoenix Technologies.
[01:45:16.360 --> 01:45:17.600]   "You can't use Phoenix."
[01:45:17.600 --> 01:45:19.160]   And so we said, "Okay, we'll call it Firebird."
[01:45:19.160 --> 01:45:21.200]   And then this Australian-centered
[01:45:21.200 --> 01:45:24.080]   open source database project started really
[01:45:24.080 --> 01:45:27.120]   like in the true Mad Max style, just screaming at us,
[01:45:27.120 --> 01:45:28.320]   saying, "You can't use Firebird."
[01:45:28.320 --> 01:45:30.440]   And I had to sort of be the ambassador.
[01:45:30.440 --> 01:45:31.280]   I said, "Okay, we're gonna rename it."
[01:45:31.280 --> 01:45:32.120]   And they're like, "We don't believe you.
[01:45:32.120 --> 01:45:32.960]   "You shouldn't have used it.
[01:45:32.960 --> 01:45:33.800]   "We hate you."
[01:45:33.800 --> 01:45:36.080]   And then we renamed it to Firefox.
[01:45:36.080 --> 01:45:38.040]   And they're like, "Oh, we love you."
[01:45:38.040 --> 01:45:40.080]   And then I haven't heard of them ever since.
[01:45:40.080 --> 01:45:41.740]   But Firefox was a clever name.
[01:45:41.740 --> 01:45:43.600]   We had to think of something distinctive.
[01:45:43.600 --> 01:45:45.720]   We wanted to keep the fire going.
[01:45:45.720 --> 01:45:48.160]   And it turns out there's a red panda, right,
[01:45:48.160 --> 01:45:49.440]   it's a nickname for.
[01:45:49.440 --> 01:45:51.200]   - So that's the second set of browser wars.
[01:45:51.200 --> 01:45:52.040]   - Second browser war.
[01:45:52.040 --> 01:45:57.000]   - So how did you, how was Firefox born?
[01:45:57.000 --> 01:45:58.640]   How's Mozilla born?
[01:45:58.640 --> 01:45:59.600]   Is there a--
[01:45:59.600 --> 01:46:01.020]   - There's a long story there too.
[01:46:01.020 --> 01:46:02.960]   So Netscape got acquired by AOL,
[01:46:02.960 --> 01:46:05.460]   which as I say was a reasonable happy ending
[01:46:05.460 --> 01:46:07.600]   for a lot of people because Netscape otherwise
[01:46:07.600 --> 01:46:08.440]   was gonna go out of business
[01:46:08.440 --> 01:46:10.700]   because Microsoft was just killing its market.
[01:46:10.700 --> 01:46:12.480]   There was no way to charge for a browser.
[01:46:12.480 --> 01:46:14.760]   Windows came with IE.
[01:46:14.760 --> 01:46:17.560]   IE 4 was pretty good and Netscape 4 wasn't that good.
[01:46:17.560 --> 01:46:19.060]   It took a while to get better.
[01:46:19.060 --> 01:46:22.260]   But the Netscape executive said,
[01:46:22.260 --> 01:46:25.640]   "Let's do an open source escape pod."
[01:46:25.640 --> 01:46:27.120]   And like in Star Wars and New Hope,
[01:46:27.120 --> 01:46:29.240]   the gunner won't shoot it 'cause there's no life forms
[01:46:29.240 --> 01:46:30.160]   on board, right?
[01:46:30.160 --> 01:46:31.400]   It's not a threat.
[01:46:31.400 --> 01:46:35.400]   And so we did Mozilla in 1998 and it looked like
[01:46:35.400 --> 01:46:38.480]   it was going to initially just give the world
[01:46:38.480 --> 01:46:40.080]   an open source browser.
[01:46:40.080 --> 01:46:41.960]   But it's really hard to get people to work
[01:46:41.960 --> 01:46:43.880]   on this sort of hairball that had been hacked up
[01:46:43.880 --> 01:46:46.060]   over by that point four years.
[01:46:46.060 --> 01:46:49.080]   It also couldn't have the crypto module
[01:46:49.080 --> 01:46:50.960]   for secure sockets, so-called,
[01:46:50.960 --> 01:46:52.900]   or now transport layer security.
[01:46:52.900 --> 01:46:54.320]   That was an electronic munition.
[01:46:54.320 --> 01:46:56.040]   We were not allowed to release that
[01:46:56.040 --> 01:47:00.400]   in the full 1024-bit key strength.
[01:47:00.400 --> 01:47:05.000]   And yet people, one of whom I happened to meet previously
[01:47:05.000 --> 01:47:08.900]   at SGI when I went on a sales support engineering trip,
[01:47:08.900 --> 01:47:11.020]   Tim Hudson in Brisbane, Australia,
[01:47:11.020 --> 01:47:16.020]   and Eric A. Young did what became OpenSSL.
[01:47:16.020 --> 01:47:19.440]   It was called SSLEAY after Eric's initials.
[01:47:19.440 --> 01:47:23.100]   And Tim and Eric took their OpenSSL
[01:47:23.100 --> 01:47:25.360]   outside of the purview of the NSA
[01:47:25.360 --> 01:47:27.200]   and the Department of Commerce,
[01:47:27.200 --> 01:47:28.880]   and they stuck it into Mozilla's code.
[01:47:28.880 --> 01:47:31.000]   And that was perhaps the best hack that was done
[01:47:31.000 --> 01:47:34.460]   in the first few months after we open sourced the browser.
[01:47:34.460 --> 01:47:35.360]   We had other problems.
[01:47:35.360 --> 01:47:37.320]   The politics inside Netscape were riven
[01:47:37.320 --> 01:47:38.280]   by these acquisitions.
[01:47:38.280 --> 01:47:41.520]   So the one acquisition that kind of messed up Netscape 4
[01:47:41.520 --> 01:47:44.280]   also wanted to keep doing a proprietary mail
[01:47:44.280 --> 01:47:48.780]   and groupware program, not Jamie Zawinski's mail program
[01:47:48.780 --> 01:47:50.080]   that was in Netscape 2 and 3.
[01:47:50.080 --> 01:47:51.800]   And they held it back from open source.
[01:47:51.800 --> 01:47:54.320]   So we didn't have a mail program, it was just a browser.
[01:47:54.320 --> 01:47:56.720]   We didn't know what AOL would do to us.
[01:47:56.720 --> 01:47:59.280]   Turns out they didn't interfere with us for a long time.
[01:47:59.280 --> 01:48:03.000]   But Netscape wasn't the best steward of Mozilla.
[01:48:03.000 --> 01:48:05.320]   We were operating Mozilla as a pirate ship
[01:48:05.320 --> 01:48:06.400]   without a legal entity.
[01:48:06.400 --> 01:48:08.900]   So most of us worked for Netscape
[01:48:08.900 --> 01:48:10.920]   under a separate organization.
[01:48:10.920 --> 01:48:15.920]   And initially the first engineering manager, Tom Paquin
[01:48:15.920 --> 01:48:19.360]   of Netscape was the Mozilla founding manager.
[01:48:19.360 --> 01:48:20.840]   But he left pretty quickly.
[01:48:20.840 --> 01:48:23.120]   And he left me as the acting manager,
[01:48:23.120 --> 01:48:25.520]   which is more like method acting in my case.
[01:48:25.520 --> 01:48:28.800]   And that was my first management stint.
[01:48:28.800 --> 01:48:32.960]   But then someone who'd written the licenses, Mitchell Baker,
[01:48:32.960 --> 01:48:34.120]   she was a lawyer at Netscape.
[01:48:34.120 --> 01:48:38.200]   She was involved in the open source license decision-making
[01:48:38.200 --> 01:48:40.400]   and the actual writing and construction of those licenses.
[01:48:40.400 --> 01:48:41.880]   That was Mitchell's job.
[01:48:41.880 --> 01:48:43.000]   Netscape public license
[01:48:43.000 --> 01:48:45.680]   and the truly open Mozilla public license.
[01:48:45.680 --> 01:48:47.400]   And there were two because Netscape needed,
[01:48:47.400 --> 01:48:49.560]   because of some encumbered code, needed some special rights,
[01:48:49.560 --> 01:48:51.080]   but that went away over time.
[01:48:51.080 --> 01:48:52.840]   Mitchell was always interested in Mozilla
[01:48:52.840 --> 01:48:54.200]   and she came back from maternity leave.
[01:48:54.200 --> 01:48:55.920]   And she said, "I'll be the manager if you want."
[01:48:55.920 --> 01:48:57.640]   And Jamie and I said, "Sure."
[01:48:57.640 --> 01:48:58.480]   And then Jamie quit.
[01:48:58.480 --> 01:48:59.400]   He quit after a year.
[01:48:59.400 --> 01:49:00.840]   He said, "This didn't work.
[01:49:00.840 --> 01:49:01.680]   I'm sorry."
[01:49:01.680 --> 01:49:04.360]   He acted like it was a total failure
[01:49:04.360 --> 01:49:08.080]   because Mozilla didn't restart the browser market.
[01:49:08.080 --> 01:49:09.280]   But there's no way it could have.
[01:49:09.280 --> 01:49:13.760]   Netscape was still shipping variants of Netscape 4,
[01:49:13.760 --> 01:49:15.720]   which was based on the old code.
[01:49:15.720 --> 01:49:18.400]   Mozilla was trying to re-architect code
[01:49:18.400 --> 01:49:19.880]   to make greenfield for developers.
[01:49:19.880 --> 01:49:20.920]   So it was one of my big goals.
[01:49:20.920 --> 01:49:24.160]   It wasn't a technical goal so much as, again, a social goal.
[01:49:24.160 --> 01:49:26.400]   People wanted a more standard spaced browser.
[01:49:26.400 --> 01:49:29.400]   They wanted less of a hairball that had been hacked on
[01:49:29.400 --> 01:49:32.040]   by ex-grad students starting four years prior.
[01:49:32.040 --> 01:49:35.120]   So we said, "We're gonna make a modular code base.
[01:49:35.120 --> 01:49:37.560]   We're gonna use a variant or an open source version
[01:49:37.560 --> 01:49:40.000]   of Microsoft's component object model,
[01:49:40.000 --> 01:49:43.480]   has reference counting and standardized V tables,
[01:49:43.480 --> 01:49:45.240]   virtual calls and C++.
[01:49:45.240 --> 01:49:47.360]   And we're gonna use JavaScript.
[01:49:47.360 --> 01:49:48.720]   We're gonna have a bridge between those two
[01:49:48.720 --> 01:49:50.160]   so you can script those components
[01:49:50.160 --> 01:49:51.560]   just like Java components.
[01:49:51.560 --> 01:49:54.800]   We're going to make a portable front end
[01:49:54.800 --> 01:49:57.200]   with a markup language for the user interface.
[01:49:57.200 --> 01:50:00.400]   Not tables, not HTML, but custom menus
[01:50:00.400 --> 01:50:02.880]   and dropdowns and toolbars."
[01:50:02.880 --> 01:50:06.080]   And that was called Zool, XML user interface language.
[01:50:06.080 --> 01:50:07.720]   And some real talent on the Netscape side
[01:50:07.720 --> 01:50:11.320]   delivered that, Dave Hyatt, who was instrumental in Zool,
[01:50:11.320 --> 01:50:15.680]   Chris Watterson, Joe Hewitt, Blake Ross.
[01:50:15.680 --> 01:50:17.800]   And Blake was an intern.
[01:50:17.800 --> 01:50:20.480]   He was like a high school aged intern at Netscape.
[01:50:20.480 --> 01:50:23.920]   And at some point we were innovating rapidly
[01:50:23.920 --> 01:50:26.960]   in the Mozilla world and Netscape was still caught up
[01:50:26.960 --> 01:50:29.360]   in this management mess from these acquisitions.
[01:50:29.360 --> 01:50:30.440]   And it wasn't delivering.
[01:50:30.440 --> 01:50:32.800]   And every year they were wondering if AOL was gonna come
[01:50:32.800 --> 01:50:34.280]   and start beheading the executives
[01:50:34.280 --> 01:50:36.080]   'cause it didn't do anything useful.
[01:50:36.080 --> 01:50:36.920]   And there was this thought,
[01:50:36.920 --> 01:50:38.920]   you should take the Netscape browser engine
[01:50:38.920 --> 01:50:40.720]   and put it in the Windows AOL client,
[01:50:40.720 --> 01:50:43.600]   which was the dial-up client that all the increasingly aging
[01:50:43.600 --> 01:50:45.400]   users of AOL were using.
[01:50:45.400 --> 01:50:46.240]   Never happened.
[01:50:46.240 --> 01:50:48.120]   It would have been too big a change.
[01:50:48.120 --> 01:50:49.760]   So it wasn't clear why AOL bought Netscape,
[01:50:49.760 --> 01:50:50.880]   but as I said, they left it alone,
[01:50:50.880 --> 01:50:53.280]   but Netscape didn't leave Mozilla alone.
[01:50:53.280 --> 01:50:58.280]   And so in 2001, Mitchell called me up and said,
[01:50:58.280 --> 01:50:59.800]   "I'm no longer employed."
[01:50:59.800 --> 01:51:00.840]   And I was like, "What, you quit?"
[01:51:00.840 --> 01:51:02.320]   And no, no, this wasn't my choice.
[01:51:02.320 --> 01:51:05.280]   And there was a layoff, which maybe accidentally
[01:51:05.280 --> 01:51:06.800]   or on purpose got rid of Mitchell.
[01:51:06.800 --> 01:51:08.640]   But the funny thing was we had an open source project.
[01:51:08.640 --> 01:51:11.200]   We had a lot of the engineers on staff on our side
[01:51:11.200 --> 01:51:15.200]   and we had people we'd hired through the Mozilla community
[01:51:15.200 --> 01:51:16.280]   who were top-notch.
[01:51:16.280 --> 01:51:18.640]   They'd risen, they came in high quality,
[01:51:18.640 --> 01:51:20.440]   they knew the code, and they actually were better
[01:51:20.440 --> 01:51:23.320]   than the average or median hire of Netscape.
[01:51:23.320 --> 01:51:26.920]   And so the funny thing was the executive
[01:51:26.920 --> 01:51:29.920]   who thought they'd gotten rid of Mitchell on the layoff,
[01:51:29.920 --> 01:51:32.640]   on the next week's community call around Mozilla
[01:51:32.640 --> 01:51:34.240]   and what to do, there's Mitchell.
[01:51:34.240 --> 01:51:36.760]   And so this showed you can kind of transcend
[01:51:36.760 --> 01:51:40.400]   your boundaries of corporate open source
[01:51:40.400 --> 01:51:42.680]   if you get a project that has enough loyalty,
[01:51:42.680 --> 01:51:43.760]   even among the paid staff.
[01:51:43.760 --> 01:51:45.520]   'Cause we had outside people contributing.
[01:51:45.520 --> 01:51:47.920]   We had people at Red Hat and a few other places,
[01:51:47.920 --> 01:51:50.560]   but the majority of the hackers were employed by Netscape.
[01:51:50.560 --> 01:51:53.440]   But a lot of them at that point had come from the community
[01:51:53.440 --> 01:51:55.920]   and others got the community and wanted to work with it.
[01:51:55.920 --> 01:51:57.840]   And it was really the weakest engineers at Netscape
[01:51:57.840 --> 01:52:01.040]   who didn't like Mozilla and didn't like the crucible
[01:52:01.040 --> 01:52:04.160]   of competing with the better programmers.
[01:52:04.160 --> 01:52:06.600]   - So if the project is good enough, it will rise,
[01:52:06.600 --> 01:52:08.160]   the Phoenix will rise out of the--
[01:52:08.160 --> 01:52:09.000]   - That's exactly right.
[01:52:09.000 --> 01:52:10.840]   And so we had this Mozilla code base
[01:52:10.840 --> 01:52:11.680]   that was getting better.
[01:52:11.680 --> 01:52:13.480]   In fact, I think at some point in 2002,
[01:52:13.480 --> 01:52:17.320]   when we declared Mozilla 1.0, I engineered a roadmap
[01:52:17.320 --> 01:52:20.040]   that successively through similar sort of six week,
[01:52:20.040 --> 01:52:21.840]   five week releases, like we all do
[01:52:21.840 --> 01:52:23.400]   with browser releases nowadays,
[01:52:23.400 --> 01:52:26.520]   Chrome does and Firefox braved us three weeks.
[01:52:26.520 --> 01:52:29.640]   We got to a point where we said, you know what?
[01:52:29.640 --> 01:52:30.480]   It doesn't suck.
[01:52:30.480 --> 01:52:33.160]   This is like the 1.0 that you want to release
[01:52:33.160 --> 01:52:35.280]   because if you hold it back any longer to polish it,
[01:52:35.280 --> 01:52:36.920]   you're denying others the ability to use it.
[01:52:36.920 --> 01:52:39.320]   It's like Pro Engineer, the mechanical CAD tool,
[01:52:39.320 --> 01:52:42.760]   embedded the code, they embedded the layout engine.
[01:52:43.600 --> 01:52:46.920]   And Mozilla 1.0 was like a Netscape communication suite.
[01:52:46.920 --> 01:52:49.520]   We had at that point gotten male people
[01:52:49.520 --> 01:52:51.120]   to reintegrate mail and news,
[01:52:51.120 --> 01:52:53.560]   and we had an editor for HTML.
[01:52:53.560 --> 01:52:56.560]   And it felt like a 90s suite, suite where.
[01:52:56.560 --> 01:52:58.760]   And it felt kind of bloated.
[01:52:58.760 --> 01:53:02.080]   And the people who were taking that Mozilla open source
[01:53:02.080 --> 01:53:04.960]   and then adding Netscape flavor to it
[01:53:04.960 --> 01:53:06.480]   were not calling the shots right.
[01:53:06.480 --> 01:53:08.400]   And they were also under ALS thumb a little bit
[01:53:08.400 --> 01:53:10.440]   in that they said, well, we should probably put
[01:53:10.440 --> 01:53:13.080]   the ALS instant messenger chicklet on the toolbar.
[01:53:13.080 --> 01:53:14.920]   And we should put the ICQ,
[01:53:14.920 --> 01:53:17.240]   the other messaging system that ALS had acquired.
[01:53:17.240 --> 01:53:19.520]   We should put the ICQ button on the toolbar.
[01:53:19.520 --> 01:53:23.440]   And pretty soon Netscape looked like a bit of a NASCAR
[01:53:23.440 --> 01:53:24.960]   badged version of Mozilla.
[01:53:24.960 --> 01:53:27.080]   And that also made Mozilla more popular.
[01:53:27.080 --> 01:53:32.080]   And yet they had contrived to fire or lay off the leader.
[01:53:32.080 --> 01:53:38.440]   And we'd carried on with an open source structure
[01:53:38.440 --> 01:53:40.800]   where Mozilla was still, you know, Mitchell was calling
[01:53:40.800 --> 01:53:44.400]   sort of management or project level shots.
[01:53:44.400 --> 01:53:46.040]   And I was calling technical shots.
[01:53:46.040 --> 01:53:51.040]   And we had a popular suite, but we thought,
[01:53:51.040 --> 01:53:52.640]   why not make it just a browser?
[01:53:52.640 --> 01:53:55.480]   Because it'll be simpler, it'll do one job well.
[01:53:55.480 --> 01:53:58.720]   And even then we can strip it down by having extensions.
[01:53:58.720 --> 01:54:03.640]   So Dave Hyatt and Blake Ross, the high school aged intern,
[01:54:03.640 --> 01:54:07.200]   did the first version, which was called Mozilla/browser.
[01:54:07.200 --> 01:54:09.880]   It was a small group of us, Ian Hicks and Asa Dotsler,
[01:54:09.880 --> 01:54:14.280]   me and Joe Hewitt and Hyatt and Blake.
[01:54:14.280 --> 01:54:16.480]   And Hyatt was really the senior hacker.
[01:54:16.480 --> 01:54:20.440]   He'd done all these things like amazing cross-platform menus
[01:54:20.440 --> 01:54:23.440]   through the user interface, market language.
[01:54:23.440 --> 01:54:24.680]   And he knew how to do tab browsing.
[01:54:24.680 --> 01:54:28.200]   He'd implemented it natively on Mac OS at the time
[01:54:28.200 --> 01:54:31.840]   in Camino, originally called Camara.
[01:54:31.840 --> 01:54:34.240]   He'd written multiple implementations,
[01:54:34.240 --> 01:54:36.280]   which was a thing programmers should do.
[01:54:36.280 --> 01:54:38.400]   It's like the V8 team did for those missing years
[01:54:38.400 --> 01:54:41.000]   when the rest of the Chrome team's like, where's V8?
[01:54:41.000 --> 01:54:44.400]   In fact, Dave's wife, Rebecca, told me a story
[01:54:44.400 --> 01:54:45.800]   about when they were at UIUC,
[01:54:45.800 --> 01:54:49.400]   they were also University of Illinois grad students.
[01:54:49.400 --> 01:54:51.240]   There was an assignment, it was a programming assignment,
[01:54:51.240 --> 01:54:53.240]   it was supposed to be due at the end of the semester.
[01:54:53.240 --> 01:54:56.800]   And Dave's friend was this, I'm gonna go think
[01:54:56.800 --> 01:55:00.080]   and I'm gonna design and I'm gonna make this platonic,
[01:55:00.080 --> 01:55:01.240]   perfect form of the program.
[01:55:01.240 --> 01:55:03.560]   And then I'm gonna write it at the end when it's due.
[01:55:03.560 --> 01:55:05.080]   And Hyatt just went in there and started hacking.
[01:55:05.080 --> 01:55:06.640]   And he wrote one version, he wrote a second version,
[01:55:06.640 --> 01:55:09.240]   a third version, end of the semester comes around,
[01:55:09.240 --> 01:55:11.160]   the friend's not doing too well.
[01:55:11.160 --> 01:55:13.000]   It wasn't perfect and it wasn't written.
[01:55:13.000 --> 01:55:14.800]   I'm not sure how that story ended for him,
[01:55:14.800 --> 01:55:18.080]   but Dave's version was a fifth iteration, it was great.
[01:55:18.080 --> 01:55:20.680]   And so he'd done that with everything you need
[01:55:20.680 --> 01:55:21.640]   in a tabbed browser.
[01:55:21.640 --> 01:55:24.320]   And this really showed well in Phoenix,
[01:55:24.320 --> 01:55:27.120]   what we called Phoenix and had to rename two more times.
[01:55:27.120 --> 01:55:32.240]   And Blake went to Stanford, he became a Stanford student
[01:55:32.240 --> 01:55:34.000]   and couldn't work on it.
[01:55:34.000 --> 01:55:36.560]   Dave Hyatt went to Apple in 2001.
[01:55:36.560 --> 01:55:39.520]   He was one of the founding Safari team members.
[01:55:39.520 --> 01:55:40.440]   - Interesting, wow.
[01:55:40.440 --> 01:55:43.480]   - But he was still blogging about tabbed browsing.
[01:55:43.480 --> 01:55:44.320]   I think Apple at some point said--
[01:55:44.320 --> 01:55:46.080]   - Did Safari have tabbed browsing?
[01:55:46.080 --> 01:55:48.160]   - Yeah, but it was because of Hyatt.
[01:55:48.160 --> 01:55:49.760]   Hyatt was quite a feather in their cap.
[01:55:49.760 --> 01:55:53.360]   Don Melton, who had been the engineering manager
[01:55:53.360 --> 01:55:56.480]   for Safari from the beginning, had been in that scape also.
[01:55:56.480 --> 01:55:58.920]   And so this is a diaspora of talent.
[01:55:58.920 --> 01:56:01.520]   And yet Hyatt was still kind of writing blog posts
[01:56:01.520 --> 01:56:03.200]   about how to do tabs right.
[01:56:03.200 --> 01:56:05.240]   And at some point Apple said, "Don't blog about that.
[01:56:05.240 --> 01:56:07.560]   "That's our proprietary tab technology."
[01:56:07.560 --> 01:56:08.480]   And it's like, "No, it's not.
[01:56:08.480 --> 01:56:10.400]   "It was an opera and I've refined it."
[01:56:10.400 --> 01:56:12.680]   So we had to replace people.
[01:56:12.680 --> 01:56:17.120]   And we had Ben Goodger, a New Zealander,
[01:56:17.120 --> 01:56:18.920]   we hired at Netscape, and he stepped in
[01:56:18.920 --> 01:56:21.240]   to be the Firefox lead.
[01:56:21.240 --> 01:56:23.320]   And we also had this weird circumstance
[01:56:23.320 --> 01:56:26.880]   where AOL finally did notice that Netscape
[01:56:26.880 --> 01:56:28.960]   was kind of an albatross, that they bought it
[01:56:28.960 --> 01:56:31.040]   for no particular benefit.
[01:56:31.040 --> 01:56:33.840]   And even then the AOL politics were also heinous,
[01:56:33.840 --> 01:56:35.320]   sort of East Coast politics.
[01:56:35.320 --> 01:56:36.640]   I remember taking two trips there
[01:56:36.640 --> 01:56:37.760]   'cause I was a principal engineer.
[01:56:37.760 --> 01:56:39.520]   And so us principal engineers got trotted out
[01:56:39.520 --> 01:56:42.720]   to do dog and pony shows in Dulles, Virginia.
[01:56:42.720 --> 01:56:46.360]   And the AOL opera management was very East Coast in flavor.
[01:56:46.360 --> 01:56:49.040]   And they were at that time merging with Time Warner,
[01:56:49.040 --> 01:56:50.480]   which did not go well.
[01:56:50.480 --> 01:56:51.960]   So one of these years we went out there
[01:56:51.960 --> 01:56:53.400]   and we were all doing dog and pony shows.
[01:56:53.400 --> 01:56:55.040]   And there were these characters
[01:56:55.040 --> 01:56:56.320]   that were sort of like marketing guys,
[01:56:56.320 --> 01:56:57.640]   one of them was wearing a cravat,
[01:56:57.640 --> 01:56:59.400]   and one was named Reggie.
[01:56:59.400 --> 01:57:04.400]   And they were very you rather than non-you,
[01:57:04.400 --> 01:57:08.240]   or they were like what's Stillman's Metropolitan film,
[01:57:08.240 --> 01:57:13.240]   UHB, urban haute bourgeoisie.
[01:57:13.240 --> 01:57:17.400]   They were haute bourgeoisie, they were funny,
[01:57:17.400 --> 01:57:20.080]   and they were kind of useless and kind of preppy.
[01:57:20.080 --> 01:57:21.680]   And then the next year we went back and I said,
[01:57:21.680 --> 01:57:22.520]   where's Reggie?
[01:57:22.520 --> 01:57:24.080]   And it's like, oh, Reggie's not here anymore
[01:57:24.080 --> 01:57:26.240]   'cause Time Warner realized that the merger
[01:57:26.240 --> 01:57:27.440]   wasn't in their interest either.
[01:57:27.440 --> 01:57:29.080]   And then the sort of knives came out.
[01:57:29.080 --> 01:57:31.760]   And these mergers rarely work, right?
[01:57:31.760 --> 01:57:32.600]   This is very difficult.
[01:57:32.600 --> 01:57:33.760]   You get these giant companies
[01:57:33.760 --> 01:57:35.240]   and they think there's gonna be synergy.
[01:57:35.240 --> 01:57:37.280]   That was the late '90s with Watchword.
[01:57:37.280 --> 01:57:39.280]   And there wasn't synergy with AOL buying Netscape,
[01:57:39.280 --> 01:57:41.200]   and there wasn't synergy with Time Warner and AOL.
[01:57:41.200 --> 01:57:42.960]   - But did AOL ever really work?
[01:57:42.960 --> 01:57:44.240]   Was it ever really cool?
[01:57:44.240 --> 01:57:46.440]   Like the same kind of fire and excitement
[01:57:46.440 --> 01:57:48.720]   that Firefox eventually created,
[01:57:48.720 --> 01:57:51.080]   was that ever there in AOL?
[01:57:51.080 --> 01:57:55.000]   - AOL was the right time to do a dial-up service
[01:57:55.000 --> 01:57:56.600]   that got distribution by basically
[01:57:56.640 --> 01:58:00.680]   leaflet-bombing compact disks on the country.
[01:58:00.680 --> 01:58:05.520]   And they beat out CompuServe and the other ones, Prodigy,
[01:58:05.520 --> 01:58:06.920]   and then the web happened.
[01:58:06.920 --> 01:58:10.920]   And so you had almost like this isolated continent,
[01:58:10.920 --> 01:58:14.160]   like some of the evolutionary biologists I follow
[01:58:14.160 --> 01:58:19.160]   make fun of the funny large marsupial mammals of Australia,
[01:58:19.160 --> 01:58:21.560]   how silly they are.
[01:58:21.560 --> 01:58:23.080]   - So AOL's like Australia.
[01:58:23.080 --> 01:58:23.920]   (Lex laughing)
[01:58:23.920 --> 01:58:26.420]   - And you saw it over time because they kept aging
[01:58:26.420 --> 01:58:28.200]   and they were using AOL to get online
[01:58:28.200 --> 01:58:30.480]   and they couldn't really use a web browser.
[01:58:30.480 --> 01:58:33.440]   And it became sort of a valued cohort
[01:58:33.440 --> 01:58:36.320]   'cause they still have relatively high socioeconomic status
[01:58:36.320 --> 01:58:38.480]   and they have grandchildren, but it's going away.
[01:58:38.480 --> 01:58:39.520]   It's dying at some point.
[01:58:39.520 --> 01:58:42.160]   - Towards the end of the aughts, that decade,
[01:58:42.160 --> 01:58:46.040]   and then to the decade 2010 plus,
[01:58:46.040 --> 01:58:48.680]   that Firefox became this incredible,
[01:58:48.680 --> 01:58:50.280]   I forget when Chrome came out, but--
[01:58:50.280 --> 01:58:51.120]   - 2008, September.
[01:58:51.120 --> 01:58:55.120]   - 2008, but Firefox was the sexy, cool thing
[01:58:55.120 --> 01:58:57.540]   that represented a lot of the cutting edge technologies
[01:58:57.540 --> 01:58:58.380]   and all that kind of stuff.
[01:58:58.380 --> 01:59:00.180]   - Web 2, it was amazing.
[01:59:00.180 --> 01:59:02.900]   Tim O'Reilly and John Battelle did the first Web 2
[01:59:02.900 --> 01:59:04.460]   conference, which eventually became huge
[01:59:04.460 --> 01:59:06.700]   and they split it, but that was in 2004.
[01:59:06.700 --> 01:59:08.580]   That's right when Firefox was out.
[01:59:08.580 --> 01:59:11.700]   Craigslist was huge, it was killing classified revenue
[01:59:11.700 --> 01:59:14.460]   for newspapers, but there was just this ferment.
[01:59:14.460 --> 01:59:15.300]   People starting--
[01:59:15.300 --> 01:59:16.700]   - Wikipedia along there somewhere?
[01:59:16.700 --> 01:59:19.860]   - Gmail was already done and it was an impressive web mail.
[01:59:19.860 --> 01:59:21.180]   There were others before it like Hotmail,
[01:59:21.180 --> 01:59:22.940]   but Gmail was really impressive from Google.
[01:59:22.940 --> 01:59:26.040]   And Google Maps, people started seeing what could be done.
[01:59:26.040 --> 01:59:28.120]   They thought, how can you drag the map around
[01:59:28.120 --> 01:59:29.720]   and how does that work?
[01:59:29.720 --> 01:59:31.520]   And it was all JavaScript and images.
[01:59:31.520 --> 01:59:34.520]   - Gmail was 2003, four?
[01:59:34.520 --> 01:59:36.240]   - Yeah, I think it actually started quite early.
[01:59:36.240 --> 01:59:38.460]   It might have been 2002 or three, but by the time
[01:59:38.460 --> 01:59:40.120]   we started dealing with Google and Firefox
[01:59:40.120 --> 01:59:42.520]   to get the search deal, which was the main revenue source
[01:59:42.520 --> 01:59:46.600]   for Mozilla, and still is, 2004, early,
[01:59:46.600 --> 01:59:49.760]   Sergey Brin's, one of his trusted engineer guys,
[01:59:49.760 --> 01:59:51.960]   Fritz Schneider, made contact with me at Mozilla
[01:59:51.960 --> 01:59:55.420]   and we started talking and we realized search
[01:59:55.420 --> 01:59:57.020]   and browser need each other.
[01:59:57.020 --> 01:59:58.500]   And this is deeply true, right?
[01:59:58.500 --> 01:59:59.820]   This is still true.
[01:59:59.820 --> 02:00:01.180]   This is why a lot of the search engines
[02:00:01.180 --> 02:00:02.300]   have their own browsers.
[02:00:02.300 --> 02:00:03.700]   - Yeah, so in case people don't know,
[02:00:03.700 --> 02:00:05.620]   the main revenue source for the browser
[02:00:05.620 --> 02:00:08.620]   is the default search engine, which is kind of incredible
[02:00:08.620 --> 02:00:11.500]   to think about, that that is a revenue source.
[02:00:11.500 --> 02:00:12.620]   It's a little bit sad.
[02:00:12.620 --> 02:00:14.620]   - Yeah, it leads to this capture or kill effect
[02:00:14.620 --> 02:00:17.060]   where you have the search engine own its own browser
[02:00:17.060 --> 02:00:21.300]   and other browsers may struggle to get distribution,
[02:00:21.300 --> 02:00:22.640]   we talked about it earlier.
[02:00:22.640 --> 02:00:26.820]   - So where, and you said you've figured out
[02:00:26.820 --> 02:00:29.780]   that Google's working on its own browser at some point.
[02:00:29.780 --> 02:00:30.760]   - 2006, yeah.
[02:00:30.760 --> 02:00:33.260]   - 2006, so would you say Firefox versus,
[02:00:33.260 --> 02:00:35.420]   was Internet Explorer part of the war here
[02:00:35.420 --> 02:00:37.320]   or was it Firefox versus Chrome?
[02:00:37.320 --> 02:00:39.560]   - So Firefox didn't quite cause Microsoft
[02:00:39.560 --> 02:00:43.760]   to reconvene, they did do IE7, and I remember
[02:00:43.760 --> 02:00:46.240]   being on a plane back from the standards meeting,
[02:00:46.240 --> 02:00:49.000]   JavaScript standards meeting from Seattle, from Redmond,
[02:00:49.000 --> 02:00:52.120]   and there was some Microsoft guy in front of me,
[02:00:52.120 --> 02:00:54.920]   turns out my wife knew him from her past life
[02:00:54.920 --> 02:00:58.200]   before we married, and he was just this bearded big guy
[02:00:58.200 --> 02:01:00.920]   and he was like, we should have just killed Firefox
[02:01:00.920 --> 02:01:03.520]   in the cradle, all we needed to do was add popup blocking
[02:01:03.520 --> 02:01:05.560]   and tabs and we could have made Internet Explorer
[02:01:05.560 --> 02:01:07.840]   kill Firefox, and it's like, shoulda, coulda, woulda, pal,
[02:01:07.840 --> 02:01:10.320]   and I was right behind him overhearing this.
[02:01:10.320 --> 02:01:13.520]   But they didn't, they were slow and IE7 wasn't that great,
[02:01:13.520 --> 02:01:18.440]   and what really got them started, I think, was Chrome.
[02:01:18.440 --> 02:01:22.800]   And I talked to Larry Page in 2005, I think I said,
[02:01:22.800 --> 02:01:24.500]   we're talking about the Firefox relationship,
[02:01:24.500 --> 02:01:26.120]   but he was also saying, what about WebKit?
[02:01:26.120 --> 02:01:30.480]   This was Apple's version of the old KHTML engine
[02:01:30.480 --> 02:01:34.640]   from Linux, the KDE side of Linux, that was used
[02:01:34.640 --> 02:01:36.880]   in the Conqueror browser, also with Ks,
[02:01:36.880 --> 02:01:41.240]   that Apple had forked, and in 2005 was when Apple's
[02:01:41.240 --> 02:01:43.400]   principals, including Dave Hyatt, Maciej Stachowiak,
[02:01:43.400 --> 02:01:45.200]   some of my friends who are still there, said,
[02:01:45.200 --> 02:01:48.560]   we must stop patch bombing this poor KHTML project,
[02:01:48.560 --> 02:01:50.920]   we should make a proper Mozilla-like organization,
[02:01:50.920 --> 02:01:53.340]   WebKit.org, now it wasn't a separate non-profit
[02:01:53.340 --> 02:01:55.240]   or anything, it was still Apple, it was Apple-controlled,
[02:01:55.240 --> 02:01:58.960]   but they made their fork first class and they made it
[02:01:58.960 --> 02:02:01.440]   be something that they all worked in and lived in,
[02:02:01.440 --> 02:02:04.080]   and that was before Chrome, and then Chrome,
[02:02:04.080 --> 02:02:05.680]   Larry Page said, what about WebKit?
[02:02:05.680 --> 02:02:08.000]   I said, yeah, it's nice, I have friends who work on it,
[02:02:08.000 --> 02:02:09.560]   you might use that if you do your own browser,
[02:02:09.560 --> 02:02:10.480]   why don't you do your own browser?
[02:02:10.480 --> 02:02:12.920]   Don't worry about Firefox, you should do your own browser,
[02:02:12.920 --> 02:02:15.280]   you can have your own opinion of how it should work,
[02:02:15.280 --> 02:02:18.400]   and sure enough, they did, so by 2006, we knew
[02:02:18.400 --> 02:02:20.160]   they'd been working on it, some of my friends
[02:02:20.160 --> 02:02:22.440]   who'd been at Netscape did the original demo,
[02:02:22.440 --> 02:02:24.020]   and the demo wasn't what you thought,
[02:02:24.020 --> 02:02:25.360]   it didn't have the fast JavaScript yet,
[02:02:25.360 --> 02:02:28.520]   that was still off in Denmark on a farm.
[02:02:28.520 --> 02:02:30.520]   - Did it have tabs?
[02:02:30.520 --> 02:02:32.800]   - It had tabs, 'cause all browsers had tabs at this point,
[02:02:32.800 --> 02:02:37.480]   and it had this software fault isolation I mentioned,
[02:02:37.480 --> 02:02:41.120]   it was through process isolation, so in theory,
[02:02:41.120 --> 02:02:43.600]   each tab has its own operating system process,
[02:02:43.600 --> 02:02:45.640]   and so what's gonna take your tab down?
[02:02:45.640 --> 02:02:48.440]   Well, WebKit has bugs that can crash it,
[02:02:48.440 --> 02:02:50.840]   but Flash was still big then, all the restaurant sites,
[02:02:50.840 --> 02:02:54.320]   remember, and Flash crashed a lot, so the demo
[02:02:54.320 --> 02:02:56.520]   that I heard about, my friends at Netscape,
[02:02:56.520 --> 02:03:00.500]   as a lot of people did, inside Google was the sad tab,
[02:03:00.500 --> 02:03:02.160]   they showed an early version of Chrome,
[02:03:02.160 --> 02:03:04.240]   which is just this bare bones tab browser,
[02:03:04.240 --> 02:03:06.720]   they loaded a site with a known Flash vuln,
[02:03:06.720 --> 02:03:09.240]   and then suddenly, Flash crashes, and everyone expected
[02:03:09.240 --> 02:03:11.320]   the whole browser to go down, but instead,
[02:03:11.320 --> 02:03:13.120]   you got this little sad face in the tab,
[02:03:13.120 --> 02:03:14.800]   and you could reload it, and there it is again,
[02:03:14.800 --> 02:03:18.760]   so this was an improvement, it was a real move for security,
[02:03:18.760 --> 02:03:22.720]   it was based on a company they acquired called Green Border,
[02:03:22.720 --> 02:03:25.080]   they had some really big brains, like Olfar Erlingson,
[02:03:25.080 --> 02:03:28.160]   I think was involved, and they had done some exotic
[02:03:28.160 --> 02:03:30.080]   security stuff, but they ended up simplifying it
[02:03:30.080 --> 02:03:34.980]   to this process isolation, and it was good,
[02:03:34.980 --> 02:03:36.760]   and Firefox didn't have it at the time,
[02:03:36.760 --> 02:03:39.700]   so we were still struggling with security bugs.
[02:03:39.700 --> 02:03:43.920]   So we knew Chrome was coming, but it took two more years
[02:03:43.920 --> 02:03:47.960]   to come out, and we were still getting the Google search
[02:03:47.960 --> 02:03:51.840]   revenue, and we were still making Google the default engine,
[02:03:51.840 --> 02:03:54.000]   and Firefox was still growing, Firefox grew,
[02:03:54.000 --> 02:03:56.860]   I think until 2011, that was when it peaked,
[02:03:56.860 --> 02:03:59.840]   and as it started falling, it was because of Chrome.
[02:03:59.840 --> 02:04:02.880]   Chrome came out in 2008, and it was a comic book
[02:04:02.880 --> 02:04:04.800]   that leaked accidentally, that showed some of the people
[02:04:04.800 --> 02:04:07.240]   who worked on it, Lars Bach was in there, and so on.
[02:04:07.240 --> 02:04:10.040]   It was kind of soft launch, because they didn't market
[02:04:10.040 --> 02:04:12.560]   it heavily, they didn't push distribution,
[02:04:12.560 --> 02:04:14.800]   but Google had reason to worry about distribution,
[02:04:14.800 --> 02:04:18.760]   because Microsoft was doing a search engine,
[02:04:18.760 --> 02:04:22.000]   Bing, since 2007, in fact, when they came out with Bing,
[02:04:22.000 --> 02:04:25.200]   Google was worried that Microsoft would just brute force
[02:04:25.200 --> 02:04:28.840]   switch the default browser in everyone's Internet Explorer,
[02:04:28.840 --> 02:04:32.520]   or even Firefox on Windows, to Bing from Google,
[02:04:32.520 --> 02:04:35.760]   and Microsoft wasn't, I think, ready to dare
[02:04:35.760 --> 02:04:37.680]   the antitrust cops that way, even though
[02:04:37.680 --> 02:04:40.360]   they'd gone to sleep, and I don't think
[02:04:40.360 --> 02:04:44.000]   Bing was ready, either, but just in case it happened,
[02:04:44.000 --> 02:04:47.760]   Sundar Pichai, who rose very well based on this work,
[02:04:47.760 --> 02:04:50.600]   was sort of in charge of getting distribution deals,
[02:04:50.600 --> 02:04:54.920]   and he got Google Toolbar, and Google Desktop Search
[02:04:54.920 --> 02:04:56.800]   distribution, and if you remember those pieces of software,
[02:04:56.800 --> 02:05:00.680]   those were like desktop extensions, toolbars,
[02:05:00.680 --> 02:05:03.080]   or operating system extensions for doing desktop search
[02:05:03.080 --> 02:05:03.920]   in your local files, kind of like--
[02:05:03.920 --> 02:05:05.880]   - Oh, that's right. - Mac OS Spotlight.
[02:05:05.880 --> 02:05:07.800]   - Sadly died out. - It all died,
[02:05:07.800 --> 02:05:09.200]   and there were some features that we still missed
[02:05:09.200 --> 02:05:10.520]   that didn't make it into Chrome,
[02:05:10.520 --> 02:05:13.960]   but Sundar got OEMs to bundle those,
[02:05:13.960 --> 02:05:15.440]   and then he got enough of those deals
[02:05:15.440 --> 02:05:18.400]   that by 2007 or '08, Google felt, well,
[02:05:18.400 --> 02:05:21.800]   if Microsoft does the worst and tries to force Bing,
[02:05:21.800 --> 02:05:25.400]   we can reach in and reset it with that point of presence.
[02:05:25.400 --> 02:05:27.240]   So that was good for Sundar's career,
[02:05:27.240 --> 02:05:29.160]   and it was good for Google, but it never came to pass
[02:05:29.160 --> 02:05:30.720]   that they had to defend.
[02:05:30.720 --> 02:05:34.240]   Microsoft was still slow, and by the time they saw
[02:05:34.240 --> 02:05:37.360]   Chrome come out, then they did what would have been IE9,
[02:05:37.360 --> 02:05:38.720]   and then they said, we're gonna have a fast
[02:05:38.720 --> 02:05:41.360]   JavaScript engine to Chakra, Chakra Core,
[02:05:41.360 --> 02:05:43.160]   and they did okay.
[02:05:43.160 --> 02:05:46.240]   They were another process-isolated,
[02:05:46.240 --> 02:05:48.960]   fast JavaScript browser, tab browser.
[02:05:48.960 --> 02:05:51.320]   - So it sounds like there's a deep,
[02:05:51.320 --> 02:05:53.640]   fundamental coupling of search engine and browser
[02:05:53.640 --> 02:05:55.760]   that's mixing this whole thing up,
[02:05:55.760 --> 02:05:59.960]   and obviously Firefox doesn't have a search engine
[02:05:59.960 --> 02:06:03.680]   that's like, I mean, you're partnering with somebody
[02:06:03.680 --> 02:06:08.680]   with a search engine, with Yahoo or with Google or so on.
[02:06:08.680 --> 02:06:09.600]   - They tried Yahoo.
[02:06:09.600 --> 02:06:11.400]   That was unfortunate because I think,
[02:06:11.400 --> 02:06:14.600]   even though Marissa Mayer talked about it,
[02:06:14.600 --> 02:06:15.800]   she never pulled it off.
[02:06:15.800 --> 02:06:18.320]   They never restored the search team
[02:06:18.320 --> 02:06:19.560]   that had been laid off.
[02:06:19.560 --> 02:06:21.440]   I believe Carol Bartz was running Yahoo
[02:06:21.440 --> 02:06:23.320]   when Carol said, I've gotta get rid of
[02:06:23.320 --> 02:06:24.520]   one of the three expensive things.
[02:06:24.520 --> 02:06:25.920]   I'm gonna get rid of search.
[02:06:25.920 --> 02:06:29.760]   And those researchers went to Google and Microsoft,
[02:06:29.760 --> 02:06:32.480]   and there was no way to put Yahoo search back together.
[02:06:32.480 --> 02:06:36.000]   So when Firefox tried switching all their users
[02:06:36.000 --> 02:06:38.840]   who'd stuck with a default from Google to Yahoo,
[02:06:38.840 --> 02:06:41.880]   like mid-December 2014, a bunch of users said,
[02:06:41.880 --> 02:06:44.040]   what just happened to my Firefox?
[02:06:44.040 --> 02:06:45.280]   And others didn't notice right away,
[02:06:45.280 --> 02:06:48.280]   but over time they did, and so over the next year,
[02:06:48.280 --> 02:06:51.320]   the traffic just went away for Yahoo,
[02:06:51.320 --> 02:06:54.160]   and yet they were obliged, I understand it,
[02:06:54.160 --> 02:06:56.640]   I don't have inside knowledge, but this is leaked out,
[02:06:56.640 --> 02:06:58.320]   and Danny Sullivan's written about it,
[02:06:58.320 --> 02:06:59.920]   search engine, and I think the deal
[02:06:59.920 --> 02:07:01.480]   was like fixed payments to Mozilla.
[02:07:01.480 --> 02:07:03.480]   So Mozilla was getting a bunch of money for traffic
[02:07:03.480 --> 02:07:05.880]   that wasn't staying because users were resetting
[02:07:05.880 --> 02:07:09.200]   their default, and this shows how defaults are important,
[02:07:09.200 --> 02:07:10.520]   but they have to be good enough
[02:07:10.520 --> 02:07:12.560]   that the user doesn't override them.
[02:07:12.560 --> 02:07:16.600]   And a lot of the commercial value in popular apps
[02:07:16.600 --> 02:07:18.040]   is what are the default settings?
[02:07:18.040 --> 02:07:20.120]   What is the default search?
[02:07:20.120 --> 02:07:21.840]   - But oftentimes there's something, just like you said,
[02:07:21.840 --> 02:07:25.040]   I mean, if there's something compelling,
[02:07:25.040 --> 02:07:27.240]   that also can beat out the default,
[02:07:27.240 --> 02:07:29.040]   like tab browsing and so on.
[02:07:29.040 --> 02:07:32.320]   And that's where, I mean, we'll talk about Brave browser.
[02:07:32.320 --> 02:07:36.200]   It feels like now we're in this third stage
[02:07:36.200 --> 02:07:41.200]   where there's Chrome, Firefox, Edge, I guess it's called,
[02:07:41.200 --> 02:07:48.240]   and Brave, and these all seem like really exciting,
[02:07:48.240 --> 02:07:50.560]   I don't know, innovative browsers.
[02:07:50.560 --> 02:07:52.240]   They're all kind of copying off of each other,
[02:07:52.240 --> 02:07:53.760]   picking up the good stuff.
[02:07:53.760 --> 02:07:54.640]   - There's evolution again,
[02:07:54.640 --> 02:07:56.240]   especially on tracking protection.
[02:07:56.240 --> 02:08:00.240]   So privacy is this sort of global wave that's rising.
[02:08:00.240 --> 02:08:03.360]   I like to call it a wave
[02:08:03.360 --> 02:08:07.040]   because it's a large, somewhat chaotic structure.
[02:08:07.040 --> 02:08:08.600]   It's not a unitary good.
[02:08:08.600 --> 02:08:11.760]   You can't say I'm buying privacy for $3.
[02:08:11.760 --> 02:08:12.720]   I'm paying $3 for privacy.
[02:08:12.720 --> 02:08:14.280]   Some people think a VPN does this
[02:08:14.280 --> 02:08:16.000]   and are disappointed when it fails them,
[02:08:16.000 --> 02:08:19.720]   but often people use VPNs for region unlocking video
[02:08:19.720 --> 02:08:21.400]   or getting the US Netflix catalog.
[02:08:21.400 --> 02:08:22.840]   - Exactly.
[02:08:22.840 --> 02:08:24.720]   - But privacy is not a unitary good.
[02:08:24.720 --> 02:08:26.880]   It's complex and people are understanding it
[02:08:26.880 --> 02:08:28.920]   only over time and as they get burned,
[02:08:28.920 --> 02:08:30.680]   but there's a genie
[02:08:30.680 --> 02:08:31.960]   that's not going back in the bottle there.
[02:08:31.960 --> 02:08:33.360]   People are fed up.
[02:08:33.360 --> 02:08:34.680]   Apple has responded to this.
[02:08:34.680 --> 02:08:36.600]   Apple was always making Safari, I think,
[02:08:36.600 --> 02:08:40.320]   more of a privacy-branded browser from the very beginning.
[02:08:40.320 --> 02:08:42.280]   I think this was probably Steve Jobs.
[02:08:42.280 --> 02:08:45.280]   Safari had private windows, private tabs,
[02:08:45.280 --> 02:08:48.240]   before Firefox did.
[02:08:48.240 --> 02:08:50.080]   And these are only private in the sense
[02:08:50.080 --> 02:08:53.040]   that they don't leave local traces
[02:08:53.040 --> 02:08:54.000]   if you don't want them to.
[02:08:54.000 --> 02:08:57.200]   Turns out Safari does keep them around between shutdown,
[02:08:57.200 --> 02:08:59.880]   but the canonical model is no local traces
[02:08:59.880 --> 02:09:01.800]   after you close the private window.
[02:09:01.800 --> 02:09:04.960]   No leftover traces that you went to some site
[02:09:04.960 --> 02:09:06.160]   that you were embarrassed by
[02:09:06.160 --> 02:09:08.960]   or bought a gift for somebody you wanted to keep secret.
[02:09:08.960 --> 02:09:11.800]   - But there's still some level of tracking.
[02:09:11.800 --> 02:09:14.880]   - There's network tracking.
[02:09:14.880 --> 02:09:16.920]   Network privacy is not guaranteed at all
[02:09:16.920 --> 02:09:19.000]   because you're using the same internet and ISP
[02:09:19.000 --> 02:09:21.360]   as a public window, a non-private window.
[02:09:21.360 --> 02:09:22.920]   But Safari had that early on.
[02:09:22.920 --> 02:09:26.040]   They also had a cookie-blocking policy
[02:09:26.040 --> 02:09:28.000]   that might take a little explaining.
[02:09:28.000 --> 02:09:29.800]   If you know what a cookie is,
[02:09:29.800 --> 02:09:31.320]   it's a little bit of storage in the browser
[02:09:31.320 --> 02:09:33.400]   indexed by the name of the site.
[02:09:33.400 --> 02:09:35.040]   And it's really only the main name of the site,
[02:09:35.040 --> 02:09:40.040]   like bofa.com or something like npr.org.
[02:09:40.040 --> 02:09:46.000]   Every site can store some information in a cookie.
[02:09:46.000 --> 02:09:48.640]   Every time it's contacted by the browser,
[02:09:48.640 --> 02:09:50.880]   the previous version is sent back.
[02:09:50.880 --> 02:09:54.080]   And in the response from the server, the cookie's updated.
[02:09:54.080 --> 02:09:56.600]   So it's this little bit of storage in the browser
[02:09:56.600 --> 02:09:58.200]   that the site can keep updating,
[02:09:58.200 --> 02:10:01.480]   and it can store an encrypted version
[02:10:01.480 --> 02:10:03.800]   of your login credentials with a timestamp
[02:10:03.800 --> 02:10:05.960]   so you can stay logged in
[02:10:05.960 --> 02:10:07.720]   without having to retype your password
[02:10:07.720 --> 02:10:08.840]   every time you navigate,
[02:10:08.840 --> 02:10:11.240]   which is how it would be if you didn't have cookies.
[02:10:11.240 --> 02:10:14.440]   The web protocols, especially in the '90s,
[02:10:14.440 --> 02:10:16.000]   are so-called stateless protocols.
[02:10:16.000 --> 02:10:18.760]   So you go to your bank, you log in,
[02:10:18.760 --> 02:10:22.480]   you go from your login confirmed page to your account view.
[02:10:22.480 --> 02:10:25.000]   If you didn't have a cookie, you'd be logging in again.
[02:10:25.000 --> 02:10:26.560]   - Every time you type in the password.
[02:10:26.560 --> 02:10:27.880]   - So that was a great thing about cookies.
[02:10:27.880 --> 02:10:29.840]   Lou Montuoli did it in a hurry in 1994
[02:10:29.840 --> 02:10:30.880]   before I joined Escape,
[02:10:30.880 --> 02:10:34.840]   and he did it for really holding that kind of credential.
[02:10:34.840 --> 02:10:37.520]   But even then, there was the image element
[02:10:37.520 --> 02:10:38.560]   embedded in the page,
[02:10:38.560 --> 02:10:42.000]   and the image gets fetched possibly from a different server,
[02:10:42.000 --> 02:10:44.240]   and that request carries the last cookie,
[02:10:44.240 --> 02:10:45.760]   which could be empty at first,
[02:10:45.760 --> 02:10:48.000]   and the response carries the updated cookie.
[02:10:48.000 --> 02:10:49.760]   So just by having images and cookies,
[02:10:49.760 --> 02:10:51.440]   you got tracking because that image server
[02:10:51.440 --> 02:10:54.240]   can be serving a little one-by-one pixel,
[02:10:54.240 --> 02:10:56.520]   and they still use the word pixel in ad tech,
[02:10:56.520 --> 02:10:59.360]   and that pixel can be served from the same server
[02:10:59.360 --> 02:11:02.160]   embedded differently with different URL spellings
[02:11:02.160 --> 02:11:03.760]   in the New York Times and ESPN.
[02:11:03.760 --> 02:11:05.880]   And as you go from one to the other,
[02:11:05.880 --> 02:11:07.000]   the image server can say,
[02:11:07.000 --> 02:11:09.000]   I haven't got a cookie for you, it's empty initially.
[02:11:09.000 --> 02:11:11.240]   I'm gonna assign you user number 1234,
[02:11:11.240 --> 02:11:13.000]   I'm gonna put a database entry in,
[02:11:13.000 --> 02:11:14.480]   and I see, by the way, I always fetch
[02:11:14.480 --> 02:11:15.960]   the name of the path part of the URL
[02:11:15.960 --> 02:11:17.440]   that I was in the New York Times.
[02:11:17.440 --> 02:11:18.920]   So you're a New York Times reader.
[02:11:18.920 --> 02:11:20.960]   And then you hit ESPN, same thing,
[02:11:20.960 --> 02:11:22.240]   and the database gets updated,
[02:11:22.240 --> 02:11:25.520]   and the number, user 1234 indexes in the database
[02:11:25.520 --> 02:11:28.080]   to a profile of you, you've been tracked.
[02:11:28.080 --> 02:11:29.360]   This was not intended,
[02:11:29.360 --> 02:11:32.680]   and it was too late to undo by the time I got to Netscape.
[02:11:32.680 --> 02:11:35.040]   I think Lou wanted to do Twinkies, he called them,
[02:11:35.040 --> 02:11:37.320]   and he was trying to solve several problems.
[02:11:37.320 --> 02:11:38.320]   He wanted them to be bigger
[02:11:38.320 --> 02:11:40.520]   'cause initially cookies had a short size limit.
[02:11:40.520 --> 02:11:42.280]   I think he wanted to solve the third-party problem,
[02:11:42.280 --> 02:11:44.960]   but Tom Paquin, the engineering manager said,
[02:11:44.960 --> 02:11:47.080]   "Nope, no Twinkies, just cookies.
[02:11:47.080 --> 02:11:49.040]   "We're done, you're done, son."
[02:11:49.040 --> 02:11:51.480]   And that's how a lot of that stuff was.
[02:11:51.480 --> 02:11:55.400]   That's how JavaScript got frozen like a flying amber
[02:11:55.400 --> 02:11:57.320]   in some ways with that sloppy equality operator
[02:11:57.320 --> 02:11:58.960]   that I made 'cause of the early adopters.
[02:11:58.960 --> 02:12:01.840]   And the cookie got stuck with this tracking hazard,
[02:12:01.840 --> 02:12:04.240]   and then, because JavaScripts can be like images,
[02:12:04.240 --> 02:12:05.880]   they're embedded in the page.
[02:12:05.880 --> 02:12:08.640]   By the time of Netscape 3, I made that work.
[02:12:08.640 --> 02:12:10.760]   You can get a request with the last cookie value,
[02:12:10.760 --> 02:12:11.880]   and the response updates it.
[02:12:11.880 --> 02:12:12.920]   That's a tracking mechanism,
[02:12:12.920 --> 02:12:14.880]   and that's why you don't even need images to track.
[02:12:14.880 --> 02:12:16.440]   Now you just use scripts.
[02:12:16.440 --> 02:12:20.000]   So this whole tracking economy evolved,
[02:12:20.000 --> 02:12:23.840]   and it depended on these accidents of the '90s,
[02:12:23.840 --> 02:12:25.320]   these unintended consequences.
[02:12:25.320 --> 02:12:27.200]   - Well, it created some of the richest companies
[02:12:27.200 --> 02:12:28.040]   in the world, right?
[02:12:28.040 --> 02:12:28.880]   I mean, it's the social media--
[02:12:28.880 --> 02:12:29.960]   - All I got was T-shirts.
[02:12:29.960 --> 02:12:31.160]   (laughing)
[02:12:31.160 --> 02:12:33.160]   - All I got is this crappy T-shirt.
[02:12:33.160 --> 02:12:38.160]   Yeah, I mean, so that's the fundamental problem
[02:12:38.160 --> 02:12:39.520]   the world is facing now.
[02:12:39.520 --> 02:12:42.040]   They're looking at what social media has created,
[02:12:42.040 --> 02:12:44.200]   and they're looking at,
[02:12:44.200 --> 02:12:47.040]   and like a world is looking at itself in the mirror,
[02:12:47.040 --> 02:12:51.000]   and seeing that privacy is actually something,
[02:12:51.000 --> 02:12:53.520]   it's supposed to be like a nice thing to have.
[02:12:53.520 --> 02:12:57.280]   It's something that is, actually should be fundamental
[02:12:57.280 --> 02:12:59.240]   to the way we interact with the world,
[02:12:59.240 --> 02:13:00.600]   as part of our tooling,
[02:13:00.600 --> 02:13:03.520]   and that's where the Brave browser comes in.
[02:13:03.520 --> 02:13:06.040]   And I suppose others as well are playing with this idea,
[02:13:06.040 --> 02:13:07.640]   but Brave is at the forefront of that.
[02:13:07.640 --> 02:13:11.000]   So maybe can you describe what Brave is,
[02:13:11.000 --> 02:13:13.400]   and what are its key principles,
[02:13:13.400 --> 02:13:16.120]   and what's broken, and what is it Brave trying to fix?
[02:13:16.120 --> 02:13:18.400]   - So when I realized that these accidents,
[02:13:18.400 --> 02:13:19.960]   like the third-party cookie,
[02:13:19.960 --> 02:13:21.840]   the image or script that's tracking you,
[02:13:21.840 --> 02:13:26.040]   or the JavaScripts that can do it invisibly now,
[02:13:26.040 --> 02:13:28.680]   that all this stuff wasn't intended,
[02:13:28.680 --> 02:13:31.640]   and that Firefox had supported extensions
[02:13:31.640 --> 02:13:32.640]   that block some of these things,
[02:13:32.640 --> 02:13:34.720]   I thought, probably we should have browsers
[02:13:34.720 --> 02:13:37.440]   just block some of these things by default.
[02:13:37.440 --> 02:13:39.760]   These were not intended, and they're now unsafe.
[02:13:39.760 --> 02:13:41.720]   They're tracking you, there could be data breaches,
[02:13:41.720 --> 02:13:46.720]   malware distribution, bullying, and PsyOps,
[02:13:46.720 --> 02:13:48.420]   and other attacks on people.
[02:13:48.420 --> 02:13:51.800]   Block that stuff, block that JavaScript.
[02:13:51.800 --> 02:13:54.680]   I'm Dr. Frankenstein, I've got to deal with a monster here.
[02:13:54.680 --> 02:13:56.520]   But obviously you go to Gmail,
[02:13:56.520 --> 02:13:57.560]   there's so much a script there
[02:13:57.560 --> 02:13:59.320]   to make that amazing web client,
[02:13:59.320 --> 02:14:02.160]   that's okay, that's first-party JavaScript.
[02:14:02.160 --> 02:14:04.000]   So how do you tell the first from the third party?
[02:14:04.000 --> 02:14:06.040]   And it's not easy, it's not a matter of just
[02:14:06.040 --> 02:14:07.920]   what's embedded from a different server,
[02:14:07.920 --> 02:14:11.560]   because a lot of publishers use benign scripts
[02:14:11.560 --> 02:14:14.360]   from unrelated domains, or apparently unrelated domains.
[02:14:14.360 --> 02:14:16.320]   So you end up having to develop a sort of
[02:14:16.320 --> 02:14:19.700]   human and machine learning practice around blocking.
[02:14:19.700 --> 02:14:22.320]   And at Brave, we did that from the start,
[02:14:22.320 --> 02:14:25.720]   and built a research team to help drive it and automate it.
[02:14:25.720 --> 02:14:28.920]   We realized that protecting people needed machine learning,
[02:14:28.920 --> 02:14:30.400]   and around 2017, in spring,
[02:14:30.400 --> 02:14:32.680]   I talked to my friends at Apple about this too,
[02:14:32.680 --> 02:14:34.560]   and they were also doing what they call
[02:14:34.560 --> 02:14:36.640]   intelligent tracking prevention,
[02:14:36.640 --> 02:14:39.320]   which uses local machine learning in the browser.
[02:14:39.320 --> 02:14:41.600]   And the funny thing is, you know,
[02:14:41.600 --> 02:14:42.920]   great minds think alike,
[02:14:42.920 --> 02:14:44.800]   they were taking their third-party cookie blocker
[02:14:44.800 --> 02:14:46.480]   that was in Safari from the old days,
[02:14:46.480 --> 02:14:48.520]   and making it not have a big loophole.
[02:14:48.520 --> 02:14:51.160]   Because what they did was, in 2003,
[02:14:51.160 --> 02:14:52.000]   when Safari came out, they said,
[02:14:52.000 --> 02:14:55.220]   we're gonna block cookies that are from
[02:14:55.220 --> 02:14:57.240]   those third-party embedded elements,
[02:14:57.240 --> 02:14:59.160]   where you've never visited that site before.
[02:14:59.160 --> 02:15:02.360]   So I'm gonna pick an ad company that got sold to AT&T,
[02:15:02.360 --> 02:15:04.000]   so I'm not picking on anybody unfairly,
[02:15:04.000 --> 02:15:05.120]   appnexus.com.
[02:15:05.120 --> 02:15:06.640]   Have you ever been to appnexus.com?
[02:15:06.640 --> 02:15:07.800]   - Nope. - I've never been there.
[02:15:07.800 --> 02:15:09.020]   But I guarantee you, 10 years ago,
[02:15:09.020 --> 02:15:11.180]   you probably had, if you were using Firefox,
[02:15:11.180 --> 02:15:13.040]   you had a cookie, third-party cookie,
[02:15:13.040 --> 02:15:14.960]   'cause you were being tracked by them.
[02:15:14.960 --> 02:15:15.920]   And they were using that cookie
[02:15:15.920 --> 02:15:17.560]   to build up a profile of you.
[02:15:17.560 --> 02:15:20.720]   In Safari, as long as the user never went to AppNexus,
[02:15:20.720 --> 02:15:22.360]   that cookie would not be set.
[02:15:22.360 --> 02:15:25.600]   And that was a real move for privacy early on,
[02:15:25.600 --> 02:15:27.660]   when jobs were still around, in Safari.
[02:15:27.660 --> 02:15:30.620]   But it had this loophole that if you do go to AppNexus,
[02:15:30.620 --> 02:15:33.080]   then why, it's okay to be a third-party cookie.
[02:15:33.080 --> 02:15:34.920]   So AppNexus did something very naughty.
[02:15:34.920 --> 02:15:36.840]   They took their ad partners,
[02:15:36.840 --> 02:15:39.000]   that put the actual ad you click on,
[02:15:39.000 --> 02:15:40.240]   and they said, "Hey, add a little script
[02:15:40.240 --> 02:15:42.540]   "so that when somebody clicks on the ad,
[02:15:42.540 --> 02:15:44.420]   "before it goes to your landing page,
[02:15:44.420 --> 02:15:45.680]   "redirect to AppNexus,
[02:15:45.680 --> 02:15:47.160]   "and we'll redirect to the landing page."
[02:15:47.160 --> 02:15:49.120]   And by doing that, they set a first-party cookie,
[02:15:49.120 --> 02:15:49.960]   and they got whitelisted.
[02:15:49.960 --> 02:15:51.640]   So it was a loophole they exploited.
[02:15:51.640 --> 02:15:53.560]   Intelligent tracking prevention in Safari
[02:15:53.560 --> 02:15:56.600]   was sophisticated enough to counteract this,
[02:15:56.600 --> 02:15:57.440]   and it did other things,
[02:15:57.440 --> 02:15:59.280]   and it's evolved since they did it.
[02:15:59.280 --> 02:16:00.680]   And we've evolved brave, too.
[02:16:00.680 --> 02:16:02.520]   And so when I say machine and human learning,
[02:16:02.520 --> 02:16:05.560]   there's a real set of techniques here.
[02:16:05.560 --> 02:16:06.400]   They have to fight--
[02:16:06.400 --> 02:16:07.560]   - This is a fascinating problem, actually.
[02:16:07.560 --> 02:16:08.400]   - Fingerprinting, right?
[02:16:08.400 --> 02:16:10.680]   Anytime you have a little bit of storage in the browser
[02:16:10.680 --> 02:16:13.540]   associated with a website,
[02:16:13.540 --> 02:16:15.520]   if the bad guy can get 32 websites,
[02:16:15.520 --> 02:16:17.600]   each one has a bit of storage that's 32 bits.
[02:16:17.600 --> 02:16:19.800]   You can turn the bit on or off.
[02:16:19.800 --> 02:16:21.240]   You can make four billion numbers.
[02:16:21.240 --> 02:16:22.240]   You can make an identifier.
[02:16:22.240 --> 02:16:24.600]   It's called a super cookie sometimes.
[02:16:24.600 --> 02:16:28.840]   There are weaker ways that are statistical.
[02:16:28.840 --> 02:16:29.760]   They're called fingerprinting.
[02:16:29.760 --> 02:16:30.740]   You have to block all of them,
[02:16:30.740 --> 02:16:32.800]   and you have to not only automate,
[02:16:32.800 --> 02:16:34.920]   you want to work in the web standards body
[02:16:34.920 --> 02:16:38.440]   to put privacy in by default, by design,
[02:16:38.440 --> 02:16:40.480]   from the get-go, not add it as an afterthought
[02:16:40.480 --> 02:16:43.160]   or go hog-wild with new web APIs
[02:16:43.160 --> 02:16:45.240]   that add a bunch more local storage
[02:16:45.240 --> 02:16:47.480]   or fingerprint surface area.
[02:16:47.480 --> 02:16:48.640]   And that's been a struggle, too,
[02:16:48.640 --> 02:16:50.880]   because guess who's the new Microsoft
[02:16:50.880 --> 02:16:51.720]   in the standards body?
[02:16:51.720 --> 02:16:52.660]   It's Google.
[02:16:52.660 --> 02:16:55.880]   And they're not in favor of privacy first.
[02:16:55.880 --> 02:16:58.720]   They wanna do privacy their way,
[02:16:58.720 --> 02:17:01.140]   only under, I would say, market pressure.
[02:17:01.140 --> 02:17:03.620]   But with Apple and with Brave leading the way,
[02:17:03.620 --> 02:17:06.260]   we block third-party cookies almost without exception.
[02:17:06.260 --> 02:17:07.900]   So we just block them,
[02:17:07.900 --> 02:17:11.500]   and that gives us a very strong privacy benefit,
[02:17:11.500 --> 02:17:13.700]   but it also means some sites just don't work right.
[02:17:13.700 --> 02:17:15.460]   Embedded YouTube videos might not work right.
[02:17:15.460 --> 02:17:19.580]   So we're adapting in a similar way to Apple's done with ITP
[02:17:19.580 --> 02:17:22.700]   to make third-party cookies blocked,
[02:17:22.700 --> 02:17:26.420]   but to sort of simulate what looks like
[02:17:26.420 --> 02:17:28.840]   a working third-party cookie for the site.
[02:17:28.840 --> 02:17:32.320]   It essentially tries to partition each site
[02:17:32.320 --> 02:17:34.840]   and its third parties into its own sort of cookie jar.
[02:17:34.840 --> 02:17:35.680]   - Got it.
[02:17:35.680 --> 02:17:37.040]   And so, like you said,
[02:17:37.040 --> 02:17:41.080]   is this both a human fine-tuning issue
[02:17:41.080 --> 02:17:42.600]   and a machine learning problem?
[02:17:42.600 --> 02:17:44.520]   - Yes, and as the humans learn,
[02:17:44.520 --> 02:17:46.400]   then they train the machine learning.
[02:17:46.400 --> 02:17:50.560]   - But maybe Google aside, or including Google,
[02:17:50.560 --> 02:17:54.120]   there's millions of dollars, if not billions of dollars,
[02:17:54.120 --> 02:17:57.860]   to be made from fighting the ways of Brave.
[02:17:57.860 --> 02:18:00.660]   - That's right, and it's been an interesting change
[02:18:00.660 --> 02:18:01.980]   from when we started in 2015.
[02:18:01.980 --> 02:18:04.460]   When we started, ad-blocking extensions,
[02:18:04.460 --> 02:18:06.180]   AdBlock Plus was one of the big ones
[02:18:06.180 --> 02:18:08.660]   that started on Firefox in 2006, I believe,
[02:18:08.660 --> 02:18:11.020]   had gotten to a certain level of use around the world,
[02:18:11.020 --> 02:18:14.340]   and browsers like UCWeb, UC Browser in Asia,
[02:18:14.340 --> 02:18:17.260]   had some amount of ad-blocking built in and on by default.
[02:18:17.260 --> 02:18:19.340]   So PageFare was a startup,
[02:18:19.340 --> 02:18:23.540]   and they measured ad-blocking adoption,
[02:18:23.540 --> 02:18:25.440]   and they tried to say, "Hey, publishers,
[02:18:25.440 --> 02:18:30.140]   "30% of the visitors to Pitchfork or Wire,
[02:18:30.140 --> 02:18:32.820]   "to Conda NAS properties, are using ad-blockers.
[02:18:32.820 --> 02:18:34.300]   "If we can somehow convince them
[02:18:34.300 --> 02:18:37.280]   "to lower their ad-blocking for your site,
[02:18:37.280 --> 02:18:39.460]   "that could be like a 43% lift, right?"
[02:18:39.460 --> 02:18:44.300]   And 3/7ths, well, that's easier said than done,
[02:18:44.300 --> 02:18:46.620]   and PageFare and others, SourcePoint, many others,
[02:18:46.620 --> 02:18:48.100]   tried to either smuggle ads through
[02:18:48.100 --> 02:18:52.300]   or cajole the user into letting ads appear,
[02:18:52.300 --> 02:18:53.140]   and it didn't really work.
[02:18:53.140 --> 02:18:54.460]   Meanwhile, the ad-blocking adoption
[02:18:54.460 --> 02:18:55.420]   has just continued.
[02:18:55.420 --> 02:18:59.340]   Intelligent Tracking Prevention, Safari in 2017,
[02:18:59.340 --> 02:19:03.140]   Brave from 2016 on with very strong cookie-blocking
[02:19:03.140 --> 02:19:06.660]   and other protections, and this is not going away.
[02:19:06.660 --> 02:19:08.920]   The publishers used to rage against it.
[02:19:08.920 --> 02:19:10.380]   We would try to say, "We can help you.
[02:19:10.380 --> 02:19:11.880]   "You're dealing with users
[02:19:11.880 --> 02:19:14.040]   "who are already blocking all your ads.
[02:19:14.040 --> 02:19:16.720]   "We can try to put back some economics
[02:19:16.720 --> 02:19:18.460]   "that help the user and you,"
[02:19:18.460 --> 02:19:20.020]   that led to the basic attention token
[02:19:20.020 --> 02:19:21.400]   that we started with Bitcoin.
[02:19:21.400 --> 02:19:22.380]   "We can be your friend.
[02:19:22.380 --> 02:19:24.900]   "Don't just fingerprint us as an ad-blocker
[02:19:24.900 --> 02:19:26.500]   "and treat us as an enemy."
[02:19:26.500 --> 02:19:28.560]   But in 2015 or '16, it was like,
[02:19:28.560 --> 02:19:29.460]   "Nah, you're an ad-blocker.
[02:19:29.460 --> 02:19:30.300]   "Get out of here.
[02:19:30.300 --> 02:19:31.140]   "I hate you."
[02:19:31.140 --> 02:19:33.740]   And by 2017 or '18, it's like something's happening.
[02:19:33.740 --> 02:19:34.940]   The ad-blocking's not stopping,
[02:19:34.940 --> 02:19:37.020]   and we're all getting sort of pulled
[02:19:37.020 --> 02:19:41.580]   on the Google's plantation through AMP, A-M-P,
[02:19:41.580 --> 02:19:44.540]   or we're getting killed by the Google ad system we use
[02:19:44.540 --> 02:19:46.580]   because it's taking all the revenue,
[02:19:46.580 --> 02:19:49.100]   or it's permitting, or some other vendors we use
[02:19:49.100 --> 02:19:50.100]   are permitting ad fraud.
[02:19:50.100 --> 02:19:52.620]   And so a fake New York Times is getting paid
[02:19:52.620 --> 02:19:57.100]   by the marketer running an ad that a bot clicks on,
[02:19:57.100 --> 02:19:58.220]   and the real New York Times
[02:19:58.220 --> 02:20:00.500]   that's supposed to get the ad doesn't get it.
[02:20:00.500 --> 02:20:01.540]   - And there's something really broken
[02:20:01.540 --> 02:20:02.380]   about that kind of system.
[02:20:02.380 --> 02:20:06.660]   - And that fraud is mediated through Google's ad exchange,
[02:20:06.660 --> 02:20:07.900]   which is the biggest of them all,
[02:20:07.900 --> 02:20:09.660]   and Google takes a fee.
[02:20:09.660 --> 02:20:10.700]   There's a flip side of that,
[02:20:10.700 --> 02:20:12.660]   which is malware distribution, malvertising,
[02:20:12.660 --> 02:20:16.300]   where fake advertisers put malware payloads
[02:20:16.300 --> 02:20:19.340]   in exploit kit loaders in JavaScript,
[02:20:19.340 --> 02:20:22.500]   and they smuggle them in ads onto real publisher pages.
[02:20:22.500 --> 02:20:24.500]   The ad exchange takes the fee.
[02:20:24.500 --> 02:20:25.620]   Now, I'm not a lawyer.
[02:20:25.620 --> 02:20:27.140]   I'm not gonna say this is a RICO predicate,
[02:20:27.140 --> 02:20:30.260]   but why is the ad exchange facilitating fraud
[02:20:30.260 --> 02:20:32.100]   and malware distribution and taking a fee?
[02:20:32.100 --> 02:20:32.940]   It's not right.
[02:20:32.940 --> 02:20:33.980]   - As opposed to just fighting,
[02:20:33.980 --> 02:20:35.700]   this is the really interesting thing about Brave,
[02:20:35.700 --> 02:20:37.700]   is as opposed to just fighting
[02:20:37.700 --> 02:20:39.980]   and then being treated like an ad blocker,
[02:20:39.980 --> 02:20:42.060]   you're providing an alternate.
[02:20:42.060 --> 02:20:45.460]   There's a philosophical idea here
[02:20:45.460 --> 02:20:47.500]   that might change the nature of the internet
[02:20:47.500 --> 02:20:49.220]   with a basic attention token.
[02:20:49.220 --> 02:20:50.060]   - Yes.
[02:20:50.060 --> 02:20:54.060]   - Maybe what is basic attention token, BAT,
[02:20:54.060 --> 02:20:55.300]   and how does it work?
[02:20:55.300 --> 02:20:58.180]   - Okay, I'll tell the story first by saying how I came to it.
[02:20:58.180 --> 02:21:00.820]   I realized for a long time at Firefox,
[02:21:00.820 --> 02:21:02.940]   we were dependent on this Google search deal,
[02:21:02.940 --> 02:21:05.700]   and I thought, now that Chrome's out,
[02:21:05.700 --> 02:21:07.100]   maybe that's gonna go away.
[02:21:07.100 --> 02:21:10.740]   At some point, Google will say,
[02:21:10.740 --> 02:21:14.620]   Firefox, like old yeller, you saved me from the rabid beast.
[02:21:14.620 --> 02:21:16.340]   Now I have to shoot you in the head.
[02:21:16.340 --> 02:21:19.660]   Done your job, sad but true, goodbye.
[02:21:19.660 --> 02:21:21.780]   And what can we do?
[02:21:21.780 --> 02:21:24.140]   And I think Mozilla doesn't know what to do.
[02:21:24.140 --> 02:21:25.900]   This is something that I couldn't solve there,
[02:21:25.900 --> 02:21:27.220]   and I don't think they can solve.
[02:21:27.220 --> 02:21:29.460]   But I thought, why is the browser
[02:21:29.460 --> 02:21:32.300]   the sort of passive servant of these big tech companies?
[02:21:32.300 --> 02:21:36.460]   Why is it a blind runtime for ad tech JavaScripts,
[02:21:36.460 --> 02:21:38.100]   including from Google?
[02:21:38.100 --> 02:21:39.220]   Why doesn't it block some?
[02:21:39.220 --> 02:21:43.940]   And if it blocks some, why can't it reconnect users,
[02:21:43.940 --> 02:21:47.480]   readers, fans, with publishers, creators, websites?
[02:21:47.480 --> 02:21:51.220]   Why can't it help people make direct payments
[02:21:51.220 --> 02:21:53.980]   or even possibly get an ad revenue share
[02:21:53.980 --> 02:21:56.300]   for private ads that are placed in the browser?
[02:21:56.300 --> 02:21:57.580]   The ads are all placed in the browser.
[02:21:57.580 --> 02:21:58.820]   Some people have this sort of model
[02:21:58.820 --> 02:22:02.360]   that the server's painting the ad into some flash,
[02:22:02.360 --> 02:22:06.500]   combined package or into some giant image,
[02:22:06.500 --> 02:22:07.620]   and then it all gets sent down.
[02:22:07.620 --> 02:22:08.600]   That's not how it works.
[02:22:08.600 --> 02:22:11.340]   All the ads you see on the web are placed in your browser
[02:22:11.340 --> 02:22:13.980]   by it calling out to various ad tech partners,
[02:22:13.980 --> 02:22:15.620]   and Google's among them.
[02:22:15.620 --> 02:22:17.560]   And so if you block those scripts,
[02:22:17.560 --> 02:22:22.420]   you break the advertising flow of money
[02:22:22.420 --> 02:22:26.300]   from the brands and their agencies to the publishers.
[02:22:26.300 --> 02:22:29.460]   And if you want to reconnect it directly with the user,
[02:22:29.460 --> 02:22:30.420]   you have limited choices.
[02:22:30.420 --> 02:22:31.940]   The user generally isn't gonna sign up
[02:22:31.940 --> 02:22:34.980]   with a ACH bank connection or a credit card.
[02:22:34.980 --> 02:22:37.260]   The publisher isn't gonna sign up the user,
[02:22:37.260 --> 02:22:38.360]   except as a subscriber,
[02:22:38.360 --> 02:22:39.980]   and then they're gonna overcharge you
[02:22:39.980 --> 02:22:42.060]   because they want you to cross subsidize all the content
[02:22:42.060 --> 02:22:43.660]   and buy more than you read and all that stuff.
[02:22:43.660 --> 02:22:46.500]   And how many, you know, people are doing great
[02:22:46.500 --> 02:22:48.740]   who are big names like New York Times and The Washington Post
[02:22:48.740 --> 02:22:51.820]   but how many subscriptions are you as a user gonna pay for?
[02:22:51.820 --> 02:22:54.420]   This is why startups like Tony Hale's Scroll
[02:22:54.420 --> 02:22:57.180]   are trying to do a portable subscription system.
[02:22:57.180 --> 02:22:58.860]   - By the way, just on a small tangent there,
[02:22:58.860 --> 02:23:00.900]   even the New York Times is really annoying
[02:23:00.900 --> 02:23:03.340]   how difficult it is just to subscribe.
[02:23:03.340 --> 02:23:04.660]   There's way too many clicks.
[02:23:04.660 --> 02:23:05.480]   - They don't make it easy.
[02:23:05.480 --> 02:23:06.740]   And I had friends a few years ago, I think they fixed this,
[02:23:06.740 --> 02:23:09.380]   who would pay for the paper and then they'd go online
[02:23:09.380 --> 02:23:11.900]   and they'd get up charged for the digital
[02:23:11.900 --> 02:23:15.420]   and there was no break, there was no connection between them.
[02:23:15.420 --> 02:23:17.300]   But publishers are not that technical
[02:23:17.300 --> 02:23:19.620]   and they can't all get you to subscribe,
[02:23:19.620 --> 02:23:21.340]   you can't have a thousand subscriptions.
[02:23:21.340 --> 02:23:23.500]   So for a long time people talked about micropayments,
[02:23:23.500 --> 02:23:25.900]   there was Blendle and the other ones which came to the US
[02:23:25.900 --> 02:23:27.620]   but didn't grow.
[02:23:27.620 --> 02:23:29.860]   And I thought if you have just a browser
[02:23:29.860 --> 02:23:30.700]   and it's protecting you
[02:23:30.700 --> 02:23:32.940]   by blocking all this ad tech tracking junk,
[02:23:32.940 --> 02:23:36.660]   it can provide you an option that uses cryptocurrency
[02:23:36.660 --> 02:23:39.460]   to let you support your favorite sites
[02:23:39.460 --> 02:23:40.620]   and even YouTube channels.
[02:23:40.620 --> 02:23:42.780]   And that we prototyped with Bitcoin.
[02:23:42.780 --> 02:23:45.980]   And that meant the user had to be of means to contribute
[02:23:45.980 --> 02:23:47.520]   and willing to contribute.
[02:23:47.520 --> 02:23:49.260]   But it could be done on the Bitcoin blockchain
[02:23:49.260 --> 02:23:50.620]   and it could be fairly efficient
[02:23:50.620 --> 02:23:52.260]   even though Bitcoin went through a period
[02:23:52.260 --> 02:23:55.780]   when we had this prototype running in 2016 into 2017
[02:23:55.780 --> 02:23:58.820]   where Bitcoin was very congested and very slow to confirm
[02:23:58.820 --> 02:24:00.180]   and the fees got very high.
[02:24:00.180 --> 02:24:03.580]   And a lot of users who were not Bitcoin maximalists
[02:24:03.580 --> 02:24:05.740]   or even experienced, we helped them out
[02:24:05.740 --> 02:24:07.660]   by embedding a Coinbase buy widget
[02:24:07.660 --> 02:24:10.220]   and they had the income to buy but it was hard.
[02:24:10.220 --> 02:24:12.460]   It was like, do I buy $5 a month?
[02:24:12.460 --> 02:24:14.300]   But the fee is like 450.
[02:24:14.300 --> 02:24:16.460]   I better buy in larger batches, right?
[02:24:16.460 --> 02:24:18.580]   And they're like, I don't wanna own that much Bitcoin.
[02:24:18.580 --> 02:24:21.220]   So it became this painful thing.
[02:24:21.220 --> 02:24:23.840]   And the real idea that I had of private ads
[02:24:23.840 --> 02:24:27.860]   that pay the user a rev share couldn't be realized
[02:24:27.860 --> 02:24:30.640]   alone in that kind of system.
[02:24:30.640 --> 02:24:33.100]   In these cryptocurrency systems,
[02:24:33.100 --> 02:24:35.220]   especially with the blockchain we switched to Ethereum,
[02:24:35.220 --> 02:24:36.980]   you can have smart contracts.
[02:24:36.980 --> 02:24:39.020]   The Bitcoin system is not Turing complete
[02:24:39.020 --> 02:24:41.140]   so what you can do with the script is more limited.
[02:24:41.140 --> 02:24:44.540]   But you can still do sort of clever things
[02:24:44.540 --> 02:24:46.180]   even with Bitcoin script.
[02:24:46.180 --> 02:24:49.320]   What we wanted to do was sort of a three-sided ecosystem.
[02:24:49.320 --> 02:24:53.780]   We wanted users, creators or publishers and advertisers.
[02:24:53.780 --> 02:24:55.780]   And we wanted the advertisers to put money in
[02:24:55.780 --> 02:24:58.060]   just like they do today but without going through
[02:24:58.060 --> 02:25:00.420]   the Googles and the app nexuses
[02:25:00.420 --> 02:25:02.000]   and all these other ad tech companies.
[02:25:02.000 --> 02:25:04.460]   Because those companies take out a huge cut.
[02:25:04.460 --> 02:25:06.980]   The Guardian in the UK once did an experiment for a month.
[02:25:06.980 --> 02:25:08.820]   They bought out their own ad space.
[02:25:08.820 --> 02:25:11.180]   They put in a pound and they were paid 30 pence.
[02:25:11.180 --> 02:25:15.200]   70% was coming out to the intermediary vendors
[02:25:15.200 --> 02:25:16.180]   they were using.
[02:25:16.180 --> 02:25:17.020]   - Wow.
[02:25:17.020 --> 02:25:19.260]   - And that's like the opposite of what the app store does.
[02:25:19.260 --> 02:25:22.220]   The app store takes 30% and gives the publisher 70%.
[02:25:22.220 --> 02:25:23.580]   So pretty broken.
[02:25:23.580 --> 02:25:26.180]   In the old days of the Superstation TBS,
[02:25:26.180 --> 02:25:29.900]   the media owner would get 85%.
[02:25:29.900 --> 02:25:33.460]   So these splits have become really unbalanced.
[02:25:33.460 --> 02:25:35.740]   And the middle players, the ad tech vendors
[02:25:35.740 --> 02:25:37.500]   are taking out way too much money.
[02:25:37.500 --> 02:25:39.700]   And they're doing something worse which has been noticed.
[02:25:39.700 --> 02:25:44.140]   They're letting not just the malware vendors
[02:25:44.140 --> 02:25:47.260]   but also the ad fraud side which fakes the publishers
[02:25:47.260 --> 02:25:51.020]   and clickbait merchants come in
[02:25:51.020 --> 02:25:53.260]   and steal traffic from good sites.
[02:25:53.260 --> 02:25:55.220]   Because once you have a certain audience
[02:25:55.220 --> 02:25:56.300]   identified at one site.
[02:25:56.300 --> 02:25:58.220]   Jason Kalkanis told me this about his experience
[02:25:58.220 --> 02:25:59.700]   with I guess it was in Gadget.
[02:25:59.700 --> 02:26:01.800]   Which site he was running.
[02:26:01.800 --> 02:26:04.180]   Once he started using an ad partner
[02:26:04.180 --> 02:26:06.200]   that was sharing his audience information
[02:26:06.200 --> 02:26:07.400]   across multiple sites,
[02:26:07.400 --> 02:26:09.540]   he saw his competitors stealing all his traffic.
[02:26:09.540 --> 02:26:11.540]   And then what's worse is the clickbait sites
[02:26:11.540 --> 02:26:15.500]   that just have much cheaper rates steal all that traffic.
[02:26:15.500 --> 02:26:20.300]   And that facilitates fraud, it facilitates fake news,
[02:26:20.300 --> 02:26:21.340]   all sorts of problems.
[02:26:21.340 --> 02:26:24.080]   So Grape blocks it and then we give users
[02:26:24.080 --> 02:26:26.240]   the ability to give back.
[02:26:26.240 --> 02:26:28.460]   And because we invented the basic attention token
[02:26:28.460 --> 02:26:31.000]   in Ethereum, we can do this three way split.
[02:26:31.000 --> 02:26:33.660]   And we can give users a share of the revenue.
[02:26:33.660 --> 02:26:35.500]   And if they want to take it out, they can.
[02:26:35.500 --> 02:26:38.220]   Now unfortunately for us and for all of blockchain,
[02:26:38.220 --> 02:26:39.780]   the regulators are saying,
[02:26:39.780 --> 02:26:41.300]   we're gonna have to know who you are.
[02:26:41.300 --> 02:26:46.300]   There's the Treasury Department's FinCEN agency,
[02:26:46.300 --> 02:26:50.780]   there's the Office of Foreign Asset Control's OFAC,
[02:26:50.780 --> 02:26:55.240]   there's the other regulators in the federal government
[02:26:55.240 --> 02:26:58.260]   that take a very dark look at things like money laundering
[02:26:58.260 --> 02:27:01.240]   and sending money to someone named Osama Bin Laden.
[02:27:01.240 --> 02:27:03.520]   So compliance starts to come in.
[02:27:03.520 --> 02:27:06.080]   And even now they're threatening for pure Bitcoin
[02:27:06.080 --> 02:27:07.800]   sending to some address.
[02:27:07.800 --> 02:27:10.280]   If you're a Coinbase, you're gonna have to know
[02:27:10.280 --> 02:27:11.120]   who's at that address.
[02:27:11.120 --> 02:27:13.960]   - Like the actual identities of people involved.
[02:27:13.960 --> 02:27:15.880]   - Now with Coinbase members, you sign up and they know you
[02:27:15.880 --> 02:27:16.960]   and they comply with the regulations.
[02:27:16.960 --> 02:27:19.460]   They're a regulated money services business.
[02:27:19.460 --> 02:27:26.720]   But if somebody's using their own self-custodial wallet
[02:27:27.240 --> 02:27:29.340]   where they have the hardware private key
[02:27:29.340 --> 02:27:32.480]   and they're not named and they want to send to that address,
[02:27:32.480 --> 02:27:35.080]   our friends in the federal government are talking about
[02:27:35.080 --> 02:27:38.300]   requiring at some threshold knowing who that is.
[02:27:38.300 --> 02:27:40.500]   - Some threshold that's unreasonable?
[02:27:40.500 --> 02:27:41.640]   - It's not that big.
[02:27:41.640 --> 02:27:43.540]   Yeah, I don't know how this will play out.
[02:27:43.540 --> 02:27:44.820]   I think crypto is here to stay.
[02:27:44.820 --> 02:27:47.260]   I think the beauty of being able to send peer to peer
[02:27:47.260 --> 02:27:48.500]   without any bank in the middle,
[02:27:48.500 --> 02:27:51.660]   without any huge wire charge and two day delay
[02:27:51.660 --> 02:27:53.020]   and all that nonsense, it's beautiful.
[02:27:53.020 --> 02:27:54.360]   And I've used it and I love it.
[02:27:54.360 --> 02:27:56.420]   But we're pragmatistic brave about crypto
[02:27:56.420 --> 02:27:59.600]   and we realize that anything like a revenue split,
[02:27:59.600 --> 02:28:02.220]   we can't facilitate without being licensed in a certain way
[02:28:02.220 --> 02:28:03.900]   and it requires knowing who the user is.
[02:28:03.900 --> 02:28:06.460]   So our default mode doesn't know who the user is.
[02:28:06.460 --> 02:28:09.540]   It instead imputes to the user's browser
[02:28:09.540 --> 02:28:11.820]   some of the revenue and allows that browser
[02:28:11.820 --> 02:28:14.940]   to steer it back to the creators.
[02:28:14.940 --> 02:28:16.700]   And we do have to identify the creators.
[02:28:16.700 --> 02:28:20.460]   But as things improve, and who knows how it'll play out,
[02:28:20.460 --> 02:28:23.380]   there should be a day when this full vision can be done
[02:28:23.380 --> 02:28:25.720]   more fully on a blockchain.
[02:28:25.720 --> 02:28:28.000]   But regulations and the practicalities
[02:28:28.000 --> 02:28:30.400]   of today's blockchains, which are not that fast
[02:28:30.400 --> 02:28:32.700]   and not anonymous over time,
[02:28:32.700 --> 02:28:34.780]   you fingerprint yourself over time,
[02:28:34.780 --> 02:28:36.260]   we do some of this with the browser.
[02:28:36.260 --> 02:28:39.780]   So one of the ideas of the basic attention token
[02:28:39.780 --> 02:28:42.500]   is to make a hybrid system that's stronger
[02:28:42.500 --> 02:28:43.420]   than blockchain alone.
[02:28:43.420 --> 02:28:45.940]   It's the browser and the blockchain.
[02:28:45.940 --> 02:28:48.400]   And the browser is this trusted endpoint software.
[02:28:48.400 --> 02:28:49.940]   It's this universal app.
[02:28:49.940 --> 02:28:51.100]   Everyone uses browsers.
[02:28:51.100 --> 02:28:52.980]   The bigger the screen, the more you're in the browser
[02:28:52.980 --> 02:28:56.120]   unless you install fat clients for things.
[02:28:56.120 --> 02:29:00.160]   I use Slack on Mac OS and it's like a browser.
[02:29:00.160 --> 02:29:02.160]   It's based on an electron framework we used to use.
[02:29:02.160 --> 02:29:04.720]   And it's just, it's not that great.
[02:29:04.720 --> 02:29:07.800]   Some of the people at Brave use Slack in Brave as a--
[02:29:07.800 --> 02:29:09.080]   - In the browser, yeah. - In the browser, yeah.
[02:29:09.080 --> 02:29:10.340]   - I use that often, yeah.
[02:29:10.340 --> 02:29:13.160]   - And I noticed on the iPad, I use apps less.
[02:29:13.160 --> 02:29:16.440]   The smaller the screen, the browser got handicapped
[02:29:16.440 --> 02:29:17.960]   by Apple and Android both.
[02:29:17.960 --> 02:29:22.720]   And it also can be slower or not have the right affordances
[02:29:22.720 --> 02:29:26.780]   to interface with the security limited APIs.
[02:29:26.780 --> 02:29:28.740]   But in principle, with the right permissioning,
[02:29:28.740 --> 02:29:31.680]   you can make the web browser just as good as any app.
[02:29:31.680 --> 02:29:33.380]   You make it be a super app.
[02:29:33.380 --> 02:29:35.120]   And that's part of our mission at Brave.
[02:29:35.120 --> 02:29:37.820]   So we want to have the economics that got captured
[02:29:37.820 --> 02:29:40.060]   by these big tech companies through tracking
[02:29:40.060 --> 02:29:41.380]   and through social networks.
[02:29:41.380 --> 02:29:43.340]   We wanna block that for your own safety
[02:29:43.340 --> 02:29:45.520]   and then let you opt into a cleaner world
[02:29:45.520 --> 02:29:48.020]   where you keep your data defended in your browser
[02:29:48.020 --> 02:29:49.860]   and you can actually realize value from it.
[02:29:49.860 --> 02:29:51.340]   So the way our ad system works,
[02:29:51.340 --> 02:29:52.300]   I mentioned it being private,
[02:29:52.300 --> 02:29:53.380]   but how does that work?
[02:29:53.380 --> 02:29:55.020]   We don't see your data at all.
[02:29:55.020 --> 02:29:57.780]   All browsers are sort of the mother of all data feeds.
[02:29:57.780 --> 02:30:00.740]   Your history, all your searches at all engines.
[02:30:00.740 --> 02:30:02.580]   Each engine sees the queries you send to it,
[02:30:02.580 --> 02:30:03.540]   but it doesn't see the others.
[02:30:03.540 --> 02:30:05.260]   But the browser sees them all.
[02:30:05.260 --> 02:30:07.580]   Machine learning in the browser that you can opt into
[02:30:07.580 --> 02:30:10.180]   can study all that in a very complete way
[02:30:10.180 --> 02:30:12.020]   and do a better job than Google does.
[02:30:12.020 --> 02:30:15.220]   Google has cookie and scripts across the web
[02:30:15.220 --> 02:30:16.540]   from acquiring DoubleClick.
[02:30:16.540 --> 02:30:19.100]   They have YouTube, they have Android,
[02:30:19.100 --> 02:30:21.620]   they have Search, which is still their big revenue lane.
[02:30:21.620 --> 02:30:22.660]   But they don't see everything.
[02:30:22.660 --> 02:30:23.820]   The browser sees everything.
[02:30:23.820 --> 02:30:25.220]   And if it can do a good job locally,
[02:30:25.220 --> 02:30:26.700]   and this is not advanced machine learning,
[02:30:26.700 --> 02:30:29.580]   this is not TensorFlow, this is like SVMs now,
[02:30:29.580 --> 02:30:30.540]   and Naive Bayes,
[02:30:30.540 --> 02:30:35.060]   then you can match intense signals,
[02:30:35.060 --> 02:30:37.180]   intense signals from those data feeds,
[02:30:37.180 --> 02:30:39.700]   the searches, the queries, the history,
[02:30:39.700 --> 02:30:41.700]   how much you're scrolling down a page,
[02:30:41.700 --> 02:30:43.820]   how much you redid a search.
[02:30:43.820 --> 02:30:45.780]   It's all blind browser algorithm.
[02:30:45.780 --> 02:30:47.060]   We don't see that data.
[02:30:47.060 --> 02:30:50.820]   And then pick the best ad from a fixed catalog per day.
[02:30:50.820 --> 02:30:53.420]   And the catalog is fixed across a large population per day.
[02:30:53.420 --> 02:30:55.100]   And it only updates once a day
[02:30:55.100 --> 02:30:57.620]   'cause new offers come in and old ones expire,
[02:30:57.620 --> 02:30:59.620]   sometimes every week or every month.
[02:30:59.620 --> 02:31:02.740]   And that catalog, and there can be many such catalogs,
[02:31:02.740 --> 02:31:06.220]   is sold by our direct sales team.
[02:31:06.220 --> 02:31:08.940]   And so we're making an anonymous audience
[02:31:08.940 --> 02:31:10.300]   available to advertisers
[02:31:10.300 --> 02:31:12.020]   without the advertisers tracking them.
[02:31:12.020 --> 02:31:15.300]   Instead, each browser is a little machine learning system
[02:31:15.300 --> 02:31:17.180]   that's picking the best catalog entry.
[02:31:17.180 --> 02:31:18.580]   Now, the catalog is not the ads.
[02:31:18.580 --> 02:31:19.420]   Those are big, right?
[02:31:19.420 --> 02:31:20.620]   It's a video or a webpage.
[02:31:20.620 --> 02:31:22.500]   It's just the link to an edge cache.
[02:31:22.500 --> 02:31:23.800]   And there are many such edge caches.
[02:31:23.800 --> 02:31:26.540]   We're not trying to protect them from seeing your IP address.
[02:31:26.540 --> 02:31:27.780]   It's not really feasible.
[02:31:27.780 --> 02:31:30.260]   We could use Tor, but we don't yet.
[02:31:30.260 --> 02:31:31.980]   And then some keywords about the ad.
[02:31:31.980 --> 02:31:34.900]   So it's basically like metadata and a link.
[02:31:34.900 --> 02:31:36.300]   And that's what the catalog consists of,
[02:31:36.300 --> 02:31:37.460]   and that's what the machine learning picks.
[02:31:37.460 --> 02:31:39.020]   - And the machine learning is learning
[02:31:39.020 --> 02:31:41.820]   about you specifically, locally,
[02:31:41.820 --> 02:31:44.180]   in order to choose from the catalog of different ads.
[02:31:44.180 --> 02:31:47.780]   Couldn't this possibly be like a multi-billion dollar,
[02:31:47.780 --> 02:31:51.060]   isn't this taking on the Google ad?
[02:31:51.060 --> 02:31:51.900]   - Could be.
[02:31:51.900 --> 02:31:54.620]   - So like what, I mean, one question to ask,
[02:31:54.620 --> 02:31:57.380]   there seems to be some really profound ideas here
[02:31:57.380 --> 02:31:59.900]   that are different than what the internet
[02:31:59.900 --> 02:32:01.900]   has grown up to be.
[02:32:01.900 --> 02:32:05.340]   If Brave or something like Brave,
[02:32:05.340 --> 02:32:07.580]   the ideas, the fundamental philosophical ideas
[02:32:07.580 --> 02:32:12.580]   underlying Brave went out and runs 95% of the internet,
[02:32:12.580 --> 02:32:16.740]   how does that change the,
[02:32:16.740 --> 02:32:19.620]   what are the major things that changes about the internet?
[02:32:19.620 --> 02:32:21.620]   So social networks and then the creatives,
[02:32:21.620 --> 02:32:23.660]   like YouTube creators and all that kind of stuff.
[02:32:23.660 --> 02:32:24.580]   - So let's talk about that.
[02:32:24.580 --> 02:32:26.260]   First of all, if Brave gets 95%,
[02:32:26.260 --> 02:32:29.100]   I'm gonna demand a recount 'cause I won't believe it.
[02:32:29.100 --> 02:32:30.060]   I don't know.
[02:32:30.060 --> 02:32:32.940]   I think we're trying to put things into web standards
[02:32:32.940 --> 02:32:34.980]   that can be standardized across browsers.
[02:32:34.980 --> 02:32:37.380]   So the main value of Brave will be
[02:32:37.380 --> 02:32:38.940]   the trust users have in us
[02:32:38.940 --> 02:32:41.300]   and our ability to give the best deal to users.
[02:32:41.300 --> 02:32:45.140]   So 70% of the gross ad revenue we give to the user,
[02:32:45.140 --> 02:32:47.940]   and if they go through that KYC process I mentioned,
[02:32:47.940 --> 02:32:48.940]   they can take it out.
[02:32:48.940 --> 02:32:49.940]   They can also give it back.
[02:32:49.940 --> 02:32:51.220]   They can take some out, give the rest back.
[02:32:51.220 --> 02:32:54.660]   They can add basic attention tokens to give back.
[02:32:54.660 --> 02:32:57.220]   Some of them turn off the ads 'cause they just don't like ads
[02:32:57.220 --> 02:32:58.980]   but they put in $20 a month.
[02:32:58.980 --> 02:33:01.100]   I believe Zucco of Zcashfame does that.
[02:33:01.100 --> 02:33:02.020]   And that's very generous
[02:33:02.020 --> 02:33:04.060]   because the browser is just anonymously,
[02:33:04.060 --> 02:33:05.300]   based on his browsing,
[02:33:05.300 --> 02:33:07.460]   sort of keeping score on how much time he spent
[02:33:07.460 --> 02:33:09.500]   on this video, on that website.
[02:33:09.500 --> 02:33:13.220]   And if those sites verify in sort of a,
[02:33:13.220 --> 02:33:15.220]   like getting a domain certificate fashion,
[02:33:15.220 --> 02:33:16.220]   they can get paid.
[02:33:16.220 --> 02:33:19.220]   They can get part of his $20 a month.
[02:33:19.220 --> 02:33:21.140]   So that vision could go big.
[02:33:21.140 --> 02:33:23.380]   And if it does, I hope it's across multiple browsers.
[02:33:23.380 --> 02:33:25.940]   I don't know that they'll all compete well
[02:33:25.940 --> 02:33:27.540]   on the quality of the ads,
[02:33:27.540 --> 02:33:30.300]   the quality of the ad blocking and tracking protection.
[02:33:30.300 --> 02:33:31.820]   Those are subject to competition.
[02:33:31.820 --> 02:33:33.340]   It'll take a while to standardize them.
[02:33:33.340 --> 02:33:35.340]   But I think that would be a better world.
[02:33:35.340 --> 02:33:38.180]   It would have less counterparty risk,
[02:33:38.180 --> 02:33:40.700]   fewer fee takers in the middle, really just the browser.
[02:33:40.700 --> 02:33:42.740]   We're taking 30%.
[02:33:42.740 --> 02:33:44.540]   It's sort of the app store split.
[02:33:44.540 --> 02:33:47.380]   And if we get bigger, maybe we can take even less.
[02:33:47.380 --> 02:33:49.500]   Social networks, creators.
[02:33:49.500 --> 02:33:50.660]   If you look at YouTubers,
[02:33:50.660 --> 02:33:53.940]   a lot of them are the indies that are getting some size,
[02:33:53.940 --> 02:33:56.700]   are getting sponsorship deals.
[02:33:56.700 --> 02:33:58.860]   They're using Patreon.
[02:33:58.860 --> 02:34:01.420]   They're encouraging people to subscribe
[02:34:01.420 --> 02:34:04.300]   and give them regular money through Patreon.
[02:34:04.300 --> 02:34:06.100]   But that's centralized through Patreon.
[02:34:06.100 --> 02:34:07.660]   So there's censorship hazards.
[02:34:07.660 --> 02:34:09.820]   There's a 5% fee.
[02:34:09.820 --> 02:34:10.940]   What if that were a web standard?
[02:34:10.940 --> 02:34:12.420]   What if Brave pioneered it first
[02:34:12.420 --> 02:34:14.500]   and we took 3%?
[02:34:14.500 --> 02:34:17.500]   And we did it in a way that was through your browser
[02:34:17.500 --> 02:34:19.220]   so we couldn't censor it.
[02:34:19.220 --> 02:34:20.260]   - That's brilliant.
[02:34:20.260 --> 02:34:22.820]   Do you think it could be standardized across browsers?
[02:34:22.820 --> 02:34:25.140]   Can Internet Explorer come in again?
[02:34:25.140 --> 02:34:27.940]   - Yeah, protocols are easy to copy
[02:34:27.940 --> 02:34:29.540]   and they're meant to be interoperable.
[02:34:29.540 --> 02:34:31.100]   So there's a risk there.
[02:34:31.100 --> 02:34:34.020]   And the loyal users might be tricked into leaving you
[02:34:34.020 --> 02:34:36.180]   or they might, because of that distribution power,
[02:34:36.180 --> 02:34:38.300]   you might end up getting stomped.
[02:34:38.300 --> 02:34:39.140]   I don't know.
[02:34:39.140 --> 02:34:39.980]   I can't predict the future.
[02:34:39.980 --> 02:34:42.340]   I think antitrust is back on the case finally in the US
[02:34:42.340 --> 02:34:45.460]   and certainly in Europe, DG Comp is doing its thing.
[02:34:45.460 --> 02:34:48.860]   So I'm hopeful that we'll have a period of innovation.
[02:34:48.860 --> 02:34:50.700]   People were talking, like Elizabeth Warren was talking
[02:34:50.700 --> 02:34:53.740]   about breaking up the tech companies very clearly.
[02:34:53.740 --> 02:34:56.500]   Now she didn't win and I suspect that won't happen.
[02:34:56.500 --> 02:34:58.460]   But I also suspect that Google might be smart enough
[02:34:58.460 --> 02:35:01.100]   to see they should do something more
[02:35:01.100 --> 02:35:03.420]   than just put privacy perfume on Chrome.
[02:35:03.420 --> 02:35:05.340]   They should maybe get rid of DoubleClick or something,
[02:35:05.340 --> 02:35:06.740]   divest something.
[02:35:06.740 --> 02:35:07.820]   I don't know, it might happen.
[02:35:07.820 --> 02:35:10.460]   - So Brave might inspire Google to completely change
[02:35:10.460 --> 02:35:11.300]   the way they're doing things in the future.
[02:35:11.300 --> 02:35:13.900]   - They're already doing something you may have read about
[02:35:13.900 --> 02:35:17.660]   called the privacy sandbox or Flock,
[02:35:17.660 --> 02:35:20.020]   which they have this bird metaphor going,
[02:35:20.020 --> 02:35:22.780]   turtle dove, fledge.
[02:35:22.780 --> 02:35:25.860]   But these systems have been very Googly,
[02:35:25.860 --> 02:35:27.820]   kind of over-engineered and yet,
[02:35:27.820 --> 02:35:29.260]   depending on differential privacy,
[02:35:29.260 --> 02:35:31.420]   which has weakness over time, if you know how that works,
[02:35:31.420 --> 02:35:34.260]   it's kind of injecting noise to hide you in a crowd.
[02:35:34.260 --> 02:35:37.660]   But over time, an adversary can pull you out of the crowd.
[02:35:37.660 --> 02:35:39.380]   This doesn't look like it's gonna become a standard.
[02:35:39.380 --> 02:35:42.700]   Like Apple, Brave, Mozilla, we're not gonna just say,
[02:35:42.700 --> 02:35:44.700]   oh, Google, you saved us.
[02:35:44.700 --> 02:35:46.060]   You've invented the privacy sandbox,
[02:35:46.060 --> 02:35:47.620]   so we'll all just adopt it.
[02:35:47.620 --> 02:35:48.580]   Not gonna be that easy.
[02:35:48.580 --> 02:35:51.540]   It's gonna be more like pieces of what we do in Brave,
[02:35:51.540 --> 02:35:52.780]   this anonymous ad matching
[02:35:52.780 --> 02:35:55.020]   or the blind signature cryptography
[02:35:55.020 --> 02:35:56.980]   we use to confirm the ad impressions.
[02:35:56.980 --> 02:35:59.220]   That's David Choum's invention.
[02:35:59.220 --> 02:36:00.340]   That could get standardized.
[02:36:00.340 --> 02:36:02.220]   In fact, some of that is being standardized.
[02:36:02.220 --> 02:36:04.420]   Even Google's in favor of so-called trust tokens,
[02:36:04.420 --> 02:36:07.460]   which are Choumian blind signature certs.
[02:36:07.460 --> 02:36:09.300]   But they're not using them for ad confirmations
[02:36:09.300 --> 02:36:11.460]   'cause they don't wanna blow up their own business.
[02:36:11.460 --> 02:36:14.740]   And they need to let some of the publishers they serve
[02:36:14.740 --> 02:36:17.340]   have other ad tech scripts on the page.
[02:36:17.340 --> 02:36:18.620]   And so they're kind of caught.
[02:36:18.620 --> 02:36:19.860]   And this is something I realized doing Brave.
[02:36:19.860 --> 02:36:22.900]   I thought, what's Google's innovators dilemma,
[02:36:22.900 --> 02:36:26.300]   apart from just being mature and having trouble innovating?
[02:36:26.300 --> 02:36:30.620]   It's that they have come to depend on this ad tech system
[02:36:30.620 --> 02:36:34.980]   that has all these vendors that publishers rely on,
[02:36:34.980 --> 02:36:36.380]   because publishers aren't technical enough.
[02:36:36.380 --> 02:36:37.980]   And I feel for the publishers,
[02:36:37.980 --> 02:36:39.900]   but I realized the users have to come first.
[02:36:39.900 --> 02:36:43.700]   And if you give the users a better browser that's faster,
[02:36:43.700 --> 02:36:46.220]   then you'll get enough users to give back
[02:36:46.220 --> 02:36:47.700]   or support publishers.
[02:36:47.700 --> 02:36:49.420]   The speed and the battery savings
[02:36:49.420 --> 02:36:51.100]   and the data plan savings are significant.
[02:36:51.100 --> 02:36:53.300]   There's so much bad JavaScript involved in ad tech
[02:36:53.300 --> 02:36:54.580]   that if you block it,
[02:36:54.580 --> 02:36:57.500]   you sort of chop off what's called the programmatic waterfall
[02:36:57.500 --> 02:36:59.100]   which chains a bunch of requests.
[02:36:59.100 --> 02:37:01.180]   - Yeah, that's one of the incredible things about Brave.
[02:37:01.180 --> 02:37:03.180]   I guess you're saying you should attribute it
[02:37:03.180 --> 02:37:06.580]   to the fact that the messy JavaScript, no offense.
[02:37:06.580 --> 02:37:07.420]   - No, it's good.
[02:37:07.420 --> 02:37:08.260]   It's not my excuse.
[02:37:08.260 --> 02:37:10.100]   (laughing)
[02:37:10.100 --> 02:37:13.900]   Is, I mean, Brave just feels faster,
[02:37:13.900 --> 02:37:16.420]   even then, I mean, Chrome was fast.
[02:37:16.420 --> 02:37:18.420]   One of the things that it was like impressive
[02:37:18.420 --> 02:37:21.620]   is it showed that browsers can be really fast.
[02:37:21.620 --> 02:37:23.540]   And Brave is even faster than that, which is incredible.
[02:37:23.540 --> 02:37:24.380]   - We've blocked so much.
[02:37:24.380 --> 02:37:26.940]   And it saves the network, which means data plan,
[02:37:26.940 --> 02:37:29.420]   it saves battery because the radio consumes your battery
[02:37:29.420 --> 02:37:31.140]   when it's running more to do those requests.
[02:37:31.140 --> 02:37:32.940]   And it's just stunning how many there are.
[02:37:32.940 --> 02:37:34.700]   Like some of my Google friends were like,
[02:37:34.700 --> 02:37:36.660]   oh, that's just that bad site, they'll fix it.
[02:37:36.660 --> 02:37:38.540]   And you actually do a survey of web pages
[02:37:38.540 --> 02:37:40.300]   that they're like mostly like that.
[02:37:40.300 --> 02:37:42.420]   I know Google engineers could make everything
[02:37:42.420 --> 02:37:44.260]   super efficient, but they can't,
[02:37:44.260 --> 02:37:45.740]   especially in antitrust court, do it.
[02:37:45.740 --> 02:37:48.420]   They cannot take over all the publishers and do that.
[02:37:48.420 --> 02:37:51.740]   They're trying with accelerated mobile profile, AMP.
[02:37:51.740 --> 02:37:53.420]   They're trying to pull publishers.
[02:37:53.420 --> 02:37:54.580]   They're like, oh, you poor publishers
[02:37:54.580 --> 02:37:56.860]   don't know how to make your pages fast.
[02:37:56.860 --> 02:37:58.140]   Put them on our AMP system,
[02:37:58.140 --> 02:38:00.620]   we'll give you extra placement in the search carousel.
[02:38:00.620 --> 02:38:02.380]   That's an antitrust problem for one.
[02:38:02.380 --> 02:38:04.300]   But it's also, publishers we talk to hate it
[02:38:04.300 --> 02:38:05.980]   because it degrades their brand.
[02:38:05.980 --> 02:38:07.980]   Now they look like a gig writer wrote a piece
[02:38:07.980 --> 02:38:12.220]   that's got Google's framing and AMP URL on top of it.
[02:38:12.220 --> 02:38:13.300]   And they're trying to fix that too.
[02:38:13.300 --> 02:38:15.660]   But it just looks like Google's
[02:38:15.660 --> 02:38:17.060]   borgifying all these publishers
[02:38:17.060 --> 02:38:18.980]   and they don't wanna be plugged into the BorgCube.
[02:38:18.980 --> 02:38:22.000]   They wanna build up their own brand and have loyal readers.
[02:38:22.000 --> 02:38:25.540]   So I'm in favor of giving the user's power
[02:38:25.540 --> 02:38:27.700]   to help all the publishers
[02:38:27.700 --> 02:38:29.500]   in this little platoons and the creators.
[02:38:29.500 --> 02:38:30.820]   And so we talked about Patreon.
[02:38:30.820 --> 02:38:31.940]   What about social networks?
[02:38:31.940 --> 02:38:35.380]   Well, they're inherently like search, a global algorithm.
[02:38:35.380 --> 02:38:37.060]   You're trying to find friends of friends.
[02:38:37.060 --> 02:38:39.300]   You're doing the transitive closure of a graph
[02:38:39.300 --> 02:38:41.660]   induced by this friend of relation.
[02:38:41.660 --> 02:38:45.280]   But you should own your friend relation.
[02:38:45.280 --> 02:38:46.940]   You should own your posts.
[02:38:46.940 --> 02:38:48.620]   They shouldn't be owned by somebody else
[02:38:48.620 --> 02:38:51.020]   who can take them down or censor them.
[02:38:51.020 --> 02:38:52.000]   And your friend relations,
[02:38:52.000 --> 02:38:54.180]   you should be able to find those friends on other networks.
[02:38:54.180 --> 02:38:56.660]   And so I've tweeted about this, I haven't built it yet.
[02:38:56.660 --> 02:38:59.700]   What if the browser could keep track of those for you?
[02:38:59.700 --> 02:39:03.460]   What if the browser could maybe combine Facebook and Twitter
[02:39:03.460 --> 02:39:05.260]   and you could find your friends on both
[02:39:05.260 --> 02:39:06.500]   and you could have a sort of multi--
[02:39:06.500 --> 02:39:09.900]   - So that relationship is not owned by Facebook or Twitter.
[02:39:09.900 --> 02:39:12.020]   It's owned by you through the browser.
[02:39:12.020 --> 02:39:14.020]   - They'll have terms of use and they'll say they own it.
[02:39:14.020 --> 02:39:16.980]   But if they zap you on one and you're still on the other,
[02:39:16.980 --> 02:39:17.900]   your friends find you
[02:39:17.900 --> 02:39:20.820]   and the browser could preserve a combined view.
[02:39:20.820 --> 02:39:23.780]   You could resurrect almost across networks.
[02:39:23.780 --> 02:39:26.580]   - It's something I wanna maybe quickly ask you about.
[02:39:26.580 --> 02:39:31.340]   On that front, there's been quite a lot of centralized,
[02:39:31.340 --> 02:39:35.240]   we talked about Wall Street Bets and then Robinhood.
[02:39:35.240 --> 02:39:39.340]   There's been centralized banning of different accounts
[02:39:39.340 --> 02:39:42.660]   and removing like Parler, for example, from AWS
[02:39:42.660 --> 02:39:46.780]   and this kind of overreach of centralized control.
[02:39:46.780 --> 02:39:49.380]   Is your hope that it's possible to,
[02:39:49.380 --> 02:39:50.780]   like what are your thoughts about that in general?
[02:39:50.780 --> 02:39:54.500]   Is it, and is it possible to create tools
[02:39:54.500 --> 02:39:56.740]   that give individual people the power
[02:39:56.740 --> 02:40:00.100]   to fight back against overreach of such control?
[02:40:00.100 --> 02:40:02.700]   - So we're talking about oligarchy, I do think.
[02:40:02.700 --> 02:40:05.320]   And that, if it controls a nation state, that's formidable.
[02:40:05.320 --> 02:40:08.280]   It's the tax and the police power, the military power.
[02:40:08.280 --> 02:40:10.880]   It means that you may have the Great Firewall of China.
[02:40:10.880 --> 02:40:13.400]   You may have people in China who are jailed
[02:40:13.400 --> 02:40:14.920]   because of their tweets, right?
[02:40:14.920 --> 02:40:15.760]   This is a serious threat.
[02:40:15.760 --> 02:40:18.280]   I can't minimize it or say that we'll win.
[02:40:18.280 --> 02:40:20.000]   I don't know how it's gonna go.
[02:40:20.000 --> 02:40:21.680]   But I do think, like I said earlier
[02:40:21.680 --> 02:40:24.040]   about the cunning of reason, people find ways around things.
[02:40:24.040 --> 02:40:25.880]   The internet routes around censorship.
[02:40:25.880 --> 02:40:28.860]   And this is not to endorse any particular bad faction.
[02:40:28.860 --> 02:40:29.920]   One of the things that happens
[02:40:29.920 --> 02:40:33.040]   when you try to wave the free speech flag too much,
[02:40:33.040 --> 02:40:34.640]   you say I'm not gonna censor anything,
[02:40:34.640 --> 02:40:37.920]   and you get colonized by terrible, terrible people.
[02:40:37.920 --> 02:40:39.840]   I don't care if you call them neo-Nazis,
[02:40:39.840 --> 02:40:41.840]   some of them could be doing illegal things.
[02:40:41.840 --> 02:40:44.000]   And you don't want them colonizing
[02:40:44.000 --> 02:40:46.380]   'cause it'll ruin your reputation and destroy your business.
[02:40:46.380 --> 02:40:48.720]   So what you really want is that kind of
[02:40:48.720 --> 02:40:51.560]   user-first subsidiarity, that subjectivity.
[02:40:51.560 --> 02:40:55.320]   I want my social networks to be composited
[02:40:55.320 --> 02:40:57.080]   in some multi-social user interface
[02:40:57.080 --> 02:40:59.480]   where I don't lose track of people across networks.
[02:40:59.480 --> 02:41:01.640]   And if they leave one or they get banned from one,
[02:41:01.640 --> 02:41:02.520]   I can find them on another,
[02:41:02.520 --> 02:41:04.080]   I can still sort of thread them together.
[02:41:04.080 --> 02:41:05.040]   - Yeah, that's brilliant.
[02:41:05.040 --> 02:41:07.760]   - And this didn't happen because browsers
[02:41:07.760 --> 02:41:09.880]   got captured by the central powers.
[02:41:09.880 --> 02:41:10.880]   And why did they get captured?
[02:41:10.880 --> 02:41:13.740]   Mostly 'cause of search, and search is a central algorithm.
[02:41:13.740 --> 02:41:15.640]   So Larry Page said this too many years ago.
[02:41:15.640 --> 02:41:17.960]   He said, with search, you're giving up a little privacy
[02:41:17.960 --> 02:41:19.840]   by handing the query over to us,
[02:41:19.840 --> 02:41:21.440]   and then we'll error correct it.
[02:41:21.440 --> 02:41:24.320]   Alan Eustace used to be a Google executive.
[02:41:24.320 --> 02:41:25.600]   He said, oh yeah, we used to laugh.
[02:41:25.600 --> 02:41:27.000]   They'd all be doing typos,
[02:41:27.000 --> 02:41:28.040]   and they'd be typing the wrong word.
[02:41:28.040 --> 02:41:29.760]   And we're like, no, dummy, type that query.
[02:41:29.760 --> 02:41:31.360]   And it's like, okay, Google,
[02:41:31.360 --> 02:41:33.040]   might wanna dial back that ego a little bit.
[02:41:33.040 --> 02:41:35.240]   But yes, you do see all the queries,
[02:41:35.240 --> 02:41:36.120]   and you can improve them,
[02:41:36.120 --> 02:41:37.320]   and you can find the best results.
[02:41:37.320 --> 02:41:38.880]   And that was Google's forte.
[02:41:38.880 --> 02:41:40.560]   When we did the Firefox deal in 2004,
[02:41:40.560 --> 02:41:42.380]   Google was really good.
[02:41:42.380 --> 02:41:46.240]   And over time, SEO, which is an adversarial game,
[02:41:46.240 --> 02:41:48.600]   and Google itself buying all these companies
[02:41:48.600 --> 02:41:50.100]   and crowding its own results page
[02:41:50.100 --> 02:41:53.800]   with its own tied-in stuff, the YouTube--
[02:41:53.800 --> 02:41:55.280]   - It's the slip or slope that happens
[02:41:55.280 --> 02:41:58.400]   when you have control over these kinds
[02:41:58.400 --> 02:41:59.680]   of really important mechanisms
[02:41:59.680 --> 02:42:01.400]   as a set of data. - Yeah, monopoly capitalism
[02:42:01.400 --> 02:42:03.520]   or cartel, you get this with the Robin Hoods
[02:42:03.520 --> 02:42:05.320]   and the hedge funds.
[02:42:05.320 --> 02:42:08.000]   You get sort of the money interests take over
[02:42:08.000 --> 02:42:10.140]   and kind of abuse their power and wear out their welcome.
[02:42:10.140 --> 02:42:11.980]   So how do you get around that?
[02:42:11.980 --> 02:42:15.440]   You have to have either new land to go to,
[02:42:15.440 --> 02:42:18.280]   which some people's ancestors, not mine,
[02:42:18.280 --> 02:42:19.640]   did to found the country.
[02:42:19.640 --> 02:42:22.840]   I'm mostly Irish-German.
[02:42:22.840 --> 02:42:26.080]   You have new virtual space people go to,
[02:42:26.080 --> 02:42:30.360]   and that requires an ISP or a colo center
[02:42:30.360 --> 02:42:32.120]   or Amazon to host you.
[02:42:32.120 --> 02:42:36.000]   It requires domain name registrar who will not strike you.
[02:42:36.000 --> 02:42:38.340]   And so when Parler was taken down,
[02:42:38.340 --> 02:42:40.920]   I thought that was egregious.
[02:42:40.920 --> 02:42:43.040]   Parler, it was not well-designed,
[02:42:43.040 --> 02:42:45.940]   and I tried it out 'cause I tried all these things,
[02:42:45.940 --> 02:42:46.780]   but I didn't use it.
[02:42:46.780 --> 02:42:49.420]   And I also felt they were being unfairly scored
[02:42:49.420 --> 02:42:51.240]   for not moderating, because you can find tweets
[02:42:51.240 --> 02:42:53.280]   to this day that are horrendous
[02:42:53.280 --> 02:42:54.640]   and threaten all sorts of violence.
[02:42:54.640 --> 02:42:56.680]   Whereas Twitter, why isn't Twitter being taken down?
[02:42:56.680 --> 02:42:57.640]   But so it was very selective.
[02:42:57.640 --> 02:42:59.920]   It was the insiders who have the power
[02:42:59.920 --> 02:43:01.640]   are gonna take out the newcomer.
[02:43:01.640 --> 02:43:05.360]   And it looked bad, sort of like the hedge funds
[02:43:05.360 --> 02:43:06.760]   shorting GameStop.
[02:43:06.760 --> 02:43:08.040]   Looked bad.
[02:43:08.040 --> 02:43:10.040]   You're seeing a piece in Time Magazine this week
[02:43:10.040 --> 02:43:11.280]   that's basically saying,
[02:43:11.280 --> 02:43:12.600]   "Yeah, we interfere with the election,
[02:43:12.600 --> 02:43:14.600]   "but it was great, aren't we good?"
[02:43:14.600 --> 02:43:16.600]   I don't know if you've seen this piece yet.
[02:43:16.600 --> 02:43:20.760]   If you tried to say that as a Trump supporter in November
[02:43:20.760 --> 02:43:22.880]   after the election, you'd get banned from Twitter.
[02:43:22.880 --> 02:43:24.760]   But now Time, in its Twitter account,
[02:43:24.760 --> 02:43:26.840]   is saying, "We saved the day.
[02:43:26.840 --> 02:43:30.160]   "It's AFL-CIO and big business,
[02:43:30.160 --> 02:43:32.040]   "the Better Business Bureau got together
[02:43:32.040 --> 02:43:34.960]   "and kept Trump from spreading fake news."
[02:43:34.960 --> 02:43:36.840]   So the country's kind of broken.
[02:43:36.840 --> 02:43:37.800]   I don't know how to fix that.
[02:43:37.800 --> 02:43:40.160]   The oligarchs have run wild, in my opinion.
[02:43:40.160 --> 02:43:42.760]   And big tech is in the antitrust dock.
[02:43:42.760 --> 02:43:43.720]   What's gonna happen?
[02:43:43.720 --> 02:43:44.760]   I don't think they get out.
[02:43:44.760 --> 02:43:47.880]   I think some of the DOJ, and certainly the state cases,
[02:43:47.880 --> 02:43:49.080]   'cause they're separate cases,
[02:43:49.080 --> 02:43:50.360]   are not gonna go away just 'cause
[02:43:50.360 --> 02:43:52.360]   somebody got elected differently.
[02:43:52.360 --> 02:43:53.840]   And these are career prosecutors,
[02:43:53.840 --> 02:43:55.880]   and they have a strong case.
[02:43:55.880 --> 02:43:56.840]   And Google's smart.
[02:43:56.840 --> 02:43:59.560]   Microsoft almost got split up, right?
[02:43:59.560 --> 02:44:02.720]   The judge, Thomas Penfield Jackson, he overreached.
[02:44:02.720 --> 02:44:04.960]   He didn't hold a hearing about the remedy.
[02:44:04.960 --> 02:44:06.760]   He just said, "I'm gonna break you up."
[02:44:06.760 --> 02:44:10.440]   And Microsoft appealed, and the higher-level court said,
[02:44:10.440 --> 02:44:11.500]   "Go back and figure this out.
[02:44:11.500 --> 02:44:12.340]   "You're not breaking them up.
[02:44:12.340 --> 02:44:13.640]   "You didn't even hold a hearing."
[02:44:13.640 --> 02:44:15.340]   And when they got back, Microsoft said,
[02:44:15.340 --> 02:44:16.400]   "Let's settle, let's settle.
[02:44:16.400 --> 02:44:17.620]   "We don't wanna get broken up."
[02:44:17.660 --> 02:44:20.500]   Because Jackson was gonna make the OpsCo,
[02:44:20.500 --> 02:44:21.580]   the operating system company,
[02:44:21.580 --> 02:44:24.740]   and the AppsCo, Office, Word and Excel.
[02:44:24.740 --> 02:44:27.540]   And that would've been a huge blow to Microsoft.
[02:44:27.540 --> 02:44:31.100]   - But ultimately, I don't know if you're optimistic
[02:44:31.100 --> 02:44:34.500]   or cynical about the possibility of breaking up big tech.
[02:44:34.500 --> 02:44:39.500]   To me, I'm optimistic that tools like Brave,
[02:44:39.500 --> 02:44:42.500]   I love the idea of owning your friendships.
[02:44:42.500 --> 02:44:46.420]   Users more and more owning the stuff is the only real way.
[02:44:46.420 --> 02:44:48.540]   Unfortunately, it's like the Wall Street Bets subreddit
[02:44:48.540 --> 02:44:51.100]   is the only real way to fight the centralized power.
[02:44:51.100 --> 02:44:52.700]   You can't break 'em up through regulation.
[02:44:52.700 --> 02:44:53.540]   It's very difficult.
[02:44:53.540 --> 02:44:55.220]   - Certainly, I don't wanna wait for the law.
[02:44:55.220 --> 02:44:57.660]   Netscape was long dead or acquired by AOL
[02:44:57.660 --> 02:44:58.480]   and effectively dead.
[02:44:58.480 --> 02:45:01.980]   It was only Mozilla that returned Firefox to the market
[02:45:01.980 --> 02:45:04.140]   by the time that the US v. Microsoft case
[02:45:04.140 --> 02:45:07.260]   was finally settled and the penalties were put in place.
[02:45:07.260 --> 02:45:11.020]   And yet, antitrust has a role to play.
[02:45:11.020 --> 02:45:12.660]   Those penalties caused Microsoft
[02:45:12.660 --> 02:45:14.220]   to kind of turn away from the web.
[02:45:14.220 --> 02:45:16.020]   They did Windows Vista, and they thought,
[02:45:16.020 --> 02:45:16.860]   "The web's too painful.
[02:45:16.860 --> 02:45:19.680]   "We got punished in court, and we had to standardize things
[02:45:19.680 --> 02:45:21.300]   "with those icky standards people."
[02:45:21.300 --> 02:45:23.540]   So they ran back to proprietary lock-in,
[02:45:23.540 --> 02:45:24.740]   and Windows Vista flopped.
[02:45:24.740 --> 02:45:27.800]   It was late, it was bloated, longhorn, remember?
[02:45:27.800 --> 02:45:30.420]   Now, what I was gonna say, but Google's smart enough,
[02:45:30.420 --> 02:45:31.720]   they won't get split up.
[02:45:31.720 --> 02:45:34.920]   They'll split something out to get off the hook, I think.
[02:45:34.920 --> 02:45:39.340]   - This is a complicated subject, but I, myself, was so,
[02:45:39.340 --> 02:45:43.300]   I decided to journey out from the world
[02:45:43.300 --> 02:45:45.340]   of being a researcher at MIT,
[02:45:45.340 --> 02:45:48.460]   and potentially doing a startup myself,
[02:45:48.460 --> 02:45:50.580]   and I've been thinking of,
[02:45:50.580 --> 02:45:53.700]   I wanted to come to Silicon Valley to do so.
[02:45:53.700 --> 02:45:56.020]   It's the land of the entrepreneur.
[02:45:56.020 --> 02:45:58.020]   And there's a lot of my friends,
[02:45:58.020 --> 02:45:59.660]   a lot of them are successfully,
[02:45:59.660 --> 02:46:01.420]   have been entrepreneurs themselves,
[02:46:01.420 --> 02:46:03.700]   have said, "Do not come to Silicon Valley."
[02:46:03.700 --> 02:46:09.180]   You've started, you ran amazing teams of engineers.
[02:46:09.180 --> 02:46:12.180]   You started a lot of successful businesses.
[02:46:12.180 --> 02:46:14.940]   I wondered if you could comment on
[02:46:14.940 --> 02:46:17.220]   why a lot of people are leaving California.
[02:46:17.220 --> 02:46:19.860]   Is there something that could be fixed about California?
[02:46:19.860 --> 02:46:22.780]   If you were starting a business today,
[02:46:22.780 --> 02:46:24.840]   would you consider somewhere else,
[02:46:24.840 --> 02:46:27.380]   like Austin, or some other place?
[02:46:27.380 --> 02:46:30.740]   Or is Silicon Valley still, is it just a little lull,
[02:46:30.740 --> 02:46:32.380]   everybody's being overdramatic
[02:46:32.380 --> 02:46:35.900]   during this particular year of the coronavirus, and so on?
[02:46:35.900 --> 02:46:38.260]   - I think, you know, even Austin's getting overheated,
[02:46:38.260 --> 02:46:42.460]   I hear, and I've had relatives and friends move to Texas
[02:46:42.460 --> 02:46:43.300]   within the last few months.
[02:46:43.300 --> 02:46:45.860]   So Texas as a whole is a big place.
[02:46:45.860 --> 02:46:48.480]   And, you know, people are moving to Florida,
[02:46:48.480 --> 02:46:50.700]   there's a big movement toward Miami,
[02:46:50.700 --> 02:46:53.260]   Peter Thiel, Keith, all these people.
[02:46:53.260 --> 02:46:56.260]   The mayor has been very business-friendly about it,
[02:46:56.260 --> 02:46:58.620]   which I think is just good politics.
[02:46:58.620 --> 02:47:00.660]   America is fundamentally a commercial republic,
[02:47:00.660 --> 02:47:02.540]   so you would think this would be what's happening.
[02:47:02.540 --> 02:47:04.420]   For a long time, California was the golden state.
[02:47:04.420 --> 02:47:06.820]   I came here in late '76 when I was a teenager.
[02:47:06.820 --> 02:47:11.380]   It's in crushing debt due to the lockdowns.
[02:47:11.380 --> 02:47:14.500]   It's got the highest taxes, that's gotta matter,
[02:47:14.500 --> 02:47:16.460]   people will do high taxes.
[02:47:16.460 --> 02:47:21.580]   It's got, likely fires every year because of the deadfall.
[02:47:21.580 --> 02:47:22.780]   It's not global warming,
[02:47:22.780 --> 02:47:24.220]   it's because the forests weren't managed
[02:47:24.220 --> 02:47:26.860]   like they had been in the first part of the 20th century.
[02:47:26.860 --> 02:47:31.120]   Just, I would say corruption at all levels,
[02:47:31.120 --> 02:47:32.260]   especially up to the governor,
[02:47:32.260 --> 02:47:34.460]   who, you know, famously was eating at the French Laundry,
[02:47:34.460 --> 02:47:36.740]   and claimed that the outside was inside,
[02:47:36.740 --> 02:47:39.520]   and they were out in masks off, and it was great.
[02:47:39.520 --> 02:47:42.300]   Do what I say, not what I do.
[02:47:42.300 --> 02:47:44.740]   Rules for thee, but not for me.
[02:47:44.740 --> 02:47:47.580]   When you see that in leadership,
[02:47:47.580 --> 02:47:50.400]   people either run, or they get rid of the leadership,
[02:47:50.400 --> 02:47:51.420]   so there's a recall drive,
[02:47:51.420 --> 02:47:53.500]   which is about to reach the threshold,
[02:47:53.500 --> 02:47:56.140]   or in the old days, they get their guns, right?
[02:47:56.140 --> 02:47:57.580]   You don't put up with this junk.
[02:47:57.580 --> 02:48:00.700]   - But ultimately, the thing that made Silicon Valley
[02:48:00.700 --> 02:48:04.580]   a special place, it gave freedom to young kids,
[02:48:04.580 --> 02:48:08.140]   entrepreneurs, young minds, brave minds,
[02:48:08.140 --> 02:48:10.780]   to think bold, to try different stuff.
[02:48:10.780 --> 02:48:12.900]   I mean, even if the taxes are high,
[02:48:12.900 --> 02:48:15.500]   so outside of financial stuff, outside of all of that--
[02:48:15.500 --> 02:48:16.940]   - Housing's super expensive.
[02:48:16.940 --> 02:48:18.780]   - Housing's super, so it's hard.
[02:48:18.780 --> 02:48:19.620]   Okay, everything about startups is hard.
[02:48:19.620 --> 02:48:22.820]   - Pencils narrow, and they didn't plan the roads, right?
[02:48:22.820 --> 02:48:23.640]   - Yeah.
[02:48:23.640 --> 02:48:25.980]   - They got rid of public transportation in LA,
[02:48:25.980 --> 02:48:28.220]   like the Who Framed Roger Rabbit cartoon show.
[02:48:28.220 --> 02:48:30.820]   They used to have trolley cars in Portland, too.
[02:48:30.820 --> 02:48:34.260]   The oil companies and the DOD conspired to build highways
[02:48:34.260 --> 02:48:37.380]   and make cars dominant, and the rights of way are long gone.
[02:48:37.380 --> 02:48:39.700]   Like Elon's gonna go underground.
[02:48:39.700 --> 02:48:40.540]   And I rushed him well.
[02:48:40.540 --> 02:48:42.740]   That's probably the only way to do it now.
[02:48:42.740 --> 02:48:45.700]   - But is it still a place, do you think it's possible
[02:48:45.700 --> 02:48:48.140]   that Silicon Valley is still a place where magic happens,
[02:48:48.140 --> 02:48:50.180]   where the next Google's built, where the next,
[02:48:50.180 --> 02:48:53.540]   I mean, Brave is built, where--
[02:48:53.540 --> 02:48:54.860]   - I think all good things come to an end.
[02:48:54.860 --> 02:48:56.620]   I think the problem is Silicon Valley
[02:48:56.620 --> 02:48:58.780]   had strong network effects through Stanford,
[02:48:58.780 --> 02:49:02.260]   through the angel investor networks and the wealth effect,
[02:49:02.260 --> 02:49:04.340]   and originally, you have to give
[02:49:04.340 --> 02:49:05.180]   the federal government credit.
[02:49:05.180 --> 02:49:07.260]   Like the ARPANET was a government project.
[02:49:07.260 --> 02:49:08.100]   Let's not kid ourselves.
[02:49:08.100 --> 02:49:11.140]   This wasn't wild free market, libertarian capitalism.
[02:49:11.140 --> 02:49:12.740]   This was all Cold War stuff.
[02:49:12.740 --> 02:49:17.020]   You had, out of the academia, you had Shockley,
[02:49:17.020 --> 02:49:20.100]   and then the Trader SA, and Fairchild, and Intel.
[02:49:20.100 --> 02:49:25.000]   But now, when's the last fab that was built in the Valley?
[02:49:25.000 --> 02:49:26.380]   MicroUnity might've been the last.
[02:49:26.380 --> 02:49:27.420]   I don't know, I haven't followed,
[02:49:27.420 --> 02:49:29.220]   but we built a fab in Sunnyvale,
[02:49:29.220 --> 02:49:33.260]   at MicroUnity, starting in the early '90s.
[02:49:33.260 --> 02:49:35.540]   And now the fabs are overseas.
[02:49:36.540 --> 02:49:38.780]   And the one thing that I will say
[02:49:38.780 --> 02:49:40.620]   that the oligarchs have intentionally done,
[02:49:40.620 --> 02:49:44.180]   in both parties, is sort of labor
[02:49:44.180 --> 02:49:46.140]   and environmental protection law arbitrage
[02:49:46.140 --> 02:49:47.540]   by going where the labor's cheaper,
[02:49:47.540 --> 02:49:49.460]   and the environmental laws aren't as strict.
[02:49:49.460 --> 02:49:51.980]   And that's polluted the hell out of parts of China,
[02:49:51.980 --> 02:49:55.060]   but it's made things, you can make cheaper junk.
[02:49:55.060 --> 02:49:58.860]   And this is not a story that's over yet.
[02:49:58.860 --> 02:50:00.700]   So what is Silicon Valley for now?
[02:50:00.700 --> 02:50:03.260]   It's for the network effect, the brain trust,
[02:50:03.260 --> 02:50:05.380]   the who you know, the parties,
[02:50:05.380 --> 02:50:09.460]   the Stanford sort of network.
[02:50:09.460 --> 02:50:11.820]   That's fragile too, over time, I'm afraid.
[02:50:11.820 --> 02:50:16.060]   Stanford, a lot of good professors I like,
[02:50:16.060 --> 02:50:19.860]   they still filter mainly based on socioeconomic status,
[02:50:19.860 --> 02:50:22.140]   but it's kind of a skate school.
[02:50:22.140 --> 02:50:24.980]   I had a friend hired out of Harvard 20 years ago
[02:50:24.980 --> 02:50:28.540]   at Netscape, and we talked about Harvard,
[02:50:28.540 --> 02:50:29.780]   and he said, "Yeah, there's still professors
[02:50:29.780 --> 02:50:30.700]   "who are great on the curve."
[02:50:30.700 --> 02:50:31.620]   And I said, "Oh yeah, I don't think
[02:50:31.620 --> 02:50:33.700]   "they're any doing that at Stanford anymore."
[02:50:33.700 --> 02:50:35.040]   And he said, "Yo, it was shocking.
[02:50:35.040 --> 02:50:37.700]   "Some of the students got Cs and Ds, and they were crying."
[02:50:37.700 --> 02:50:38.540]   It's like, yes, that's right,
[02:50:38.540 --> 02:50:40.820]   the precious deers can't take that at Stanford,
[02:50:40.820 --> 02:50:42.460]   so they get As and Bs.
[02:50:42.460 --> 02:50:45.060]   Now, you look at China, and people say
[02:50:45.060 --> 02:50:46.260]   what you know about China.
[02:50:46.260 --> 02:50:49.700]   They, true of Russia too, a lot of math science training,
[02:50:49.700 --> 02:50:51.300]   a lot of engineering, a lot of people
[02:50:51.300 --> 02:50:55.220]   who are doing their coursework to get the As and Bs.
[02:50:55.220 --> 02:50:59.940]   So I'm an American, I'm born on the 4th of July.
[02:50:59.940 --> 02:51:01.540]   - Really? - 4th of July.
[02:51:01.540 --> 02:51:02.380]   - Yeah. - Wow.
[02:51:02.380 --> 02:51:03.940]   - And America, as I say, fundamentally
[02:51:03.940 --> 02:51:04.860]   is a commercial republic.
[02:51:04.860 --> 02:51:06.380]   You can try to make it something else.
[02:51:06.380 --> 02:51:09.060]   You can say it's the new Atlantis and mystify it.
[02:51:09.060 --> 02:51:11.300]   You could talk about it in a more, I think, correct way,
[02:51:11.300 --> 02:51:12.840]   which is 13 colonies that grew,
[02:51:12.840 --> 02:51:15.220]   and then there's a lot of local,
[02:51:15.220 --> 02:51:16.780]   or in the original design anyway,
[02:51:16.780 --> 02:51:18.860]   the Federalist Papers talk about this,
[02:51:18.860 --> 02:51:20.700]   there's a lot of subsidiarity.
[02:51:20.700 --> 02:51:23.960]   But that's been eroded over time,
[02:51:23.960 --> 02:51:26.660]   and like I say, a lot of the offshoring has hurt.
[02:51:26.660 --> 02:51:28.860]   So what happened with coronavirus?
[02:51:28.860 --> 02:51:29.980]   People working from home.
[02:51:29.980 --> 02:51:32.100]   At first it was funny, 'cause I have friends at Google
[02:51:32.100 --> 02:51:34.420]   who used to grumble that not only did they have
[02:51:34.420 --> 02:51:36.780]   to come into the office, if they joined a different team
[02:51:36.780 --> 02:51:39.100]   that was centered at a different office, they had to move.
[02:51:39.100 --> 02:51:43.080]   Or if the VA team was reconstituted in Munich,
[02:51:43.080 --> 02:51:46.700]   which it was after Lars Bach just got tired of JavaScript,
[02:51:46.700 --> 02:51:48.740]   that they hired in Munich, or they hired PhDs
[02:51:48.740 --> 02:51:50.780]   from Germany and moved them to Munich.
[02:51:50.780 --> 02:51:52.300]   With coronavirus, everyone's working from home,
[02:51:52.300 --> 02:51:53.220]   and it's like, what a relief,
[02:51:53.220 --> 02:51:54.820]   I can work for Google from home.
[02:51:54.820 --> 02:51:56.420]   But then the next shoe dropped,
[02:51:56.420 --> 02:51:57.820]   and people started asking Mark Zuckerberg,
[02:51:57.820 --> 02:52:01.540]   hey, can I move to my hometown in the Midwest?
[02:52:01.540 --> 02:52:02.380]   And he said, okay.
[02:52:02.380 --> 02:52:05.060]   And they said, oh, can I keep getting my Silicon Valley pay?
[02:52:05.060 --> 02:52:06.620]   No. (laughs)
[02:52:06.620 --> 02:52:08.460]   We're gonna figure out what your cost of living there is,
[02:52:08.460 --> 02:52:10.260]   and we're gonna adjust your pay accordingly.
[02:52:10.260 --> 02:52:12.980]   - And these colonies and these little mini experiments
[02:52:12.980 --> 02:52:15.100]   that all combine to the big giant experiment,
[02:52:15.100 --> 02:52:20.020]   I have a, I don't know, I have this vision of America,
[02:52:20.020 --> 02:52:21.340]   which the country, so I was born in Russia,
[02:52:21.340 --> 02:52:24.980]   like I said, here, and this is truly a wonderful country.
[02:52:24.980 --> 02:52:27.500]   I wasn't born on the Fourth of July, but I might as well be.
[02:52:27.500 --> 02:52:28.340]   People still flee.
[02:52:28.340 --> 02:52:31.740]   - I still, and I'm red-blooded American at this point,
[02:52:31.740 --> 02:52:35.420]   and I have a sense that we've figured it out somehow.
[02:52:35.420 --> 02:52:36.860]   If Silicon Valley burns,
[02:52:36.860 --> 02:52:38.820]   another place will come up in its place
[02:52:38.820 --> 02:52:42.020]   that even more innovation, and people will move.
[02:52:42.020 --> 02:52:45.460]   And the remote work might change fundamentally
[02:52:45.460 --> 02:52:47.220]   how we work, or it might not.
[02:52:47.220 --> 02:52:49.540]   It might just give you the freedom to then create
[02:52:49.540 --> 02:52:52.220]   many other small Silicon Valleys throughout the place,
[02:52:52.220 --> 02:52:54.940]   like Austin included, but other places as well.
[02:52:54.940 --> 02:52:57.660]   And we've somehow figured it out.
[02:52:57.660 --> 02:53:01.660]   - I think that's true, that there will be more mobility
[02:53:01.660 --> 02:53:03.420]   and maybe new places that come up.
[02:53:03.420 --> 02:53:07.940]   I don't know if Silicon Valley has passed some sell-by date
[02:53:07.940 --> 02:53:10.580]   because it did hurt.
[02:53:10.580 --> 02:53:12.580]   The coronavirus hurt, the lockdowns hurt,
[02:53:12.580 --> 02:53:15.860]   in the sense that part of what keeps things going is social.
[02:53:15.860 --> 02:53:17.140]   And so a lot of young people,
[02:53:17.140 --> 02:53:19.660]   even before coronavirus, moved to San Francisco.
[02:53:19.660 --> 02:53:20.900]   It was very strange to watch,
[02:53:20.900 --> 02:53:22.860]   'cause in the '80s, we all lived in the valley,
[02:53:22.860 --> 02:53:26.060]   and it was less populated, and San Francisco was grungier.
[02:53:26.060 --> 02:53:28.620]   It was more like Dirty Harry in the '70s.
[02:53:28.620 --> 02:53:31.660]   But by the '90s, and Jamie runs a nightclub there,
[02:53:31.660 --> 02:53:32.500]   and he's talked about this,
[02:53:32.500 --> 02:53:35.180]   you had sort of wealthy tech people moving in,
[02:53:35.180 --> 02:53:37.780]   South of Market, fancy townhouses being built.
[02:53:37.780 --> 02:53:40.060]   And that's continued in such a point
[02:53:40.060 --> 02:53:41.580]   that it's almost like, what's the movie
[02:53:41.580 --> 02:53:43.900]   by the South African director, Nels Jodie Foster,
[02:53:43.900 --> 02:53:46.020]   up in the space colony?
[02:53:46.020 --> 02:53:48.740]   Matt Damon is the guy on the Earth who has to go up.
[02:53:48.740 --> 02:53:50.500]   Anyway, it's about the stratification.
[02:53:50.500 --> 02:53:51.660]   It's about the great inequality.
[02:53:51.660 --> 02:53:54.860]   The people in the space station have amazing medical
[02:53:54.860 --> 02:53:56.420]   auto-docs that can extend their life
[02:53:56.420 --> 02:53:57.900]   or save them, cure cancer.
[02:53:57.900 --> 02:54:01.280]   People on Earth are all suffering, ground down in poverty.
[02:54:01.280 --> 02:54:06.220]   And that sort of happened while I was here.
[02:54:06.220 --> 02:54:10.660]   You saw a lot of money drive prices up
[02:54:10.660 --> 02:54:11.700]   along the narrow peninsula,
[02:54:11.700 --> 02:54:13.180]   and the single people wanted nightlife,
[02:54:13.180 --> 02:54:14.500]   so they were in the city,
[02:54:14.500 --> 02:54:16.700]   and the condos in the city got super expensive.
[02:54:16.700 --> 02:54:18.660]   And I know even Google friends
[02:54:18.660 --> 02:54:20.780]   who are socially responsible say,
[02:54:20.780 --> 02:54:22.780]   we should have more housing built.
[02:54:22.780 --> 02:54:25.860]   We should have, yes, in my backyard, not in my backyard.
[02:54:25.860 --> 02:54:28.420]   But that's not happening, as far as I can tell.
[02:54:28.420 --> 02:54:32.500]   And from the government to the incumbent landowners
[02:54:32.500 --> 02:54:34.460]   and renters, it's just not happening.
[02:54:34.460 --> 02:54:37.460]   And that has to drive people away.
[02:54:37.460 --> 02:54:39.660]   I appreciate that people come here,
[02:54:39.660 --> 02:54:41.900]   and you should wait for the prices to monitor.
[02:54:41.900 --> 02:54:44.780]   They will, but a lot of people are gonna go
[02:54:44.780 --> 02:54:46.500]   where the prices are lower.
[02:54:46.500 --> 02:54:50.340]   - You, and sorry for silly questions here,
[02:54:50.340 --> 02:54:54.420]   but just looking back, you have created things,
[02:54:54.420 --> 02:54:56.540]   have been part of creating things
[02:54:56.540 --> 02:54:58.580]   that have transformed this world,
[02:54:58.580 --> 02:55:00.740]   the world of technology,
[02:55:00.740 --> 02:55:02.700]   perhaps more than almost anything else.
[02:55:02.700 --> 02:55:07.580]   But you're still a human being,
[02:55:07.580 --> 02:55:10.900]   and unfortunately, this ride ends.
[02:55:10.900 --> 02:55:13.780]   Do you ever think about your own mortality?
[02:55:13.780 --> 02:55:14.620]   - Not too much.
[02:55:14.620 --> 02:55:19.220]   I mean, I'm Roman Catholic, so I am not afraid of death.
[02:55:19.220 --> 02:55:24.220]   I think a lot of people who have problems with death
[02:55:24.220 --> 02:55:30.140]   are suffering from some lack of either faith
[02:55:30.140 --> 02:55:31.980]   in their transcending death,
[02:55:31.980 --> 02:55:34.180]   or maybe they don't have children,
[02:55:34.180 --> 02:55:37.260]   or they feel like, they get later in life,
[02:55:37.260 --> 02:55:39.220]   and they feel like they've missed opportunities
[02:55:39.220 --> 02:55:40.900]   to do something that endures.
[02:55:40.900 --> 02:55:43.500]   And I sympathize with a lot, because I'm old.
[02:55:43.500 --> 02:55:46.420]   I got married fairly old, so I understand all that.
[02:55:46.420 --> 02:55:49.340]   Nothing human is alien to me, as Terrence said.
[02:55:49.340 --> 02:55:54.060]   But I don't fear it, no.
[02:55:54.060 --> 02:55:56.260]   - What do you hope your legacy is?
[02:55:56.260 --> 02:55:57.700]   - Yeah, it's gonna be JavaScript.
[02:55:57.700 --> 02:56:01.060]   I think, no, I think my legacy has more to do
[02:56:01.060 --> 02:56:03.500]   with my children and their children.
[02:56:03.500 --> 02:56:06.420]   I think it also has to do with web standards.
[02:56:06.420 --> 02:56:08.300]   It has to do with things like Brave.
[02:56:08.300 --> 02:56:10.720]   The things we did with Firefox, when we did,
[02:56:10.720 --> 02:56:13.060]   you know, I'm not gonna over-celebrate,
[02:56:13.060 --> 02:56:14.100]   but I think Brave is important,
[02:56:14.100 --> 02:56:15.820]   and we'll continue to prove this in a way
[02:56:15.820 --> 02:56:18.100]   that counts for many decades to come.
[02:56:18.100 --> 02:56:21.420]   But even Firefox, whatever its future fortune,
[02:56:21.420 --> 02:56:23.300]   showed you can restart the browser market.
[02:56:23.300 --> 02:56:26.180]   This thing you said about people opting out
[02:56:26.180 --> 02:56:28.580]   and routing around, you don't need everybody to do that.
[02:56:28.580 --> 02:56:31.200]   It's more like Taleb's stubborn minorities that do that.
[02:56:31.200 --> 02:56:33.620]   It's the lead users, Eric Van Hippel's lead users.
[02:56:33.620 --> 02:56:36.260]   You can be a few percent, you can tilt the market.
[02:56:36.260 --> 02:56:39.380]   And that can be done in spite of the incumbents,
[02:56:39.380 --> 02:56:41.020]   the moneyed interests, not being in favor
[02:56:41.020 --> 02:56:41.860]   of what you're doing.
[02:56:41.860 --> 02:56:45.300]   So I think what we did with Firefox won't be forgotten,
[02:56:45.300 --> 02:56:47.180]   and it needs to be done more, and we're doing it with Brave.
[02:56:47.180 --> 02:56:48.780]   And you could argue that other projects are doing it.
[02:56:48.780 --> 02:56:50.780]   In some ways, blockchain is doing it.
[02:56:50.780 --> 02:56:55.780]   The Robinhood take down the use of Robinhood
[02:56:55.780 --> 02:56:59.100]   by the Wall Street Bets kids, similar.
[02:56:59.100 --> 02:57:01.300]   So yeah, that kind of spirit endures,
[02:57:01.300 --> 02:57:04.300]   and I think it, in some ways, it's American, right?
[02:57:04.300 --> 02:57:06.500]   It's not hard revolutionary.
[02:57:06.500 --> 02:57:08.780]   It's not trying to burn the past and destroy everything.
[02:57:08.780 --> 02:57:13.780]   It's more like we have these certain, let's say, rights.
[02:57:15.140 --> 02:57:16.900]   We have duties, too, so there's some debate
[02:57:16.900 --> 02:57:19.380]   about which comes first in American jurisprudence
[02:57:19.380 --> 02:57:20.340]   and the founding documents.
[02:57:20.340 --> 02:57:23.020]   But as long as things are working,
[02:57:23.020 --> 02:57:25.880]   we'll be like pragmatic Americans,
[02:57:25.880 --> 02:57:29.300]   like de Tocqueville described in his writings.
[02:57:29.300 --> 02:57:30.960]   But if things get too out of whack,
[02:57:30.960 --> 02:57:33.380]   for one reason or another, too unequal,
[02:57:33.380 --> 02:57:37.060]   too oligarchic and abusive, we're gonna assert our rights.
[02:57:37.060 --> 02:57:38.860]   And even a few of us can do it.
[02:57:38.860 --> 02:57:40.440]   And even in the American Revolution,
[02:57:40.440 --> 02:57:44.100]   it was the minority who fought and put their lives,
[02:57:44.100 --> 02:57:45.620]   treasure and sacred honor at stake.
[02:57:45.620 --> 02:57:48.860]   It was a bunch of people went to Upper Canada,
[02:57:48.860 --> 02:57:51.140]   I think it was called, Ontario.
[02:57:51.140 --> 02:57:53.540]   - Yeah, that's a beautiful, I mean, that is,
[02:57:53.540 --> 02:57:55.100]   at the core, what your work stands for,
[02:57:55.100 --> 02:58:00.100]   is that a few people can have the power to transform society
[02:58:00.100 --> 02:58:01.580]   with just a few radical ideas,
[02:58:01.580 --> 02:58:04.580]   with just a little bit of code, change the world.
[02:58:04.580 --> 02:58:05.980]   - Gotta do it. - And that's empowering,
[02:58:05.980 --> 02:58:07.200]   and that is the American way.
[02:58:07.200 --> 02:58:09.340]   That's why this country is, I believe,
[02:58:09.340 --> 02:58:10.420]   the greatest country on Earth.
[02:58:10.420 --> 02:58:13.000]   That's not over-rheumatized too much,
[02:58:13.000 --> 02:58:16.940]   but I think some special things have already happened
[02:58:16.940 --> 02:58:18.780]   in this country and will continue to happen.
[02:58:18.780 --> 02:58:19.820]   And that's-- - And that spirit
[02:58:19.820 --> 02:58:22.500]   can continue no matter who comes here.
[02:58:22.500 --> 02:58:25.500]   They can adopt those folk ways and that spirit.
[02:58:25.500 --> 02:58:27.540]   - Brandon, I can't tell you how much,
[02:58:27.540 --> 02:58:29.500]   I was freaking out how much of an honor it is
[02:58:29.500 --> 02:58:30.340]   to talk to you.
[02:58:30.340 --> 02:58:31.380]   You're an incredible human being.
[02:58:31.380 --> 02:58:33.540]   This is one of my favorite conversations ever.
[02:58:33.540 --> 02:58:35.620]   Thank you so much for wasting all this time with me.
[02:58:35.620 --> 02:58:36.580]   I really appreciate it.
[02:58:36.580 --> 02:58:38.020]   - Oh, it seems like a breeze.
[02:58:38.020 --> 02:58:38.860]   My pleasure.
[02:58:38.860 --> 02:58:41.340]   - Thank you for listening to this conversation
[02:58:41.340 --> 02:58:44.400]   with Brandon Eich, and thank you to our sponsors,
[02:58:44.400 --> 02:58:46.000]   Jordan and Harberger Show,
[02:58:46.000 --> 02:58:48.440]   Sun Basket Meal Delivery Service,
[02:58:48.440 --> 02:58:50.200]   BetterHelp Online Therapy,
[02:58:50.200 --> 02:58:52.800]   and 8 Sleep Self-Cooling Mattress.
[02:58:52.800 --> 02:58:54.840]   Click the sponsor links to get a discount
[02:58:54.840 --> 02:58:57.000]   and to support this podcast.
[02:58:57.000 --> 02:59:00.600]   And now, let me leave you with some words from Jeff Atwood.
[02:59:00.600 --> 02:59:03.600]   "Any app that can be written in JavaScript
[02:59:03.600 --> 02:59:06.940]   "will eventually be written in JavaScript."
[02:59:06.940 --> 02:59:09.740]   Thank you for listening, and hope to see you next time.
[02:59:09.740 --> 02:59:12.320]   (upbeat music)
[02:59:12.320 --> 02:59:14.900]   (upbeat music)
[02:59:14.900 --> 02:59:24.900]   [BLANK_AUDIO]

